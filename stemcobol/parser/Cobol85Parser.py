# Generated from Cobol85.g4 by ANTLR 4.7.1
# encoding: utf-8
from __future__ import print_function
from antlr4 import *
from io import StringIO
import sys

def serializedATN():
    with StringIO() as buf:
        buf.write(u"\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3")
        buf.write(u"\u023c\u18b8\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6")
        buf.write(u"\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4")
        buf.write(u"\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t")
        buf.write(u"\22\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27")
        buf.write(u"\4\30\t\30\4\31\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4")
        buf.write(u"\35\t\35\4\36\t\36\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t")
        buf.write(u"#\4$\t$\4%\t%\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4")
        buf.write(u",\t,\4-\t-\4.\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62")
        buf.write(u"\4\63\t\63\4\64\t\64\4\65\t\65\4\66\t\66\4\67\t\67\4")
        buf.write(u"8\t8\49\t9\4:\t:\4;\t;\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@")
        buf.write(u"\4A\tA\4B\tB\4C\tC\4D\tD\4E\tE\4F\tF\4G\tG\4H\tH\4I\t")
        buf.write(u"I\4J\tJ\4K\tK\4L\tL\4M\tM\4N\tN\4O\tO\4P\tP\4Q\tQ\4R")
        buf.write(u"\tR\4S\tS\4T\tT\4U\tU\4V\tV\4W\tW\4X\tX\4Y\tY\4Z\tZ\4")
        buf.write(u"[\t[\4\\\t\\\4]\t]\4^\t^\4_\t_\4`\t`\4a\ta\4b\tb\4c\t")
        buf.write(u"c\4d\td\4e\te\4f\tf\4g\tg\4h\th\4i\ti\4j\tj\4k\tk\4l")
        buf.write(u"\tl\4m\tm\4n\tn\4o\to\4p\tp\4q\tq\4r\tr\4s\ts\4t\tt\4")
        buf.write(u"u\tu\4v\tv\4w\tw\4x\tx\4y\ty\4z\tz\4{\t{\4|\t|\4}\t}")
        buf.write(u"\4~\t~\4\177\t\177\4\u0080\t\u0080\4\u0081\t\u0081\4")
        buf.write(u"\u0082\t\u0082\4\u0083\t\u0083\4\u0084\t\u0084\4\u0085")
        buf.write(u"\t\u0085\4\u0086\t\u0086\4\u0087\t\u0087\4\u0088\t\u0088")
        buf.write(u"\4\u0089\t\u0089\4\u008a\t\u008a\4\u008b\t\u008b\4\u008c")
        buf.write(u"\t\u008c\4\u008d\t\u008d\4\u008e\t\u008e\4\u008f\t\u008f")
        buf.write(u"\4\u0090\t\u0090\4\u0091\t\u0091\4\u0092\t\u0092\4\u0093")
        buf.write(u"\t\u0093\4\u0094\t\u0094\4\u0095\t\u0095\4\u0096\t\u0096")
        buf.write(u"\4\u0097\t\u0097\4\u0098\t\u0098\4\u0099\t\u0099\4\u009a")
        buf.write(u"\t\u009a\4\u009b\t\u009b\4\u009c\t\u009c\4\u009d\t\u009d")
        buf.write(u"\4\u009e\t\u009e\4\u009f\t\u009f\4\u00a0\t\u00a0\4\u00a1")
        buf.write(u"\t\u00a1\4\u00a2\t\u00a2\4\u00a3\t\u00a3\4\u00a4\t\u00a4")
        buf.write(u"\4\u00a5\t\u00a5\4\u00a6\t\u00a6\4\u00a7\t\u00a7\4\u00a8")
        buf.write(u"\t\u00a8\4\u00a9\t\u00a9\4\u00aa\t\u00aa\4\u00ab\t\u00ab")
        buf.write(u"\4\u00ac\t\u00ac\4\u00ad\t\u00ad\4\u00ae\t\u00ae\4\u00af")
        buf.write(u"\t\u00af\4\u00b0\t\u00b0\4\u00b1\t\u00b1\4\u00b2\t\u00b2")
        buf.write(u"\4\u00b3\t\u00b3\4\u00b4\t\u00b4\4\u00b5\t\u00b5\4\u00b6")
        buf.write(u"\t\u00b6\4\u00b7\t\u00b7\4\u00b8\t\u00b8\4\u00b9\t\u00b9")
        buf.write(u"\4\u00ba\t\u00ba\4\u00bb\t\u00bb\4\u00bc\t\u00bc\4\u00bd")
        buf.write(u"\t\u00bd\4\u00be\t\u00be\4\u00bf\t\u00bf\4\u00c0\t\u00c0")
        buf.write(u"\4\u00c1\t\u00c1\4\u00c2\t\u00c2\4\u00c3\t\u00c3\4\u00c4")
        buf.write(u"\t\u00c4\4\u00c5\t\u00c5\4\u00c6\t\u00c6\4\u00c7\t\u00c7")
        buf.write(u"\4\u00c8\t\u00c8\4\u00c9\t\u00c9\4\u00ca\t\u00ca\4\u00cb")
        buf.write(u"\t\u00cb\4\u00cc\t\u00cc\4\u00cd\t\u00cd\4\u00ce\t\u00ce")
        buf.write(u"\4\u00cf\t\u00cf\4\u00d0\t\u00d0\4\u00d1\t\u00d1\4\u00d2")
        buf.write(u"\t\u00d2\4\u00d3\t\u00d3\4\u00d4\t\u00d4\4\u00d5\t\u00d5")
        buf.write(u"\4\u00d6\t\u00d6\4\u00d7\t\u00d7\4\u00d8\t\u00d8\4\u00d9")
        buf.write(u"\t\u00d9\4\u00da\t\u00da\4\u00db\t\u00db\4\u00dc\t\u00dc")
        buf.write(u"\4\u00dd\t\u00dd\4\u00de\t\u00de\4\u00df\t\u00df\4\u00e0")
        buf.write(u"\t\u00e0\4\u00e1\t\u00e1\4\u00e2\t\u00e2\4\u00e3\t\u00e3")
        buf.write(u"\4\u00e4\t\u00e4\4\u00e5\t\u00e5\4\u00e6\t\u00e6\4\u00e7")
        buf.write(u"\t\u00e7\4\u00e8\t\u00e8\4\u00e9\t\u00e9\4\u00ea\t\u00ea")
        buf.write(u"\4\u00eb\t\u00eb\4\u00ec\t\u00ec\4\u00ed\t\u00ed\4\u00ee")
        buf.write(u"\t\u00ee\4\u00ef\t\u00ef\4\u00f0\t\u00f0\4\u00f1\t\u00f1")
        buf.write(u"\4\u00f2\t\u00f2\4\u00f3\t\u00f3\4\u00f4\t\u00f4\4\u00f5")
        buf.write(u"\t\u00f5\4\u00f6\t\u00f6\4\u00f7\t\u00f7\4\u00f8\t\u00f8")
        buf.write(u"\4\u00f9\t\u00f9\4\u00fa\t\u00fa\4\u00fb\t\u00fb\4\u00fc")
        buf.write(u"\t\u00fc\4\u00fd\t\u00fd\4\u00fe\t\u00fe\4\u00ff\t\u00ff")
        buf.write(u"\4\u0100\t\u0100\4\u0101\t\u0101\4\u0102\t\u0102\4\u0103")
        buf.write(u"\t\u0103\4\u0104\t\u0104\4\u0105\t\u0105\4\u0106\t\u0106")
        buf.write(u"\4\u0107\t\u0107\4\u0108\t\u0108\4\u0109\t\u0109\4\u010a")
        buf.write(u"\t\u010a\4\u010b\t\u010b\4\u010c\t\u010c\4\u010d\t\u010d")
        buf.write(u"\4\u010e\t\u010e\4\u010f\t\u010f\4\u0110\t\u0110\4\u0111")
        buf.write(u"\t\u0111\4\u0112\t\u0112\4\u0113\t\u0113\4\u0114\t\u0114")
        buf.write(u"\4\u0115\t\u0115\4\u0116\t\u0116\4\u0117\t\u0117\4\u0118")
        buf.write(u"\t\u0118\4\u0119\t\u0119\4\u011a\t\u011a\4\u011b\t\u011b")
        buf.write(u"\4\u011c\t\u011c\4\u011d\t\u011d\4\u011e\t\u011e\4\u011f")
        buf.write(u"\t\u011f\4\u0120\t\u0120\4\u0121\t\u0121\4\u0122\t\u0122")
        buf.write(u"\4\u0123\t\u0123\4\u0124\t\u0124\4\u0125\t\u0125\4\u0126")
        buf.write(u"\t\u0126\4\u0127\t\u0127\4\u0128\t\u0128\4\u0129\t\u0129")
        buf.write(u"\4\u012a\t\u012a\4\u012b\t\u012b\4\u012c\t\u012c\4\u012d")
        buf.write(u"\t\u012d\4\u012e\t\u012e\4\u012f\t\u012f\4\u0130\t\u0130")
        buf.write(u"\4\u0131\t\u0131\4\u0132\t\u0132\4\u0133\t\u0133\4\u0134")
        buf.write(u"\t\u0134\4\u0135\t\u0135\4\u0136\t\u0136\4\u0137\t\u0137")
        buf.write(u"\4\u0138\t\u0138\4\u0139\t\u0139\4\u013a\t\u013a\4\u013b")
        buf.write(u"\t\u013b\4\u013c\t\u013c\4\u013d\t\u013d\4\u013e\t\u013e")
        buf.write(u"\4\u013f\t\u013f\4\u0140\t\u0140\4\u0141\t\u0141\4\u0142")
        buf.write(u"\t\u0142\4\u0143\t\u0143\4\u0144\t\u0144\4\u0145\t\u0145")
        buf.write(u"\4\u0146\t\u0146\4\u0147\t\u0147\4\u0148\t\u0148\4\u0149")
        buf.write(u"\t\u0149\4\u014a\t\u014a\4\u014b\t\u014b\4\u014c\t\u014c")
        buf.write(u"\4\u014d\t\u014d\4\u014e\t\u014e\4\u014f\t\u014f\4\u0150")
        buf.write(u"\t\u0150\4\u0151\t\u0151\4\u0152\t\u0152\4\u0153\t\u0153")
        buf.write(u"\4\u0154\t\u0154\4\u0155\t\u0155\4\u0156\t\u0156\4\u0157")
        buf.write(u"\t\u0157\4\u0158\t\u0158\4\u0159\t\u0159\4\u015a\t\u015a")
        buf.write(u"\4\u015b\t\u015b\4\u015c\t\u015c\4\u015d\t\u015d\4\u015e")
        buf.write(u"\t\u015e\4\u015f\t\u015f\4\u0160\t\u0160\4\u0161\t\u0161")
        buf.write(u"\4\u0162\t\u0162\4\u0163\t\u0163\4\u0164\t\u0164\4\u0165")
        buf.write(u"\t\u0165\4\u0166\t\u0166\4\u0167\t\u0167\4\u0168\t\u0168")
        buf.write(u"\4\u0169\t\u0169\4\u016a\t\u016a\4\u016b\t\u016b\4\u016c")
        buf.write(u"\t\u016c\4\u016d\t\u016d\4\u016e\t\u016e\4\u016f\t\u016f")
        buf.write(u"\4\u0170\t\u0170\4\u0171\t\u0171\4\u0172\t\u0172\4\u0173")
        buf.write(u"\t\u0173\4\u0174\t\u0174\4\u0175\t\u0175\4\u0176\t\u0176")
        buf.write(u"\4\u0177\t\u0177\4\u0178\t\u0178\4\u0179\t\u0179\4\u017a")
        buf.write(u"\t\u017a\4\u017b\t\u017b\4\u017c\t\u017c\4\u017d\t\u017d")
        buf.write(u"\4\u017e\t\u017e\4\u017f\t\u017f\4\u0180\t\u0180\4\u0181")
        buf.write(u"\t\u0181\4\u0182\t\u0182\4\u0183\t\u0183\4\u0184\t\u0184")
        buf.write(u"\4\u0185\t\u0185\4\u0186\t\u0186\4\u0187\t\u0187\4\u0188")
        buf.write(u"\t\u0188\4\u0189\t\u0189\4\u018a\t\u018a\4\u018b\t\u018b")
        buf.write(u"\4\u018c\t\u018c\4\u018d\t\u018d\4\u018e\t\u018e\4\u018f")
        buf.write(u"\t\u018f\4\u0190\t\u0190\4\u0191\t\u0191\4\u0192\t\u0192")
        buf.write(u"\4\u0193\t\u0193\4\u0194\t\u0194\4\u0195\t\u0195\4\u0196")
        buf.write(u"\t\u0196\4\u0197\t\u0197\4\u0198\t\u0198\4\u0199\t\u0199")
        buf.write(u"\4\u019a\t\u019a\4\u019b\t\u019b\4\u019c\t\u019c\4\u019d")
        buf.write(u"\t\u019d\4\u019e\t\u019e\4\u019f\t\u019f\4\u01a0\t\u01a0")
        buf.write(u"\4\u01a1\t\u01a1\4\u01a2\t\u01a2\4\u01a3\t\u01a3\4\u01a4")
        buf.write(u"\t\u01a4\4\u01a5\t\u01a5\4\u01a6\t\u01a6\4\u01a7\t\u01a7")
        buf.write(u"\4\u01a8\t\u01a8\4\u01a9\t\u01a9\4\u01aa\t\u01aa\4\u01ab")
        buf.write(u"\t\u01ab\4\u01ac\t\u01ac\4\u01ad\t\u01ad\4\u01ae\t\u01ae")
        buf.write(u"\4\u01af\t\u01af\4\u01b0\t\u01b0\4\u01b1\t\u01b1\4\u01b2")
        buf.write(u"\t\u01b2\4\u01b3\t\u01b3\4\u01b4\t\u01b4\4\u01b5\t\u01b5")
        buf.write(u"\4\u01b6\t\u01b6\4\u01b7\t\u01b7\4\u01b8\t\u01b8\4\u01b9")
        buf.write(u"\t\u01b9\4\u01ba\t\u01ba\4\u01bb\t\u01bb\4\u01bc\t\u01bc")
        buf.write(u"\4\u01bd\t\u01bd\4\u01be\t\u01be\4\u01bf\t\u01bf\4\u01c0")
        buf.write(u"\t\u01c0\4\u01c1\t\u01c1\4\u01c2\t\u01c2\4\u01c3\t\u01c3")
        buf.write(u"\4\u01c4\t\u01c4\4\u01c5\t\u01c5\4\u01c6\t\u01c6\4\u01c7")
        buf.write(u"\t\u01c7\4\u01c8\t\u01c8\4\u01c9\t\u01c9\4\u01ca\t\u01ca")
        buf.write(u"\4\u01cb\t\u01cb\4\u01cc\t\u01cc\4\u01cd\t\u01cd\4\u01ce")
        buf.write(u"\t\u01ce\4\u01cf\t\u01cf\4\u01d0\t\u01d0\4\u01d1\t\u01d1")
        buf.write(u"\4\u01d2\t\u01d2\4\u01d3\t\u01d3\4\u01d4\t\u01d4\4\u01d5")
        buf.write(u"\t\u01d5\4\u01d6\t\u01d6\4\u01d7\t\u01d7\4\u01d8\t\u01d8")
        buf.write(u"\4\u01d9\t\u01d9\4\u01da\t\u01da\4\u01db\t\u01db\4\u01dc")
        buf.write(u"\t\u01dc\4\u01dd\t\u01dd\4\u01de\t\u01de\4\u01df\t\u01df")
        buf.write(u"\4\u01e0\t\u01e0\4\u01e1\t\u01e1\4\u01e2\t\u01e2\4\u01e3")
        buf.write(u"\t\u01e3\4\u01e4\t\u01e4\4\u01e5\t\u01e5\4\u01e6\t\u01e6")
        buf.write(u"\4\u01e7\t\u01e7\4\u01e8\t\u01e8\4\u01e9\t\u01e9\4\u01ea")
        buf.write(u"\t\u01ea\4\u01eb\t\u01eb\4\u01ec\t\u01ec\4\u01ed\t\u01ed")
        buf.write(u"\4\u01ee\t\u01ee\4\u01ef\t\u01ef\4\u01f0\t\u01f0\4\u01f1")
        buf.write(u"\t\u01f1\4\u01f2\t\u01f2\4\u01f3\t\u01f3\4\u01f4\t\u01f4")
        buf.write(u"\4\u01f5\t\u01f5\4\u01f6\t\u01f6\4\u01f7\t\u01f7\4\u01f8")
        buf.write(u"\t\u01f8\4\u01f9\t\u01f9\4\u01fa\t\u01fa\4\u01fb\t\u01fb")
        buf.write(u"\4\u01fc\t\u01fc\4\u01fd\t\u01fd\4\u01fe\t\u01fe\4\u01ff")
        buf.write(u"\t\u01ff\4\u0200\t\u0200\4\u0201\t\u0201\4\u0202\t\u0202")
        buf.write(u"\4\u0203\t\u0203\4\u0204\t\u0204\4\u0205\t\u0205\4\u0206")
        buf.write(u"\t\u0206\4\u0207\t\u0207\4\u0208\t\u0208\4\u0209\t\u0209")
        buf.write(u"\4\u020a\t\u020a\4\u020b\t\u020b\4\u020c\t\u020c\4\u020d")
        buf.write(u"\t\u020d\4\u020e\t\u020e\4\u020f\t\u020f\4\u0210\t\u0210")
        buf.write(u"\4\u0211\t\u0211\4\u0212\t\u0212\4\u0213\t\u0213\4\u0214")
        buf.write(u"\t\u0214\4\u0215\t\u0215\4\u0216\t\u0216\4\u0217\t\u0217")
        buf.write(u"\4\u0218\t\u0218\4\u0219\t\u0219\4\u021a\t\u021a\4\u021b")
        buf.write(u"\t\u021b\4\u021c\t\u021c\4\u021d\t\u021d\4\u021e\t\u021e")
        buf.write(u"\4\u021f\t\u021f\4\u0220\t\u0220\4\u0221\t\u0221\4\u0222")
        buf.write(u"\t\u0222\4\u0223\t\u0223\4\u0224\t\u0224\4\u0225\t\u0225")
        buf.write(u"\4\u0226\t\u0226\4\u0227\t\u0227\4\u0228\t\u0228\4\u0229")
        buf.write(u"\t\u0229\4\u022a\t\u022a\4\u022b\t\u022b\4\u022c\t\u022c")
        buf.write(u"\4\u022d\t\u022d\4\u022e\t\u022e\4\u022f\t\u022f\4\u0230")
        buf.write(u"\t\u0230\4\u0231\t\u0231\4\u0232\t\u0232\4\u0233\t\u0233")
        buf.write(u"\4\u0234\t\u0234\4\u0235\t\u0235\4\u0236\t\u0236\4\u0237")
        buf.write(u"\t\u0237\4\u0238\t\u0238\4\u0239\t\u0239\4\u023a\t\u023a")
        buf.write(u"\4\u023b\t\u023b\4\u023c\t\u023c\4\u023d\t\u023d\4\u023e")
        buf.write(u"\t\u023e\4\u023f\t\u023f\4\u0240\t\u0240\4\u0241\t\u0241")
        buf.write(u"\4\u0242\t\u0242\4\u0243\t\u0243\4\u0244\t\u0244\4\u0245")
        buf.write(u"\t\u0245\4\u0246\t\u0246\4\u0247\t\u0247\4\u0248\t\u0248")
        buf.write(u"\4\u0249\t\u0249\4\u024a\t\u024a\4\u024b\t\u024b\4\u024c")
        buf.write(u"\t\u024c\4\u024d\t\u024d\4\u024e\t\u024e\4\u024f\t\u024f")
        buf.write(u"\4\u0250\t\u0250\4\u0251\t\u0251\4\u0252\t\u0252\4\u0253")
        buf.write(u"\t\u0253\4\u0254\t\u0254\4\u0255\t\u0255\3\2\3\2\3\2")
        buf.write(u"\3\3\6\3\u04af\n\3\r\3\16\3\u04b0\3\4\3\4\5\4\u04b5\n")
        buf.write(u"\4\3\4\5\4\u04b8\n\4\3\4\5\4\u04bb\n\4\3\4\7\4\u04be")
        buf.write(u"\n\4\f\4\16\4\u04c1\13\4\3\4\5\4\u04c4\n\4\3\5\3\5\3")
        buf.write(u"\5\3\5\3\5\3\6\3\6\3\6\3\6\3\6\7\6\u04d0\n\6\f\6\16\6")
        buf.write(u"\u04d3\13\6\3\7\3\7\3\7\3\7\3\7\3\7\5\7\u04db\n\7\3\b")
        buf.write(u"\3\b\3\b\3\b\5\b\u04e1\n\b\3\b\3\b\5\b\u04e5\n\b\5\b")
        buf.write(u"\u04e7\n\b\3\b\5\b\u04ea\n\b\3\b\5\b\u04ed\n\b\3\t\3")
        buf.write(u"\t\3\t\5\t\u04f2\n\t\3\n\3\n\3\n\5\n\u04f7\n\n\3\13\3")
        buf.write(u"\13\3\13\5\13\u04fc\n\13\3\f\3\f\3\f\5\f\u0501\n\f\3")
        buf.write(u"\r\3\r\3\r\5\r\u0506\n\r\3\16\3\16\3\16\5\16\u050b\n")
        buf.write(u"\16\3\16\5\16\u050e\n\16\3\16\5\16\u0511\n\16\3\17\3")
        buf.write(u"\17\3\17\3\17\7\17\u0517\n\17\f\17\16\17\u051a\13\17")
        buf.write(u"\3\20\3\20\3\20\5\20\u051f\n\20\3\21\3\21\3\21\3\21\7")
        buf.write(u"\21\u0525\n\21\f\21\16\21\u0528\13\21\3\22\3\22\3\22")
        buf.write(u"\5\22\u052d\n\22\3\23\3\23\3\23\3\23\5\23\u0533\n\23")
        buf.write(u"\3\23\3\23\5\23\u0537\n\23\3\23\3\23\5\23\u053b\n\23")
        buf.write(u"\3\24\3\24\3\24\3\24\7\24\u0541\n\24\f\24\16\24\u0544")
        buf.write(u"\13\24\3\24\3\24\5\24\u0548\n\24\3\25\3\25\3\25\3\25")
        buf.write(u"\3\25\5\25\u054f\n\25\3\26\3\26\5\26\u0553\n\26\3\26")
        buf.write(u"\3\26\5\26\u0557\n\26\3\26\5\26\u055a\n\26\3\27\3\27")
        buf.write(u"\5\27\u055e\n\27\3\27\5\27\u0561\n\27\3\27\3\27\5\27")
        buf.write(u"\u0565\n\27\3\27\5\27\u0568\n\27\3\30\5\30\u056b\n\30")
        buf.write(u"\3\30\5\30\u056e\n\30\3\30\3\30\5\30\u0572\n\30\3\30")
        buf.write(u"\6\30\u0575\n\30\r\30\16\30\u0576\3\30\5\30\u057a\n\30")
        buf.write(u"\3\30\5\30\u057d\n\30\3\31\5\31\u0580\n\31\3\31\3\31")
        buf.write(u"\5\31\u0584\n\31\3\31\3\31\3\32\5\32\u0589\n\32\3\32")
        buf.write(u"\3\32\5\32\u058d\n\32\3\32\3\32\3\33\3\33\5\33\u0593")
        buf.write(u"\n\33\3\33\3\33\3\34\3\34\3\34\3\34\3\35\3\35\3\35\6")
        buf.write(u"\35\u059e\n\35\r\35\16\35\u059f\3\35\3\35\5\35\u05a4")
        buf.write(u"\n\35\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3")
        buf.write(u"\36\3\36\5\36\u05b1\n\36\3\37\3\37\5\37\u05b5\n\37\3")
        buf.write(u" \3 \3 \3 \5 \u05bb\n \3 \5 \u05be\n \3 \3 \3 \3 \3 ")
        buf.write(u"\3 \3 \6 \u05c7\n \r \16 \u05c8\5 \u05cb\n \3!\3!\3!")
        buf.write(u"\6!\u05d0\n!\r!\16!\u05d1\5!\u05d4\n!\3\"\3\"\3\"\3#")
        buf.write(u"\3#\6#\u05db\n#\r#\16#\u05dc\3$\3$\3$\5$\u05e2\n$\3$")
        buf.write(u"\3$\5$\u05e6\n$\3$\3$\3$\5$\u05eb\n$\3%\3%\3%\5%\u05f0")
        buf.write(u"\n%\3%\3%\3&\3&\3&\5&\u05f7\n&\3&\5&\u05fa\n&\3&\5&\u05fd")
        buf.write(u"\n&\3&\6&\u0600\n&\r&\16&\u0601\3\'\3\'\3\'\5\'\u0607")
        buf.write(u"\n\'\3(\3(\5(\u060b\n(\3)\3)\5)\u060f\n)\3*\3*\5*\u0613")
        buf.write(u"\n*\3*\5*\u0616\n*\3*\3*\5*\u061a\n*\3*\3*\3*\5*\u061f")
        buf.write(u"\n*\3+\3+\5+\u0623\n+\3+\3+\3,\3,\5,\u0629\n,\3,\3,\5")
        buf.write(u",\u062d\n,\5,\u062f\n,\3,\5,\u0632\n,\3,\3,\5,\u0636")
        buf.write(u"\n,\3-\3-\3-\5-\u063b\n-\5-\u063d\n-\3-\3-\3-\5-\u0642")
        buf.write(u"\n-\5-\u0644\n-\3.\3.\5.\u0648\n.\3.\3.\5.\u064c\n.\3")
        buf.write(u".\5.\u064f\n.\3/\3/\5/\u0653\n/\3/\5/\u0656\n/\3/\3/")
        buf.write(u"\3/\5/\u065b\n/\3/\5/\u065e\n/\3/\5/\u0661\n/\3/\3/\5")
        buf.write(u"/\u0665\n/\3/\5/\u0668\n/\3/\3/\3/\5/\u066d\n/\3/\5/")
        buf.write(u"\u0670\n/\3/\5/\u0673\n/\5/\u0675\n/\3\60\3\60\5\60\u0679")
        buf.write(u"\n\60\3\60\3\60\3\61\3\61\5\61\u067f\n\61\3\61\5\61\u0682")
        buf.write(u"\n\61\3\61\5\61\u0685\n\61\3\61\3\61\5\61\u0689\n\61")
        buf.write(u"\3\62\3\62\5\62\u068d\n\62\3\62\5\62\u0690\n\62\3\62")
        buf.write(u"\5\62\u0693\n\62\3\62\6\62\u0696\n\62\r\62\16\62\u0697")
        buf.write(u"\3\62\3\62\5\62\u069c\n\62\3\63\6\63\u069f\n\63\r\63")
        buf.write(u"\16\63\u06a0\3\63\5\63\u06a4\n\63\3\63\6\63\u06a7\n\63")
        buf.write(u"\r\63\16\63\u06a8\3\64\3\64\3\64\3\64\7\64\u06af\n\64")
        buf.write(u"\f\64\16\64\u06b2\13\64\3\65\3\65\5\65\u06b6\n\65\3\66")
        buf.write(u"\5\66\u06b9\n\66\3\66\5\66\u06bc\n\66\3\66\7\66\u06bf")
        buf.write(u"\n\66\f\66\16\66\u06c2\13\66\3\66\3\66\3\67\3\67\7\67")
        buf.write(u"\u06c8\n\67\f\67\16\67\u06cb\13\67\38\38\58\u06cf\n8")
        buf.write(u"\38\38\39\39\39\39\39\39\39\39\39\39\39\59\u06de\n9\3")
        buf.write(u":\3:\5:\u06e2\n:\3:\3:\3:\3:\3:\3:\3:\3:\3:\3:\5:\u06ee")
        buf.write(u"\n:\3:\3:\5:\u06f2\n:\3;\3;\3;\5;\u06f7\n;\3;\5;\u06fa")
        buf.write(u"\n;\3;\5;\u06fd\n;\3<\3<\5<\u0701\n<\5<\u0703\n<\3<\3")
        buf.write(u"<\3<\3<\3<\5<\u070a\n<\3<\3<\3=\3=\5=\u0710\n=\3=\5=")
        buf.write(u"\u0713\n=\3=\3=\5=\u0717\n=\3>\3>\3>\5>\u071c\n>\3>\3")
        buf.write(u">\3>\5>\u0721\n>\3?\3?\5?\u0725\n?\3?\5?\u0728\n?\3?")
        buf.write(u"\3?\3@\3@\5@\u072e\n@\3@\5@\u0731\n@\3@\3@\5@\u0735\n")
        buf.write(u"@\3@\5@\u0738\n@\3@\5@\u073b\n@\3A\3A\3A\5A\u0740\nA")
        buf.write(u"\3A\5A\u0743\nA\3A\3A\5A\u0747\nA\3A\5A\u074a\nA\3A\5")
        buf.write(u"A\u074d\nA\3B\3B\5B\u0751\nB\3B\3B\3C\5C\u0756\nC\3C")
        buf.write(u"\3C\5C\u075a\nC\3C\3C\5C\u075e\nC\3D\3D\5D\u0762\nD\3")
        buf.write(u"D\5D\u0765\nD\3D\3D\3E\3E\3E\3E\3E\5E\u076e\nE\3E\7E")
        buf.write(u"\u0771\nE\fE\16E\u0774\13E\3E\5E\u0777\nE\3F\3F\3F\3")
        buf.write(u"F\5F\u077d\nF\3G\3G\3G\3G\5G\u0783\nG\5G\u0785\nG\3G")
        buf.write(u"\3G\3G\3G\5G\u078b\nG\3H\3H\3H\3I\5I\u0791\nI\3I\5I\u0794")
        buf.write(u"\nI\3I\3I\3I\3I\3J\3J\5J\u079c\nJ\3K\3K\5K\u07a0\nK\3")
        buf.write(u"K\5K\u07a3\nK\3K\5K\u07a6\nK\3K\6K\u07a9\nK\rK\16K\u07aa")
        buf.write(u"\3L\3L\3L\5L\u07b0\nL\3L\5L\u07b3\nL\3L\6L\u07b6\nL\r")
        buf.write(u"L\16L\u07b7\3M\3M\3M\5M\u07bd\nM\3N\3N\3N\5N\u07c2\n")
        buf.write(u"N\3N\3N\3O\3O\3O\3O\7O\u07ca\nO\fO\16O\u07cd\13O\3P\3")
        buf.write(u"P\3P\3P\3P\3P\3P\3P\3P\5P\u07d8\nP\3Q\3Q\3Q\3Q\7Q\u07de")
        buf.write(u"\nQ\fQ\16Q\u07e1\13Q\3R\3R\3R\5R\u07e6\nR\3R\7R\u07e9")
        buf.write(u"\nR\fR\16R\u07ec\13R\3R\3R\7R\u07f0\nR\fR\16R\u07f3\13")
        buf.write(u"R\3S\3S\3S\3S\3S\3S\3S\3S\3S\3S\3S\5S\u0800\nS\3T\5T")
        buf.write(u"\u0803\nT\3T\3T\3U\5U\u0808\nU\3U\3U\3V\3V\5V\u080e\n")
        buf.write(u"V\3V\3V\5V\u0812\nV\3V\5V\u0815\nV\3W\3W\3W\3X\3X\3X")
        buf.write(u"\3X\5X\u081e\nX\3Y\5Y\u0821\nY\3Y\3Y\5Y\u0825\nY\3Z\5")
        buf.write(u"Z\u0828\nZ\3Z\3Z\5Z\u082c\nZ\3Z\5Z\u082f\nZ\3Z\5Z\u0832")
        buf.write(u"\nZ\3Z\3Z\5Z\u0836\nZ\3Z\5Z\u0839\nZ\5Z\u083b\nZ\3Z\3")
        buf.write(u"Z\5Z\u083f\nZ\3Z\5Z\u0842\nZ\3[\5[\u0845\n[\3[\3[\3[")
        buf.write(u"\5[\u084a\n[\3\\\3\\\3\\\3]\3]\3]\5]\u0852\n]\3]\3]\5")
        buf.write(u"]\u0856\n]\5]\u0858\n]\3]\3]\3]\6]\u085d\n]\r]\16]\u085e")
        buf.write(u"\5]\u0861\n]\3^\3^\3^\6^\u0866\n^\r^\16^\u0867\3_\3_")
        buf.write(u"\5_\u086c\n_\3_\3_\5_\u0870\n_\3`\3`\3`\5`\u0875\n`\3")
        buf.write(u"`\3`\5`\u0879\n`\5`\u087b\n`\3`\6`\u087e\n`\r`\16`\u087f")
        buf.write(u"\3a\3a\5a\u0884\na\3a\3a\5a\u0888\na\3a\5a\u088b\na\3")
        buf.write(u"a\7a\u088e\na\fa\16a\u0891\13a\3b\3b\3b\5b\u0896\nb\3")
        buf.write(u"c\5c\u0899\nc\3c\3c\5c\u089d\nc\3c\3c\5c\u08a1\nc\3d")
        buf.write(u"\5d\u08a4\nd\3d\5d\u08a7\nd\3d\3d\3d\5d\u08ac\nd\3e\5")
        buf.write(u"e\u08af\ne\3e\5e\u08b2\ne\3e\3e\3e\5e\u08b7\ne\3f\3f")
        buf.write(u"\5f\u08bb\nf\3f\5f\u08be\nf\3f\3f\3g\3g\3h\3h\5h\u08c6")
        buf.write(u"\nh\3h\3h\3i\3i\5i\u08cc\ni\3i\3i\5i\u08d0\ni\5i\u08d2")
        buf.write(u"\ni\3i\6i\u08d5\ni\ri\16i\u08d6\3j\3j\3j\3j\7j\u08dd")
        buf.write(u"\nj\fj\16j\u08e0\13j\3k\3k\3k\3k\3k\3l\3l\3l\3l\7l\u08eb")
        buf.write(u"\nl\fl\16l\u08ee\13l\3m\3m\3m\3m\7m\u08f4\nm\fm\16m\u08f7")
        buf.write(u"\13m\3n\3n\3n\3n\3n\7n\u08fe\nn\fn\16n\u0901\13n\3o\3")
        buf.write(u"o\3o\5o\u0906\no\3p\3p\3p\5p\u090b\np\3p\5p\u090e\np")
        buf.write(u"\3p\3p\3p\3p\3p\3p\3p\3p\3p\3p\5p\u091a\np\3p\7p\u091d")
        buf.write(u"\np\fp\16p\u0920\13p\3p\3p\3q\3q\3q\5q\u0927\nq\3q\3")
        buf.write(u"q\3q\3q\3q\3q\3q\7q\u0930\nq\fq\16q\u0933\13q\3q\3q\3")
        buf.write(u"r\3r\3r\5r\u093a\nr\3r\3r\3r\3r\3r\3r\3r\3r\5r\u0944")
        buf.write(u"\nr\3r\7r\u0947\nr\fr\16r\u094a\13r\3r\3r\3s\3s\3s\5")
        buf.write(u"s\u0951\ns\3s\3s\3t\3t\3t\3t\3t\3t\3t\3t\6t\u095d\nt")
        buf.write(u"\rt\16t\u095e\5t\u0961\nt\3u\3u\3u\5u\u0966\nu\3u\3u")
        buf.write(u"\3v\3v\3v\5v\u096d\nv\3v\3v\3w\5w\u0972\nw\3w\3w\5w\u0976")
        buf.write(u"\nw\3w\3w\3x\3x\3x\5x\u097d\nx\3x\3x\3y\3y\3y\5y\u0984")
        buf.write(u"\ny\3y\3y\3z\3z\3z\5z\u098b\nz\3z\3z\3{\5{\u0990\n{\3")
        buf.write(u"{\3{\5{\u0994\n{\3{\3{\3|\5|\u0999\n|\3|\3|\5|\u099d")
        buf.write(u"\n|\3|\3|\3}\5}\u09a2\n}\3}\3}\5}\u09a6\n}\3}\3}\3~\5")
        buf.write(u"~\u09ab\n~\3~\3~\5~\u09af\n~\3~\3~\3\177\5\177\u09b4")
        buf.write(u"\n\177\3\177\3\177\5\177\u09b8\n\177\3\177\3\177\3\u0080")
        buf.write(u"\3\u0080\3\u0080\5\u0080\u09bf\n\u0080\3\u0080\3\u0080")
        buf.write(u"\3\u0081\3\u0081\3\u0081\3\u0081\3\u0081\3\u0081\3\u0081")
        buf.write(u"\5\u0081\u09ca\n\u0081\3\u0081\7\u0081\u09cd\n\u0081")
        buf.write(u"\f\u0081\16\u0081\u09d0\13\u0081\3\u0082\3\u0082\3\u0082")
        buf.write(u"\3\u0082\7\u0082\u09d6\n\u0082\f\u0082\16\u0082\u09d9")
        buf.write(u"\13\u0082\3\u0083\3\u0083\3\u0083\5\u0083\u09de\n\u0083")
        buf.write(u"\3\u0083\3\u0083\3\u0083\3\u0083\3\u0083\3\u0083\3\u0083")
        buf.write(u"\3\u0083\3\u0083\3\u0083\3\u0083\3\u0083\3\u0083\3\u0083")
        buf.write(u"\3\u0083\3\u0083\3\u0083\3\u0083\5\u0083\u09f2\n\u0083")
        buf.write(u"\3\u0083\3\u0083\3\u0083\3\u0083\3\u0083\3\u0083\3\u0083")
        buf.write(u"\3\u0083\3\u0083\3\u0083\7\u0083\u09fe\n\u0083\f\u0083")
        buf.write(u"\16\u0083\u0a01\13\u0083\3\u0083\3\u0083\3\u0084\3\u0084")
        buf.write(u"\3\u0084\3\u0085\3\u0085\3\u0086\3\u0086\3\u0087\3\u0087")
        buf.write(u"\3\u0087\3\u0088\3\u0088\3\u0089\3\u0089\3\u008a\3\u008a")
        buf.write(u"\3\u008b\3\u008b\3\u008c\3\u008c\5\u008c\u0a19\n\u008c")
        buf.write(u"\3\u008c\3\u008c\5\u008c\u0a1d\n\u008c\3\u008d\3\u008d")
        buf.write(u"\5\u008d\u0a21\n\u008d\3\u008d\5\u008d\u0a24\n\u008d")
        buf.write(u"\3\u008d\5\u008d\u0a27\n\u008d\3\u008d\3\u008d\5\u008d")
        buf.write(u"\u0a2b\n\u008d\3\u008e\3\u008e\5\u008e\u0a2f\n\u008e")
        buf.write(u"\3\u008e\5\u008e\u0a32\n\u008e\3\u008e\5\u008e\u0a35")
        buf.write(u"\n\u008e\3\u008e\3\u008e\5\u008e\u0a39\n\u008e\3\u008f")
        buf.write(u"\3\u008f\5\u008f\u0a3d\n\u008f\3\u008f\3\u008f\5\u008f")
        buf.write(u"\u0a41\n\u008f\3\u0090\3\u0090\5\u0090\u0a45\n\u0090")
        buf.write(u"\3\u0090\3\u0090\5\u0090\u0a49\n\u0090\3\u0091\3\u0091")
        buf.write(u"\5\u0091\u0a4d\n\u0091\3\u0091\3\u0091\3\u0092\3\u0092")
        buf.write(u"\5\u0092\u0a53\n\u0092\3\u0092\3\u0092\3\u0093\3\u0093")
        buf.write(u"\5\u0093\u0a59\n\u0093\3\u0093\3\u0093\3\u0094\3\u0094")
        buf.write(u"\3\u0094\5\u0094\u0a60\n\u0094\3\u0094\5\u0094\u0a63")
        buf.write(u"\n\u0094\3\u0095\3\u0095\3\u0095\3\u0096\3\u0096\3\u0096")
        buf.write(u"\3\u0097\3\u0097\5\u0097\u0a6d\n\u0097\3\u0097\3\u0097")
        buf.write(u"\3\u0098\3\u0098\5\u0098\u0a73\n\u0098\3\u0098\3\u0098")
        buf.write(u"\3\u0099\3\u0099\5\u0099\u0a79\n\u0099\3\u009a\3\u009a")
        buf.write(u"\5\u009a\u0a7d\n\u009a\5\u009a\u0a7f\n\u009a\3\u009a")
        buf.write(u"\3\u009a\3\u009a\5\u009a\u0a84\n\u009a\5\u009a\u0a86")
        buf.write(u"\n\u009a\3\u009b\3\u009b\3\u009c\3\u009c\3\u009d\3\u009d")
        buf.write(u"\3\u009e\3\u009e\5\u009e\u0a90\n\u009e\3\u009e\5\u009e")
        buf.write(u"\u0a93\n\u009e\3\u009e\3\u009e\5\u009e\u0a97\n\u009e")
        buf.write(u"\3\u009e\5\u009e\u0a9a\n\u009e\3\u009f\3\u009f\3\u009f")
        buf.write(u"\5\u009f\u0a9f\n\u009f\3\u00a0\3\u00a0\3\u00a1\3\u00a1")
        buf.write(u"\3\u00a2\3\u00a2\3\u00a2\3\u00a2\7\u00a2\u0aa9\n\u00a2")
        buf.write(u"\f\u00a2\16\u00a2\u0aac\13\u00a2\3\u00a3\3\u00a3\6\u00a3")
        buf.write(u"\u0ab0\n\u00a3\r\u00a3\16\u00a3\u0ab1\3\u00a4\3\u00a4")
        buf.write(u"\3\u00a4\5\u00a4\u0ab7\n\u00a4\3\u00a4\3\u00a4\5\u00a4")
        buf.write(u"\u0abb\n\u00a4\3\u00a4\5\u00a4\u0abe\n\u00a4\3\u00a4")
        buf.write(u"\5\u00a4\u0ac1\n\u00a4\3\u00a4\5\u00a4\u0ac4\n\u00a4")
        buf.write(u"\5\u00a4\u0ac6\n\u00a4\3\u00a4\3\u00a4\3\u00a5\5\u00a5")
        buf.write(u"\u0acb\n\u00a5\3\u00a5\3\u00a5\3\u00a6\3\u00a6\3\u00a6")
        buf.write(u"\5\u00a6\u0ad2\n\u00a6\3\u00a6\3\u00a6\5\u00a6\u0ad6")
        buf.write(u"\n\u00a6\5\u00a6\u0ad8\n\u00a6\3\u00a6\3\u00a6\5\u00a6")
        buf.write(u"\u0adc\n\u00a6\3\u00a7\3\u00a7\3\u00a7\3\u00a8\3\u00a8")
        buf.write(u"\3\u00a8\3\u00a8\3\u00a9\3\u00a9\3\u00a9\3\u00a9\3\u00aa")
        buf.write(u"\3\u00aa\3\u00aa\3\u00ab\3\u00ab\3\u00ab\5\u00ab\u0aef")
        buf.write(u"\n\u00ab\3\u00ac\3\u00ac\3\u00ac\5\u00ac\u0af4\n\u00ac")
        buf.write(u"\3\u00ac\5\u00ac\u0af7\n\u00ac\3\u00ac\3\u00ac\5\u00ac")
        buf.write(u"\u0afb\n\u00ac\3\u00ac\3\u00ac\3\u00ad\3\u00ad\5\u00ad")
        buf.write(u"\u0b01\n\u00ad\3\u00ad\5\u00ad\u0b04\n\u00ad\3\u00ad")
        buf.write(u"\3\u00ad\3\u00ad\3\u00ae\3\u00ae\5\u00ae\u0b0b\n\u00ae")
        buf.write(u"\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae")
        buf.write(u"\3\u00ae\3\u00ae\3\u00ae\3\u00ae\5\u00ae\u0b18\n\u00ae")
        buf.write(u"\3\u00ae\7\u00ae\u0b1b\n\u00ae\f\u00ae\16\u00ae\u0b1e")
        buf.write(u"\13\u00ae\3\u00ae\3\u00ae\3\u00af\3\u00af\5\u00af\u0b24")
        buf.write(u"\n\u00af\3\u00af\3\u00af\3\u00b0\3\u00b0\5\u00b0\u0b2a")
        buf.write(u"\n\u00b0\3\u00b0\5\u00b0\u0b2d\n\u00b0\3\u00b0\3\u00b0")
        buf.write(u"\3\u00b1\3\u00b1\5\u00b1\u0b33\n\u00b1\3\u00b2\3\u00b2")
        buf.write(u"\5\u00b2\u0b37\n\u00b2\3\u00b3\5\u00b3\u0b3a\n\u00b3")
        buf.write(u"\3\u00b3\5\u00b3\u0b3d\n\u00b3\3\u00b3\5\u00b3\u0b40")
        buf.write(u"\n\u00b3\3\u00b3\3\u00b3\5\u00b3\u0b44\n\u00b3\3\u00b4")
        buf.write(u"\3\u00b4\5\u00b4\u0b48\n\u00b4\3\u00b4\3\u00b4\5\u00b4")
        buf.write(u"\u0b4c\n\u00b4\3\u00b5\3\u00b5\3\u00b5\3\u00b6\3\u00b6")
        buf.write(u"\3\u00b6\5\u00b6\u0b54\n\u00b6\3\u00b6\3\u00b6\3\u00b6")
        buf.write(u"\5\u00b6\u0b59\n\u00b6\3\u00b7\3\u00b7\3\u00b7\3\u00b8")
        buf.write(u"\3\u00b8\3\u00b8\3\u00b9\3\u00b9\5\u00b9\u0b63\n\u00b9")
        buf.write(u"\3\u00b9\3\u00b9\3\u00ba\3\u00ba\5\u00ba\u0b69\n\u00ba")
        buf.write(u"\3\u00ba\3\u00ba\5\u00ba\u0b6d\n\u00ba\3\u00bb\3\u00bb")
        buf.write(u"\5\u00bb\u0b71\n\u00bb\3\u00bb\3\u00bb\3\u00bb\5\u00bb")
        buf.write(u"\u0b76\n\u00bb\3\u00bc\3\u00bc\5\u00bc\u0b7a\n\u00bc")
        buf.write(u"\3\u00bc\3\u00bc\3\u00bd\3\u00bd\3\u00bd\5\u00bd\u0b81")
        buf.write(u"\n\u00bd\3\u00bd\7\u00bd\u0b84\n\u00bd\f\u00bd\16\u00bd")
        buf.write(u"\u0b87\13\u00bd\3\u00bd\3\u00bd\3\u00bd\5\u00bd\u0b8c")
        buf.write(u"\n\u00bd\3\u00bd\7\u00bd\u0b8f\n\u00bd\f\u00bd\16\u00bd")
        buf.write(u"\u0b92\13\u00bd\5\u00bd\u0b94\n\u00bd\3\u00be\3\u00be")
        buf.write(u"\5\u00be\u0b98\n\u00be\3\u00be\3\u00be\3\u00be\3\u00be")
        buf.write(u"\3\u00be\3\u00be\3\u00be\5\u00be\u0ba1\n\u00be\3\u00bf")
        buf.write(u"\3\u00bf\3\u00bf\5\u00bf\u0ba6\n\u00bf\3\u00c0\3\u00c0")
        buf.write(u"\3\u00c0\5\u00c0\u0bab\n\u00c0\3\u00c1\3\u00c1\3\u00c1")
        buf.write(u"\5\u00c1\u0bb0\n\u00c1\3\u00c1\3\u00c1\5\u00c1\u0bb4")
        buf.write(u"\n\u00c1\3\u00c2\3\u00c2\3\u00c3\3\u00c3\3\u00c3\5\u00c3")
        buf.write(u"\u0bbb\n\u00c3\3\u00c3\3\u00c3\5\u00c3\u0bbf\n\u00c3")
        buf.write(u"\3\u00c4\3\u00c4\5\u00c4\u0bc3\n\u00c4\5\u00c4\u0bc5")
        buf.write(u"\n\u00c4\3\u00c4\3\u00c4\3\u00c5\3\u00c5\3\u00c5\5\u00c5")
        buf.write(u"\u0bcc\n\u00c5\3\u00c6\3\u00c6\3\u00c6\5\u00c6\u0bd1")
        buf.write(u"\n\u00c6\3\u00c7\3\u00c7\5\u00c7\u0bd5\n\u00c7\3\u00c7")
        buf.write(u"\3\u00c7\3\u00c8\3\u00c8\3\u00c8\3\u00c8\7\u00c8\u0bdd")
        buf.write(u"\n\u00c8\f\u00c8\16\u00c8\u0be0\13\u00c8\3\u00c9\3\u00c9")
        buf.write(u"\5\u00c9\u0be4\n\u00c9\3\u00ca\3\u00ca\3\u00ca\3\u00ca")
        buf.write(u"\5\u00ca\u0bea\n\u00ca\3\u00ca\5\u00ca\u0bed\n\u00ca")
        buf.write(u"\3\u00cb\3\u00cb\3\u00cb\3\u00cb\5\u00cb\u0bf3\n\u00cb")
        buf.write(u"\3\u00cb\5\u00cb\u0bf6\n\u00cb\3\u00cb\3\u00cb\7\u00cb")
        buf.write(u"\u0bfa\n\u00cb\f\u00cb\16\u00cb\u0bfd\13\u00cb\3\u00cc")
        buf.write(u"\3\u00cc\3\u00cc\5\u00cc\u0c02\n\u00cc\3\u00cc\5\u00cc")
        buf.write(u"\u0c05\n\u00cc\3\u00cd\3\u00cd\5\u00cd\u0c09\n\u00cd")
        buf.write(u"\3\u00cd\3\u00cd\5\u00cd\u0c0d\n\u00cd\3\u00cd\5\u00cd")
        buf.write(u"\u0c10\n\u00cd\3\u00cd\5\u00cd\u0c13\n\u00cd\3\u00cd")
        buf.write(u"\5\u00cd\u0c16\n\u00cd\3\u00ce\3\u00ce\3\u00ce\3\u00ce")
        buf.write(u"\3\u00cf\3\u00cf\5\u00cf\u0c1e\n\u00cf\3\u00cf\3\u00cf")
        buf.write(u"\3\u00d0\3\u00d0\5\u00d0\u0c24\n\u00d0\3\u00d0\3\u00d0")
        buf.write(u"\3\u00d1\3\u00d1\3\u00d1\5\u00d1\u0c2b\n\u00d1\3\u00d2")
        buf.write(u"\3\u00d2\3\u00d2\5\u00d2\u0c30\n\u00d2\3\u00d2\5\u00d2")
        buf.write(u"\u0c33\n\u00d2\3\u00d2\5\u00d2\u0c36\n\u00d2\3\u00d2")
        buf.write(u"\5\u00d2\u0c39\n\u00d2\3\u00d3\3\u00d3\3\u00d3\3\u00d4")
        buf.write(u"\3\u00d4\3\u00d4\3\u00d5\3\u00d5\6\u00d5\u0c43\n\u00d5")
        buf.write(u"\r\u00d5\16\u00d5\u0c44\3\u00d6\3\u00d6\5\u00d6\u0c49")
        buf.write(u"\n\u00d6\3\u00d7\3\u00d7\6\u00d7\u0c4d\n\u00d7\r\u00d7")
        buf.write(u"\16\u00d7\u0c4e\3\u00d8\3\u00d8\5\u00d8\u0c53\n\u00d8")
        buf.write(u"\3\u00d9\5\u00d9\u0c56\n\u00d9\3\u00d9\3\u00d9\3\u00da")
        buf.write(u"\5\u00da\u0c5b\n\u00da\3\u00da\3\u00da\3\u00db\3\u00db")
        buf.write(u"\3\u00db\3\u00db\5\u00db\u0c63\n\u00db\3\u00dc\3\u00dc")
        buf.write(u"\3\u00dc\5\u00dc\u0c68\n\u00dc\3\u00dc\3\u00dc\3\u00dc")
        buf.write(u"\3\u00dc\3\u00dc\3\u00dc\3\u00dc\3\u00dc\3\u00dc\3\u00dc")
        buf.write(u"\3\u00dc\3\u00dc\3\u00dc\3\u00dc\3\u00dc\3\u00dc\3\u00dc")
        buf.write(u"\3\u00dc\3\u00dc\3\u00dc\3\u00dc\7\u00dc\u0c7f\n\u00dc")
        buf.write(u"\f\u00dc\16\u00dc\u0c82\13\u00dc\3\u00dc\3\u00dc\3\u00dd")
        buf.write(u"\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00de\3\u00de\3\u00de")
        buf.write(u"\3\u00de\3\u00de\3\u00df\6\u00df\u0c91\n\u00df\r\u00df")
        buf.write(u"\16\u00df\u0c92\3\u00df\5\u00df\u0c96\n\u00df\3\u00e0")
        buf.write(u"\3\u00e0\3\u00e1\3\u00e1\5\u00e1\u0c9c\n\u00e1\3\u00e1")
        buf.write(u"\3\u00e1\3\u00e2\3\u00e2\3\u00e3\5\u00e3\u0ca3\n\u00e3")
        buf.write(u"\3\u00e3\3\u00e3\3\u00e3\5\u00e3\u0ca8\n\u00e3\3\u00e4")
        buf.write(u"\5\u00e4\u0cab\n\u00e4\3\u00e4\3\u00e4\3\u00e5\3\u00e5")
        buf.write(u"\3\u00e6\3\u00e6\5\u00e6\u0cb3\n\u00e6\3\u00e7\3\u00e7")
        buf.write(u"\3\u00e7\5\u00e7\u0cb8\n\u00e7\3\u00e7\5\u00e7\u0cbb")
        buf.write(u"\n\u00e7\3\u00e7\3\u00e7\5\u00e7\u0cbf\n\u00e7\3\u00e7")
        buf.write(u"\5\u00e7\u0cc2\n\u00e7\3\u00e7\7\u00e7\u0cc5\n\u00e7")
        buf.write(u"\f\u00e7\16\u00e7\u0cc8\13\u00e7\3\u00e7\3\u00e7\5\u00e7")
        buf.write(u"\u0ccc\n\u00e7\3\u00e7\5\u00e7\u0ccf\n\u00e7\3\u00e7")
        buf.write(u"\6\u00e7\u0cd2\n\u00e7\r\u00e7\16\u00e7\u0cd3\5\u00e7")
        buf.write(u"\u0cd6\n\u00e7\3\u00e8\3\u00e8\3\u00e8\3\u00e9\3\u00e9")
        buf.write(u"\5\u00e9\u0cdd\n\u00e9\3\u00e9\5\u00e9\u0ce0\n\u00e9")
        buf.write(u"\3\u00e9\6\u00e9\u0ce3\n\u00e9\r\u00e9\16\u00e9\u0ce4")
        buf.write(u"\3\u00ea\3\u00ea\5\u00ea\u0ce9\n\u00ea\3\u00ea\3\u00ea")
        buf.write(u"\3\u00eb\6\u00eb\u0cee\n\u00eb\r\u00eb\16\u00eb\u0cef")
        buf.write(u"\3\u00eb\5\u00eb\u0cf3\n\u00eb\6\u00eb\u0cf5\n\u00eb")
        buf.write(u"\r\u00eb\16\u00eb\u0cf6\3\u00ec\3\u00ec\3\u00ec\3\u00ec")
        buf.write(u"\3\u00ec\3\u00ec\3\u00ec\3\u00ec\3\u00ec\3\u00ec\3\u00ec")
        buf.write(u"\3\u00ec\3\u00ec\3\u00ec\3\u00ec\3\u00ec\5\u00ec\u0d09")
        buf.write(u"\n\u00ec\3\u00ed\3\u00ed\3\u00ed\3\u00ed\3\u00ee\5\u00ee")
        buf.write(u"\u0d10\n\u00ee\3\u00ee\5\u00ee\u0d13\n\u00ee\3\u00ee")
        buf.write(u"\3\u00ee\3\u00ef\3\u00ef\3\u00ef\3\u00f0\3\u00f0\3\u00f0")
        buf.write(u"\3\u00f1\3\u00f1\3\u00f1\3\u00f1\5\u00f1\u0d21\n\u00f1")
        buf.write(u"\3\u00f2\3\u00f2\5\u00f2\u0d25\n\u00f2\5\u00f2\u0d27")
        buf.write(u"\n\u00f2\3\u00f2\3\u00f2\3\u00f2\5\u00f2\u0d2c\n\u00f2")
        buf.write(u"\5\u00f2\u0d2e\n\u00f2\3\u00f3\3\u00f3\5\u00f3\u0d32")
        buf.write(u"\n\u00f3\3\u00f4\5\u00f4\u0d35\n\u00f4\3\u00f4\3\u00f4")
        buf.write(u"\3\u00f5\3\u00f5\5\u00f5\u0d3b\n\u00f5\3\u00f5\3\u00f5")
        buf.write(u"\3\u00f5\3\u00f5\3\u00f5\3\u00f5\3\u00f5\3\u00f5\3\u00f5")
        buf.write(u"\3\u00f5\5\u00f5\u0d47\n\u00f5\3\u00f6\5\u00f6\u0d4a")
        buf.write(u"\n\u00f6\3\u00f6\3\u00f6\3\u00f7\3\u00f7\5\u00f7\u0d50")
        buf.write(u"\n\u00f7\5\u00f7\u0d52\n\u00f7\3\u00f7\3\u00f7\5\u00f7")
        buf.write(u"\u0d56\n\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7")
        buf.write(u"\3\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7")
        buf.write(u"\3\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7")
        buf.write(u"\3\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7\3\u00f7")
        buf.write(u"\3\u00f7\3\u00f7\3\u00f7\3\u00f7\5\u00f7\u0d76\n\u00f7")
        buf.write(u"\3\u00f8\3\u00f8\3\u00f8\5\u00f8\u0d7b\n\u00f8\3\u00f8")
        buf.write(u"\3\u00f8\5\u00f8\u0d7f\n\u00f8\3\u00f9\3\u00f9\5\u00f9")
        buf.write(u"\u0d83\n\u00f9\5\u00f9\u0d85\n\u00f9\3\u00f9\3\u00f9")
        buf.write(u"\5\u00f9\u0d89\n\u00f9\3\u00f9\7\u00f9\u0d8c\n\u00f9")
        buf.write(u"\f\u00f9\16\u00f9\u0d8f\13\u00f9\3\u00fa\3\u00fa\5\u00fa")
        buf.write(u"\u0d93\n\u00fa\3\u00fb\3\u00fb\5\u00fb\u0d97\n\u00fb")
        buf.write(u"\3\u00fc\3\u00fc\3\u00fc\3\u00fd\5\u00fd\u0d9d\n\u00fd")
        buf.write(u"\3\u00fd\3\u00fd\3\u00fd\3\u00fe\3\u00fe\3\u00fe\5\u00fe")
        buf.write(u"\u0da5\n\u00fe\3\u00fe\5\u00fe\u0da8\n\u00fe\3\u00fe")
        buf.write(u"\3\u00fe\5\u00fe\u0dac\n\u00fe\3\u00fe\3\u00fe\3\u00ff")
        buf.write(u"\3\u00ff\6\u00ff\u0db2\n\u00ff\r\u00ff\16\u00ff\u0db3")
        buf.write(u"\3\u0100\3\u0100\3\u0100\3\u0101\3\u0101\5\u0101\u0dbb")
        buf.write(u"\n\u0101\3\u0102\5\u0102\u0dbe\n\u0102\3\u0102\5\u0102")
        buf.write(u"\u0dc1\n\u0102\3\u0102\6\u0102\u0dc4\n\u0102\r\u0102")
        buf.write(u"\16\u0102\u0dc5\3\u0103\5\u0103\u0dc9\n\u0103\3\u0103")
        buf.write(u"\3\u0103\5\u0103\u0dcd\n\u0103\3\u0103\5\u0103\u0dd0")
        buf.write(u"\n\u0103\3\u0104\5\u0104\u0dd3\n\u0104\3\u0104\3\u0104")
        buf.write(u"\6\u0104\u0dd7\n\u0104\r\u0104\16\u0104\u0dd8\3\u0105")
        buf.write(u"\3\u0105\3\u0105\5\u0105\u0dde\n\u0105\3\u0106\3\u0106")
        buf.write(u"\3\u0106\6\u0106\u0de3\n\u0106\r\u0106\16\u0106\u0de4")
        buf.write(u"\3\u0106\3\u0106\3\u0106\3\u0106\3\u0107\3\u0107\3\u0107")
        buf.write(u"\3\u0107\3\u0107\3\u0107\3\u0108\3\u0108\3\u0108\5\u0108")
        buf.write(u"\u0df4\n\u0108\3\u0109\3\u0109\7\u0109\u0df8\n\u0109")
        buf.write(u"\f\u0109\16\u0109\u0dfb\13\u0109\3\u010a\3\u010a\3\u010a")
        buf.write(u"\3\u010a\3\u010b\7\u010b\u0e02\n\u010b\f\u010b\16\u010b")
        buf.write(u"\u0e05\13\u010b\3\u010b\7\u010b\u0e08\n\u010b\f\u010b")
        buf.write(u"\16\u010b\u0e0b\13\u010b\3\u010c\3\u010c\5\u010c\u0e0f")
        buf.write(u"\n\u010c\3\u010c\3\u010c\7\u010c\u0e13\n\u010c\f\u010c")
        buf.write(u"\16\u010c\u0e16\13\u010c\5\u010c\u0e18\n\u010c\3\u010d")
        buf.write(u"\7\u010d\u0e1b\n\u010d\f\u010d\16\u010d\u0e1e\13\u010d")
        buf.write(u"\3\u010d\3\u010d\3\u010e\3\u010e\3\u010e\3\u010e\3\u010e")
        buf.write(u"\3\u010e\3\u010e\3\u010e\3\u010e\3\u010e\3\u010e\3\u010e")
        buf.write(u"\3\u010e\3\u010e\3\u010e\3\u010e\3\u010e\3\u010e\3\u010e")
        buf.write(u"\3\u010e\3\u010e\3\u010e\3\u010e\3\u010e\3\u010e\3\u010e")
        buf.write(u"\3\u010e\3\u010e\3\u010e\3\u010e\3\u010e\3\u010e\3\u010e")
        buf.write(u"\3\u010e\3\u010e\3\u010e\3\u010e\3\u010e\3\u010e\3\u010e")
        buf.write(u"\3\u010e\3\u010e\3\u010e\3\u010e\3\u010e\3\u010e\3\u010e")
        buf.write(u"\3\u010e\3\u010e\5\u010e\u0e53\n\u010e\3\u010f\3\u010f")
        buf.write(u"\3\u010f\3\u010f\3\u010f\3\u010f\5\u010f\u0e5b\n\u010f")
        buf.write(u"\3\u010f\5\u010f\u0e5e\n\u010f\3\u010f\5\u010f\u0e61")
        buf.write(u"\n\u010f\3\u010f\5\u010f\u0e64\n\u010f\3\u0110\3\u0110")
        buf.write(u"\3\u0110\5\u0110\u0e69\n\u0110\3\u0110\3\u0110\5\u0110")
        buf.write(u"\u0e6d\n\u0110\3\u0110\3\u0110\3\u0110\3\u0110\3\u0110")
        buf.write(u"\5\u0110\u0e74\n\u0110\3\u0110\3\u0110\3\u0110\3\u0110")
        buf.write(u"\5\u0110\u0e7a\n\u0110\3\u0111\3\u0111\3\u0111\3\u0112")
        buf.write(u"\3\u0112\3\u0112\3\u0112\3\u0113\5\u0113\u0e84\n\u0113")
        buf.write(u"\3\u0113\3\u0113\3\u0114\3\u0114\3\u0114\3\u0114\5\u0114")
        buf.write(u"\u0e8c\n\u0114\3\u0114\5\u0114\u0e8f\n\u0114\3\u0114")
        buf.write(u"\5\u0114\u0e92\n\u0114\3\u0114\5\u0114\u0e95\n\u0114")
        buf.write(u"\3\u0115\6\u0115\u0e98\n\u0115\r\u0115\16\u0115\u0e99")
        buf.write(u"\3\u0115\3\u0115\6\u0115\u0e9e\n\u0115\r\u0115\16\u0115")
        buf.write(u"\u0e9f\3\u0116\6\u0116\u0ea3\n\u0116\r\u0116\16\u0116")
        buf.write(u"\u0ea4\3\u0116\3\u0116\6\u0116\u0ea9\n\u0116\r\u0116")
        buf.write(u"\16\u0116\u0eaa\5\u0116\u0ead\n\u0116\3\u0116\3\u0116")
        buf.write(u"\6\u0116\u0eb1\n\u0116\r\u0116\16\u0116\u0eb2\3\u0117")
        buf.write(u"\3\u0117\3\u0117\3\u0117\3\u0117\3\u0118\3\u0118\5\u0118")
        buf.write(u"\u0ebc\n\u0118\3\u0119\3\u0119\5\u0119\u0ec0\n\u0119")
        buf.write(u"\3\u011a\3\u011a\5\u011a\u0ec4\n\u011a\3\u011b\3\u011b")
        buf.write(u"\5\u011b\u0ec8\n\u011b\3\u011c\3\u011c\5\u011c\u0ecc")
        buf.write(u"\n\u011c\3\u011c\3\u011c\3\u011d\3\u011d\6\u011d\u0ed2")
        buf.write(u"\n\u011d\r\u011d\16\u011d\u0ed3\3\u011e\3\u011e\3\u011e")
        buf.write(u"\3\u011e\5\u011e\u0eda\n\u011e\3\u011e\3\u011e\3\u011f")
        buf.write(u"\3\u011f\3\u011f\5\u011f\u0ee1\n\u011f\3\u011f\5\u011f")
        buf.write(u"\u0ee4\n\u011f\3\u011f\5\u011f\u0ee7\n\u011f\3\u011f")
        buf.write(u"\5\u011f\u0eea\n\u011f\3\u011f\5\u011f\u0eed\n\u011f")
        buf.write(u"\3\u011f\5\u011f\u0ef0\n\u011f\3\u011f\5\u011f\u0ef3")
        buf.write(u"\n\u011f\3\u0120\3\u0120\6\u0120\u0ef7\n\u0120\r\u0120")
        buf.write(u"\16\u0120\u0ef8\3\u0121\3\u0121\3\u0121\5\u0121\u0efe")
        buf.write(u"\n\u0121\3\u0122\5\u0122\u0f01\n\u0122\3\u0122\5\u0122")
        buf.write(u"\u0f04\n\u0122\3\u0122\6\u0122\u0f07\n\u0122\r\u0122")
        buf.write(u"\16\u0122\u0f08\3\u0123\3\u0123\3\u0123\3\u0123\5\u0123")
        buf.write(u"\u0f0f\n\u0123\3\u0123\3\u0123\3\u0123\5\u0123\u0f14")
        buf.write(u"\n\u0123\3\u0123\5\u0123\u0f17\n\u0123\3\u0124\5\u0124")
        buf.write(u"\u0f1a\n\u0124\3\u0124\3\u0124\6\u0124\u0f1e\n\u0124")
        buf.write(u"\r\u0124\16\u0124\u0f1f\3\u0125\3\u0125\3\u0125\3\u0125")
        buf.write(u"\5\u0125\u0f26\n\u0125\5\u0125\u0f28\n\u0125\3\u0125")
        buf.write(u"\3\u0125\5\u0125\u0f2c\n\u0125\3\u0126\5\u0126\u0f2f")
        buf.write(u"\n\u0126\3\u0126\3\u0126\6\u0126\u0f33\n\u0126\r\u0126")
        buf.write(u"\16\u0126\u0f34\3\u0127\3\u0127\3\u0127\3\u0127\5\u0127")
        buf.write(u"\u0f3b\n\u0127\5\u0127\u0f3d\n\u0127\3\u0127\3\u0127")
        buf.write(u"\3\u0127\5\u0127\u0f42\n\u0127\3\u0128\3\u0128\3\u0128")
        buf.write(u"\3\u0129\3\u0129\6\u0129\u0f49\n\u0129\r\u0129\16\u0129")
        buf.write(u"\u0f4a\3\u012a\3\u012a\3\u012a\3\u012a\3\u012a\5\u012a")
        buf.write(u"\u0f52\n\u012a\3\u012b\3\u012b\6\u012b\u0f56\n\u012b")
        buf.write(u"\r\u012b\16\u012b\u0f57\3\u012c\3\u012c\3\u012c\3\u012c")
        buf.write(u"\5\u012c\u0f5e\n\u012c\3\u012d\3\u012d\5\u012d\u0f62")
        buf.write(u"\n\u012d\3\u012d\5\u012d\u0f65\n\u012d\3\u012d\5\u012d")
        buf.write(u"\u0f68\n\u012d\3\u012d\3\u012d\3\u012d\5\u012d\u0f6d")
        buf.write(u"\n\u012d\5\u012d\u0f6f\n\u012d\3\u012e\5\u012e\u0f72")
        buf.write(u"\n\u012e\3\u012e\3\u012e\3\u012e\5\u012e\u0f77\n\u012e")
        buf.write(u"\3\u012f\5\u012f\u0f7a\n\u012f\3\u012f\3\u012f\3\u012f")
        buf.write(u"\3\u012f\5\u012f\u0f80\n\u012f\3\u012f\3\u012f\6\u012f")
        buf.write(u"\u0f84\n\u012f\r\u012f\16\u012f\u0f85\5\u012f\u0f88\n")
        buf.write(u"\u012f\3\u0130\3\u0130\3\u0130\5\u0130\u0f8d\n\u0130")
        buf.write(u"\3\u0131\3\u0131\5\u0131\u0f91\n\u0131\3\u0131\3\u0131")
        buf.write(u"\3\u0132\3\u0132\3\u0132\5\u0132\u0f98\n\u0132\3\u0133")
        buf.write(u"\3\u0133\5\u0133\u0f9c\n\u0133\3\u0133\3\u0133\5\u0133")
        buf.write(u"\u0fa0\n\u0133\3\u0134\3\u0134\6\u0134\u0fa4\n\u0134")
        buf.write(u"\r\u0134\16\u0134\u0fa5\3\u0134\3\u0134\3\u0134\5\u0134")
        buf.write(u"\u0fab\n\u0134\3\u0134\5\u0134\u0fae\n\u0134\3\u0134")
        buf.write(u"\5\u0134\u0fb1\n\u0134\3\u0135\3\u0135\5\u0135\u0fb5")
        buf.write(u"\n\u0135\3\u0136\3\u0136\3\u0137\3\u0137\3\u0137\5\u0137")
        buf.write(u"\u0fbc\n\u0137\3\u0137\5\u0137\u0fbf\n\u0137\3\u0137")
        buf.write(u"\5\u0137\u0fc2\n\u0137\3\u0137\5\u0137\u0fc5\n\u0137")
        buf.write(u"\3\u0138\3\u0138\3\u0138\5\u0138\u0fca\n\u0138\3\u0138")
        buf.write(u"\3\u0138\3\u0138\5\u0138\u0fcf\n\u0138\3\u0138\3\u0138")
        buf.write(u"\5\u0138\u0fd3\n\u0138\3\u0138\3\u0138\3\u0138\5\u0138")
        buf.write(u"\u0fd8\n\u0138\3\u0139\3\u0139\6\u0139\u0fdc\n\u0139")
        buf.write(u"\r\u0139\16\u0139\u0fdd\3\u0139\5\u0139\u0fe1\n\u0139")
        buf.write(u"\3\u0139\5\u0139\u0fe4\n\u0139\3\u0139\5\u0139\u0fe7")
        buf.write(u"\n\u0139\3\u013a\3\u013a\5\u013a\u0feb\n\u013a\3\u013b")
        buf.write(u"\3\u013b\3\u013b\5\u013b\u0ff0\n\u013b\3\u013c\3\u013c")
        buf.write(u"\3\u013c\5\u013c\u0ff5\n\u013c\3\u013d\5\u013d\u0ff8")
        buf.write(u"\n\u013d\3\u013d\3\u013d\3\u013d\3\u013e\3\u013e\3\u013e")
        buf.write(u"\5\u013e\u1000\n\u013e\3\u013e\3\u013e\3\u013e\5\u013e")
        buf.write(u"\u1005\n\u013e\3\u013e\5\u013e\u1008\n\u013e\3\u013e")
        buf.write(u"\5\u013e\u100b\n\u013e\3\u013e\5\u013e\u100e\n\u013e")
        buf.write(u"\3\u013e\5\u013e\u1011\n\u013e\3\u013f\3\u013f\6\u013f")
        buf.write(u"\u1015\n\u013f\r\u013f\16\u013f\u1016\3\u0140\3\u0140")
        buf.write(u"\3\u0140\5\u0140\u101c\n\u0140\3\u0140\5\u0140\u101f")
        buf.write(u"\n\u0140\3\u0141\3\u0141\3\u0141\5\u0141\u1024\n\u0141")
        buf.write(u"\3\u0141\5\u0141\u1027\n\u0141\3\u0142\3\u0142\6\u0142")
        buf.write(u"\u102b\n\u0142\r\u0142\16\u0142\u102c\3\u0143\3\u0143")
        buf.write(u"\5\u0143\u1031\n\u0143\3\u0144\3\u0144\5\u0144\u1035")
        buf.write(u"\n\u0144\3\u0145\3\u0145\3\u0145\3\u0146\3\u0146\3\u0146")
        buf.write(u"\5\u0146\u103d\n\u0146\3\u0146\3\u0146\3\u0146\5\u0146")
        buf.write(u"\u1042\n\u0146\3\u0146\3\u0146\5\u0146\u1046\n\u0146")
        buf.write(u"\3\u0146\3\u0146\3\u0146\5\u0146\u104b\n\u0146\3\u0147")
        buf.write(u"\3\u0147\3\u0147\3\u0147\6\u0147\u1051\n\u0147\r\u0147")
        buf.write(u"\16\u0147\u1052\5\u0147\u1055\n\u0147\3\u0148\3\u0148")
        buf.write(u"\3\u0148\7\u0148\u105a\n\u0148\f\u0148\16\u0148\u105d")
        buf.write(u"\13\u0148\3\u0148\6\u0148\u1060\n\u0148\r\u0148\16\u0148")
        buf.write(u"\u1061\3\u0148\5\u0148\u1065\n\u0148\3\u0148\5\u0148")
        buf.write(u"\u1068\n\u0148\3\u0149\3\u0149\3\u0149\3\u0149\5\u0149")
        buf.write(u"\u106e\n\u0149\3\u014a\3\u014a\3\u014a\3\u014b\6\u014b")
        buf.write(u"\u1074\n\u014b\r\u014b\16\u014b\u1075\3\u014b\7\u014b")
        buf.write(u"\u1079\n\u014b\f\u014b\16\u014b\u107c\13\u014b\3\u014c")
        buf.write(u"\3\u014c\3\u014c\7\u014c\u1081\n\u014c\f\u014c\16\u014c")
        buf.write(u"\u1084\13\u014c\3\u014d\3\u014d\5\u014d\u1088\n\u014d")
        buf.write(u"\3\u014d\3\u014d\5\u014d\u108c\n\u014d\3\u014d\3\u014d")
        buf.write(u"\5\u014d\u1090\n\u014d\3\u014e\3\u014e\3\u014e\3\u014f")
        buf.write(u"\3\u014f\3\u014f\3\u0150\3\u0150\3\u0150\7\u0150\u109b")
        buf.write(u"\n\u0150\f\u0150\16\u0150\u109e\13\u0150\3\u0151\3\u0151")
        buf.write(u"\3\u0151\5\u0151\u10a3\n\u0151\3\u0152\6\u0152\u10a6")
        buf.write(u"\n\u0152\r\u0152\16\u0152\u10a7\3\u0153\6\u0153\u10ab")
        buf.write(u"\n\u0153\r\u0153\16\u0153\u10ac\3\u0154\6\u0154\u10b0")
        buf.write(u"\n\u0154\r\u0154\16\u0154\u10b1\3\u0155\3\u0155\5\u0155")
        buf.write(u"\u10b6\n\u0155\3\u0155\5\u0155\u10b9\n\u0155\3\u0155")
        buf.write(u"\6\u0155\u10bc\n\u0155\r\u0155\16\u0155\u10bd\3\u0156")
        buf.write(u"\3\u0156\5\u0156\u10c2\n\u0156\3\u0157\3\u0157\5\u0157")
        buf.write(u"\u10c6\n\u0157\3\u0158\3\u0158\3\u0158\3\u0159\3\u0159")
        buf.write(u"\3\u015a\3\u015a\5\u015a\u10cf\n\u015a\3\u015a\3\u015a")
        buf.write(u"\5\u015a\u10d3\n\u015a\3\u015b\3\u015b\3\u015c\3\u015c")
        buf.write(u"\6\u015c\u10d9\n\u015c\r\u015c\16\u015c\u10da\3\u015c")
        buf.write(u"\3\u015c\5\u015c\u10df\n\u015c\3\u015c\5\u015c\u10e2")
        buf.write(u"\n\u015c\5\u015c\u10e4\n\u015c\3\u015d\3\u015d\3\u015d")
        buf.write(u"\3\u015d\5\u015d\u10ea\n\u015d\3\u015d\5\u015d\u10ed")
        buf.write(u"\n\u015d\3\u015e\5\u015e\u10f0\n\u015e\3\u015e\3\u015e")
        buf.write(u"\3\u015e\7\u015e\u10f5\n\u015e\f\u015e\16\u015e\u10f8")
        buf.write(u"\13\u015e\5\u015e\u10fa\n\u015e\3\u015f\3\u015f\3\u015f")
        buf.write(u"\3\u015f\7\u015f\u1100\n\u015f\f\u015f\16\u015f\u1103")
        buf.write(u"\13\u015f\5\u015f\u1105\n\u015f\3\u0160\3\u0160\6\u0160")
        buf.write(u"\u1109\n\u0160\r\u0160\16\u0160\u110a\3\u0160\5\u0160")
        buf.write(u"\u110e\n\u0160\3\u0161\3\u0161\6\u0161\u1112\n\u0161")
        buf.write(u"\r\u0161\16\u0161\u1113\3\u0162\3\u0162\5\u0162\u1118")
        buf.write(u"\n\u0162\3\u0162\3\u0162\3\u0162\5\u0162\u111d\n\u0162")
        buf.write(u"\3\u0163\3\u0163\6\u0163\u1121\n\u0163\r\u0163\16\u0163")
        buf.write(u"\u1122\3\u0164\3\u0164\3\u0164\3\u0164\3\u0164\3\u0164")
        buf.write(u"\5\u0164\u112b\n\u0164\3\u0165\3\u0165\6\u0165\u112f")
        buf.write(u"\n\u0165\r\u0165\16\u0165\u1130\3\u0166\3\u0166\3\u0166")
        buf.write(u"\6\u0166\u1136\n\u0166\r\u0166\16\u0166\u1137\3\u0167")
        buf.write(u"\3\u0167\6\u0167\u113c\n\u0167\r\u0167\16\u0167\u113d")
        buf.write(u"\3\u0167\6\u0167\u1141\n\u0167\r\u0167\16\u0167\u1142")
        buf.write(u"\3\u0168\3\u0168\3\u0168\5\u0168\u1148\n\u0168\3\u0168")
        buf.write(u"\3\u0168\7\u0168\u114c\n\u0168\f\u0168\16\u0168\u114f")
        buf.write(u"\13\u0168\3\u0169\3\u0169\3\u0169\3\u0169\6\u0169\u1155")
        buf.write(u"\n\u0169\r\u0169\16\u0169\u1156\3\u016a\3\u016a\7\u016a")
        buf.write(u"\u115b\n\u016a\f\u016a\16\u016a\u115e\13\u016a\3\u016b")
        buf.write(u"\3\u016b\3\u016b\7\u016b\u1163\n\u016b\f\u016b\16\u016b")
        buf.write(u"\u1166\13\u016b\3\u016c\3\u016c\6\u016c\u116a\n\u016c")
        buf.write(u"\r\u016c\16\u016c\u116b\3\u016d\3\u016d\6\u016d\u1170")
        buf.write(u"\n\u016d\r\u016d\16\u016d\u1171\3\u016e\3\u016e\5\u016e")
        buf.write(u"\u1176\n\u016e\3\u016e\7\u016e\u1179\n\u016e\f\u016e")
        buf.write(u"\16\u016e\u117c\13\u016e\3\u016f\3\u016f\5\u016f\u1180")
        buf.write(u"\n\u016f\3\u016f\3\u016f\7\u016f\u1184\n\u016f\f\u016f")
        buf.write(u"\16\u016f\u1187\13\u016f\3\u0170\3\u0170\3\u0170\5\u0170")
        buf.write(u"\u118c\n\u0170\3\u0171\3\u0171\3\u0171\5\u0171\u1191")
        buf.write(u"\n\u0171\3\u0172\3\u0172\5\u0172\u1195\n\u0172\3\u0172")
        buf.write(u"\3\u0172\5\u0172\u1199\n\u0172\3\u0173\3\u0173\3\u0173")
        buf.write(u"\6\u0173\u119e\n\u0173\r\u0173\16\u0173\u119f\3\u0173")
        buf.write(u"\5\u0173\u11a3\n\u0173\3\u0173\7\u0173\u11a6\n\u0173")
        buf.write(u"\f\u0173\16\u0173\u11a9\13\u0173\3\u0173\5\u0173\u11ac")
        buf.write(u"\n\u0173\3\u0173\7\u0173\u11af\n\u0173\f\u0173\16\u0173")
        buf.write(u"\u11b2\13\u0173\3\u0174\5\u0174\u11b5\n\u0174\3\u0174")
        buf.write(u"\3\u0174\5\u0174\u11b9\n\u0174\3\u0174\6\u0174\u11bc")
        buf.write(u"\n\u0174\r\u0174\16\u0174\u11bd\3\u0175\5\u0175\u11c1")
        buf.write(u"\n\u0175\3\u0175\3\u0175\5\u0175\u11c5\n\u0175\3\u0175")
        buf.write(u"\6\u0175\u11c8\n\u0175\r\u0175\16\u0175\u11c9\3\u0175")
        buf.write(u"\5\u0175\u11cd\n\u0175\3\u0175\5\u0175\u11d0\n\u0175")
        buf.write(u"\3\u0176\5\u0176\u11d3\n\u0176\3\u0176\3\u0176\3\u0176")
        buf.write(u"\3\u0176\3\u0177\5\u0177\u11da\n\u0177\3\u0177\3\u0177")
        buf.write(u"\5\u0177\u11de\n\u0177\3\u0177\3\u0177\3\u0178\3\u0178")
        buf.write(u"\6\u0178\u11e4\n\u0178\r\u0178\16\u0178\u11e5\3\u0179")
        buf.write(u"\3\u0179\3\u0179\5\u0179\u11eb\n\u0179\3\u0179\3\u0179")
        buf.write(u"\5\u0179\u11ef\n\u0179\3\u017a\3\u017a\3\u017a\3\u017b")
        buf.write(u"\3\u017b\6\u017b\u11f6\n\u017b\r\u017b\16\u017b\u11f7")
        buf.write(u"\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c\3\u017c")
        buf.write(u"\3\u017c\3\u017c\3\u017c\5\u017c\u1204\n\u017c\3\u017d")
        buf.write(u"\3\u017d\5\u017d\u1208\n\u017d\3\u017d\3\u017d\5\u017d")
        buf.write(u"\u120c\n\u017d\3\u017e\3\u017e\3\u017e\6\u017e\u1211")
        buf.write(u"\n\u017e\r\u017e\16\u017e\u1212\3\u017f\3\u017f\5\u017f")
        buf.write(u"\u1217\n\u017f\3\u0180\3\u0180\3\u0180\3\u0180\6\u0180")
        buf.write(u"\u121d\n\u0180\r\u0180\16\u0180\u121e\3\u0181\3\u0181")
        buf.write(u"\3\u0182\3\u0182\3\u0182\5\u0182\u1226\n\u0182\3\u0182")
        buf.write(u"\3\u0182\3\u0182\5\u0182\u122b\n\u0182\3\u0182\5\u0182")
        buf.write(u"\u122e\n\u0182\3\u0182\5\u0182\u1231\n\u0182\3\u0182")
        buf.write(u"\5\u0182\u1234\n\u0182\3\u0183\6\u0183\u1237\n\u0183")
        buf.write(u"\r\u0183\16\u0183\u1238\3\u0184\3\u0184\5\u0184\u123d")
        buf.write(u"\n\u0184\3\u0185\3\u0185\3\u0185\6\u0185\u1242\n\u0185")
        buf.write(u"\r\u0185\16\u0185\u1243\3\u0186\3\u0186\5\u0186\u1248")
        buf.write(u"\n\u0186\3\u0187\3\u0187\5\u0187\u124c\n\u0187\3\u0188")
        buf.write(u"\3\u0188\3\u0188\3\u0188\3\u0188\6\u0188\u1253\n\u0188")
        buf.write(u"\r\u0188\16\u0188\u1254\3\u0189\3\u0189\6\u0189\u1259")
        buf.write(u"\n\u0189\r\u0189\16\u0189\u125a\3\u018a\3\u018a\3\u018a")
        buf.write(u"\5\u018a\u1260\n\u018a\3\u018a\3\u018a\5\u018a\u1264")
        buf.write(u"\n\u018a\3\u018b\3\u018b\6\u018b\u1268\n\u018b\r\u018b")
        buf.write(u"\16\u018b\u1269\3\u018c\3\u018c\5\u018c\u126e\n\u018c")
        buf.write(u"\3\u018c\3\u018c\5\u018c\u1272\n\u018c\3\u018d\3\u018d")
        buf.write(u"\6\u018d\u1276\n\u018d\r\u018d\16\u018d\u1277\3\u018e")
        buf.write(u"\3\u018e\6\u018e\u127c\n\u018e\r\u018e\16\u018e\u127d")
        buf.write(u"\3\u018f\3\u018f\3\u018f\5\u018f\u1283\n\u018f\3\u0190")
        buf.write(u"\5\u0190\u1286\n\u0190\3\u0190\7\u0190\u1289\n\u0190")
        buf.write(u"\f\u0190\16\u0190\u128c\13\u0190\3\u0190\3\u0190\3\u0191")
        buf.write(u"\3\u0191\3\u0191\5\u0191\u1293\n\u0191\3\u0191\5\u0191")
        buf.write(u"\u1296\n\u0191\3\u0192\3\u0192\3\u0192\5\u0192\u129b")
        buf.write(u"\n\u0192\3\u0193\3\u0193\5\u0193\u129f\n\u0193\3\u0193")
        buf.write(u"\3\u0193\3\u0194\5\u0194\u12a4\n\u0194\3\u0194\3\u0194")
        buf.write(u"\3\u0194\3\u0195\3\u0195\3\u0195\3\u0195\3\u0195\5\u0195")
        buf.write(u"\u12ae\n\u0195\5\u0195\u12b0\n\u0195\3\u0196\3\u0196")
        buf.write(u"\3\u0196\7\u0196\u12b5\n\u0196\f\u0196\16\u0196\u12b8")
        buf.write(u"\13\u0196\3\u0197\3\u0197\5\u0197\u12bc\n\u0197\3\u0197")
        buf.write(u"\3\u0197\3\u0197\3\u0197\3\u0198\3\u0198\3\u0198\3\u0199")
        buf.write(u"\3\u0199\3\u0199\3\u0199\5\u0199\u12c9\n\u0199\3\u019a")
        buf.write(u"\3\u019a\3\u019a\3\u019a\5\u019a\u12cf\n\u019a\3\u019b")
        buf.write(u"\5\u019b\u12d2\n\u019b\3\u019b\3\u019b\3\u019b\3\u019c")
        buf.write(u"\3\u019c\6\u019c\u12d9\n\u019c\r\u019c\16\u019c\u12da")
        buf.write(u"\3\u019d\3\u019d\3\u019d\5\u019d\u12e0\n\u019d\3\u019d")
        buf.write(u"\5\u019d\u12e3\n\u019d\3\u019d\5\u019d\u12e6\n\u019d")
        buf.write(u"\3\u019d\5\u019d\u12e9\n\u019d\3\u019d\5\u019d\u12ec")
        buf.write(u"\n\u019d\3\u019d\5\u019d\u12ef\n\u019d\3\u019d\5\u019d")
        buf.write(u"\u12f2\n\u019d\3\u019d\5\u019d\u12f5\n\u019d\3\u019d")
        buf.write(u"\5\u019d\u12f8\n\u019d\3\u019d\5\u019d\u12fb\n\u019d")
        buf.write(u"\3\u019e\3\u019e\3\u019e\3\u019f\5\u019f\u1301\n\u019f")
        buf.write(u"\3\u019f\3\u019f\3\u019f\5\u019f\u1306\n\u019f\3\u01a0")
        buf.write(u"\3\u01a0\5\u01a0\u130a\n\u01a0\3\u01a0\3\u01a0\3\u01a1")
        buf.write(u"\3\u01a1\3\u01a1\5\u01a1\u1311\n\u01a1\3\u01a1\5\u01a1")
        buf.write(u"\u1314\n\u01a1\3\u01a1\5\u01a1\u1317\n\u01a1\3\u01a1")
        buf.write(u"\5\u01a1\u131a\n\u01a1\3\u01a2\3\u01a2\3\u01a2\3\u01a2")
        buf.write(u"\3\u01a2\3\u01a2\3\u01a2\3\u01a2\7\u01a2\u1324\n\u01a2")
        buf.write(u"\f\u01a2\16\u01a2\u1327\13\u01a2\3\u01a3\3\u01a3\3\u01a3")
        buf.write(u"\3\u01a3\3\u01a3\3\u01a3\5\u01a3\u132f\n\u01a3\3\u01a4")
        buf.write(u"\3\u01a4\3\u01a4\5\u01a4\u1334\n\u01a4\3\u01a4\3\u01a4")
        buf.write(u"\5\u01a4\u1338\n\u01a4\3\u01a4\5\u01a4\u133b\n\u01a4")
        buf.write(u"\3\u01a5\3\u01a5\3\u01a5\7\u01a5\u1340\n\u01a5\f\u01a5")
        buf.write(u"\16\u01a5\u1343\13\u01a5\3\u01a6\3\u01a6\3\u01a6\7\u01a6")
        buf.write(u"\u1348\n\u01a6\f\u01a6\16\u01a6\u134b\13\u01a6\3\u01a7")
        buf.write(u"\3\u01a7\5\u01a7\u134f\n\u01a7\3\u01a7\3\u01a7\5\u01a7")
        buf.write(u"\u1353\n\u01a7\3\u01a8\5\u01a8\u1356\n\u01a8\3\u01a8")
        buf.write(u"\3\u01a8\3\u01a8\3\u01a9\3\u01a9\5\u01a9\u135d\n\u01a9")
        buf.write(u"\3\u01a9\3\u01a9\3\u01aa\3\u01aa\5\u01aa\u1363\n\u01aa")
        buf.write(u"\3\u01aa\3\u01aa\5\u01aa\u1367\n\u01aa\3\u01ab\3\u01ab")
        buf.write(u"\5\u01ab\u136b\n\u01ab\3\u01ab\3\u01ab\3\u01ac\3\u01ac")
        buf.write(u"\3\u01ac\3\u01ac\5\u01ac\u1373\n\u01ac\3\u01ad\3\u01ad")
        buf.write(u"\3\u01ad\5\u01ad\u1378\n\u01ad\3\u01ad\5\u01ad\u137b")
        buf.write(u"\n\u01ad\3\u01ad\3\u01ad\5\u01ad\u137f\n\u01ad\3\u01ad")
        buf.write(u"\5\u01ad\u1382\n\u01ad\3\u01ae\3\u01ae\3\u01ae\3\u01af")
        buf.write(u"\3\u01af\3\u01af\5\u01af\u138a\n\u01af\3\u01af\5\u01af")
        buf.write(u"\u138d\n\u01af\3\u01af\5\u01af\u1390\n\u01af\3\u01af")
        buf.write(u"\5\u01af\u1393\n\u01af\3\u01b0\3\u01b0\3\u01b0\3\u01b1")
        buf.write(u"\3\u01b1\5\u01b1\u139a\n\u01b1\3\u01b1\3\u01b1\5\u01b1")
        buf.write(u"\u139e\n\u01b1\3\u01b1\5\u01b1\u13a1\n\u01b1\3\u01b1")
        buf.write(u"\6\u01b1\u13a4\n\u01b1\r\u01b1\16\u01b1\u13a5\3\u01b1")
        buf.write(u"\5\u01b1\u13a9\n\u01b1\3\u01b2\3\u01b2\3\u01b2\3\u01b3")
        buf.write(u"\3\u01b3\3\u01b3\3\u01b3\3\u01b3\7\u01b3\u13b3\n\u01b3")
        buf.write(u"\f\u01b3\16\u01b3\u13b6\13\u01b3\5\u01b3\u13b8\n\u01b3")
        buf.write(u"\3\u01b4\3\u01b4\3\u01b4\5\u01b4\u13bd\n\u01b4\3\u01b4")
        buf.write(u"\5\u01b4\u13c0\n\u01b4\3\u01b4\5\u01b4\u13c3\n\u01b4")
        buf.write(u"\3\u01b5\3\u01b5\5\u01b5\u13c7\n\u01b5\3\u01b5\5\u01b5")
        buf.write(u"\u13ca\n\u01b5\3\u01b5\5\u01b5\u13cd\n\u01b5\3\u01b5")
        buf.write(u"\5\u01b5\u13d0\n\u01b5\3\u01b5\5\u01b5\u13d3\n\u01b5")
        buf.write(u"\3\u01b6\3\u01b6\3\u01b6\3\u01b6\3\u01b7\3\u01b7\3\u01b7")
        buf.write(u"\3\u01b8\3\u01b8\3\u01b8\3\u01b8\3\u01b8\5\u01b8\u13e1")
        buf.write(u"\n\u01b8\3\u01b9\3\u01b9\5\u01b9\u13e5\n\u01b9\3\u01ba")
        buf.write(u"\3\u01ba\5\u01ba\u13e9\n\u01ba\3\u01ba\3\u01ba\3\u01ba")
        buf.write(u"\5\u01ba\u13ee\n\u01ba\3\u01bb\3\u01bb\3\u01bc\3\u01bc")
        buf.write(u"\5\u01bc\u13f4\n\u01bc\3\u01bc\5\u01bc\u13f7\n\u01bc")
        buf.write(u"\3\u01bd\3\u01bd\3\u01be\3\u01be\6\u01be\u13fd\n\u01be")
        buf.write(u"\r\u01be\16\u01be\u13fe\3\u01be\5\u01be\u1402\n\u01be")
        buf.write(u"\3\u01bf\6\u01bf\u1405\n\u01bf\r\u01bf\16\u01bf\u1406")
        buf.write(u"\3\u01bf\3\u01bf\6\u01bf\u140b\n\u01bf\r\u01bf\16\u01bf")
        buf.write(u"\u140c\3\u01c0\6\u01c0\u1410\n\u01c0\r\u01c0\16\u01c0")
        buf.write(u"\u1411\3\u01c0\3\u01c0\3\u01c0\3\u01c0\5\u01c0\u1418")
        buf.write(u"\n\u01c0\3\u01c0\3\u01c0\3\u01c1\3\u01c1\3\u01c2\3\u01c2")
        buf.write(u"\3\u01c2\3\u01c2\3\u01c2\5\u01c2\u1423\n\u01c2\3\u01c2")
        buf.write(u"\3\u01c2\5\u01c2\u1427\n\u01c2\3\u01c3\3\u01c3\5\u01c3")
        buf.write(u"\u142b\n\u01c3\3\u01c4\3\u01c4\3\u01c4\6\u01c4\u1430")
        buf.write(u"\n\u01c4\r\u01c4\16\u01c4\u1431\3\u01c4\5\u01c4\u1435")
        buf.write(u"\n\u01c4\3\u01c4\5\u01c4\u1438\n\u01c4\3\u01c4\5\u01c4")
        buf.write(u"\u143b\n\u01c4\3\u01c4\7\u01c4\u143e\n\u01c4\f\u01c4")
        buf.write(u"\16\u01c4\u1441\13\u01c4\3\u01c4\5\u01c4\u1444\n\u01c4")
        buf.write(u"\3\u01c4\7\u01c4\u1447\n\u01c4\f\u01c4\16\u01c4\u144a")
        buf.write(u"\13\u01c4\3\u01c5\5\u01c5\u144d\n\u01c5\3\u01c5\3\u01c5")
        buf.write(u"\5\u01c5\u1451\n\u01c5\3\u01c5\6\u01c5\u1454\n\u01c5")
        buf.write(u"\r\u01c5\16\u01c5\u1455\3\u01c6\5\u01c6\u1459\n\u01c6")
        buf.write(u"\3\u01c6\3\u01c6\5\u01c6\u145d\n\u01c6\3\u01c6\5\u01c6")
        buf.write(u"\u1460\n\u01c6\3\u01c7\5\u01c7\u1463\n\u01c7\3\u01c7")
        buf.write(u"\3\u01c7\5\u01c7\u1467\n\u01c7\3\u01c7\6\u01c7\u146a")
        buf.write(u"\n\u01c7\r\u01c7\16\u01c7\u146b\3\u01c7\5\u01c7\u146f")
        buf.write(u"\n\u01c7\3\u01c7\5\u01c7\u1472\n\u01c7\3\u01c8\5\u01c8")
        buf.write(u"\u1475\n\u01c8\3\u01c8\3\u01c8\3\u01c8\3\u01c8\3\u01c9")
        buf.write(u"\5\u01c9\u147c\n\u01c9\3\u01c9\3\u01c9\5\u01c9\u1480")
        buf.write(u"\n\u01c9\3\u01c9\3\u01c9\3\u01ca\3\u01ca\3\u01ca\5\u01ca")
        buf.write(u"\u1487\n\u01ca\3\u01ca\3\u01ca\5\u01ca\u148b\n\u01ca")
        buf.write(u"\3\u01cb\3\u01cb\3\u01cb\3\u01cc\3\u01cc\6\u01cc\u1492")
        buf.write(u"\n\u01cc\r\u01cc\16\u01cc\u1493\3\u01cd\3\u01cd\3\u01cd")
        buf.write(u"\5\u01cd\u1499\n\u01cd\3\u01cd\3\u01cd\5\u01cd\u149d")
        buf.write(u"\n\u01cd\3\u01ce\3\u01ce\3\u01ce\3\u01cf\3\u01cf\6\u01cf")
        buf.write(u"\u14a4\n\u01cf\r\u01cf\16\u01cf\u14a5\3\u01d0\3\u01d0")
        buf.write(u"\3\u01d0\3\u01d0\3\u01d0\3\u01d0\3\u01d0\3\u01d0\3\u01d0")
        buf.write(u"\3\u01d0\5\u01d0\u14b2\n\u01d0\3\u01d1\3\u01d1\3\u01d1")
        buf.write(u"\5\u01d1\u14b7\n\u01d1\3\u01d1\5\u01d1\u14ba\n\u01d1")
        buf.write(u"\3\u01d1\5\u01d1\u14bd\n\u01d1\3\u01d1\5\u01d1\u14c0")
        buf.write(u"\n\u01d1\3\u01d2\3\u01d2\5\u01d2\u14c4\n\u01d2\3\u01d2")
        buf.write(u"\3\u01d2\5\u01d2\u14c8\n\u01d2\3\u01d2\3\u01d2\3\u01d2")
        buf.write(u"\5\u01d2\u14cd\n\u01d2\3\u01d2\3\u01d2\3\u01d2\3\u01d2")
        buf.write(u"\5\u01d2\u14d3\n\u01d2\3\u01d2\3\u01d2\3\u01d2\3\u01d2")
        buf.write(u"\5\u01d2\u14d9\n\u01d2\3\u01d2\3\u01d2\3\u01d2\5\u01d2")
        buf.write(u"\u14de\n\u01d2\3\u01d2\5\u01d2\u14e1\n\u01d2\3\u01d2")
        buf.write(u"\3\u01d2\3\u01d3\3\u01d3\3\u01d3\3\u01d3\5\u01d3\u14e9")
        buf.write(u"\n\u01d3\3\u01d4\3\u01d4\3\u01d4\3\u01d4\5\u01d4\u14ef")
        buf.write(u"\n\u01d4\3\u01d5\3\u01d5\6\u01d5\u14f3\n\u01d5\r\u01d5")
        buf.write(u"\16\u01d5\u14f4\3\u01d5\3\u01d5\5\u01d5\u14f9\n\u01d5")
        buf.write(u"\3\u01d5\5\u01d5\u14fc\n\u01d5\3\u01d5\5\u01d5\u14ff")
        buf.write(u"\n\u01d5\3\u01d5\5\u01d5\u1502\n\u01d5\3\u01d6\3\u01d6")
        buf.write(u"\5\u01d6\u1506\n\u01d6\3\u01d6\7\u01d6\u1509\n\u01d6")
        buf.write(u"\f\u01d6\16\u01d6\u150c\13\u01d6\3\u01d6\3\u01d6\5\u01d6")
        buf.write(u"\u1510\n\u01d6\3\u01d7\3\u01d7\5\u01d7\u1514\n\u01d7")
        buf.write(u"\3\u01d8\3\u01d8\5\u01d8\u1518\n\u01d8\3\u01d8\3\u01d8")
        buf.write(u"\3\u01d8\5\u01d8\u151d\n\u01d8\3\u01d9\3\u01d9\3\u01d9")
        buf.write(u"\5\u01d9\u1522\n\u01d9\3\u01da\3\u01da\3\u01da\3\u01db")
        buf.write(u"\5\u01db\u1528\n\u01db\3\u01db\3\u01db\3\u01db\3\u01dc")
        buf.write(u"\3\u01dc\3\u01dc\3\u01dc\5\u01dc\u1531\n\u01dc\3\u01dc")
        buf.write(u"\5\u01dc\u1534\n\u01dc\3\u01dc\5\u01dc\u1537\n\u01dc")
        buf.write(u"\3\u01dc\5\u01dc\u153a\n\u01dc\3\u01dd\6\u01dd\u153d")
        buf.write(u"\n\u01dd\r\u01dd\16\u01dd\u153e\3\u01dd\3\u01dd\6\u01dd")
        buf.write(u"\u1543\n\u01dd\r\u01dd\16\u01dd\u1544\3\u01de\6\u01de")
        buf.write(u"\u1548\n\u01de\r\u01de\16\u01de\u1549\3\u01de\3\u01de")
        buf.write(u"\3\u01de\3\u01de\6\u01de\u1550\n\u01de\r\u01de\16\u01de")
        buf.write(u"\u1551\3\u01df\3\u01df\3\u01df\3\u01df\3\u01df\3\u01e0")
        buf.write(u"\3\u01e0\5\u01e0\u155b\n\u01e0\3\u01e1\3\u01e1\5\u01e1")
        buf.write(u"\u155f\n\u01e1\3\u01e2\3\u01e2\5\u01e2\u1563\n\u01e2")
        buf.write(u"\3\u01e3\3\u01e3\5\u01e3\u1567\n\u01e3\3\u01e4\3\u01e4")
        buf.write(u"\5\u01e4\u156b\n\u01e4\3\u01e5\3\u01e5\3\u01e5\3\u01e6")
        buf.write(u"\3\u01e6\3\u01e6\3\u01e6\5\u01e6\u1574\n\u01e6\3\u01e6")
        buf.write(u"\5\u01e6\u1577\n\u01e6\3\u01e6\5\u01e6\u157a\n\u01e6")
        buf.write(u"\3\u01e6\5\u01e6\u157d\n\u01e6\3\u01e6\5\u01e6\u1580")
        buf.write(u"\n\u01e6\3\u01e7\3\u01e7\3\u01e7\7\u01e7\u1585\n\u01e7")
        buf.write(u"\f\u01e7\16\u01e7\u1588\13\u01e7\5\u01e7\u158a\n\u01e7")
        buf.write(u"\3\u01e8\3\u01e8\5\u01e8\u158e\n\u01e8\3\u01e8\5\u01e8")
        buf.write(u"\u1591\n\u01e8\3\u01e8\3\u01e8\5\u01e8\u1595\n\u01e8")
        buf.write(u"\3\u01e9\3\u01e9\5\u01e9\u1599\n\u01e9\3\u01e9\3\u01e9")
        buf.write(u"\5\u01e9\u159d\n\u01e9\3\u01ea\3\u01ea\6\u01ea\u15a1")
        buf.write(u"\n\u01ea\r\u01ea\16\u01ea\u15a2\3\u01eb\3\u01eb\5\u01eb")
        buf.write(u"\u15a7\n\u01eb\3\u01eb\5\u01eb\u15aa\n\u01eb\3\u01ec")
        buf.write(u"\3\u01ec\5\u01ec\u15ae\n\u01ec\3\u01ec\3\u01ec\3\u01ed")
        buf.write(u"\3\u01ed\5\u01ed\u15b4\n\u01ed\3\u01ed\3\u01ed\3\u01ee")
        buf.write(u"\5\u01ee\u15b9\n\u01ee\3\u01ee\3\u01ee\3\u01ee\3\u01ef")
        buf.write(u"\3\u01ef\5\u01ef\u15c0\n\u01ef\3\u01ef\3\u01ef\3\u01f0")
        buf.write(u"\3\u01f0\3\u01f0\5\u01f0\u15c7\n\u01f0\3\u01f1\5\u01f1")
        buf.write(u"\u15ca\n\u01f1\3\u01f1\3\u01f1\5\u01f1\u15ce\n\u01f1")
        buf.write(u"\3\u01f1\3\u01f1\3\u01f1\5\u01f1\u15d3\n\u01f1\3\u01f1")
        buf.write(u"\3\u01f1\3\u01f2\3\u01f2\3\u01f2\3\u01f2\3\u01f2\6\u01f2")
        buf.write(u"\u15dc\n\u01f2\r\u01f2\16\u01f2\u15dd\5\u01f2\u15e0\n")
        buf.write(u"\u01f2\3\u01f3\5\u01f3\u15e3\n\u01f3\3\u01f3\3\u01f3")
        buf.write(u"\5\u01f3\u15e7\n\u01f3\3\u01f3\6\u01f3\u15ea\n\u01f3")
        buf.write(u"\r\u01f3\16\u01f3\u15eb\3\u01f4\3\u01f4\3\u01f4\3\u01f4")
        buf.write(u"\5\u01f4\u15f2\n\u01f4\3\u01f4\5\u01f4\u15f5\n\u01f4")
        buf.write(u"\3\u01f4\3\u01f4\3\u01f4\5\u01f4\u15fa\n\u01f4\3\u01f5")
        buf.write(u"\3\u01f5\3\u01f5\5\u01f5\u15ff\n\u01f5\3\u01f5\5\u01f5")
        buf.write(u"\u1602\n\u01f5\3\u01f5\5\u01f5\u1605\n\u01f5\3\u01f5")
        buf.write(u"\5\u01f5\u1608\n\u01f5\3\u01f5\5\u01f5\u160b\n\u01f5")
        buf.write(u"\3\u01f5\5\u01f5\u160e\n\u01f5\3\u01f5\5\u01f5\u1611")
        buf.write(u"\n\u01f5\3\u01f6\3\u01f6\3\u01f6\5\u01f6\u1616\n\u01f6")
        buf.write(u"\3\u01f7\3\u01f7\5\u01f7\u161a\n\u01f7\3\u01f7\3\u01f7")
        buf.write(u"\3\u01f7\5\u01f7\u161f\n\u01f7\3\u01f8\3\u01f8\3\u01f9")
        buf.write(u"\3\u01f9\5\u01f9\u1625\n\u01f9\3\u01f9\5\u01f9\u1628")
        buf.write(u"\n\u01f9\3\u01fa\3\u01fa\3\u01fb\5\u01fb\u162d\n\u01fb")
        buf.write(u"\3\u01fb\3\u01fb\7\u01fb\u1631\n\u01fb\f\u01fb\16\u01fb")
        buf.write(u"\u1634\13\u01fb\3\u01fc\3\u01fc\5\u01fc\u1638\n\u01fc")
        buf.write(u"\3\u01fc\3\u01fc\7\u01fc\u163c\n\u01fc\f\u01fc\16\u01fc")
        buf.write(u"\u163f\13\u01fc\3\u01fd\5\u01fd\u1642\n\u01fd\3\u01fd")
        buf.write(u"\3\u01fd\7\u01fd\u1646\n\u01fd\f\u01fd\16\u01fd\u1649")
        buf.write(u"\13\u01fd\3\u01fe\3\u01fe\5\u01fe\u164d\n\u01fe\3\u01fe")
        buf.write(u"\3\u01fe\7\u01fe\u1651\n\u01fe\f\u01fe\16\u01fe\u1654")
        buf.write(u"\13\u01fe\3\u01ff\3\u01ff\5\u01ff\u1658\n\u01ff\3\u01ff")
        buf.write(u"\7\u01ff\u165b\n\u01ff\f\u01ff\16\u01ff\u165e\13\u01ff")
        buf.write(u"\3\u0200\3\u0200\3\u0200\5\u0200\u1663\n\u0200\3\u0200")
        buf.write(u"\7\u0200\u1666\n\u0200\f\u0200\16\u0200\u1669\13\u0200")
        buf.write(u"\3\u0201\5\u0201\u166c\n\u0201\3\u0201\3\u0201\7\u0201")
        buf.write(u"\u1670\n\u0201\f\u0201\16\u0201\u1673\13\u0201\3\u0202")
        buf.write(u"\3\u0202\5\u0202\u1677\n\u0202\3\u0202\3\u0202\7\u0202")
        buf.write(u"\u167b\n\u0202\f\u0202\16\u0202\u167e\13\u0202\3\u0203")
        buf.write(u"\5\u0203\u1681\n\u0203\3\u0203\3\u0203\3\u0203\7\u0203")
        buf.write(u"\u1686\n\u0203\f\u0203\16\u0203\u1689\13\u0203\3\u0204")
        buf.write(u"\3\u0204\5\u0204\u168d\n\u0204\3\u0204\3\u0204\3\u0204")
        buf.write(u"\7\u0204\u1692\n\u0204\f\u0204\16\u0204\u1695\13\u0204")
        buf.write(u"\3\u0205\5\u0205\u1698\n\u0205\3\u0205\3\u0205\7\u0205")
        buf.write(u"\u169c\n\u0205\f\u0205\16\u0205\u169f\13\u0205\3\u0206")
        buf.write(u"\3\u0206\5\u0206\u16a3\n\u0206\3\u0206\3\u0206\7\u0206")
        buf.write(u"\u16a7\n\u0206\f\u0206\16\u0206\u16aa\13\u0206\3\u0207")
        buf.write(u"\3\u0207\7\u0207\u16ae\n\u0207\f\u0207\16\u0207\u16b1")
        buf.write(u"\13\u0207\3\u0208\3\u0208\3\u0208\3\u0209\3\u0209\7\u0209")
        buf.write(u"\u16b8\n\u0209\f\u0209\16\u0209\u16bb\13\u0209\3\u020a")
        buf.write(u"\3\u020a\3\u020a\3\u020b\5\u020b\u16c1\n\u020b\3\u020b")
        buf.write(u"\3\u020b\7\u020b\u16c5\n\u020b\f\u020b\16\u020b\u16c8")
        buf.write(u"\13\u020b\3\u020c\3\u020c\3\u020c\3\u020d\3\u020d\3\u020d")
        buf.write(u"\3\u020d\3\u020d\3\u020d\5\u020d\u16d3\n\u020d\3\u020e")
        buf.write(u"\3\u020e\7\u020e\u16d7\n\u020e\f\u020e\16\u020e\u16da")
        buf.write(u"\13\u020e\3\u020f\3\u020f\3\u020f\6\u020f\u16df\n\u020f")
        buf.write(u"\r\u020f\16\u020f\u16e0\5\u020f\u16e3\n\u020f\3\u0210")
        buf.write(u"\5\u0210\u16e6\n\u0210\3\u0210\3\u0210\3\u0211\3\u0211")
        buf.write(u"\3\u0211\3\u0211\3\u0211\3\u0211\3\u0211\5\u0211\u16f1")
        buf.write(u"\n\u0211\3\u0212\3\u0212\5\u0212\u16f5\n\u0212\3\u0212")
        buf.write(u"\5\u0212\u16f8\n\u0212\3\u0212\3\u0212\3\u0212\3\u0212")
        buf.write(u"\3\u0212\3\u0212\3\u0212\5\u0212\u1701\n\u0212\3\u0213")
        buf.write(u"\3\u0213\7\u0213\u1705\n\u0213\f\u0213\16\u0213\u1708")
        buf.write(u"\13\u0213\3\u0213\5\u0213\u170b\n\u0213\3\u0213\7\u0213")
        buf.write(u"\u170e\n\u0213\f\u0213\16\u0213\u1711\13\u0213\3\u0213")
        buf.write(u"\7\u0213\u1714\n\u0213\f\u0213\16\u0213\u1717\13\u0213")
        buf.write(u"\5\u0213\u1719\n\u0213\3\u0214\3\u0214\3\u0214\5\u0214")
        buf.write(u"\u171e\n\u0214\3\u0214\7\u0214\u1721\n\u0214\f\u0214")
        buf.write(u"\16\u0214\u1724\13\u0214\3\u0214\3\u0214\3\u0215\3\u0215")
        buf.write(u"\3\u0215\5\u0215\u172b\n\u0215\3\u0216\3\u0216\5\u0216")
        buf.write(u"\u172f\n\u0216\3\u0216\5\u0216\u1732\n\u0216\3\u0216")
        buf.write(u"\3\u0216\3\u0217\3\u0217\3\u0217\3\u0217\3\u0218\3\u0218")
        buf.write(u"\3\u0218\3\u0218\3\u0218\3\u0218\3\u0219\3\u0219\3\u0219")
        buf.write(u"\6\u0219\u1743\n\u0219\r\u0219\16\u0219\u1744\3\u021a")
        buf.write(u"\5\u021a\u1748\n\u021a\3\u021a\5\u021a\u174b\n\u021a")
        buf.write(u"\3\u021a\3\u021a\5\u021a\u174f\n\u021a\3\u021a\3\u021a")
        buf.write(u"\3\u021a\5\u021a\u1754\n\u021a\3\u021a\3\u021a\3\u021a")
        buf.write(u"\5\u021a\u1759\n\u021a\3\u021a\5\u021a\u175c\n\u021a")
        buf.write(u"\3\u021a\3\u021a\3\u021a\5\u021a\u1761\n\u021a\3\u021a")
        buf.write(u"\3\u021a\3\u021a\5\u021a\u1766\n\u021a\3\u021a\3\u021a")
        buf.write(u"\3\u021a\5\u021a\u176b\n\u021a\3\u021a\3\u021a\3\u021a")
        buf.write(u"\5\u021a\u1770\n\u021a\3\u021a\5\u021a\u1773\n\u021a")
        buf.write(u"\3\u021b\5\u021b\u1776\n\u021b\3\u021b\5\u021b\u1779")
        buf.write(u"\n\u021b\3\u021b\3\u021b\3\u021b\3\u021b\3\u021b\3\u021b")
        buf.write(u"\5\u021b\u1781\n\u021b\3\u021c\3\u021c\3\u021c\3\u021c")
        buf.write(u"\5\u021c\u1787\n\u021c\3\u021d\3\u021d\3\u021d\3\u021d")
        buf.write(u"\5\u021d\u178d\n\u021d\3\u021d\7\u021d\u1790\n\u021d")
        buf.write(u"\f\u021d\16\u021d\u1793\13\u021d\3\u021d\3\u021d\7\u021d")
        buf.write(u"\u1797\n\u021d\f\u021d\16\u021d\u179a\13\u021d\3\u021d")
        buf.write(u"\5\u021d\u179d\n\u021d\3\u021e\3\u021e\3\u021e\3\u021e")
        buf.write(u"\3\u021e\5\u021e\u17a4\n\u021e\3\u021e\7\u021e\u17a7")
        buf.write(u"\n\u021e\f\u021e\16\u021e\u17aa\13\u021e\3\u021e\3\u021e")
        buf.write(u"\7\u021e\u17ae\n\u021e\f\u021e\16\u021e\u17b1\13\u021e")
        buf.write(u"\3\u021e\5\u021e\u17b4\n\u021e\3\u021f\3\u021f\3\u021f")
        buf.write(u"\3\u021f\5\u021f\u17ba\n\u021f\3\u021f\3\u021f\3\u0220")
        buf.write(u"\3\u0220\3\u0221\3\u0221\3\u0222\3\u0222\3\u0222\3\u0222")
        buf.write(u"\5\u0222\u17c6\n\u0222\3\u0222\3\u0222\5\u0222\u17ca")
        buf.write(u"\n\u0222\3\u0222\5\u0222\u17cd\n\u0222\3\u0223\3\u0223")
        buf.write(u"\3\u0223\3\u0223\5\u0223\u17d3\n\u0223\3\u0223\3\u0223")
        buf.write(u"\5\u0223\u17d7\n\u0223\3\u0223\5\u0223\u17da\n\u0223")
        buf.write(u"\3\u0224\3\u0224\3\u0224\3\u0224\5\u0224\u17e0\n\u0224")
        buf.write(u"\3\u0225\3\u0225\5\u0225\u17e4\n\u0225\3\u0225\6\u0225")
        buf.write(u"\u17e7\n\u0225\r\u0225\16\u0225\u17e8\3\u0225\5\u0225")
        buf.write(u"\u17ec\n\u0225\3\u0225\5\u0225\u17ef\n\u0225\3\u0226")
        buf.write(u"\3\u0226\3\u0226\3\u0227\3\u0227\3\u0227\3\u0228\3\u0228")
        buf.write(u"\3\u0228\3\u0229\3\u0229\5\u0229\u17fc\n\u0229\3\u022a")
        buf.write(u"\3\u022a\3\u022a\3\u022b\3\u022b\3\u022b\3\u022c\3\u022c")
        buf.write(u"\3\u022c\3\u022d\3\u022d\3\u022d\3\u022e\3\u022e\3\u022e")
        buf.write(u"\3\u022f\3\u022f\3\u022f\3\u0230\3\u0230\3\u0231\3\u0231")
        buf.write(u"\3\u0232\3\u0232\3\u0233\3\u0233\3\u0234\3\u0234\3\u0235")
        buf.write(u"\3\u0235\3\u0236\3\u0236\3\u0237\3\u0237\3\u0238\3\u0238")
        buf.write(u"\3\u0238\5\u0238\u1823\n\u0238\3\u0239\3\u0239\3\u023a")
        buf.write(u"\3\u023a\3\u023b\3\u023b\3\u023b\3\u023b\3\u023b\3\u023b")
        buf.write(u"\5\u023b\u182f\n\u023b\3\u023c\3\u023c\3\u023d\3\u023d")
        buf.write(u"\3\u023e\3\u023e\3\u023f\3\u023f\3\u0240\3\u0240\3\u0241")
        buf.write(u"\3\u0241\5\u0241\u183d\n\u0241\3\u0242\3\u0242\5\u0242")
        buf.write(u"\u1841\n\u0242\3\u0242\5\u0242\u1844\n\u0242\3\u0243")
        buf.write(u"\3\u0243\5\u0243\u1848\n\u0243\3\u0244\3\u0244\3\u0245")
        buf.write(u"\3\u0245\3\u0246\3\u0246\3\u0247\3\u0247\3\u0248\3\u0248")
        buf.write(u"\5\u0248\u1854\n\u0248\3\u0249\3\u0249\3\u024a\3\u024a")
        buf.write(u"\3\u024b\3\u024b\3\u024c\3\u024c\3\u024d\3\u024d\3\u024d")
        buf.write(u"\3\u024d\3\u024d\3\u024d\5\u024d\u1864\n\u024d\3\u024e")
        buf.write(u"\3\u024e\3\u024f\3\u024f\3\u024f\5\u024f\u186b\n\u024f")
        buf.write(u"\3\u0250\3\u0250\3\u0251\3\u0251\3\u0251\3\u0251\5\u0251")
        buf.write(u"\u1873\n\u0251\3\u0251\3\u0251\3\u0252\3\u0252\3\u0252")
        buf.write(u"\3\u0252\5\u0252\u187b\n\u0252\3\u0252\3\u0252\3\u0253")
        buf.write(u"\3\u0253\3\u0253\3\u0253\3\u0253\3\u0253\3\u0253\3\u0253")
        buf.write(u"\3\u0253\3\u0253\3\u0253\3\u0253\3\u0253\3\u0253\3\u0253")
        buf.write(u"\5\u0253\u188e\n\u0253\3\u0254\3\u0254\3\u0254\3\u0254")
        buf.write(u"\3\u0254\3\u0254\3\u0254\3\u0254\3\u0254\3\u0254\3\u0254")
        buf.write(u"\3\u0254\3\u0254\3\u0254\3\u0254\5\u0254\u189f\n\u0254")
        buf.write(u"\3\u0254\3\u0254\3\u0254\3\u0254\3\u0254\3\u0254\3\u0254")
        buf.write(u"\3\u0254\3\u0254\3\u0254\3\u0254\3\u0254\3\u0254\3\u0254")
        buf.write(u"\3\u0254\3\u0254\5\u0254\u18b1\n\u0254\3\u0255\6\u0255")
        buf.write(u"\u18b4\n\u0255\r\u0255\16\u0255\u18b5\3\u0255\2\2\u0256")
        buf.write(u"\2\4\6\b\n\f\16\20\22\24\26\30\32\34\36 \"$&(*,.\60\62")
        buf.write(u"\64\668:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082")
        buf.write(u"\u0084\u0086\u0088\u008a\u008c\u008e\u0090\u0092\u0094")
        buf.write(u"\u0096\u0098\u009a\u009c\u009e\u00a0\u00a2\u00a4\u00a6")
        buf.write(u"\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8")
        buf.write(u"\u00ba\u00bc\u00be\u00c0\u00c2\u00c4\u00c6\u00c8\u00ca")
        buf.write(u"\u00cc\u00ce\u00d0\u00d2\u00d4\u00d6\u00d8\u00da\u00dc")
        buf.write(u"\u00de\u00e0\u00e2\u00e4\u00e6\u00e8\u00ea\u00ec\u00ee")
        buf.write(u"\u00f0\u00f2\u00f4\u00f6\u00f8\u00fa\u00fc\u00fe\u0100")
        buf.write(u"\u0102\u0104\u0106\u0108\u010a\u010c\u010e\u0110\u0112")
        buf.write(u"\u0114\u0116\u0118\u011a\u011c\u011e\u0120\u0122\u0124")
        buf.write(u"\u0126\u0128\u012a\u012c\u012e\u0130\u0132\u0134\u0136")
        buf.write(u"\u0138\u013a\u013c\u013e\u0140\u0142\u0144\u0146\u0148")
        buf.write(u"\u014a\u014c\u014e\u0150\u0152\u0154\u0156\u0158\u015a")
        buf.write(u"\u015c\u015e\u0160\u0162\u0164\u0166\u0168\u016a\u016c")
        buf.write(u"\u016e\u0170\u0172\u0174\u0176\u0178\u017a\u017c\u017e")
        buf.write(u"\u0180\u0182\u0184\u0186\u0188\u018a\u018c\u018e\u0190")
        buf.write(u"\u0192\u0194\u0196\u0198\u019a\u019c\u019e\u01a0\u01a2")
        buf.write(u"\u01a4\u01a6\u01a8\u01aa\u01ac\u01ae\u01b0\u01b2\u01b4")
        buf.write(u"\u01b6\u01b8\u01ba\u01bc\u01be\u01c0\u01c2\u01c4\u01c6")
        buf.write(u"\u01c8\u01ca\u01cc\u01ce\u01d0\u01d2\u01d4\u01d6\u01d8")
        buf.write(u"\u01da\u01dc\u01de\u01e0\u01e2\u01e4\u01e6\u01e8\u01ea")
        buf.write(u"\u01ec\u01ee\u01f0\u01f2\u01f4\u01f6\u01f8\u01fa\u01fc")
        buf.write(u"\u01fe\u0200\u0202\u0204\u0206\u0208\u020a\u020c\u020e")
        buf.write(u"\u0210\u0212\u0214\u0216\u0218\u021a\u021c\u021e\u0220")
        buf.write(u"\u0222\u0224\u0226\u0228\u022a\u022c\u022e\u0230\u0232")
        buf.write(u"\u0234\u0236\u0238\u023a\u023c\u023e\u0240\u0242\u0244")
        buf.write(u"\u0246\u0248\u024a\u024c\u024e\u0250\u0252\u0254\u0256")
        buf.write(u"\u0258\u025a\u025c\u025e\u0260\u0262\u0264\u0266\u0268")
        buf.write(u"\u026a\u026c\u026e\u0270\u0272\u0274\u0276\u0278\u027a")
        buf.write(u"\u027c\u027e\u0280\u0282\u0284\u0286\u0288\u028a\u028c")
        buf.write(u"\u028e\u0290\u0292\u0294\u0296\u0298\u029a\u029c\u029e")
        buf.write(u"\u02a0\u02a2\u02a4\u02a6\u02a8\u02aa\u02ac\u02ae\u02b0")
        buf.write(u"\u02b2\u02b4\u02b6\u02b8\u02ba\u02bc\u02be\u02c0\u02c2")
        buf.write(u"\u02c4\u02c6\u02c8\u02ca\u02cc\u02ce\u02d0\u02d2\u02d4")
        buf.write(u"\u02d6\u02d8\u02da\u02dc\u02de\u02e0\u02e2\u02e4\u02e6")
        buf.write(u"\u02e8\u02ea\u02ec\u02ee\u02f0\u02f2\u02f4\u02f6\u02f8")
        buf.write(u"\u02fa\u02fc\u02fe\u0300\u0302\u0304\u0306\u0308\u030a")
        buf.write(u"\u030c\u030e\u0310\u0312\u0314\u0316\u0318\u031a\u031c")
        buf.write(u"\u031e\u0320\u0322\u0324\u0326\u0328\u032a\u032c\u032e")
        buf.write(u"\u0330\u0332\u0334\u0336\u0338\u033a\u033c\u033e\u0340")
        buf.write(u"\u0342\u0344\u0346\u0348\u034a\u034c\u034e\u0350\u0352")
        buf.write(u"\u0354\u0356\u0358\u035a\u035c\u035e\u0360\u0362\u0364")
        buf.write(u"\u0366\u0368\u036a\u036c\u036e\u0370\u0372\u0374\u0376")
        buf.write(u"\u0378\u037a\u037c\u037e\u0380\u0382\u0384\u0386\u0388")
        buf.write(u"\u038a\u038c\u038e\u0390\u0392\u0394\u0396\u0398\u039a")
        buf.write(u"\u039c\u039e\u03a0\u03a2\u03a4\u03a6\u03a8\u03aa\u03ac")
        buf.write(u"\u03ae\u03b0\u03b2\u03b4\u03b6\u03b8\u03ba\u03bc\u03be")
        buf.write(u"\u03c0\u03c2\u03c4\u03c6\u03c8\u03ca\u03cc\u03ce\u03d0")
        buf.write(u"\u03d2\u03d4\u03d6\u03d8\u03da\u03dc\u03de\u03e0\u03e2")
        buf.write(u"\u03e4\u03e6\u03e8\u03ea\u03ec\u03ee\u03f0\u03f2\u03f4")
        buf.write(u"\u03f6\u03f8\u03fa\u03fc\u03fe\u0400\u0402\u0404\u0406")
        buf.write(u"\u0408\u040a\u040c\u040e\u0410\u0412\u0414\u0416\u0418")
        buf.write(u"\u041a\u041c\u041e\u0420\u0422\u0424\u0426\u0428\u042a")
        buf.write(u"\u042c\u042e\u0430\u0432\u0434\u0436\u0438\u043a\u043c")
        buf.write(u"\u043e\u0440\u0442\u0444\u0446\u0448\u044a\u044c\u044e")
        buf.write(u"\u0450\u0452\u0454\u0456\u0458\u045a\u045c\u045e\u0460")
        buf.write(u"\u0462\u0464\u0466\u0468\u046a\u046c\u046e\u0470\u0472")
        buf.write(u"\u0474\u0476\u0478\u047a\u047c\u047e\u0480\u0482\u0484")
        buf.write(u"\u0486\u0488\u048a\u048c\u048e\u0490\u0492\u0494\u0496")
        buf.write(u"\u0498\u049a\u049c\u049e\u04a0\u04a2\u04a4\u04a6\u04a8")
        buf.write(u"\2J\3\2\u00f0\u00f1\7\2RR\u0087\u0087\u00f9\u00f9\u0118")
        buf.write(u"\u0118\u0182\u0182\5\2BB\u0130\u0130\u020a\u020a\4\2")
        buf.write(u"\u0130\u0130\u020a\u020a\3\2\u01ea\u01eb\4\2\20\20\u0136")
        buf.write(u"\u0136\4\2TTZZ\4\2\u0110\u0110\u01f4\u01f4\4\2\27\27")
        buf.write(u"\u0104\u0104\4\2\u009b\u009b\u00d1\u00d1\3\2\30\31\5")
        buf.write(u"\2\u00f7\u00f7\u0188\u0188\u01b3\u01b3\6\2\u009b\u009b")
        buf.write(u"\u00cb\u00cb\u0177\u0177\u01b3\u01b3\4\2\u0184\u0184")
        buf.write(u"\u01fa\u01fa\5\2\u017f\u017f\u01be\u01be\u01c2\u01c2")
        buf.write(u"\4\2\u00d3\u00d3\u01a7\u01a7\4\2BB\u0181\u0181\3\2\u01d3")
        buf.write(u"\u01d5\4\2\u011d\u011d\u01a6\u01a6\4\2((++\3\2\u00c3")
        buf.write(u"\u00c4\4\2\u00eb\u00eb\u0128\u0128\5\2\u00e8\u00e8\u0112")
        buf.write(u"\u0112\u0156\u0156\5\2\u0162\u0162\u0226\u0226\u022a")
        buf.write(u"\u022a\3\2MN\3\2\u00db\u00dc\3\2%&\3\2\u0160\u0161\3")
        buf.write(u"\2\u0093\u0094\3\2\u0105\u0106\3\2#$\4\2\u013d\u013d")
        buf.write(u"\u01aa\u01aa\4\2\u00a1\u00a1\u0194\u0194\4\2\u00de\u00de")
        buf.write(u"\u0114\u0114\3\2\u011d\u011e\4\2zz\u008e\u008e\5\2\u0097")
        buf.write(u"\u0097\u0169\u0169\u01b6\u01b7\3\2\65\66\4\2\u0230\u0230")
        buf.write(u"\u0232\u0232\4\2\u0210\u0210\u0212\u0213\5\2RR\u0122")
        buf.write(u"\u0122\u0157\u0157\4\2\u0100\u0100\u01d2\u01d2\4\2\33")
        buf.write(u"\33\u008c\u008c\4\2cc\u0185\u0186\3\2\u01db\u01dc\4\2")
        buf.write(u"\u0111\u0111\u01a1\u01a1\5\2\60\60EEyy\4\2\u00d0\u00d0")
        buf.write(u"\u01f6\u01f6\4\2hh\u010c\u010c\3\2\u0202\u0203\4\2>>")
        buf.write(u"\u0201\u0201\4\2\u00e4\u00e4\u019b\u019b\3\2kl\4\2\3")
        buf.write(u"\3\u0151\u0151\4\2\u00c0\u00c0\u021f\u021f\t\2\r\r\20")
        buf.write(u"\21xx\u009d\u009d\u0136\u0137\u0142\u0142\u0144\u0144")
        buf.write(u"\4\2\13\13\u0110\u0110\5\2\13\13\u00d8\u00d8\u0110\u0110")
        buf.write(u"\4\2\t\t))\4\2\u0108\u0108\u013c\u013c\4\2\u012d\u012d")
        buf.write(u"\u01ac\u01ac\4\2\63\63\u01f3\u01f3\4\2\u00c2\u00c2\u00ca")
        buf.write(u"\u00ca\4\2\u00ad\u00ad\u00bf\u00bf\4\2\u0226\u0226\u022a")
        buf.write(u"\u022a\4\2\u0215\u0215\u022d\u022d\4\2\25\25\u014f\u014f")
        buf.write(u"\5\2\u0139\u0139\u0165\u0165\u0210\u0210\4\2\u00f5\u00f5")
        buf.write(u"\u0149\u0149Z\2\3\3\32\32\34\34\36\37!!#&((+-/\60\62")
        buf.write(u"\629:?@EEHIQQffhhnnppyy\u0085\u0087\u008f\u0090\u0092")
        buf.write(u"\u0092\u0097\u0098\u009c\u009c\u00a1\u00a1\u00bb\u00bb")
        buf.write(u"\u00bd\u00bd\u00c1\u00c1\u00c3\u00c5\u00c8\u00c8\u00cb")
        buf.write(u"\u00cb\u00ce\u00ce\u00d0\u00d0\u00db\u00dc\u00de\u00de")
        buf.write(u"\u00e0\u00e1\u00e8\u00e8\u00eb\u00eb\u00f3\u00f4\u0100")
        buf.write(u"\u0100\u0108\u0108\u010a\u010a\u010c\u010c\u010e\u010f")
        buf.write(u"\u0112\u0112\u0114\u0114\u0116\u0118\u0121\u0122\u0125")
        buf.write(u"\u0128\u012e\u012e\u0135\u0137\u013a\u013a\u013d\u013d")
        buf.write(u"\u0143\u0143\u0145\u0145\u0148\u0148\u0151\u0151\u0156")
        buf.write(u"\u0157\u015c\u015c\u0166\u0167\u0169\u0169\u016e\u016f")
        buf.write(u"\u0172\u0172\u0178\u0179\u017b\u017b\u017e\u017e\u0182")
        buf.write(u"\u0182\u0185\u0185\u018d\u018d\u0194\u0194\u0197\u0197")
        buf.write(u"\u01a5\u01a5\u01aa\u01aa\u01b5\u01b8\u01bb\u01bb\u01cb")
        buf.write(u"\u01cb\u01d9\u01d9\u01e0\u01e0\u01e8\u01e9\u01ed\u01ed")
        buf.write(u"\u01f1\u01f2\u01f6\u01f6\u01f8\u01f9\u0205\u0206\u020d")
        buf.write(u"\u020f\u0211\u0211\u0234\u0234\4\2\u00d2\u00d2\u01f5")
        buf.write(u"\u01f5\3\2\u022f\u0232\2\u1bc8\2\u04aa\3\2\2\2\4\u04ae")
        buf.write(u"\3\2\2\2\6\u04b2\3\2\2\2\b\u04c5\3\2\2\2\n\u04ca\3\2")
        buf.write(u"\2\2\f\u04da\3\2\2\2\16\u04dc\3\2\2\2\20\u04ee\3\2\2")
        buf.write(u"\2\22\u04f3\3\2\2\2\24\u04f8\3\2\2\2\26\u04fd\3\2\2\2")
        buf.write(u"\30\u0502\3\2\2\2\32\u0507\3\2\2\2\34\u0512\3\2\2\2\36")
        buf.write(u"\u051e\3\2\2\2 \u0520\3\2\2\2\"\u052c\3\2\2\2$\u052e")
        buf.write(u"\3\2\2\2&\u053c\3\2\2\2(\u054e\3\2\2\2*\u0550\3\2\2\2")
        buf.write(u",\u055b\3\2\2\2.\u056a\3\2\2\2\60\u057f\3\2\2\2\62\u0588")
        buf.write(u"\3\2\2\2\64\u0590\3\2\2\2\66\u0596\3\2\2\28\u059a\3\2")
        buf.write(u"\2\2:\u05b0\3\2\2\2<\u05b4\3\2\2\2>\u05b6\3\2\2\2@\u05cc")
        buf.write(u"\3\2\2\2B\u05d5\3\2\2\2D\u05d8\3\2\2\2F\u05de\3\2\2\2")
        buf.write(u"H\u05ec\3\2\2\2J\u05f3\3\2\2\2L\u0603\3\2\2\2N\u060a")
        buf.write(u"\3\2\2\2P\u060e\3\2\2\2R\u0610\3\2\2\2T\u0620\3\2\2\2")
        buf.write(u"V\u0626\3\2\2\2X\u0637\3\2\2\2Z\u064e\3\2\2\2\\\u0674")
        buf.write(u"\3\2\2\2^\u0676\3\2\2\2`\u067c\3\2\2\2b\u068a\3\2\2\2")
        buf.write(u"d\u069e\3\2\2\2f\u06aa\3\2\2\2h\u06b5\3\2\2\2j\u06b8")
        buf.write(u"\3\2\2\2l\u06c5\3\2\2\2n\u06cc\3\2\2\2p\u06dd\3\2\2\2")
        buf.write(u"r\u06df\3\2\2\2t\u06f3\3\2\2\2v\u0702\3\2\2\2x\u070d")
        buf.write(u"\3\2\2\2z\u0718\3\2\2\2|\u0722\3\2\2\2~\u072b\3\2\2\2")
        buf.write(u"\u0080\u073c\3\2\2\2\u0082\u074e\3\2\2\2\u0084\u0755")
        buf.write(u"\3\2\2\2\u0086\u075f\3\2\2\2\u0088\u0768\3\2\2\2\u008a")
        buf.write(u"\u077c\3\2\2\2\u008c\u077e\3\2\2\2\u008e\u078c\3\2\2")
        buf.write(u"\2\u0090\u0790\3\2\2\2\u0092\u0799\3\2\2\2\u0094\u079d")
        buf.write(u"\3\2\2\2\u0096\u07ac\3\2\2\2\u0098\u07b9\3\2\2\2\u009a")
        buf.write(u"\u07be\3\2\2\2\u009c\u07c5\3\2\2\2\u009e\u07d7\3\2\2")
        buf.write(u"\2\u00a0\u07d9\3\2\2\2\u00a2\u07e2\3\2\2\2\u00a4\u07ff")
        buf.write(u"\3\2\2\2\u00a6\u0802\3\2\2\2\u00a8\u0807\3\2\2\2\u00aa")
        buf.write(u"\u080b\3\2\2\2\u00ac\u0816\3\2\2\2\u00ae\u0819\3\2\2")
        buf.write(u"\2\u00b0\u0820\3\2\2\2\u00b2\u0827\3\2\2\2\u00b4\u0844")
        buf.write(u"\3\2\2\2\u00b6\u084b\3\2\2\2\u00b8\u084e\3\2\2\2\u00ba")
        buf.write(u"\u0862\3\2\2\2\u00bc\u0869\3\2\2\2\u00be\u0871\3\2\2")
        buf.write(u"\2\u00c0\u0881\3\2\2\2\u00c2\u0895\3\2\2\2\u00c4\u0898")
        buf.write(u"\3\2\2\2\u00c6\u08a3\3\2\2\2\u00c8\u08ae\3\2\2\2\u00ca")
        buf.write(u"\u08b8\3\2\2\2\u00cc\u08c1\3\2\2\2\u00ce\u08c3\3\2\2")
        buf.write(u"\2\u00d0\u08d1\3\2\2\2\u00d2\u08d8\3\2\2\2\u00d4\u08e1")
        buf.write(u"\3\2\2\2\u00d6\u08e6\3\2\2\2\u00d8\u08ef\3\2\2\2\u00da")
        buf.write(u"\u08f8\3\2\2\2\u00dc\u0905\3\2\2\2\u00de\u0907\3\2\2")
        buf.write(u"\2\u00e0\u0923\3\2\2\2\u00e2\u0936\3\2\2\2\u00e4\u094d")
        buf.write(u"\3\2\2\2\u00e6\u0954\3\2\2\2\u00e8\u0962\3\2\2\2\u00ea")
        buf.write(u"\u0969\3\2\2\2\u00ec\u0971\3\2\2\2\u00ee\u0979\3\2\2")
        buf.write(u"\2\u00f0\u0980\3\2\2\2\u00f2\u0987\3\2\2\2\u00f4\u098f")
        buf.write(u"\3\2\2\2\u00f6\u0998\3\2\2\2\u00f8\u09a1\3\2\2\2\u00fa")
        buf.write(u"\u09aa\3\2\2\2\u00fc\u09b3\3\2\2\2\u00fe\u09bb\3\2\2")
        buf.write(u"\2\u0100\u09c2\3\2\2\2\u0102\u09d1\3\2\2\2\u0104\u09da")
        buf.write(u"\3\2\2\2\u0106\u0a04\3\2\2\2\u0108\u0a07\3\2\2\2\u010a")
        buf.write(u"\u0a09\3\2\2\2\u010c\u0a0b\3\2\2\2\u010e\u0a0e\3\2\2")
        buf.write(u"\2\u0110\u0a10\3\2\2\2\u0112\u0a12\3\2\2\2\u0114\u0a14")
        buf.write(u"\3\2\2\2\u0116\u0a16\3\2\2\2\u0118\u0a1e\3\2\2\2\u011a")
        buf.write(u"\u0a2c\3\2\2\2\u011c\u0a3a\3\2\2\2\u011e\u0a42\3\2\2")
        buf.write(u"\2\u0120\u0a4a\3\2\2\2\u0122\u0a50\3\2\2\2\u0124\u0a56")
        buf.write(u"\3\2\2\2\u0126\u0a5c\3\2\2\2\u0128\u0a64\3\2\2\2\u012a")
        buf.write(u"\u0a67\3\2\2\2\u012c\u0a6a\3\2\2\2\u012e\u0a70\3\2\2")
        buf.write(u"\2\u0130\u0a76\3\2\2\2\u0132\u0a7e\3\2\2\2\u0134\u0a87")
        buf.write(u"\3\2\2\2\u0136\u0a89\3\2\2\2\u0138\u0a8b\3\2\2\2\u013a")
        buf.write(u"\u0a8d\3\2\2\2\u013c\u0a9b\3\2\2\2\u013e\u0aa0\3\2\2")
        buf.write(u"\2\u0140\u0aa2\3\2\2\2\u0142\u0aa4\3\2\2\2\u0144\u0aad")
        buf.write(u"\3\2\2\2\u0146\u0ab3\3\2\2\2\u0148\u0aca\3\2\2\2\u014a")
        buf.write(u"\u0ace\3\2\2\2\u014c\u0add\3\2\2\2\u014e\u0ae0\3\2\2")
        buf.write(u"\2\u0150\u0ae4\3\2\2\2\u0152\u0ae8\3\2\2\2\u0154\u0aee")
        buf.write(u"\3\2\2\2\u0156\u0af0\3\2\2\2\u0158\u0afe\3\2\2\2\u015a")
        buf.write(u"\u0b08\3\2\2\2\u015c\u0b21\3\2\2\2\u015e\u0b27\3\2\2")
        buf.write(u"\2\u0160\u0b30\3\2\2\2\u0162\u0b34\3\2\2\2\u0164\u0b39")
        buf.write(u"\3\2\2\2\u0166\u0b45\3\2\2\2\u0168\u0b4d\3\2\2\2\u016a")
        buf.write(u"\u0b50\3\2\2\2\u016c\u0b5a\3\2\2\2\u016e\u0b5d\3\2\2")
        buf.write(u"\2\u0170\u0b60\3\2\2\2\u0172\u0b66\3\2\2\2\u0174\u0b6e")
        buf.write(u"\3\2\2\2\u0176\u0b77\3\2\2\2\u0178\u0b7d\3\2\2\2\u017a")
        buf.write(u"\u0b95\3\2\2\2\u017c\u0ba5\3\2\2\2\u017e\u0baa\3\2\2")
        buf.write(u"\2\u0180\u0baf\3\2\2\2\u0182\u0bb5\3\2\2\2\u0184\u0bba")
        buf.write(u"\3\2\2\2\u0186\u0bc4\3\2\2\2\u0188\u0bcb\3\2\2\2\u018a")
        buf.write(u"\u0bd0\3\2\2\2\u018c\u0bd2\3\2\2\2\u018e\u0bd8\3\2\2")
        buf.write(u"\2\u0190\u0be3\3\2\2\2\u0192\u0be5\3\2\2\2\u0194\u0bee")
        buf.write(u"\3\2\2\2\u0196\u0bfe\3\2\2\2\u0198\u0c06\3\2\2\2\u019a")
        buf.write(u"\u0c17\3\2\2\2\u019c\u0c1b\3\2\2\2\u019e\u0c21\3\2\2")
        buf.write(u"\2\u01a0\u0c27\3\2\2\2\u01a2\u0c2c\3\2\2\2\u01a4\u0c3a")
        buf.write(u"\3\2\2\2\u01a6\u0c3d\3\2\2\2\u01a8\u0c40\3\2\2\2\u01aa")
        buf.write(u"\u0c48\3\2\2\2\u01ac\u0c4a\3\2\2\2\u01ae\u0c52\3\2\2")
        buf.write(u"\2\u01b0\u0c55\3\2\2\2\u01b2\u0c5a\3\2\2\2\u01b4\u0c62")
        buf.write(u"\3\2\2\2\u01b6\u0c64\3\2\2\2\u01b8\u0c85\3\2\2\2\u01ba")
        buf.write(u"\u0c8a\3\2\2\2\u01bc\u0c90\3\2\2\2\u01be\u0c97\3\2\2")
        buf.write(u"\2\u01c0\u0c99\3\2\2\2\u01c2\u0c9f\3\2\2\2\u01c4\u0ca2")
        buf.write(u"\3\2\2\2\u01c6\u0caa\3\2\2\2\u01c8\u0cae\3\2\2\2\u01ca")
        buf.write(u"\u0cb0\3\2\2\2\u01cc\u0cb4\3\2\2\2\u01ce\u0cd7\3\2\2")
        buf.write(u"\2\u01d0\u0cda\3\2\2\2\u01d2\u0ce6\3\2\2\2\u01d4\u0cf4")
        buf.write(u"\3\2\2\2\u01d6\u0d08\3\2\2\2\u01d8\u0d0a\3\2\2\2\u01da")
        buf.write(u"\u0d0f\3\2\2\2\u01dc\u0d16\3\2\2\2\u01de\u0d19\3\2\2")
        buf.write(u"\2\u01e0\u0d1c\3\2\2\2\u01e2\u0d26\3\2\2\2\u01e4\u0d2f")
        buf.write(u"\3\2\2\2\u01e6\u0d34\3\2\2\2\u01e8\u0d38\3\2\2\2\u01ea")
        buf.write(u"\u0d49\3\2\2\2\u01ec\u0d51\3\2\2\2\u01ee\u0d77\3\2\2")
        buf.write(u"\2\u01f0\u0d84\3\2\2\2\u01f2\u0d90\3\2\2\2\u01f4\u0d96")
        buf.write(u"\3\2\2\2\u01f6\u0d98\3\2\2\2\u01f8\u0d9c\3\2\2\2\u01fa")
        buf.write(u"\u0da1\3\2\2\2\u01fc\u0daf\3\2\2\2\u01fe\u0db5\3\2\2")
        buf.write(u"\2\u0200\u0dba\3\2\2\2\u0202\u0dc0\3\2\2\2\u0204\u0dcf")
        buf.write(u"\3\2\2\2\u0206\u0dd2\3\2\2\2\u0208\u0ddd\3\2\2\2\u020a")
        buf.write(u"\u0ddf\3\2\2\2\u020c\u0dea\3\2\2\2\u020e\u0df0\3\2\2")
        buf.write(u"\2\u0210\u0df5\3\2\2\2\u0212\u0dfc\3\2\2\2\u0214\u0e03")
        buf.write(u"\3\2\2\2\u0216\u0e0c\3\2\2\2\u0218\u0e1c\3\2\2\2\u021a")
        buf.write(u"\u0e52\3\2\2\2\u021c\u0e54\3\2\2\2\u021e\u0e65\3\2\2")
        buf.write(u"\2\u0220\u0e7b\3\2\2\2\u0222\u0e7e\3\2\2\2\u0224\u0e83")
        buf.write(u"\3\2\2\2\u0226\u0e87\3\2\2\2\u0228\u0e97\3\2\2\2\u022a")
        buf.write(u"\u0ea2\3\2\2\2\u022c\u0eb4\3\2\2\2\u022e\u0ebb\3\2\2")
        buf.write(u"\2\u0230\u0ebd\3\2\2\2\u0232\u0ec3\3\2\2\2\u0234\u0ec5")
        buf.write(u"\3\2\2\2\u0236\u0ec9\3\2\2\2\u0238\u0ecf\3\2\2\2\u023a")
        buf.write(u"\u0ed5\3\2\2\2\u023c\u0edd\3\2\2\2\u023e\u0ef4\3\2\2")
        buf.write(u"\2\u0240\u0efd\3\2\2\2\u0242\u0f03\3\2\2\2\u0244\u0f16")
        buf.write(u"\3\2\2\2\u0246\u0f19\3\2\2\2\u0248\u0f27\3\2\2\2\u024a")
        buf.write(u"\u0f2e\3\2\2\2\u024c\u0f41\3\2\2\2\u024e\u0f43\3\2\2")
        buf.write(u"\2\u0250\u0f46\3\2\2\2\u0252\u0f51\3\2\2\2\u0254\u0f53")
        buf.write(u"\3\2\2\2\u0256\u0f59\3\2\2\2\u0258\u0f5f\3\2\2\2\u025a")
        buf.write(u"\u0f71\3\2\2\2\u025c\u0f7f\3\2\2\2\u025e\u0f8c\3\2\2")
        buf.write(u"\2\u0260\u0f8e\3\2\2\2\u0262\u0f94\3\2\2\2\u0264\u0f99")
        buf.write(u"\3\2\2\2\u0266\u0fa1\3\2\2\2\u0268\u0fb2\3\2\2\2\u026a")
        buf.write(u"\u0fb6\3\2\2\2\u026c\u0fb8\3\2\2\2\u026e\u0fc6\3\2\2")
        buf.write(u"\2\u0270\u0fd9\3\2\2\2\u0272\u0fea\3\2\2\2\u0274\u0fec")
        buf.write(u"\3\2\2\2\u0276\u0ff1\3\2\2\2\u0278\u0ff7\3\2\2\2\u027a")
        buf.write(u"\u0ffc\3\2\2\2\u027c\u1012\3\2\2\2\u027e\u1018\3\2\2")
        buf.write(u"\2\u0280\u1020\3\2\2\2\u0282\u1028\3\2\2\2\u0284\u102e")
        buf.write(u"\3\2\2\2\u0286\u1032\3\2\2\2\u0288\u1036\3\2\2\2\u028a")
        buf.write(u"\u1039\3\2\2\2\u028c\u104c\3\2\2\2\u028e\u1056\3\2\2")
        buf.write(u"\2\u0290\u106d\3\2\2\2\u0292\u106f\3\2\2\2\u0294\u1073")
        buf.write(u"\3\2\2\2\u0296\u107d\3\2\2\2\u0298\u108f\3\2\2\2\u029a")
        buf.write(u"\u1091\3\2\2\2\u029c\u1094\3\2\2\2\u029e\u1097\3\2\2")
        buf.write(u"\2\u02a0\u10a2\3\2\2\2\u02a2\u10a5\3\2\2\2\u02a4\u10aa")
        buf.write(u"\3\2\2\2\u02a6\u10af\3\2\2\2\u02a8\u10b3\3\2\2\2\u02aa")
        buf.write(u"\u10c1\3\2\2\2\u02ac\u10c3\3\2\2\2\u02ae\u10c7\3\2\2")
        buf.write(u"\2\u02b0\u10ca\3\2\2\2\u02b2\u10cc\3\2\2\2\u02b4\u10d4")
        buf.write(u"\3\2\2\2\u02b6\u10e3\3\2\2\2\u02b8\u10e5\3\2\2\2\u02ba")
        buf.write(u"\u10ef\3\2\2\2\u02bc\u10fb\3\2\2\2\u02be\u1106\3\2\2")
        buf.write(u"\2\u02c0\u110f\3\2\2\2\u02c2\u1115\3\2\2\2\u02c4\u111e")
        buf.write(u"\3\2\2\2\u02c6\u1124\3\2\2\2\u02c8\u112c\3\2\2\2\u02ca")
        buf.write(u"\u1132\3\2\2\2\u02cc\u1139\3\2\2\2\u02ce\u1144\3\2\2")
        buf.write(u"\2\u02d0\u1150\3\2\2\2\u02d2\u1158\3\2\2\2\u02d4\u115f")
        buf.write(u"\3\2\2\2\u02d6\u1167\3\2\2\2\u02d8\u116d\3\2\2\2\u02da")
        buf.write(u"\u1175\3\2\2\2\u02dc\u117f\3\2\2\2\u02de\u1188\3\2\2")
        buf.write(u"\2\u02e0\u118d\3\2\2\2\u02e2\u1192\3\2\2\2\u02e4\u119a")
        buf.write(u"\3\2\2\2\u02e6\u11b4\3\2\2\2\u02e8\u11c0\3\2\2\2\u02ea")
        buf.write(u"\u11d2\3\2\2\2\u02ec\u11d9\3\2\2\2\u02ee\u11e1\3\2\2")
        buf.write(u"\2\u02f0\u11e7\3\2\2\2\u02f2\u11f0\3\2\2\2\u02f4\u11f3")
        buf.write(u"\3\2\2\2\u02f6\u11f9\3\2\2\2\u02f8\u1205\3\2\2\2\u02fa")
        buf.write(u"\u120d\3\2\2\2\u02fc\u1216\3\2\2\2\u02fe\u1218\3\2\2")
        buf.write(u"\2\u0300\u1220\3\2\2\2\u0302\u1222\3\2\2\2\u0304\u1236")
        buf.write(u"\3\2\2\2\u0306\u123a\3\2\2\2\u0308\u123e\3\2\2\2\u030a")
        buf.write(u"\u1247\3\2\2\2\u030c\u1249\3\2\2\2\u030e\u124d\3\2\2")
        buf.write(u"\2\u0310\u1256\3\2\2\2\u0312\u125c\3\2\2\2\u0314\u1265")
        buf.write(u"\3\2\2\2\u0316\u126b\3\2\2\2\u0318\u1273\3\2\2\2\u031a")
        buf.write(u"\u1279\3\2\2\2\u031c\u127f\3\2\2\2\u031e\u1285\3\2\2")
        buf.write(u"\2\u0320\u128f\3\2\2\2\u0322\u129a\3\2\2\2\u0324\u129e")
        buf.write(u"\3\2\2\2\u0326\u12a3\3\2\2\2\u0328\u12af\3\2\2\2\u032a")
        buf.write(u"\u12b1\3\2\2\2\u032c\u12bb\3\2\2\2\u032e\u12c1\3\2\2")
        buf.write(u"\2\u0330\u12c4\3\2\2\2\u0332\u12ca\3\2\2\2\u0334\u12d1")
        buf.write(u"\3\2\2\2\u0336\u12d6\3\2\2\2\u0338\u12dc\3\2\2\2\u033a")
        buf.write(u"\u12fc\3\2\2\2\u033c\u1300\3\2\2\2\u033e\u1307\3\2\2")
        buf.write(u"\2\u0340\u130d\3\2\2\2\u0342\u131b\3\2\2\2\u0344\u132e")
        buf.write(u"\3\2\2\2\u0346\u1330\3\2\2\2\u0348\u133c\3\2\2\2\u034a")
        buf.write(u"\u1344\3\2\2\2\u034c\u134c\3\2\2\2\u034e\u1355\3\2\2")
        buf.write(u"\2\u0350\u135a\3\2\2\2\u0352\u1360\3\2\2\2\u0354\u1368")
        buf.write(u"\3\2\2\2\u0356\u136e\3\2\2\2\u0358\u1374\3\2\2\2\u035a")
        buf.write(u"\u1383\3\2\2\2\u035c\u1386\3\2\2\2\u035e\u1394\3\2\2")
        buf.write(u"\2\u0360\u1397\3\2\2\2\u0362\u13aa\3\2\2\2\u0364\u13ad")
        buf.write(u"\3\2\2\2\u0366\u13b9\3\2\2\2\u0368\u13c6\3\2\2\2\u036a")
        buf.write(u"\u13d4\3\2\2\2\u036c\u13d8\3\2\2\2\u036e\u13db\3\2\2")
        buf.write(u"\2\u0370\u13e2\3\2\2\2\u0372\u13e6\3\2\2\2\u0374\u13ef")
        buf.write(u"\3\2\2\2\u0376\u13f3\3\2\2\2\u0378\u13f8\3\2\2\2\u037a")
        buf.write(u"\u13fa\3\2\2\2\u037c\u1404\3\2\2\2\u037e\u140f\3\2\2")
        buf.write(u"\2\u0380\u141b\3\2\2\2\u0382\u1426\3\2\2\2\u0384\u142a")
        buf.write(u"\3\2\2\2\u0386\u142c\3\2\2\2\u0388\u144c\3\2\2\2\u038a")
        buf.write(u"\u1458\3\2\2\2\u038c\u1462\3\2\2\2\u038e\u1474\3\2\2")
        buf.write(u"\2\u0390\u147b\3\2\2\2\u0392\u1483\3\2\2\2\u0394\u148c")
        buf.write(u"\3\2\2\2\u0396\u148f\3\2\2\2\u0398\u1495\3\2\2\2\u039a")
        buf.write(u"\u149e\3\2\2\2\u039c\u14a1\3\2\2\2\u039e\u14a7\3\2\2")
        buf.write(u"\2\u03a0\u14b3\3\2\2\2\u03a2\u14c1\3\2\2\2\u03a4\u14e4")
        buf.write(u"\3\2\2\2\u03a6\u14ea\3\2\2\2\u03a8\u14f0\3\2\2\2\u03aa")
        buf.write(u"\u1503\3\2\2\2\u03ac\u1513\3\2\2\2\u03ae\u1515\3\2\2")
        buf.write(u"\2\u03b0\u151e\3\2\2\2\u03b2\u1523\3\2\2\2\u03b4\u1527")
        buf.write(u"\3\2\2\2\u03b6\u152c\3\2\2\2\u03b8\u153c\3\2\2\2\u03ba")
        buf.write(u"\u1547\3\2\2\2\u03bc\u1553\3\2\2\2\u03be\u155a\3\2\2")
        buf.write(u"\2\u03c0\u155c\3\2\2\2\u03c2\u1562\3\2\2\2\u03c4\u1564")
        buf.write(u"\3\2\2\2\u03c6\u1568\3\2\2\2\u03c8\u156c\3\2\2\2\u03ca")
        buf.write(u"\u156f\3\2\2\2\u03cc\u1581\3\2\2\2\u03ce\u158b\3\2\2")
        buf.write(u"\2\u03d0\u1596\3\2\2\2\u03d2\u159e\3\2\2\2\u03d4\u15a4")
        buf.write(u"\3\2\2\2\u03d6\u15ab\3\2\2\2\u03d8\u15b1\3\2\2\2\u03da")
        buf.write(u"\u15b8\3\2\2\2\u03dc\u15bd\3\2\2\2\u03de\u15c3\3\2\2")
        buf.write(u"\2\u03e0\u15c9\3\2\2\2\u03e2\u15df\3\2\2\2\u03e4\u15e2")
        buf.write(u"\3\2\2\2\u03e6\u15f9\3\2\2\2\u03e8\u15fb\3\2\2\2\u03ea")
        buf.write(u"\u1612\3\2\2\2\u03ec\u1617\3\2\2\2\u03ee\u1620\3\2\2")
        buf.write(u"\2\u03f0\u1624\3\2\2\2\u03f2\u1629\3\2\2\2\u03f4\u162c")
        buf.write(u"\3\2\2\2\u03f6\u1635\3\2\2\2\u03f8\u1641\3\2\2\2\u03fa")
        buf.write(u"\u164a\3\2\2\2\u03fc\u1655\3\2\2\2\u03fe\u165f\3\2\2")
        buf.write(u"\2\u0400\u166b\3\2\2\2\u0402\u1674\3\2\2\2\u0404\u1680")
        buf.write(u"\3\2\2\2\u0406\u168a\3\2\2\2\u0408\u1697\3\2\2\2\u040a")
        buf.write(u"\u16a0\3\2\2\2\u040c\u16ab\3\2\2\2\u040e\u16b2\3\2\2")
        buf.write(u"\2\u0410\u16b5\3\2\2\2\u0412\u16bc\3\2\2\2\u0414\u16c0")
        buf.write(u"\3\2\2\2\u0416\u16c9\3\2\2\2\u0418\u16d2\3\2\2\2\u041a")
        buf.write(u"\u16d4\3\2\2\2\u041c\u16db\3\2\2\2\u041e\u16e5\3\2\2")
        buf.write(u"\2\u0420\u16f0\3\2\2\2\u0422\u16f2\3\2\2\2\u0424\u1702")
        buf.write(u"\3\2\2\2\u0426\u171a\3\2\2\2\u0428\u172a\3\2\2\2\u042a")
        buf.write(u"\u172c\3\2\2\2\u042c\u1735\3\2\2\2\u042e\u1739\3\2\2")
        buf.write(u"\2\u0430\u173f\3\2\2\2\u0432\u1747\3\2\2\2\u0434\u1775")
        buf.write(u"\3\2\2\2\u0436\u1786\3\2\2\2\u0438\u1788\3\2\2\2\u043a")
        buf.write(u"\u179e\3\2\2\2\u043c\u17b5\3\2\2\2\u043e\u17bd\3\2\2")
        buf.write(u"\2\u0440\u17bf\3\2\2\2\u0442\u17cc\3\2\2\2\u0444\u17d9")
        buf.write(u"\3\2\2\2\u0446\u17df\3\2\2\2\u0448\u17e3\3\2\2\2\u044a")
        buf.write(u"\u17f0\3\2\2\2\u044c\u17f3\3\2\2\2\u044e\u17f6\3\2\2")
        buf.write(u"\2\u0450\u17fb\3\2\2\2\u0452\u17fd\3\2\2\2\u0454\u1800")
        buf.write(u"\3\2\2\2\u0456\u1803\3\2\2\2\u0458\u1806\3\2\2\2\u045a")
        buf.write(u"\u1809\3\2\2\2\u045c\u180c\3\2\2\2\u045e\u180f\3\2\2")
        buf.write(u"\2\u0460\u1811\3\2\2\2\u0462\u1813\3\2\2\2\u0464\u1815")
        buf.write(u"\3\2\2\2\u0466\u1817\3\2\2\2\u0468\u1819\3\2\2\2\u046a")
        buf.write(u"\u181b\3\2\2\2\u046c\u181d\3\2\2\2\u046e\u1822\3\2\2")
        buf.write(u"\2\u0470\u1824\3\2\2\2\u0472\u1826\3\2\2\2\u0474\u182e")
        buf.write(u"\3\2\2\2\u0476\u1830\3\2\2\2\u0478\u1832\3\2\2\2\u047a")
        buf.write(u"\u1834\3\2\2\2\u047c\u1836\3\2\2\2\u047e\u1838\3\2\2")
        buf.write(u"\2\u0480\u183c\3\2\2\2\u0482\u1843\3\2\2\2\u0484\u1847")
        buf.write(u"\3\2\2\2\u0486\u1849\3\2\2\2\u0488\u184b\3\2\2\2\u048a")
        buf.write(u"\u184d\3\2\2\2\u048c\u184f\3\2\2\2\u048e\u1853\3\2\2")
        buf.write(u"\2\u0490\u1855\3\2\2\2\u0492\u1857\3\2\2\2\u0494\u1859")
        buf.write(u"\3\2\2\2\u0496\u185b\3\2\2\2\u0498\u1863\3\2\2\2\u049a")
        buf.write(u"\u1865\3\2\2\2\u049c\u186a\3\2\2\2\u049e\u186c\3\2\2")
        buf.write(u"\2\u04a0\u186e\3\2\2\2\u04a2\u1876\3\2\2\2\u04a4\u188d")
        buf.write(u"\3\2\2\2\u04a6\u18b0\3\2\2\2\u04a8\u18b3\3\2\2\2\u04aa")
        buf.write(u"\u04ab\5\4\3\2\u04ab\u04ac\7\2\2\3\u04ac\3\3\2\2\2\u04ad")
        buf.write(u"\u04af\5\6\4\2\u04ae\u04ad\3\2\2\2\u04af\u04b0\3\2\2")
        buf.write(u"\2\u04b0\u04ae\3\2\2\2\u04b0\u04b1\3\2\2\2\u04b1\5\3")
        buf.write(u"\2\2\2\u04b2\u04b4\5\n\6\2\u04b3\u04b5\5\34\17\2\u04b4")
        buf.write(u"\u04b3\3\2\2\2\u04b4\u04b5\3\2\2\2\u04b5\u04b7\3\2\2")
        buf.write(u"\2\u04b6\u04b8\5\u009cO\2\u04b7\u04b6\3\2\2\2\u04b7\u04b8")
        buf.write(u"\3\2\2\2\u04b8\u04ba\3\2\2\2\u04b9\u04bb\5\u01fa\u00fe")
        buf.write(u"\2\u04ba\u04b9\3\2\2\2\u04ba\u04bb\3\2\2\2\u04bb\u04bf")
        buf.write(u"\3\2\2\2\u04bc\u04be\5\6\4\2\u04bd\u04bc\3\2\2\2\u04be")
        buf.write(u"\u04c1\3\2\2\2\u04bf\u04bd\3\2\2\2\u04bf\u04c0\3\2\2")
        buf.write(u"\2\u04c0\u04c3\3\2\2\2\u04c1\u04bf\3\2\2\2\u04c2\u04c4")
        buf.write(u"\5\b\5\2\u04c3\u04c2\3\2\2\2\u04c3\u04c4\3\2\2\2\u04c4")
        buf.write(u"\7\3\2\2\2\u04c5\u04c6\7\u00a3\2\2\u04c6\u04c7\7\u016f")
        buf.write(u"\2\2\u04c7\u04c8\5\u0484\u0243\2\u04c8\u04c9\7\u021d")
        buf.write(u"\2\2\u04c9\t\3\2\2\2\u04ca\u04cb\t\2\2\2\u04cb\u04cc")
        buf.write(u"\7\u0096\2\2\u04cc\u04cd\7\u021d\2\2\u04cd\u04d1\5\16")
        buf.write(u"\b\2\u04ce\u04d0\5\f\7\2\u04cf\u04ce\3\2\2\2\u04d0\u04d3")
        buf.write(u"\3\2\2\2\u04d1\u04cf\3\2\2\2\u04d1\u04d2\3\2\2\2\u04d2")
        buf.write(u"\13\3\2\2\2\u04d3\u04d1\3\2\2\2\u04d4\u04db\5\20\t\2")
        buf.write(u"\u04d5\u04db\5\22\n\2\u04d6\u04db\5\24\13\2\u04d7\u04db")
        buf.write(u"\5\26\f\2\u04d8\u04db\5\30\r\2\u04d9\u04db\5\32\16\2")
        buf.write(u"\u04da\u04d4\3\2\2\2\u04da\u04d5\3\2\2\2\u04da\u04d6")
        buf.write(u"\3\2\2\2\u04da\u04d7\3\2\2\2\u04da\u04d8\3\2\2\2\u04da")
        buf.write(u"\u04d9\3\2\2\2\u04db\r\3\2\2\2\u04dc\u04dd\7\u0170\2")
        buf.write(u"\2\u04dd\u04de\7\u021d\2\2\u04de\u04e6\5\u0484\u0243")
        buf.write(u"\2\u04df\u04e1\7\u0104\2\2\u04e0\u04df\3\2\2\2\u04e0")
        buf.write(u"\u04e1\3\2\2\2\u04e1\u04e2\3\2\2\2\u04e2\u04e4\t\3\2")
        buf.write(u"\2\u04e3\u04e5\7\u016f\2\2\u04e4\u04e3\3\2\2\2\u04e4")
        buf.write(u"\u04e5\3\2\2\2\u04e5\u04e7\3\2\2\2\u04e6\u04e0\3\2\2")
        buf.write(u"\2\u04e6\u04e7\3\2\2\2\u04e7\u04e9\3\2\2\2\u04e8\u04ea")
        buf.write(u"\7\u021d\2\2\u04e9\u04e8\3\2\2\2\u04e9\u04ea\3\2\2\2")
        buf.write(u"\u04ea\u04ec\3\2\2\2\u04eb\u04ed\5\u04a8\u0255\2\u04ec")
        buf.write(u"\u04eb\3\2\2\2\u04ec\u04ed\3\2\2\2\u04ed\17\3\2\2\2\u04ee")
        buf.write(u"\u04ef\7\"\2\2\u04ef\u04f1\7\u021d\2\2\u04f0\u04f2\5")
        buf.write(u"\u04a8\u0255\2\u04f1\u04f0\3\2\2\2\u04f1\u04f2\3\2\2")
        buf.write(u"\2\u04f2\21\3\2\2\2\u04f3\u04f4\7\u00ff\2\2\u04f4\u04f6")
        buf.write(u"\7\u021d\2\2\u04f5\u04f7\5\u04a8\u0255\2\u04f6\u04f5")
        buf.write(u"\3\2\2\2\u04f6\u04f7\3\2\2\2\u04f7\23\3\2\2\2\u04f8\u04f9")
        buf.write(u"\7u\2\2\u04f9\u04fb\7\u021d\2\2\u04fa\u04fc\5\u04a8\u0255")
        buf.write(u"\2\u04fb\u04fa\3\2\2\2\u04fb\u04fc\3\2\2\2\u04fc\25\3")
        buf.write(u"\2\2\2\u04fd\u04fe\7t\2\2\u04fe\u0500\7\u021d\2\2\u04ff")
        buf.write(u"\u0501\5\u04a8\u0255\2\u0500\u04ff\3\2\2\2\u0500\u0501")
        buf.write(u"\3\2\2\2\u0501\27\3\2\2\2\u0502\u0503\7\u01ab\2\2\u0503")
        buf.write(u"\u0505\7\u021d\2\2\u0504\u0506\5\u04a8\u0255\2\u0505")
        buf.write(u"\u0504\3\2\2\2\u0505\u0506\3\2\2\2\u0506\31\3\2\2\2\u0507")
        buf.write(u"\u0508\7\u018b\2\2\u0508\u050a\7\u021d\2\2\u0509\u050b")
        buf.write(u"\5\u04a8\u0255\2\u050a\u0509\3\2\2\2\u050a\u050b\3\2")
        buf.write(u"\2\2\u050b\u050d\3\2\2\2\u050c\u050e\7\u00b1\2\2\u050d")
        buf.write(u"\u050c\3\2\2\2\u050d\u050e\3\2\2\2\u050e\u0510\3\2\2")
        buf.write(u"\2\u050f\u0511\7\u021d\2\2\u0510\u050f\3\2\2\2\u0510")
        buf.write(u"\u0511\3\2\2\2\u0511\33\3\2\2\2\u0512\u0513\7\u00be\2")
        buf.write(u"\2\u0513\u0514\7\u0096\2\2\u0514\u0518\7\u021d\2\2\u0515")
        buf.write(u"\u0517\5\36\20\2\u0516\u0515\3\2\2\2\u0517\u051a\3\2")
        buf.write(u"\2\2\u0518\u0516\3\2\2\2\u0518\u0519\3\2\2\2\u0519\35")
        buf.write(u"\3\2\2\2\u051a\u0518\3\2\2\2\u051b\u051f\5 \21\2\u051c")
        buf.write(u"\u051f\58\35\2\u051d\u051f\5f\64\2\u051e\u051b\3\2\2")
        buf.write(u"\2\u051e\u051c\3\2\2\2\u051e\u051d\3\2\2\2\u051f\37\3")
        buf.write(u"\2\2\2\u0520\u0521\7a\2\2\u0521\u0522\7\u01a9\2\2\u0522")
        buf.write(u"\u0526\7\u021d\2\2\u0523\u0525\5\"\22\2\u0524\u0523\3")
        buf.write(u"\2\2\2\u0525\u0528\3\2\2\2\u0526\u0524\3\2\2\2\u0526")
        buf.write(u"\u0527\3\2\2\2\u0527!\3\2\2\2\u0528\u0526\3\2\2\2\u0529")
        buf.write(u"\u052d\5$\23\2\u052a\u052d\5&\24\2\u052b\u052d\58\35")
        buf.write(u"\2\u052c\u0529\3\2\2\2\u052c\u052a\3\2\2\2\u052c\u052b")
        buf.write(u"\3\2\2\2\u052d#\3\2\2\2\u052e\u052f\7\u01c7\2\2\u052f")
        buf.write(u"\u053a\7\u021d\2\2\u0530\u0536\5\u0468\u0235\2\u0531")
        buf.write(u"\u0533\7\u0209\2\2\u0532\u0531\3\2\2\2\u0532\u0533\3")
        buf.write(u"\2\2\2\u0533\u0534\3\2\2\2\u0534\u0535\7\u0082\2\2\u0535")
        buf.write(u"\u0537\7\u012f\2\2\u0536\u0532\3\2\2\2\u0536\u0537\3")
        buf.write(u"\2\2\2\u0537\u0538\3\2\2\2\u0538\u0539\7\u021d\2\2\u0539")
        buf.write(u"\u053b\3\2\2\2\u053a\u0530\3\2\2\2\u053a\u053b\3\2\2")
        buf.write(u"\2\u053b%\3\2\2\2\u053c\u053d\7\u0146\2\2\u053d\u0547")
        buf.write(u"\7\u021d\2\2\u053e\u0542\5\u0468\u0235\2\u053f\u0541")
        buf.write(u"\5(\25\2\u0540\u053f\3\2\2\2\u0541\u0544\3\2\2\2\u0542")
        buf.write(u"\u0540\3\2\2\2\u0542\u0543\3\2\2\2\u0543\u0545\3\2\2")
        buf.write(u"\2\u0544\u0542\3\2\2\2\u0545\u0546\7\u021d\2\2\u0546")
        buf.write(u"\u0548\3\2\2\2\u0547\u053e\3\2\2\2\u0547\u0548\3\2\2")
        buf.write(u"\2\u0548\'\3\2\2\2\u0549\u054f\5*\26\2\u054a\u054f\5")
        buf.write(u",\27\2\u054b\u054f\5.\30\2\u054c\u054f\5\64\33\2\u054d")
        buf.write(u"\u054f\5\66\34\2\u054e\u0549\3\2\2\2\u054e\u054a\3\2")
        buf.write(u"\2\2\u054e\u054b\3\2\2\2\u054e\u054c\3\2\2\2\u054e\u054d")
        buf.write(u"\3\2\2\2\u054f)\3\2\2\2\u0550\u0552\7\u012b\2\2\u0551")
        buf.write(u"\u0553\7\u01bd\2\2\u0552\u0551\3\2\2\2\u0552\u0553\3")
        buf.write(u"\2\2\2\u0553\u0556\3\2\2\2\u0554\u0557\5\u049e\u0250")
        buf.write(u"\2\u0555\u0557\5\u0496\u024c\2\u0556\u0554\3\2\2\2\u0556")
        buf.write(u"\u0555\3\2\2\2\u0557\u0559\3\2\2\2\u0558\u055a\t\4\2")
        buf.write(u"\2\u0559\u0558\3\2\2\2\u0559\u055a\3\2\2\2\u055a+\3\2")
        buf.write(u"\2\2\u055b\u055d\7\u0092\2\2\u055c\u055e\7\u01bd\2\2")
        buf.write(u"\u055d\u055c\3\2\2\2\u055d\u055e\3\2\2\2\u055e\u0560")
        buf.write(u"\3\2\2\2\u055f\u0561\7\u0104\2\2\u0560\u055f\3\2\2\2")
        buf.write(u"\u0560\u0561\3\2\2\2\u0561\u0564\3\2\2\2\u0562\u0565")
        buf.write(u"\5\u049e\u0250\2\u0563\u0565\5\u0496\u024c\2\u0564\u0562")
        buf.write(u"\3\2\2\2\u0564\u0563\3\2\2\2\u0565\u0567\3\2\2\2\u0566")
        buf.write(u"\u0568\t\5\2\2\u0567\u0566\3\2\2\2\u0567\u0568\3\2\2")
        buf.write(u"\2\u0568-\3\2\2\2\u0569\u056b\7\u016f\2\2\u056a\u0569")
        buf.write(u"\3\2\2\2\u056a\u056b\3\2\2\2\u056b\u056d\3\2\2\2\u056c")
        buf.write(u"\u056e\7L\2\2\u056d\u056c\3\2\2\2\u056d\u056e\3\2\2\2")
        buf.write(u"\u056e\u056f\3\2\2\2\u056f\u0571\7\u01b2\2\2\u0570\u0572")
        buf.write(u"\7\u0104\2\2\u0571\u0570\3\2\2\2\u0571\u0572\3\2\2\2")
        buf.write(u"\u0572\u0574\3\2\2\2\u0573\u0575\5\u045e\u0230\2\u0574")
        buf.write(u"\u0573\3\2\2\2\u0575\u0576\3\2\2\2\u0576\u0574\3\2\2")
        buf.write(u"\2\u0576\u0577\3\2\2\2\u0577\u0579\3\2\2\2\u0578\u057a")
        buf.write(u"\5\60\31\2\u0579\u0578\3\2\2\2\u0579\u057a\3\2\2\2\u057a")
        buf.write(u"\u057c\3\2\2\2\u057b\u057d\5\62\32\2\u057c\u057b\3\2")
        buf.write(u"\2\2\u057c\u057d\3\2\2\2\u057d/\3\2\2\2\u057e\u0580\7")
        buf.write(u"\u00da\2\2\u057f\u057e\3\2\2\2\u057f\u0580\3\2\2\2\u0580")
        buf.write(u"\u0581\3\2\2\2\u0581\u0583\7\20\2\2\u0582\u0584\7\u0104")
        buf.write(u"\2\2\u0583\u0582\3\2\2\2\u0583\u0584\3\2\2\2\u0584\u0585")
        buf.write(u"\3\2\2\2\u0585\u0586\5\u045e\u0230\2\u0586\61\3\2\2\2")
        buf.write(u"\u0587\u0589\7\u00da\2\2\u0588\u0587\3\2\2\2\u0588\u0589")
        buf.write(u"\3\2\2\2\u0589\u058a\3\2\2\2\u058a\u058c\7\u0136\2\2")
        buf.write(u"\u058b\u058d\7\u0104\2\2\u058c\u058b\3\2\2\2\u058c\u058d")
        buf.write(u"\3\2\2\2\u058d\u058e\3\2\2\2\u058e\u058f\5\u045e\u0230")
        buf.write(u"\2\u058f\63\3\2\2\2\u0590\u0592\7\u01ad\2\2\u0591\u0593")
        buf.write(u"\7\u0104\2\2\u0592\u0591\3\2\2\2\u0592\u0593\3\2\2\2")
        buf.write(u"\u0593\u0594\3\2\2\2\u0594\u0595\5\u049e\u0250\2\u0595")
        buf.write(u"\65\3\2\2\2\u0596\u0597\7A\2\2\u0597\u0598\7\u01b4\2")
        buf.write(u"\2\u0598\u0599\7\u021d\2\2\u0599\67\3\2\2\2\u059a\u059b")
        buf.write(u"\7\u01ca\2\2\u059b\u05a3\7\u021d\2\2\u059c\u059e\5:\36")
        buf.write(u"\2\u059d\u059c\3\2\2\2\u059e\u059f\3\2\2\2\u059f\u059d")
        buf.write(u"\3\2\2\2\u059f\u05a0\3\2\2\2\u05a0\u05a1\3\2\2\2\u05a1")
        buf.write(u"\u05a2\7\u021d\2\2\u05a2\u05a4\3\2\2\2\u05a3\u059d\3")
        buf.write(u"\2\2\2\u05a3\u05a4\3\2\2\2\u05a49\3\2\2\2\u05a5\u05b1")
        buf.write(u"\5H%\2\u05a6\u05b1\5^\60\2\u05a7\u05b1\5<\37\2\u05a8")
        buf.write(u"\u05b1\5J&\2\u05a9\u05b1\5R*\2\u05aa\u05b1\5T+\2\u05ab")
        buf.write(u"\u05b1\5b\62\2\u05ac\u05b1\5Z.\2\u05ad\u05b1\5X-\2\u05ae")
        buf.write(u"\u05b1\5V,\2\u05af\u05b1\5`\61\2\u05b0\u05a5\3\2\2\2")
        buf.write(u"\u05b0\u05a6\3\2\2\2\u05b0\u05a7\3\2\2\2\u05b0\u05a8")
        buf.write(u"\3\2\2\2\u05b0\u05a9\3\2\2\2\u05b0\u05aa\3\2\2\2\u05b0")
        buf.write(u"\u05ab\3\2\2\2\u05b0\u05ac\3\2\2\2\u05b0\u05ad\3\2\2")
        buf.write(u"\2\u05b0\u05ae\3\2\2\2\u05b0\u05af\3\2\2\2\u05b1;\3\2")
        buf.write(u"\2\2\u05b2\u05b5\5> \2\u05b3\u05b5\5F$\2\u05b4\u05b2")
        buf.write(u"\3\2\2\2\u05b4\u05b3\3\2\2\2\u05b5=\3\2\2\2\u05b6\u05b7")
        buf.write(u"\7\f\2\2\u05b7\u05ba\5\u045e\u0230\2\u05b8\u05b9\7\u00da")
        buf.write(u"\2\2\u05b9\u05bb\7\20\2\2\u05ba\u05b8\3\2\2\2\u05ba\u05bb")
        buf.write(u"\3\2\2\2\u05bb\u05bd\3\2\2\2\u05bc\u05be\7\u0104\2\2")
        buf.write(u"\u05bd\u05bc\3\2\2\2\u05bd\u05be\3\2\2\2\u05be\u05ca")
        buf.write(u"\3\2\2\2\u05bf\u05cb\7\u009c\2\2\u05c0\u05cb\7\34\2\2")
        buf.write(u"\u05c1\u05cb\7\u01cd\2\2\u05c2\u05cb\7\u01ce\2\2\u05c3")
        buf.write(u"\u05cb\7\u0138\2\2\u05c4\u05cb\5\u0496\u024c\2\u05c5")
        buf.write(u"\u05c7\5@!\2\u05c6\u05c5\3\2\2\2\u05c7\u05c8\3\2\2\2")
        buf.write(u"\u05c8\u05c6\3\2\2\2\u05c8\u05c9\3\2\2\2\u05c9\u05cb")
        buf.write(u"\3\2\2\2\u05ca\u05bf\3\2\2\2\u05ca\u05c0\3\2\2\2\u05ca")
        buf.write(u"\u05c1\3\2\2\2\u05ca\u05c2\3\2\2\2\u05ca\u05c3\3\2\2")
        buf.write(u"\2\u05ca\u05c4\3\2\2\2\u05ca\u05c6\3\2\2\2\u05cb?\3\2")
        buf.write(u"\2\2\u05cc\u05d3\5\u0498\u024d\2\u05cd\u05d4\5B\"\2\u05ce")
        buf.write(u"\u05d0\5D#\2\u05cf\u05ce\3\2\2\2\u05d0\u05d1\3\2\2\2")
        buf.write(u"\u05d1\u05cf\3\2\2\2\u05d1\u05d2\3\2\2\2\u05d2\u05d4")
        buf.write(u"\3\2\2\2\u05d3\u05cd\3\2\2\2\u05d3\u05cf\3\2\2\2\u05d3")
        buf.write(u"\u05d4\3\2\2\2\u05d4A\3\2\2\2\u05d5\u05d6\t\6\2\2\u05d6")
        buf.write(u"\u05d7\5\u0498\u024d\2\u05d7C\3\2\2\2\u05d8\u05da\7\22")
        buf.write(u"\2\2\u05d9\u05db\5\u0498\u024d\2\u05da\u05d9\3\2\2\2")
        buf.write(u"\u05db\u05dc\3\2\2\2\u05dc\u05da\3\2\2\2\u05dc\u05dd")
        buf.write(u"\3\2\2\2\u05ddE\3\2\2\2\u05de\u05df\7\f\2\2\u05df\u05e1")
        buf.write(u"\5\u045e\u0230\2\u05e0\u05e2\7\u00da\2\2\u05e1\u05e0")
        buf.write(u"\3\2\2\2\u05e1\u05e2\3\2\2\2\u05e2\u05e3\3\2\2\2\u05e3")
        buf.write(u"\u05e5\7\u0136\2\2\u05e4\u05e6\7\u0104\2\2\u05e5\u05e4")
        buf.write(u"\3\2\2\2\u05e5\u05e6\3\2\2\2\u05e6\u05ea\3\2\2\2\u05e7")
        buf.write(u"\u05eb\7\u0138\2\2\u05e8\u05e9\7:\2\2\u05e9\u05eb\5\u0498")
        buf.write(u"\u024d\2\u05ea\u05e7\3\2\2\2\u05ea\u05e8\3\2\2\2\u05eb")
        buf.write(u"G\3\2\2\2\u05ec\u05ed\7@\2\2\u05ed\u05ef\5\u049e\u0250")
        buf.write(u"\2\u05ee\u05f0\7\u0104\2\2\u05ef\u05ee\3\2\2\2\u05ef")
        buf.write(u"\u05f0\3\2\2\2\u05f0\u05f1\3\2\2\2\u05f1\u05f2\5\u047e")
        buf.write(u"\u0240\2\u05f2I\3\2\2\2\u05f3\u05f4\7C\2\2\u05f4\u05f9")
        buf.write(u"\5\u0466\u0234\2\u05f5\u05f7\7\u00da\2\2\u05f6\u05f5")
        buf.write(u"\3\2\2\2\u05f6\u05f7\3\2\2\2\u05f7\u05f8\3\2\2\2\u05f8")
        buf.write(u"\u05fa\t\7\2\2\u05f9\u05f6\3\2\2\2\u05f9\u05fa\3\2\2")
        buf.write(u"\2\u05fa\u05fc\3\2\2\2\u05fb\u05fd\7\u0104\2\2\u05fc")
        buf.write(u"\u05fb\3\2\2\2\u05fc\u05fd\3\2\2\2\u05fd\u05ff\3\2\2")
        buf.write(u"\2\u05fe\u0600\5L\'\2\u05ff\u05fe\3\2\2\2\u0600\u0601")
        buf.write(u"\3\2\2\2\u0601\u05ff\3\2\2\2\u0601\u0602\3\2\2\2\u0602")
        buf.write(u"K\3\2\2\2\u0603\u0606\5N(\2\u0604\u0605\t\6\2\2\u0605")
        buf.write(u"\u0607\5P)\2\u0606\u0604\3\2\2\2\u0606\u0607\3\2\2\2")
        buf.write(u"\u0607M\3\2\2\2\u0608\u060b\5\u0436\u021c\2\u0609\u060b")
        buf.write(u"\5\u0498\u024d\2\u060a\u0608\3\2\2\2\u060a\u0609\3\2")
        buf.write(u"\2\2\u060bO\3\2\2\2\u060c\u060f\5\u0436\u021c\2\u060d")
        buf.write(u"\u060f\5\u0498\u024d\2\u060e\u060c\3\2\2\2\u060e\u060d")
        buf.write(u"\3\2\2\2\u060fQ\3\2\2\2\u0610\u0612\7o\2\2\u0611\u0613")
        buf.write(u"\7\u01bc\2\2\u0612\u0611\3\2\2\2\u0612\u0613\3\2\2\2")
        buf.write(u"\u0613\u0615\3\2\2\2\u0614\u0616\7\u0104\2\2\u0615\u0614")
        buf.write(u"\3\2\2\2\u0615\u0616\3\2\2\2\u0616\u0617\3\2\2\2\u0617")
        buf.write(u"\u061e\5\u0498\u024d\2\u0618\u061a\7\u0209\2\2\u0619")
        buf.write(u"\u0618\3\2\2\2\u0619\u061a\3\2\2\2\u061a\u061b\3\2\2")
        buf.write(u"\2\u061b\u061c\7\u0161\2\2\u061c\u061d\7\u01d9\2\2\u061d")
        buf.write(u"\u061f\5\u0498\u024d\2\u061e\u0619\3\2\2\2\u061e\u061f")
        buf.write(u"\3\2\2\2\u061fS\3\2\2\2\u0620\u0622\7\u0083\2\2\u0621")
        buf.write(u"\u0623\7\u0104\2\2\u0622\u0621\3\2\2\2\u0622\u0623\3")
        buf.write(u"\2\2\2\u0623\u0624\3\2\2\2\u0624\u0625\7P\2\2\u0625U")
        buf.write(u"\3\2\2\2\u0626\u0628\7\u0085\2\2\u0627\u0629\t\b\2\2")
        buf.write(u"\u0628\u0627\3\2\2\2\u0628\u0629\3\2\2\2\u0629\u062e")
        buf.write(u"\3\2\2\2\u062a\u062c\7\u01bc\2\2\u062b\u062d\7\u0104")
        buf.write(u"\2\2\u062c\u062b\3\2\2\2\u062c\u062d\3\2\2\2\u062d\u062f")
        buf.write(u"\3\2\2\2\u062e\u062a\3\2\2\2\u062e\u062f\3\2\2\2\u062f")
        buf.write(u"\u0631\3\2\2\2\u0630\u0632\t\t\2\2\u0631\u0630\3\2\2")
        buf.write(u"\2\u0631\u0632\3\2\2\2\u0632\u0633\3\2\2\2\u0633\u0635")
        buf.write(u"\7\u01b1\2\2\u0634\u0636\7A\2\2\u0635\u0634\3\2\2\2\u0635")
        buf.write(u"\u0636\3\2\2\2\u0636W\3\2\2\2\u0637\u063c\7\u0086\2\2")
        buf.write(u"\u0638\u063a\7\u01bc\2\2\u0639\u063b\7\u0104\2\2\u063a")
        buf.write(u"\u0639\3\2\2\2\u063a\u063b\3\2\2\2\u063b\u063d\3\2\2")
        buf.write(u"\2\u063c\u0638\3\2\2\2\u063c\u063d\3\2\2\2\u063d\u063e")
        buf.write(u"\3\2\2\2\u063e\u0643\t\t\2\2\u063f\u0641\7\u01b1\2\2")
        buf.write(u"\u0640\u0642\7A\2\2\u0641\u0640\3\2\2\2\u0641\u0642\3")
        buf.write(u"\2\2\2\u0642\u0644\3\2\2\2\u0643\u063f\3\2\2\2\u0643")
        buf.write(u"\u0644\3\2\2\2\u0644Y\3\2\2\2\u0645\u0647\5\u0470\u0239")
        buf.write(u"\2\u0646\u0648\7\u0104\2\2\u0647\u0646\3\2\2\2\u0647")
        buf.write(u"\u0648\3\2\2\2\u0648\u0649\3\2\2\2\u0649\u064b\5\u047e")
        buf.write(u"\u0240\2\u064a\u064c\5\\/\2\u064b\u064a\3\2\2\2\u064b")
        buf.write(u"\u064c\3\2\2\2\u064c\u064f\3\2\2\2\u064d\u064f\5\\/\2")
        buf.write(u"\u064e\u0645\3\2\2\2\u064e\u064d\3\2\2\2\u064f[\3\2\2")
        buf.write(u"\2\u0650\u0652\7\u014c\2\2\u0651\u0653\7\u01d0\2\2\u0652")
        buf.write(u"\u0651\3\2\2\2\u0652\u0653\3\2\2\2\u0653\u0655\3\2\2")
        buf.write(u"\2\u0654\u0656\7\u0104\2\2\u0655\u0654\3\2\2\2\u0655")
        buf.write(u"\u0656\3\2\2\2\u0656\u0657\3\2\2\2\u0657\u0660\5\u041a")
        buf.write(u"\u020e\2\u0658\u065a\7\u014a\2\2\u0659\u065b\7\u01d0")
        buf.write(u"\2\2\u065a\u0659\3\2\2\2\u065a\u065b\3\2\2\2\u065b\u065d")
        buf.write(u"\3\2\2\2\u065c\u065e\7\u0104\2\2\u065d\u065c\3\2\2\2")
        buf.write(u"\u065d\u065e\3\2\2\2\u065e\u065f\3\2\2\2\u065f\u0661")
        buf.write(u"\5\u041a\u020e\2\u0660\u0658\3\2\2\2\u0660\u0661\3\2")
        buf.write(u"\2\2\u0661\u0675\3\2\2\2\u0662\u0664\7\u014a\2\2\u0663")
        buf.write(u"\u0665\7\u01d0\2\2\u0664\u0663\3\2\2\2\u0664\u0665\3")
        buf.write(u"\2\2\2\u0665\u0667\3\2\2\2\u0666\u0668\7\u0104\2\2\u0667")
        buf.write(u"\u0666\3\2\2\2\u0667\u0668\3\2\2\2\u0668\u0669\3\2\2")
        buf.write(u"\2\u0669\u0672\5\u041a\u020e\2\u066a\u066c\7\u014c\2")
        buf.write(u"\2\u066b\u066d\7\u01d0\2\2\u066c\u066b\3\2\2\2\u066c")
        buf.write(u"\u066d\3\2\2\2\u066d\u066f\3\2\2\2\u066e\u0670\7\u0104")
        buf.write(u"\2\2\u066f\u066e\3\2\2\2\u066f\u0670\3\2\2\2\u0670\u0671")
        buf.write(u"\3\2\2\2\u0671\u0673\5\u041a\u020e\2\u0672\u066a\3\2")
        buf.write(u"\2\2\u0672\u0673\3\2\2\2\u0673\u0675\3\2\2\2\u0674\u0650")
        buf.write(u"\3\2\2\2\u0674\u0662\3\2\2\2\u0675]\3\2\2\2\u0676\u0678")
        buf.write(u"\7\u0148\2\2\u0677\u0679\7\u0104\2\2\u0678\u0677\3\2")
        buf.write(u"\2\2\u0678\u0679\3\2\2\2\u0679\u067a\3\2\2\2\u067a\u067b")
        buf.write(u"\5\u047e\u0240\2\u067b_\3\2\2\2\u067c\u067e\7\u0196\2")
        buf.write(u"\2\u067d\u067f\7\u020a\2\2\u067e\u067d\3\2\2\2\u067e")
        buf.write(u"\u067f\3\2\2\2\u067f\u0681\3\2\2\2\u0680\u0682\7\u0121")
        buf.write(u"\2\2\u0681\u0680\3\2\2\2\u0681\u0682\3\2\2\2\u0682\u0684")
        buf.write(u"\3\2\2\2\u0683\u0685\7\u0104\2\2\u0684\u0683\3\2\2\2")
        buf.write(u"\u0684\u0685\3\2\2\2\u0685\u0686\3\2\2\2\u0686\u0688")
        buf.write(u"\7\u013a\2\2\u0687\u0689\79\2\2\u0688\u0687\3\2\2\2\u0688")
        buf.write(u"\u0689\3\2\2\2\u0689a\3\2\2\2\u068a\u068c\7\u01da\2\2")
        buf.write(u"\u068b\u068d\7B\2\2\u068c\u068b\3\2\2\2\u068c\u068d\3")
        buf.write(u"\2\2\2\u068d\u0692\3\2\2\2\u068e\u0690\7\u00da\2\2\u068f")
        buf.write(u"\u068e\3\2\2\2\u068f\u0690\3\2\2\2\u0690\u0691\3\2\2")
        buf.write(u"\2\u0691\u0693\t\7\2\2\u0692\u068f\3\2\2\2\u0692\u0693")
        buf.write(u"\3\2\2\2\u0693\u0695\3\2\2\2\u0694\u0696\5d\63\2\u0695")
        buf.write(u"\u0694\3\2\2\2\u0696\u0697\3\2\2\2\u0697\u0695\3\2\2")
        buf.write(u"\2\u0697\u0698\3\2\2\2\u0698\u069b\3\2\2\2\u0699\u069a")
        buf.write(u"\7\u00f5\2\2\u069a\u069c\5\u045e\u0230\2\u069b\u0699")
        buf.write(u"\3\2\2\2\u069b\u069c\3\2\2\2\u069cc\3\2\2\2\u069d\u069f")
        buf.write(u"\5\u0492\u024a\2\u069e\u069d\3\2\2\2\u069f\u06a0\3\2")
        buf.write(u"\2\2\u06a0\u069e\3\2\2\2\u06a0\u06a1\3\2\2\2\u06a1\u06a3")
        buf.write(u"\3\2\2\2\u06a2\u06a4\t\n\2\2\u06a3\u06a2\3\2\2\2\u06a3")
        buf.write(u"\u06a4\3\2\2\2\u06a4\u06a6\3\2\2\2\u06a5\u06a7\5\u049e")
        buf.write(u"\u0250\2\u06a6\u06a5\3\2\2\2\u06a7\u06a8\3\2\2\2\u06a8")
        buf.write(u"\u06a6\3\2\2\2\u06a8\u06a9\3\2\2\2\u06a9e\3\2\2\2\u06aa")
        buf.write(u"\u06ab\7\u00fd\2\2\u06ab\u06ac\7\u01a9\2\2\u06ac\u06b0")
        buf.write(u"\7\u021d\2\2\u06ad\u06af\5h\65\2\u06ae\u06ad\3\2\2\2")
        buf.write(u"\u06af\u06b2\3\2\2\2\u06b0\u06ae\3\2\2\2\u06b0\u06b1")
        buf.write(u"\3\2\2\2\u06b1g\3\2\2\2\u06b2\u06b0\3\2\2\2\u06b3\u06b6")
        buf.write(u"\5j\66\2\u06b4\u06b6\5\u0088E\2\u06b5\u06b3\3\2\2\2\u06b5")
        buf.write(u"\u06b4\3\2\2\2\u06b6i\3\2\2\2\u06b7\u06b9\7\u00d5\2\2")
        buf.write(u"\u06b8\u06b7\3\2\2\2\u06b8\u06b9\3\2\2\2\u06b9\u06c0")
        buf.write(u"\3\2\2\2\u06ba\u06bc\7\u021d\2\2\u06bb\u06ba\3\2\2\2")
        buf.write(u"\u06bb\u06bc\3\2\2\2\u06bc\u06bd\3\2\2\2\u06bd\u06bf")
        buf.write(u"\5l\67\2\u06be\u06bb\3\2\2\2\u06bf\u06c2\3\2\2\2\u06c0")
        buf.write(u"\u06be\3\2\2\2\u06c0\u06c1\3\2\2\2\u06c1\u06c3\3\2\2")
        buf.write(u"\2\u06c2\u06c0\3\2\2\2\u06c3\u06c4\7\u021d\2\2\u06c4")
        buf.write(u"k\3\2\2\2\u06c5\u06c9\5n8\2\u06c6\u06c8\5p9\2\u06c7\u06c6")
        buf.write(u"\3\2\2\2\u06c8\u06cb\3\2\2\2\u06c9\u06c7\3\2\2\2\u06c9")
        buf.write(u"\u06ca\3\2\2\2\u06cam\3\2\2\2\u06cb\u06c9\3\2\2\2\u06cc")
        buf.write(u"\u06ce\7\u01ae\2\2\u06cd\u06cf\7\u014e\2\2\u06ce\u06cd")
        buf.write(u"\3\2\2\2\u06ce\u06cf\3\2\2\2\u06cf\u06d0\3\2\2\2\u06d0")
        buf.write(u"\u06d1\5\u0472\u023a\2\u06d1o\3\2\2\2\u06d2\u06de\5r")
        buf.write(u":\2\u06d3\u06de\5t;\2\u06d4\u06de\5v<\2\u06d5\u06de\5")
        buf.write(u"x=\2\u06d6\u06de\5z>\2\u06d7\u06de\5|?\2\u06d8\u06de")
        buf.write(u"\5~@\2\u06d9\u06de\5\u0080A\2\u06da\u06de\5\u0084C\2")
        buf.write(u"\u06db\u06de\5\u0082B\2\u06dc\u06de\5\u0086D\2\u06dd")
        buf.write(u"\u06d2\3\2\2\2\u06dd\u06d3\3\2\2\2\u06dd\u06d4\3\2\2")
        buf.write(u"\2\u06dd\u06d5\3\2\2\2\u06dd\u06d6\3\2\2\2\u06dd\u06d7")
        buf.write(u"\3\2\2\2\u06dd\u06d8\3\2\2\2\u06dd\u06d9\3\2\2\2\u06dd")
        buf.write(u"\u06da\3\2\2\2\u06dd\u06db\3\2\2\2\u06dd\u06dc\3\2\2")
        buf.write(u"\2\u06deq\3\2\2\2\u06df\u06e1\7\35\2\2\u06e0\u06e2\7")
        buf.write(u"\u01f0\2\2\u06e1\u06e0\3\2\2\2\u06e1\u06e2\3\2\2\2\u06e2")
        buf.write(u"\u06f1\3\2\2\2\u06e3\u06f2\7\u0092\2\2\u06e4\u06f2\7")
        buf.write(u"\u0093\2\2\u06e5\u06f2\7\u010a\2\2\u06e6\u06f2\7\u0166")
        buf.write(u"\2\2\u06e7\u06f2\7\u0167\2\2\u06e8\u06f2\7\u0178\2\2")
        buf.write(u"\u06e9\u06f2\7\u0179\2\2\u06ea\u06f2\7\u01e1\2\2\u06eb")
        buf.write(u"\u06f2\7\u0205\2\2\u06ec\u06ee\t\13\2\2\u06ed\u06ec\3")
        buf.write(u"\2\2\2\u06ed\u06ee\3\2\2\2\u06ee\u06ef\3\2\2\2\u06ef")
        buf.write(u"\u06f2\5\u0460\u0231\2\u06f0\u06f2\5\u0498\u024d\2\u06f1")
        buf.write(u"\u06e3\3\2\2\2\u06f1\u06e4\3\2\2\2\u06f1\u06e5\3\2\2")
        buf.write(u"\2\u06f1\u06e6\3\2\2\2\u06f1\u06e7\3\2\2\2\u06f1\u06e8")
        buf.write(u"\3\2\2\2\u06f1\u06e9\3\2\2\2\u06f1\u06ea\3\2\2\2\u06f1")
        buf.write(u"\u06eb\3\2\2\2\u06f1\u06ed\3\2\2\2\u06f1\u06f0\3\2\2")
        buf.write(u"\2\u06f2s\3\2\2\2\u06f3\u06f6\7\u0196\2\2\u06f4\u06f7")
        buf.write(u"\7\u013c\2\2\u06f5\u06f7\5\u049e\u0250\2\u06f6\u06f4")
        buf.write(u"\3\2\2\2\u06f6\u06f5\3\2\2\2\u06f7\u06f9\3\2\2\2\u06f8")
        buf.write(u"\u06fa\7\24\2\2\u06f9\u06f8\3\2\2\2\u06f9\u06fa\3\2\2")
        buf.write(u"\2\u06fa\u06fc\3\2\2\2\u06fb\u06fd\t\f\2\2\u06fc\u06fb")
        buf.write(u"\3\2\2\2\u06fc\u06fd\3\2\2\2\u06fdu\3\2\2\2\u06fe\u0700")
        buf.write(u"\7\u0152\2\2\u06ff\u0701\7\u0104\2\2\u0700\u06ff\3\2")
        buf.write(u"\2\2\u0700\u0701\3\2\2\2\u0701\u0703\3\2\2\2\u0702\u06fe")
        buf.write(u"\3\2\2\2\u0702\u0703\3\2\2\2\u0703\u0709\3\2\2\2\u0704")
        buf.write(u"\u070a\7\u011d\2\2\u0705\u0706\7\u017f\2\2\u0706\u070a")
        buf.write(u"\7,\2\2\u0707\u070a\7\u017f\2\2\u0708\u070a\7,\2\2\u0709")
        buf.write(u"\u0704\3\2\2\2\u0709\u0705\3\2\2\2\u0709\u0707\3\2\2")
        buf.write(u"\2\u0709\u0708\3\2\2\2\u0709\u070a\3\2\2\2\u070a\u070b")
        buf.write(u"\3\2\2\2\u070b\u070c\t\r\2\2\u070cw\3\2\2\2\u070d\u070f")
        buf.write(u"\7\u0159\2\2\u070e\u0710\7A\2\2\u070f\u070e\3\2\2\2\u070f")
        buf.write(u"\u0710\3\2\2\2\u0710\u0712\3\2\2\2\u0711\u0713\7\u0104")
        buf.write(u"\2\2\u0712\u0711\3\2\2\2\u0712\u0713\3\2\2\2\u0713\u0716")
        buf.write(u"\3\2\2\2\u0714\u0717\5\u0446\u0224\2\u0715\u0717\5\u0498")
        buf.write(u"\u024d\2\u0716\u0714\3\2\2\2\u0716\u0715\3\2\2\2\u0717")
        buf.write(u"y\3\2\2\2\u0718\u0719\7\u017f\2\2\u0719\u071b\7\u008a")
        buf.write(u"\2\2\u071a\u071c\7\u0104\2\2\u071b\u071a\3\2\2\2\u071b")
        buf.write(u"\u071c\3\2\2\2\u071c\u0720\3\2\2\2\u071d\u0721\7\u01cd")
        buf.write(u"\2\2\u071e\u0721\7\u00f3\2\2\u071f\u0721\5\u0460\u0231")
        buf.write(u"\2\u0720\u071d\3\2\2\2\u0720\u071e\3\2\2\2\u0720\u071f")
        buf.write(u"\3\2\2\2\u0721{\3\2\2\2\u0722\u0724\7\5\2\2\u0723\u0725")
        buf.write(u"\7\u012f\2\2\u0724\u0723\3\2\2\2\u0724\u0725\3\2\2\2")
        buf.write(u"\u0725\u0727\3\2\2\2\u0726\u0728\7\u0104\2\2\u0727\u0726")
        buf.write(u"\3\2\2\2\u0727\u0728\3\2\2\2\u0728\u0729\3\2\2\2\u0729")
        buf.write(u"\u072a\t\16\2\2\u072a}\3\2\2\2\u072b\u072d\7\u017f\2")
        buf.write(u"\2\u072c\u072e\7\u0109\2\2\u072d\u072c\3\2\2\2\u072d")
        buf.write(u"\u072e\3\2\2\2\u072e\u0730\3\2\2\2\u072f\u0731\7\u0104")
        buf.write(u"\2\2\u0730\u072f\3\2\2\2\u0730\u0731\3\2\2\2\u0731\u0732")
        buf.write(u"\3\2\2\2\u0732\u0734\5\u0446\u0224\2\u0733\u0735\5\u0082")
        buf.write(u"B\2\u0734\u0733\3\2\2\2\u0734\u0735\3\2\2\2\u0735\u073a")
        buf.write(u"\3\2\2\2\u0736\u0738\7\u0209\2\2\u0737\u0736\3\2\2\2")
        buf.write(u"\u0737\u0738\3\2\2\2\u0738\u0739\3\2\2\2\u0739\u073b")
        buf.write(u"\7\u009a\2\2\u073a\u0737\3\2\2\2\u073a\u073b\3\2\2\2")
        buf.write(u"\u073b\177\3\2\2\2\u073c\u073d\7\24\2\2\u073d\u073f\7")
        buf.write(u"\u017f\2\2\u073e\u0740\7\u0109\2\2\u073f\u073e\3\2\2")
        buf.write(u"\2\u073f\u0740\3\2\2\2\u0740\u0742\3\2\2\2\u0741\u0743")
        buf.write(u"\7\u0104\2\2\u0742\u0741\3\2\2\2\u0742\u0743\3\2\2\2")
        buf.write(u"\u0743\u0744\3\2\2\2\u0744\u0746\5\u0446\u0224\2\u0745")
        buf.write(u"\u0747\5\u0082B\2\u0746\u0745\3\2\2\2\u0746\u0747\3\2")
        buf.write(u"\2\2\u0747\u074c\3\2\2\2\u0748\u074a\7\u0209\2\2\u0749")
        buf.write(u"\u0748\3\2\2\2\u0749\u074a\3\2\2\2\u074a\u074b\3\2\2")
        buf.write(u"\2\u074b\u074d\7\u009a\2\2\u074c\u0749\3\2\2\2\u074c")
        buf.write(u"\u074d\3\2\2\2\u074d\u0081\3\2\2\2\u074e\u0750\7\u015c")
        buf.write(u"\2\2\u074f\u0751\7\u0104\2\2\u0750\u074f\3\2\2\2\u0750")
        buf.write(u"\u0751\3\2\2\2\u0751\u0752\3\2\2\2\u0752\u0753\5\u046c")
        buf.write(u"\u0237\2\u0753\u0083\3\2\2\2\u0754\u0756\7\u00d4\2\2")
        buf.write(u"\u0755\u0754\3\2\2\2\u0755\u0756\3\2\2\2\u0756\u0757")
        buf.write(u"\3\2\2\2\u0757\u0759\7\u01d0\2\2\u0758\u075a\7\u0104")
        buf.write(u"\2\2\u0759\u0758\3\2\2\2\u0759\u075a\3\2\2\2\u075a\u075b")
        buf.write(u"\3\2\2\2\u075b\u075d\5\u0446\u0224\2\u075c\u075e\5\u0446")
        buf.write(u"\u0224\2\u075d\u075c\3\2\2\2\u075d\u075e\3\2\2\2\u075e")
        buf.write(u"\u0085\3\2\2\2\u075f\u0761\7\u0188\2\2\u0760\u0762\7")
        buf.write(u"\u0109\2\2\u0761\u0760\3\2\2\2\u0761\u0762\3\2\2\2\u0762")
        buf.write(u"\u0764\3\2\2\2\u0763\u0765\7\u0104\2\2\u0764\u0763\3")
        buf.write(u"\2\2\2\u0764\u0765\3\2\2\2\u0765\u0766\3\2\2\2\u0766")
        buf.write(u"\u0767\5\u0446\u0224\2\u0767\u0087\3\2\2\2\u0768\u0769")
        buf.write(u"\7\u00ef\2\2\u0769\u076d\7\u021d\2\2\u076a\u076b\5\u0472")
        buf.write(u"\u023a\2\u076b\u076c\7\u021d\2\2\u076c\u076e\3\2\2\2")
        buf.write(u"\u076d\u076a\3\2\2\2\u076d\u076e\3\2\2\2\u076e\u0776")
        buf.write(u"\3\2\2\2\u076f\u0771\5\u008aF\2\u0770\u076f\3\2\2\2\u0771")
        buf.write(u"\u0774\3\2\2\2\u0772\u0770\3\2\2\2\u0772\u0773\3\2\2")
        buf.write(u"\2\u0773\u0775\3\2\2\2\u0774\u0772\3\2\2\2\u0775\u0777")
        buf.write(u"\7\u021d\2\2\u0776\u0772\3\2\2\2\u0776\u0777\3\2\2\2")
        buf.write(u"\u0777\u0089\3\2\2\2\u0778\u077d\5\u008cG\2\u0779\u077d")
        buf.write(u"\5\u0094K\2\u077a\u077d\5\u0096L\2\u077b\u077d\5\u009a")
        buf.write(u"N\2\u077c\u0778\3\2\2\2\u077c\u0779\3\2\2\2\u077c\u077a")
        buf.write(u"\3\2\2\2\u077c\u077b\3\2\2\2\u077d\u008b\3\2\2\2\u077e")
        buf.write(u"\u0784\7\u0195\2\2\u077f\u0782\7\u014c\2\2\u0780\u0783")
        buf.write(u"\5\u0460\u0231\2\u0781\u0783\5\u0472\u023a\2\u0782\u0780")
        buf.write(u"\3\2\2\2\u0782\u0781\3\2\2\2\u0783\u0785\3\2\2\2\u0784")
        buf.write(u"\u077f\3\2\2\2\u0784\u0785\3\2\2\2\u0785\u0786\3\2\2")
        buf.write(u"\2\u0786\u078a\7\u00c9\2\2\u0787\u078b\5\u008eH\2\u0788")
        buf.write(u"\u078b\5\u0090I\2\u0789\u078b\5\u0092J\2\u078a\u0787")
        buf.write(u"\3\2\2\2\u078a\u0788\3\2\2\2\u078a\u0789\3\2\2\2\u078b")
        buf.write(u"\u008d\3\2\2\2\u078c\u078d\5\u049e\u0250\2\u078d\u078e")
        buf.write(u"\7\u0181\2\2\u078e\u008f\3\2\2\2\u078f\u0791\7\u00a3")
        buf.write(u"\2\2\u0790\u078f\3\2\2\2\u0790\u0791\3\2\2\2\u0791\u0793")
        buf.write(u"\3\2\2\2\u0792\u0794\7\u0149\2\2\u0793\u0792\3\2\2\2")
        buf.write(u"\u0793\u0794\3\2\2\2\u0794\u0795\3\2\2\2\u0795\u0796")
        buf.write(u"\t\17\2\2\u0796\u0797\7\u0149\2\2\u0797\u0798\5\u0472")
        buf.write(u"\u023a\2\u0798\u0091\3\2\2\2\u0799\u079b\5\u049e\u0250")
        buf.write(u"\2\u079a\u079c\7F\2\2\u079b\u079a\3\2\2\2\u079b\u079c")
        buf.write(u"\3\2\2\2\u079c\u0093\3\2\2\2\u079d\u079f\7\u01a4\2\2")
        buf.write(u"\u079e\u07a0\t\20\2\2\u079f\u079e\3\2\2\2\u079f\u07a0")
        buf.write(u"\3\2\2\2\u07a0\u07a2\3\2\2\2\u07a1\u07a3\7\30\2\2\u07a2")
        buf.write(u"\u07a1\3\2\2\2\u07a2\u07a3\3\2\2\2\u07a3\u07a5\3\2\2")
        buf.write(u"\2\u07a4\u07a6\7\u00da\2\2\u07a5\u07a4\3\2\2\2\u07a5")
        buf.write(u"\u07a6\3\2\2\2\u07a6\u07a8\3\2\2\2\u07a7\u07a9\5\u0472")
        buf.write(u"\u023a\2\u07a8\u07a7\3\2\2\2\u07a9\u07aa\3\2\2\2\u07aa")
        buf.write(u"\u07a8\3\2\2\2\u07aa\u07ab\3\2\2\2\u07ab\u0095\3\2\2")
        buf.write(u"\2\u07ac\u07ad\7\u0133\2\2\u07ad\u07af\7\u00d4\2\2\u07ae")
        buf.write(u"\u07b0\7\u01e1\2\2\u07af\u07ae\3\2\2\2\u07af\u07b0\3")
        buf.write(u"\2\2\2\u07b0\u07b2\3\2\2\2\u07b1\u07b3\7b\2\2\u07b2\u07b1")
        buf.write(u"\3\2\2\2\u07b2\u07b3\3\2\2\2\u07b3\u07b5\3\2\2\2\u07b4")
        buf.write(u"\u07b6\5\u0098M\2\u07b5\u07b4\3\2\2\2\u07b6\u07b7\3\2")
        buf.write(u"\2\2\u07b7\u07b5\3\2\2\2\u07b7\u07b8\3\2\2\2\u07b8\u0097")
        buf.write(u"\3\2\2\2\u07b9\u07bc\5\u0472\u023a\2\u07ba\u07bb\7\u0164")
        buf.write(u"\2\2\u07bb\u07bd\5\u049e\u0250\2\u07bc\u07ba\3\2\2\2")
        buf.write(u"\u07bc\u07bd\3\2\2\2\u07bd\u0099\3\2\2\2\u07be\u07bf")
        buf.write(u"\7Q\2\2\u07bf\u07c1\7e\2\2\u07c0\u07c2\7\u00da\2\2\u07c1")
        buf.write(u"\u07c0\3\2\2\2\u07c1\u07c2\3\2\2\2\u07c2\u07c3\3\2\2")
        buf.write(u"\2\u07c3\u07c4\5\u0472\u023a\2\u07c4\u009b\3\2\2\2\u07c5")
        buf.write(u"\u07c6\7q\2\2\u07c6\u07c7\7\u0096\2\2\u07c7\u07cb\7\u021d")
        buf.write(u"\2\2\u07c8\u07ca\5\u009eP\2\u07c9\u07c8\3\2\2\2\u07ca")
        buf.write(u"\u07cd\3\2\2\2\u07cb\u07c9\3\2\2\2\u07cb\u07cc\3\2\2")
        buf.write(u"\2\u07cc\u009d\3\2\2\2\u07cd\u07cb\3\2\2\2\u07ce\u07d8")
        buf.write(u"\5\u00a0Q\2\u07cf\u07d8\5\u00d2j\2\u07d0\u07d8\5\u00d6")
        buf.write(u"l\2\u07d1\u07d8\5\u00d8m\2\u07d2\u07d8\5\u00dan\2\u07d3")
        buf.write(u"\u07d8\5\u0100\u0081\2\u07d4\u07d8\5\u0102\u0082\2\u07d5")
        buf.write(u"\u07d8\5\u0142\u00a2\2\u07d6\u07d8\5\u018e\u00c8\2\u07d7")
        buf.write(u"\u07ce\3\2\2\2\u07d7\u07cf\3\2\2\2\u07d7\u07d0\3\2\2")
        buf.write(u"\2\u07d7\u07d1\3\2\2\2\u07d7\u07d2\3\2\2\2\u07d7\u07d3")
        buf.write(u"\3\2\2\2\u07d7\u07d4\3\2\2\2\u07d7\u07d5\3\2\2\2\u07d7")
        buf.write(u"\u07d6\3\2\2\2\u07d8\u009f\3\2\2\2\u07d9\u07da\7\u00d4")
        buf.write(u"\2\2\u07da\u07db\7\u01a9\2\2\u07db\u07df\7\u021d\2\2")
        buf.write(u"\u07dc\u07de\5\u00a2R\2\u07dd\u07dc\3\2\2\2\u07de\u07e1")
        buf.write(u"\3\2\2\2\u07df\u07dd\3\2\2\2\u07df\u07e0\3\2\2\2\u07e0")
        buf.write(u"\u00a1\3\2\2\2\u07e1\u07df\3\2\2\2\u07e2\u07e3\t\21\2")
        buf.write(u"\2\u07e3\u07ea\5\u0472\u023a\2\u07e4\u07e6\7\u021d\2")
        buf.write(u"\2\u07e5\u07e4\3\2\2\2\u07e5\u07e6\3\2\2\2\u07e6\u07e7")
        buf.write(u"\3\2\2\2\u07e7\u07e9\5\u00a4S\2\u07e8\u07e5\3\2\2\2\u07e9")
        buf.write(u"\u07ec\3\2\2\2\u07ea\u07e8\3\2\2\2\u07ea\u07eb\3\2\2")
        buf.write(u"\2\u07eb\u07ed\3\2\2\2\u07ec\u07ea\3\2\2\2\u07ed\u07f1")
        buf.write(u"\7\u021d\2\2\u07ee\u07f0\5\u01b4\u00db\2\u07ef\u07ee")
        buf.write(u"\3\2\2\2\u07f0\u07f3\3\2\2\2\u07f1\u07ef\3\2\2\2\u07f1")
        buf.write(u"\u07f2\3\2\2\2\u07f2\u00a3\3\2\2\2\u07f3\u07f1\3\2\2")
        buf.write(u"\2\u07f4\u0800\5\u00a6T\2\u07f5\u0800\5\u00a8U\2\u07f6")
        buf.write(u"\u0800\5\u00aaV\2\u07f7\u0800\5\u00aeX\2\u07f8\u0800")
        buf.write(u"\5\u00b8]\2\u07f9\u0800\5\u00ba^\2\u07fa\u0800\5\u00be")
        buf.write(u"`\2\u07fb\u0800\5\u00c0a\2\u07fc\u0800\5\u00ceh\2\u07fd")
        buf.write(u"\u0800\5\u00d0i\2\u07fe\u0800\5\u00caf\2\u07ff\u07f4")
        buf.write(u"\3\2\2\2\u07ff\u07f5\3\2\2\2\u07ff\u07f6\3\2\2\2\u07ff")
        buf.write(u"\u07f7\3\2\2\2\u07ff\u07f8\3\2\2\2\u07ff\u07f9\3\2\2")
        buf.write(u"\2\u07ff\u07fa\3\2\2\2\u07ff\u07fb\3\2\2\2\u07ff\u07fc")
        buf.write(u"\3\2\2\2\u07ff\u07fd\3\2\2\2\u07ff\u07fe\3\2\2\2\u0800")
        buf.write(u"\u00a5\3\2\2\2\u0801\u0803\7\u0104\2\2\u0802\u0801\3")
        buf.write(u"\2\2\2\u0802\u0803\3\2\2\2\u0803\u0804\3\2\2\2\u0804")
        buf.write(u"\u0805\7\u00d1\2\2\u0805\u00a7\3\2\2\2\u0806\u0808\7")
        buf.write(u"\u0104\2\2\u0807\u0806\3\2\2\2\u0807\u0808\3\2\2\2\u0808")
        buf.write(u"\u0809\3\2\2\2\u0809\u080a\7\u00e5\2\2\u080a\u00a9\3")
        buf.write(u"\2\2\2\u080b\u080d\7\61\2\2\u080c\u080e\7b\2\2\u080d")
        buf.write(u"\u080c\3\2\2\2\u080d\u080e\3\2\2\2\u080e\u080f\3\2\2")
        buf.write(u"\2\u080f\u0811\5\u049e\u0250\2\u0810\u0812\5\u00acW\2")
        buf.write(u"\u0811\u0810\3\2\2\2\u0811\u0812\3\2\2\2\u0812\u0814")
        buf.write(u"\3\2\2\2\u0813\u0815\t\22\2\2\u0814\u0813\3\2\2\2\u0814")
        buf.write(u"\u0815\3\2\2\2\u0815\u00ab\3\2\2\2\u0816\u0817\7\u01f0")
        buf.write(u"\2\2\u0817\u0818\5\u049e\u0250\2\u0818\u00ad\3\2\2\2")
        buf.write(u"\u0819\u081d\7\u017f\2\2\u081a\u081e\5\u00b0Y\2\u081b")
        buf.write(u"\u081e\5\u00b2Z\2\u081c\u081e\5\u00b4[\2\u081d\u081a")
        buf.write(u"\3\2\2\2\u081d\u081b\3\2\2\2\u081d\u081c\3\2\2\2\u081e")
        buf.write(u"\u00af\3\2\2\2\u081f\u0821\7b\2\2\u0820\u081f\3\2\2\2")
        buf.write(u"\u0820\u0821\3\2\2\2\u0821\u0822\3\2\2\2\u0822\u0824")
        buf.write(u"\5\u049e\u0250\2\u0823\u0825\7B\2\2\u0824\u0823\3\2\2")
        buf.write(u"\2\u0824\u0825\3\2\2\2\u0825\u00b1\3\2\2\2\u0826\u0828")
        buf.write(u"\7\u0104\2\2\u0827\u0826\3\2\2\2\u0827\u0828\3\2\2\2")
        buf.write(u"\u0828\u0829\3\2\2\2\u0829\u082b\7\u0204\2\2\u082a\u082c")
        buf.write(u"\7\u00f5\2\2\u082b\u082a\3\2\2\2\u082b\u082c\3\2\2\2")
        buf.write(u"\u082c\u082e\3\2\2\2\u082d\u082f\7\u01bd\2\2\u082e\u082d")
        buf.write(u"\3\2\2\2\u082e\u082f\3\2\2\2\u082f\u083a\3\2\2\2\u0830")
        buf.write(u"\u0832\7\u00dd\2\2\u0831\u0830\3\2\2\2\u0831\u0832\3")
        buf.write(u"\2\2\2\u0832\u0833\3\2\2\2\u0833\u0835\5\u049e\u0250")
        buf.write(u"\2\u0834\u0836\5\u00b6\\\2\u0835\u0834\3\2\2\2\u0835")
        buf.write(u"\u0836\3\2\2\2\u0836\u0838\3\2\2\2\u0837\u0839\7B\2\2")
        buf.write(u"\u0838\u0837\3\2\2\2\u0838\u0839\3\2\2\2\u0839\u083b")
        buf.write(u"\3\2\2\2\u083a\u0831\3\2\2\2\u083a\u083b\3\2\2\2\u083b")
        buf.write(u"\u0841\3\2\2\2\u083c\u083e\7\u008b\2\2\u083d\u083f\7")
        buf.write(u"\u014c\2\2\u083e\u083d\3\2\2\2\u083e\u083f\3\2\2\2\u083f")
        buf.write(u"\u0840\3\2\2\2\u0840\u0842\5\u0446\u0224\2\u0841\u083c")
        buf.write(u"\3\2\2\2\u0841\u0842\3\2\2\2\u0842\u00b3\3\2\2\2\u0843")
        buf.write(u"\u0845\7b\2\2\u0844\u0843\3\2\2\2\u0844\u0845\3\2\2\2")
        buf.write(u"\u0845\u0846\3\2\2\2\u0846\u0847\5\u049e\u0250\2\u0847")
        buf.write(u"\u0849\5\u00b6\\\2\u0848\u084a\7B\2\2\u0849\u0848\3\2")
        buf.write(u"\2\2\u0849\u084a\3\2\2\2\u084a\u00b5\3\2\2\2\u084b\u084c")
        buf.write(u"\7\u01f0\2\2\u084c\u084d\5\u049e\u0250\2\u084d\u00b7")
        buf.write(u"\3\2\2\2\u084e\u0857\7\u010b\2\2\u084f\u0851\7\u017f")
        buf.write(u"\2\2\u0850\u0852\7\u0104\2\2\u0851\u0850\3\2\2\2\u0851")
        buf.write(u"\u0852\3\2\2\2\u0852\u0858\3\2\2\2\u0853\u0855\7\u0181")
        buf.write(u"\2\2\u0854\u0856\7\27\2\2\u0855\u0854\3\2\2\2\u0855\u0856")
        buf.write(u"\3\2\2\2\u0856\u0858\3\2\2\2\u0857\u084f\3\2\2\2\u0857")
        buf.write(u"\u0853\3\2\2\2\u0858\u0860\3\2\2\2\u0859\u0861\7\u014b")
        buf.write(u"\2\2\u085a\u0861\7\u01cc\2\2\u085b\u085d\5\u046c\u0237")
        buf.write(u"\2\u085c\u085b\3\2\2\2\u085d\u085e\3\2\2\2\u085e\u085c")
        buf.write(u"\3\2\2\2\u085e\u085f\3\2\2\2\u085f\u0861\3\2\2\2\u0860")
        buf.write(u"\u0859\3\2\2\2\u0860\u085a\3\2\2\2\u0860\u085c\3\2\2")
        buf.write(u"\2\u0861\u00b9\3\2\2\2\u0862\u0863\7\u0202\2\2\u0863")
        buf.write(u"\u0865\7\u0149\2\2\u0864\u0866\5\u00bc_\2\u0865\u0864")
        buf.write(u"\3\2\2\2\u0866\u0867\3\2\2\2\u0867\u0865\3\2\2\2\u0867")
        buf.write(u"\u0868\3\2\2\2\u0868\u00bb\3\2\2\2\u0869\u086b\5\u0490")
        buf.write(u"\u0249\2\u086a\u086c\7\u0104\2\2\u086b\u086a\3\2\2\2")
        buf.write(u"\u086b\u086c\3\2\2\2\u086c\u086f\3\2\2\2\u086d\u0870")
        buf.write(u"\5\u0446\u0224\2\u086e\u0870\5\u0498\u024d\2\u086f\u086d")
        buf.write(u"\3\2\2\2\u086f\u086e\3\2\2\2\u0870\u00bd\3\2\2\2\u0871")
        buf.write(u"\u087a\7q\2\2\u0872\u0874\7\u017f\2\2\u0873\u0875\7\u0104")
        buf.write(u"\2\2\u0874\u0873\3\2\2\2\u0874\u0875\3\2\2\2\u0875\u087b")
        buf.write(u"\3\2\2\2\u0876\u0878\7\u0181\2\2\u0877\u0879\7\27\2\2")
        buf.write(u"\u0878\u0877\3\2\2\2\u0878\u0879\3\2\2\2\u0879\u087b")
        buf.write(u"\3\2\2\2\u087a\u0872\3\2\2\2\u087a\u0876\3\2\2\2\u087b")
        buf.write(u"\u087d\3\2\2\2\u087c\u087e\5\u046c\u0237\2\u087d\u087c")
        buf.write(u"\3\2\2\2\u087e\u087f\3\2\2\2\u087f\u087d\3\2\2\2\u087f")
        buf.write(u"\u0880\3\2\2\2\u0880\u00bf\3\2\2\2\u0881\u0883\7\u011b")
        buf.write(u"\2\2\u0882\u0884\7\u0104\2\2\u0883\u0882\3\2\2\2\u0883")
        buf.write(u"\u0884\3\2\2\2\u0884\u0887\3\2\2\2\u0885\u0888\5\u046c")
        buf.write(u"\u0237\2\u0886\u0888\5\u049e\u0250\2\u0887\u0885\3\2")
        buf.write(u"\2\2\u0887\u0886\3\2\2\2\u0888\u088a\3\2\2\2\u0889\u088b")
        buf.write(u"\7\u011e\2\2\u088a\u0889\3\2\2\2\u088a\u088b\3\2\2\2")
        buf.write(u"\u088b\u088f\3\2\2\2\u088c\u088e\5\u00c2b\2\u088d\u088c")
        buf.write(u"\3\2\2\2\u088e\u0891\3\2\2\2\u088f\u088d\3\2\2\2\u088f")
        buf.write(u"\u0890\3\2\2\2\u0890\u00c1\3\2\2\2\u0891\u088f\3\2\2")
        buf.write(u"\2\u0892\u0896\5\u00c4c\2\u0893\u0896\5\u00c6d\2\u0894")
        buf.write(u"\u0896\5\u00c8e\2\u0895\u0892\3\2\2\2\u0895\u0893\3\2")
        buf.write(u"\2\2\u0895\u0894\3\2\2\2\u0896\u00c3\3\2\2\2\u0897\u0899")
        buf.write(u"\7\u0209\2\2\u0898\u0897\3\2\2\2\u0898\u0899\3\2\2\2")
        buf.write(u"\u0899\u089a\3\2\2\2\u089a\u089c\7\u00d9\2\2\u089b\u089d")
        buf.write(u"\7 \2\2\u089c\u089b\3\2\2\2\u089c\u089d\3\2\2\2\u089d")
        buf.write(u"\u08a0\3\2\2\2\u089e\u08a1\5\u046c\u0237\2\u089f\u08a1")
        buf.write(u"\5\u049e\u0250\2\u08a0\u089e\3\2\2\2\u08a0\u089f\3\2")
        buf.write(u"\2\2\u08a1\u00c5\3\2\2\2\u08a2\u08a4\7\u011e\2\2\u08a3")
        buf.write(u"\u08a2\3\2\2\2\u08a3\u08a4\3\2\2\2\u08a4\u08a6\3\2\2")
        buf.write(u"\2\u08a5\u08a7\7 \2\2\u08a6\u08a5\3\2\2\2\u08a6\u08a7")
        buf.write(u"\3\2\2\2\u08a7\u08a8\3\2\2\2\u08a8\u08ab\7\u01f3\2\2")
        buf.write(u"\u08a9\u08ac\5\u046c\u0237\2\u08aa\u08ac\5\u049e\u0250")
        buf.write(u"\2\u08ab\u08a9\3\2\2\2\u08ab\u08aa\3\2\2\2\u08ac\u00c7")
        buf.write(u"\3\2\2\2\u08ad\u08af\7\u011e\2\2\u08ae\u08ad\3\2\2\2")
        buf.write(u"\u08ae\u08af\3\2\2\2\u08af\u08b1\3\2\2\2\u08b0\u08b2")
        buf.write(u"\7 \2\2\u08b1\u08b0\3\2\2\2\u08b1\u08b2\3\2\2\2\u08b2")
        buf.write(u"\u08b3\3\2\2\2\u08b3\u08b6\7\63\2\2\u08b4\u08b7\5\u046c")
        buf.write(u"\u0237\2\u08b5\u08b7\5\u049e\u0250\2\u08b6\u08b4\3\2")
        buf.write(u"\2\2\u08b6\u08b5\3\2\2\2\u08b7\u00c9\3\2\2\2\u08b8\u08ba")
        buf.write(u"\7\u0180\2\2\u08b9\u08bb\7\u012f\2\2\u08ba\u08b9\3\2")
        buf.write(u"\2\2\u08ba\u08bb\3\2\2\2\u08bb\u08bd\3\2\2\2\u08bc\u08be")
        buf.write(u"\7\u0104\2\2\u08bd\u08bc\3\2\2\2\u08bd\u08be\3\2\2\2")
        buf.write(u"\u08be\u08bf\3\2\2\2\u08bf\u08c0\5\u00ccg\2\u08c0\u00cb")
        buf.write(u"\3\2\2\2\u08c1\u08c2\5\u0496\u024c\2\u08c2\u00cd\3\2")
        buf.write(u"\2\2\u08c3\u08c5\7K\2\2\u08c4\u08c6\7\u0104\2\2\u08c5")
        buf.write(u"\u08c4\3\2\2\2\u08c5\u08c6\3\2\2\2\u08c6\u08c7\3\2\2")
        buf.write(u"\2\u08c7\u08c8\5\u045e\u0230\2\u08c8\u00cf\3\2\2\2\u08c9")
        buf.write(u"\u08cb\7\u0191\2\2\u08ca\u08cc\7\u0104\2\2\u08cb\u08ca")
        buf.write(u"\3\2\2\2\u08cb\u08cc\3\2\2\2\u08cc\u08d2\3\2\2\2\u08cd")
        buf.write(u"\u08cf\7\u0193\2\2\u08ce\u08d0\7\27\2\2\u08cf\u08ce\3")
        buf.write(u"\2\2\2\u08cf\u08d0\3\2\2\2\u08d0\u08d2\3\2\2\2\u08d1")
        buf.write(u"\u08c9\3\2\2\2\u08d1\u08cd\3\2\2\2\u08d2\u08d4\3\2\2")
        buf.write(u"\2\u08d3\u08d5\5\u0488\u0245\2\u08d4\u08d3\3\2\2\2\u08d5")
        buf.write(u"\u08d6\3\2\2\2\u08d6\u08d4\3\2\2\2\u08d6\u08d7\3\2\2")
        buf.write(u"\2\u08d7\u00d1\3\2\2\2\u08d8\u08d9\7r\2\2\u08d9\u08da")
        buf.write(u"\7\u01a9\2\2\u08da\u08de\7\u021d\2\2\u08db\u08dd\5\u00d4")
        buf.write(u"k\2\u08dc\u08db\3\2\2\2\u08dd\u08e0\3\2\2\2\u08de\u08dc")
        buf.write(u"\3\2\2\2\u08de\u08df\3\2\2\2\u08df\u00d3\3\2\2\2\u08e0")
        buf.write(u"\u08de\3\2\2\2\u08e1\u08e2\5\u049e\u0250\2\u08e2\u08e3")
        buf.write(u"\5\u0498\u024d\2\u08e3\u08e4\7\u0103\2\2\u08e4\u08e5")
        buf.write(u"\5\u0498\u024d\2\u08e5\u00d5\3\2\2\2\u08e6\u08e7\7\u020b")
        buf.write(u"\2\2\u08e7\u08e8\7\u01a9\2\2\u08e8\u08ec\7\u021d\2\2")
        buf.write(u"\u08e9\u08eb\5\u01b4\u00db\2\u08ea\u08e9\3\2\2\2\u08eb")
        buf.write(u"\u08ee\3\2\2\2\u08ec\u08ea\3\2\2\2\u08ec\u08ed\3\2\2")
        buf.write(u"\2\u08ed\u00d7\3\2\2\2\u08ee\u08ec\3\2\2\2\u08ef\u08f0")
        buf.write(u"\7\u0120\2\2\u08f0\u08f1\7\u01a9\2\2\u08f1\u08f5\7\u021d")
        buf.write(u"\2\2\u08f2\u08f4\5\u01b4\u00db\2\u08f3\u08f2\3\2\2\2")
        buf.write(u"\u08f4\u08f7\3\2\2\2\u08f5\u08f3\3\2\2\2\u08f5\u08f6")
        buf.write(u"\3\2\2\2\u08f6\u00d9\3\2\2\2\u08f7\u08f5\3\2\2\2\u08f8")
        buf.write(u"\u08f9\7S\2\2\u08f9\u08fa\7\u01a9\2\2\u08fa\u08ff\7\u021d")
        buf.write(u"\2\2\u08fb\u08fe\5\u00dco\2\u08fc\u08fe\5\u01b4\u00db")
        buf.write(u"\2\u08fd\u08fb\3\2\2\2\u08fd\u08fc\3\2\2\2\u08fe\u0901")
        buf.write(u"\3\2\2\2\u08ff\u08fd\3\2\2\2\u08ff\u0900\3\2\2\2\u0900")
        buf.write(u"\u00db\3\2\2\2\u0901\u08ff\3\2\2\2\u0902\u0906\5\u00de")
        buf.write(u"p\2\u0903\u0906\5\u00e0q\2\u0904\u0906\5\u00e2r\2\u0905")
        buf.write(u"\u0902\3\2\2\2\u0905\u0903\3\2\2\2\u0905\u0904\3\2\2")
        buf.write(u"\2\u0906\u00dd\3\2\2\2\u0907\u0908\7;\2\2\u0908\u090a")
        buf.write(u"\5\u0464\u0233\2\u0909\u090b\7\u00da\2\2\u090a\u0909")
        buf.write(u"\3\2\2\2\u090a\u090b\3\2\2\2\u090b\u090d\3\2\2\2\u090c")
        buf.write(u"\u090e\7\u00f9\2\2\u090d\u090c\3\2\2\2\u090d\u090e\3")
        buf.write(u"\2\2\2\u090e\u090f\3\2\2\2\u090f\u091e\7\u00fc\2\2\u0910")
        buf.write(u"\u091a\5\u00f6|\2\u0911\u091a\5\u00fc\177\2\u0912\u091a")
        buf.write(u"\5\u00eex\2\u0913\u091a\5\u00f0y\2\u0914\u091a\5\u00f8")
        buf.write(u"}\2\u0915\u091a\5\u00fe\u0080\2\u0916\u091a\5\u00e8u")
        buf.write(u"\2\u0917\u091a\5\u00f2z\2\u0918\u091a\5\u00ecw\2\u0919")
        buf.write(u"\u0910\3\2\2\2\u0919\u0911\3\2\2\2\u0919\u0912\3\2\2")
        buf.write(u"\2\u0919\u0913\3\2\2\2\u0919\u0914\3\2\2\2\u0919\u0915")
        buf.write(u"\3\2\2\2\u0919\u0916\3\2\2\2\u0919\u0917\3\2\2\2\u0919")
        buf.write(u"\u0918\3\2\2\2\u091a\u091d\3\2\2\2\u091b\u091d\5\u046e")
        buf.write(u"\u0238\2\u091c\u0919\3\2\2\2\u091c\u091b\3\2\2\2\u091d")
        buf.write(u"\u0920\3\2\2\2\u091e\u091c\3\2\2\2\u091e\u091f\3\2\2")
        buf.write(u"\2\u091f\u0921\3\2\2\2\u0920\u091e\3\2\2\2\u0921\u0922")
        buf.write(u"\7\u021d\2\2\u0922\u00df\3\2\2\2\u0923\u0924\7;\2\2\u0924")
        buf.write(u"\u0926\5\u0464\u0233\2\u0925\u0927\7\u00da\2\2\u0926")
        buf.write(u"\u0925\3\2\2\2\u0926\u0927\3\2\2\2\u0927\u0928\3\2\2")
        buf.write(u"\2\u0928\u0931\7\u0154\2\2\u0929\u0930\5\u00e4s\2\u092a")
        buf.write(u"\u0930\5\u00fe\u0080\2\u092b\u0930\5\u00f2z\2\u092c\u0930")
        buf.write(u"\5\u00e6t\2\u092d\u0930\5\u00eav\2\u092e\u0930\5\u00f4")
        buf.write(u"{\2\u092f\u0929\3\2\2\2\u092f\u092a\3\2\2\2\u092f\u092b")
        buf.write(u"\3\2\2\2\u092f\u092c\3\2\2\2\u092f\u092d\3\2\2\2\u092f")
        buf.write(u"\u092e\3\2\2\2\u0930\u0933\3\2\2\2\u0931\u092f\3\2\2")
        buf.write(u"\2\u0931\u0932\3\2\2\2\u0932\u0934\3\2\2\2\u0933\u0931")
        buf.write(u"\3\2\2\2\u0934\u0935\7\u021d\2\2\u0935\u00e1\3\2\2\2")
        buf.write(u"\u0936\u0937\7;\2\2\u0937\u0939\5\u0464\u0233\2\u0938")
        buf.write(u"\u093a\7\u00da\2\2\u0939\u0938\3\2\2\2\u0939\u093a\3")
        buf.write(u"\2\2\2\u093a\u093b\3\2\2\2\u093b\u093c\7\u00f9\2\2\u093c")
        buf.write(u"\u0948\7\u00ee\2\2\u093d\u0944\5\u00eex\2\u093e\u0944")
        buf.write(u"\5\u00f0y\2\u093f\u0944\5\u00fa~\2\u0940\u0944\5\u00fe")
        buf.write(u"\u0080\2\u0941\u0944\5\u00e8u\2\u0942\u0944\5\u00f2z")
        buf.write(u"\2\u0943\u093d\3\2\2\2\u0943\u093e\3\2\2\2\u0943\u093f")
        buf.write(u"\3\2\2\2\u0943\u0940\3\2\2\2\u0943\u0941\3\2\2\2\u0943")
        buf.write(u"\u0942\3\2\2\2\u0944\u0947\3\2\2\2\u0945\u0947\5\u046e")
        buf.write(u"\u0238\2\u0946\u0943\3\2\2\2\u0946\u0945\3\2\2\2\u0947")
        buf.write(u"\u094a\3\2\2\2\u0948\u0946\3\2\2\2\u0948\u0949\3\2\2")
        buf.write(u"\2\u0949\u094b\3\2\2\2\u094a\u0948\3\2\2\2\u094b\u094c")
        buf.write(u"\7\u021d\2\2\u094c\u00e3\3\2\2\2\u094d\u094e\7\u008d")
        buf.write(u"\2\2\u094e\u0950\7m\2\2\u094f\u0951\7\u0104\2\2\u0950")
        buf.write(u"\u094f\3\2\2\2\u0950\u0951\3\2\2\2\u0951\u0952\3\2\2")
        buf.write(u"\2\u0952\u0953\5\u046e\u0238\2\u0953\u00e5\3\2\2\2\u0954")
        buf.write(u"\u0955\7\u008d\2\2\u0955\u0956\7\u01dd\2\2\u0956\u0957")
        buf.write(u"\7\u0147\2\2\u0957\u0958\5\u049e\u0250\2\u0958\u0960")
        buf.write(u"\7\u01ee\2\2\u0959\u095a\7\u00f7\2\2\u095a\u095c\7\64")
        buf.write(u"\2\2\u095b\u095d\5\u0476\u023c\2\u095c\u095b\3\2\2\2")
        buf.write(u"\u095d\u095e\3\2\2\2\u095e\u095c\3\2\2\2\u095e\u095f")
        buf.write(u"\3\2\2\2\u095f\u0961\3\2\2\2\u0960\u0959\3\2\2\2\u0960")
        buf.write(u"\u0961\3\2\2\2\u0961\u00e7\3\2\2\2\u0962\u0963\7\u00a3")
        buf.write(u"\2\2\u0963\u0965\7\u0109\2\2\u0964\u0966\7\u0104\2\2")
        buf.write(u"\u0965\u0964\3\2\2\2\u0965\u0966\3\2\2\2\u0966\u0967")
        buf.write(u"\3\2\2\2\u0967\u0968\5\u046e\u0238\2\u0968\u00e9\3\2")
        buf.write(u"\2\2\u0969\u096a\7\u00c2\2\2\u096a\u096c\7\u0109\2\2")
        buf.write(u"\u096b\u096d\7\u0104\2\2\u096c\u096b\3\2\2\2\u096c\u096d")
        buf.write(u"\3\2\2\2\u096d\u096e\3\2\2\2\u096e\u096f\5\u046e\u0238")
        buf.write(u"\2\u096f\u00eb\3\2\2\2\u0970\u0972\7\u012d\2\2\u0971")
        buf.write(u"\u0970\3\2\2\2\u0971\u0972\3\2\2\2\u0972\u0973\3\2\2")
        buf.write(u"\2\u0973\u0975\7m\2\2\u0974\u0976\7\u0104\2\2\u0975\u0974")
        buf.write(u"\3\2\2\2\u0975\u0976\3\2\2\2\u0976\u0977\3\2\2\2\u0977")
        buf.write(u"\u0978\5\u046e\u0238\2\u0978\u00ed\3\2\2\2\u0979\u097a")
        buf.write(u"\7\u012d\2\2\u097a\u097c\7s\2\2\u097b\u097d\7\u0104\2")
        buf.write(u"\2\u097c\u097b\3\2\2\2\u097c\u097d\3\2\2\2\u097d\u097e")
        buf.write(u"\3\2\2\2\u097e\u097f\5\u046e\u0238\2\u097f\u00ef\3\2")
        buf.write(u"\2\2\u0980\u0981\7\u012d\2\2\u0981\u0983\7\u01ec\2\2")
        buf.write(u"\u0982\u0984\7\u0104\2\2\u0983\u0982\3\2\2\2\u0983\u0984")
        buf.write(u"\3\2\2\2\u0984\u0985\3\2\2\2\u0985\u0986\5\u046e\u0238")
        buf.write(u"\2\u0986\u00f1\3\2\2\2\u0987\u0988\7\u01d0\2\2\u0988")
        buf.write(u"\u098a\7\u0109\2\2\u0989\u098b\7\u0104\2\2\u098a\u0989")
        buf.write(u"\3\2\2\2\u098a\u098b\3\2\2\2\u098b\u098c\3\2\2\2\u098c")
        buf.write(u"\u098d\5\u046e\u0238\2\u098d\u00f3\3\2\2\2\u098e\u0990")
        buf.write(u"\7\u01da\2\2\u098f\u098e\3\2\2\2\u098f\u0990\3\2\2\2")
        buf.write(u"\u0990\u0991\3\2\2\2\u0991\u0993\7\u008d\2\2\u0992\u0994")
        buf.write(u"\7\u0104\2\2\u0993\u0992\3\2\2\2\u0993\u0994\3\2\2\2")
        buf.write(u"\u0994\u0995\3\2\2\2\u0995\u0996\5\u046e\u0238\2\u0996")
        buf.write(u"\u00f5\3\2\2\2\u0997\u0999\7\u01da\2\2\u0998\u0997\3")
        buf.write(u"\2\2\2\u0998\u0999\3\2\2\2\u0999\u099a\3\2\2\2\u099a")
        buf.write(u"\u099c\7\u0174\2\2\u099b\u099d\7\u0104\2\2\u099c\u099b")
        buf.write(u"\3\2\2\2\u099c\u099d\3\2\2\2\u099d\u099e\3\2\2\2\u099e")
        buf.write(u"\u099f\5\u046e\u0238\2\u099f\u00f7\3\2\2\2\u09a0\u09a2")
        buf.write(u"\7\u01da\2\2\u09a1\u09a0\3\2\2\2\u09a1\u09a2\3\2\2\2")
        buf.write(u"\u09a2\u09a3\3\2\2\2\u09a3\u09a5\7\u01c6\2\2\u09a4\u09a6")
        buf.write(u"\7\u0104\2\2\u09a5\u09a4\3\2\2\2\u09a5\u09a6\3\2\2\2")
        buf.write(u"\u09a6\u09a7\3\2\2\2\u09a7\u09a8\5\u046e\u0238\2\u09a8")
        buf.write(u"\u00f9\3\2\2\2\u09a9\u09ab\7\u01da\2\2\u09aa\u09a9\3")
        buf.write(u"\2\2\2\u09aa\u09ab\3\2\2\2\u09ab\u09ac\3\2\2\2\u09ac")
        buf.write(u"\u09ae\7\u01e2\2\2\u09ad\u09af\7\u0104\2\2\u09ae\u09ad")
        buf.write(u"\3\2\2\2\u09ae\u09af\3\2\2\2\u09af\u09b0\3\2\2\2\u09b0")
        buf.write(u"\u09b1\5\u046e\u0238\2\u09b1\u00fb\3\2\2\2\u09b2\u09b4")
        buf.write(u"\7\u01da\2\2\u09b3\u09b2\3\2\2\2\u09b3\u09b4\3\2\2\2")
        buf.write(u"\u09b4\u09b5\3\2\2\2\u09b5\u09b7\t\23\2\2\u09b6\u09b8")
        buf.write(u"\7\u0104\2\2\u09b7\u09b6\3\2\2\2\u09b7\u09b8\3\2\2\2")
        buf.write(u"\u09b8\u09b9\3\2\2\2\u09b9\u09ba\5\u046e\u0238\2\u09ba")
        buf.write(u"\u00fd\3\2\2\2\u09bb\u09bc\7\u01e5\2\2\u09bc\u09be\7")
        buf.write(u"\u0113\2\2\u09bd\u09bf\7\u0104\2\2\u09be\u09bd\3\2\2")
        buf.write(u"\2\u09be\u09bf\3\2\2\2\u09bf\u09c0\3\2\2\2\u09c0\u09c1")
        buf.write(u"\5\u046e\u0238\2\u09c1\u00ff\3\2\2\2\u09c2\u09c3\7\u0123")
        buf.write(u"\2\2\u09c3\u09c4\7\u01a9\2\2\u09c4\u09c9\7\u021d\2\2")
        buf.write(u"\u09c5\u09c6\7\u010f\2\2\u09c6\u09c7\5\u047c\u023f\2")
        buf.write(u"\u09c7\u09c8\7\u021d\2\2\u09c8\u09ca\3\2\2\2\u09c9\u09c5")
        buf.write(u"\3\2\2\2\u09c9\u09ca\3\2\2\2\u09ca\u09ce\3\2\2\2\u09cb")
        buf.write(u"\u09cd\5\u01b4\u00db\2\u09cc\u09cb\3\2\2\2\u09cd\u09d0")
        buf.write(u"\3\2\2\2\u09ce\u09cc\3\2\2\2\u09ce\u09cf\3\2\2\2\u09cf")
        buf.write(u"\u0101\3\2\2\2\u09d0\u09ce\3\2\2\2\u09d1\u09d2\7\u01a6")
        buf.write(u"\2\2\u09d2\u09d3\7\u01a9\2\2\u09d3\u09d7\7\u021d\2\2")
        buf.write(u"\u09d4\u09d6\5\u0104\u0083\2\u09d5\u09d4\3\2\2\2\u09d6")
        buf.write(u"\u09d9\3\2\2\2\u09d7\u09d5\3\2\2\2\u09d7\u09d8\3\2\2")
        buf.write(u"\2\u09d8\u0103\3\2\2\2\u09d9\u09d7\3\2\2\2\u09da\u09dd")
        buf.write(u"\7\u0232\2\2\u09db\u09de\7\u00d6\2\2\u09dc\u09de\5\u048c")
        buf.write(u"\u0247\2\u09dd\u09db\3\2\2\2\u09dd\u09dc\3\2\2\2\u09dd")
        buf.write(u"\u09de\3\2\2\2\u09de\u09ff\3\2\2\2\u09df\u09fe\5\u0106")
        buf.write(u"\u0084\2\u09e0\u09fe\5\u0108\u0085\2\u09e1\u09fe\5\u010a")
        buf.write(u"\u0086\2\u09e2\u09fe\5\u010c\u0087\2\u09e3\u09fe\5\u010e")
        buf.write(u"\u0088\2\u09e4\u09fe\5\u0110\u0089\2\u09e5\u09fe\5\u0112")
        buf.write(u"\u008a\2\u09e6\u09fe\5\u0114\u008b\2\u09e7\u09fe\5\u0116")
        buf.write(u"\u008c\2\u09e8\u09fe\5\u0118\u008d\2\u09e9\u09fe\5\u011a")
        buf.write(u"\u008e\2\u09ea\u09fe\5\u011c\u008f\2\u09eb\u09fe\5\u011e")
        buf.write(u"\u0090\2\u09ec\u09fe\5\u0120\u0091\2\u09ed\u09fe\5\u0122")
        buf.write(u"\u0092\2\u09ee\u09fe\5\u0124\u0093\2\u09ef\u09f2\5\u0126")
        buf.write(u"\u0094\2\u09f0\u09f2\5\u012a\u0096\2\u09f1\u09ef\3\2")
        buf.write(u"\2\2\u09f1\u09f0\3\2\2\2\u09f2\u09fe\3\2\2\2\u09f3\u09fe")
        buf.write(u"\5\u012c\u0097\2\u09f4\u09fe\5\u012e\u0098\2\u09f5\u09fe")
        buf.write(u"\5\u0130\u0099\2\u09f6\u09fe\5\u0132\u009a\2\u09f7\u09fe")
        buf.write(u"\5\u0134\u009b\2\u09f8\u09fe\5\u0136\u009c\2\u09f9\u09fe")
        buf.write(u"\5\u0138\u009d\2\u09fa\u09fe\5\u013a\u009e\2\u09fb\u09fe")
        buf.write(u"\5\u013e\u00a0\2\u09fc\u09fe\5\u0140\u00a1\2\u09fd\u09df")
        buf.write(u"\3\2\2\2\u09fd\u09e0\3\2\2\2\u09fd\u09e1\3\2\2\2\u09fd")
        buf.write(u"\u09e2\3\2\2\2\u09fd\u09e3\3\2\2\2\u09fd\u09e4\3\2\2")
        buf.write(u"\2\u09fd\u09e5\3\2\2\2\u09fd\u09e6\3\2\2\2\u09fd\u09e7")
        buf.write(u"\3\2\2\2\u09fd\u09e8\3\2\2\2\u09fd\u09e9\3\2\2\2\u09fd")
        buf.write(u"\u09ea\3\2\2\2\u09fd\u09eb\3\2\2\2\u09fd\u09ec\3\2\2")
        buf.write(u"\2\u09fd\u09ed\3\2\2\2\u09fd\u09ee\3\2\2\2\u09fd\u09f1")
        buf.write(u"\3\2\2\2\u09fd\u09f3\3\2\2\2\u09fd\u09f4\3\2\2\2\u09fd")
        buf.write(u"\u09f5\3\2\2\2\u09fd\u09f6\3\2\2\2\u09fd\u09f7\3\2\2")
        buf.write(u"\2\u09fd\u09f8\3\2\2\2\u09fd\u09f9\3\2\2\2\u09fd\u09fa")
        buf.write(u"\3\2\2\2\u09fd\u09fb\3\2\2\2\u09fd\u09fc\3\2\2\2\u09fe")
        buf.write(u"\u0a01\3\2\2\2\u09ff\u09fd\3\2\2\2\u09ff\u0a00\3\2\2")
        buf.write(u"\2\u0a00\u0a02\3\2\2\2\u0a01\u09ff\3\2\2\2\u0a02\u0a03")
        buf.write(u"\7\u021d\2\2\u0a03\u0105\3\2\2\2\u0a04\u0a05\7.\2\2\u0a05")
        buf.write(u"\u0a06\t\24\2\2\u0a06\u0107\3\2\2\2\u0a07\u0a08\t\25")
        buf.write(u"\2\2\u0a08\u0109\3\2\2\2\u0a09\u0a0a\7/\2\2\u0a0a\u010b")
        buf.write(u"\3\2\2\2\u0a0b\u0a0c\7\u00c1\2\2\u0a0c\u0a0d\t\26\2\2")
        buf.write(u"\u0a0d\u010d\3\2\2\2\u0a0e\u0a0f\t\27\2\2\u0a0f\u010f")
        buf.write(u"\3\2\2\2\u0a10\u0a11\t\30\2\2\u0a11\u0111\3\2\2\2\u0a12")
        buf.write(u"\u0a13\7\u0197\2\2\u0a13\u0113\3\2\2\2\u0a14\u0a15\7")
        buf.write(u"\u01f9\2\2\u0a15\u0115\3\2\2\2\u0a16\u0a18\7\u01bd\2")
        buf.write(u"\2\u0a17\u0a19\7\u0104\2\2\u0a18\u0a17\3\2\2\2\u0a18")
        buf.write(u"\u0a19\3\2\2\2\u0a19\u0a1c\3\2\2\2\u0a1a\u0a1d\5\u0436")
        buf.write(u"\u021c\2\u0a1b\u0a1d\5\u049e\u0250\2\u0a1c\u0a1a\3\2")
        buf.write(u"\2\2\u0a1c\u0a1b\3\2\2\2\u0a1d\u0117\3\2\2\2\u0a1e\u0a26")
        buf.write(u"\7\u011d\2\2\u0a1f\u0a21\7\u0141\2\2\u0a20\u0a1f\3\2")
        buf.write(u"\2\2\u0a20\u0a21\3\2\2\2\u0a21\u0a23\3\2\2\2\u0a22\u0a24")
        buf.write(u"\7\u0104\2\2\u0a23\u0a22\3\2\2\2\u0a23\u0a24\3\2\2\2")
        buf.write(u"\u0a24\u0a25\3\2\2\2\u0a25\u0a27\t\31\2\2\u0a26\u0a20")
        buf.write(u"\3\2\2\2\u0a26\u0a27\3\2\2\2\u0a27\u0a2a\3\2\2\2\u0a28")
        buf.write(u"\u0a2b\5\u0436\u021c\2\u0a29\u0a2b\5\u049e\u0250\2\u0a2a")
        buf.write(u"\u0a28\3\2\2\2\u0a2a\u0a29\3\2\2\2\u0a2b\u0119\3\2\2")
        buf.write(u"\2\u0a2c\u0a34\t\32\2\2\u0a2d\u0a2f\7\u0141\2\2\u0a2e")
        buf.write(u"\u0a2d\3\2\2\2\u0a2e\u0a2f\3\2\2\2\u0a2f\u0a31\3\2\2")
        buf.write(u"\2\u0a30\u0a32\7\u0104\2\2\u0a31\u0a30\3\2\2\2\u0a31")
        buf.write(u"\u0a32\3\2\2\2\u0a32\u0a33\3\2\2\2\u0a33\u0a35\t\31\2")
        buf.write(u"\2\u0a34\u0a2e\3\2\2\2\u0a34\u0a35\3\2\2\2\u0a35\u0a38")
        buf.write(u"\3\2\2\2\u0a36\u0a39\5\u0436\u021c\2\u0a37\u0a39\5\u049e")
        buf.write(u"\u0250\2\u0a38\u0a36\3\2\2\2\u0a38\u0a37\3\2\2\2\u0a39")
        buf.write(u"\u011b\3\2\2\2\u0a3a\u0a3c\t\33\2\2\u0a3b\u0a3d\7\u0104")
        buf.write(u"\2\2\u0a3c\u0a3b\3\2\2\2\u0a3c\u0a3d\3\2\2\2\u0a3d\u0a40")
        buf.write(u"\3\2\2\2\u0a3e\u0a41\5\u0436\u021c\2\u0a3f\u0a41\5\u049e")
        buf.write(u"\u0250\2\u0a40\u0a3e\3\2\2\2\u0a40\u0a3f\3\2\2\2\u0a41")
        buf.write(u"\u011d\3\2\2\2\u0a42\u0a44\t\34\2\2\u0a43\u0a45\7\u0104")
        buf.write(u"\2\2\u0a44\u0a43\3\2\2\2\u0a44\u0a45\3\2\2\2\u0a45\u0a48")
        buf.write(u"\3\2\2\2\u0a46\u0a49\5\u0436\u021c\2\u0a47\u0a49\5\u049e")
        buf.write(u"\u0250\2\u0a48\u0a46\3\2\2\2\u0a48\u0a47\3\2\2\2\u0a49")
        buf.write(u"\u011f\3\2\2\2\u0a4a\u0a4c\7e\2\2\u0a4b\u0a4d\7\u0104")
        buf.write(u"\2\2\u0a4c\u0a4b\3\2\2\2\u0a4c\u0a4d\3\2\2\2\u0a4d\u0a4e")
        buf.write(u"\3\2\2\2\u0a4e\u0a4f\5\u0436\u021c\2\u0a4f\u0121\3\2")
        buf.write(u"\2\2\u0a50\u0a52\7\u0202\2\2\u0a51\u0a53\7\u0104\2\2")
        buf.write(u"\u0a52\u0a51\3\2\2\2\u0a52\u0a53\3\2\2\2\u0a53\u0a54")
        buf.write(u"\3\2\2\2\u0a54\u0a55\5\u0498\u024d\2\u0a55\u0123\3\2")
        buf.write(u"\2\2\u0a56\u0a58\t\35\2\2\u0a57\u0a59\7\u0104\2\2\u0a58")
        buf.write(u"\u0a57\3\2\2\2\u0a58\u0a59\3\2\2\2\u0a59\u0a5a\3\2\2")
        buf.write(u"\2\u0a5a\u0a5b\5\u01d4\u00eb\2\u0a5b\u0125\3\2\2\2\u0a5c")
        buf.write(u"\u0a5f\7\u00dd\2\2\u0a5d\u0a60\5\u0436\u021c\2\u0a5e")
        buf.write(u"\u0a60\5\u0498\u024d\2\u0a5f\u0a5d\3\2\2\2\u0a5f\u0a5e")
        buf.write(u"\3\2\2\2\u0a60\u0a62\3\2\2\2\u0a61\u0a63\5\u0128\u0095")
        buf.write(u"\2\u0a62\u0a61\3\2\2\2\u0a62\u0a63\3\2\2\2\u0a63\u0127")
        buf.write(u"\3\2\2\2\u0a64\u0a65\7\u01f0\2\2\u0a65\u0a66\5\u0436")
        buf.write(u"\u021c\2\u0a66\u0129\3\2\2\2\u0a67\u0a68\7\u0201\2\2")
        buf.write(u"\u0a68\u0a69\5\u0436\u021c\2\u0a69\u012b\3\2\2\2\u0a6a")
        buf.write(u"\u0a6c\7\u01ff\2\2\u0a6b\u0a6d\7\u0104\2\2\u0a6c\u0a6b")
        buf.write(u"\3\2\2\2\u0a6c\u0a6d\3\2\2\2\u0a6d\u0a6e\3\2\2\2\u0a6e")
        buf.write(u"\u0a6f\t\36\2\2\u0a6f\u012d\3\2\2\2\u0a70\u0a72\7.\2")
        buf.write(u"\2\u0a71\u0a73\7\u0207\2\2\u0a72\u0a71\3\2\2\2\u0a72")
        buf.write(u"\u0a73\3\2\2\2\u0a73\u0a74\3\2\2\2\u0a74\u0a75\7\u0210")
        buf.write(u"\2\2\u0a75\u012f\3\2\2\2\u0a76\u0a78\t\37\2\2\u0a77\u0a79")
        buf.write(u"\7\u01a1\2\2\u0a78\u0a77\3\2\2\2\u0a78\u0a79\3\2\2\2")
        buf.write(u"\u0a79\u0131\3\2\2\2\u0a7a\u0a7c\7\u01bc\2\2\u0a7b\u0a7d")
        buf.write(u"\7\u0104\2\2\u0a7c\u0a7b\3\2\2\2\u0a7c\u0a7d\3\2\2\2")
        buf.write(u"\u0a7d\u0a7f\3\2\2\2\u0a7e\u0a7a\3\2\2\2\u0a7e\u0a7f")
        buf.write(u"\3\2\2\2\u0a7f\u0a80\3\2\2\2\u0a80\u0a85\t\t\2\2\u0a81")
        buf.write(u"\u0a83\7\u01b1\2\2\u0a82\u0a84\7A\2\2\u0a83\u0a82\3\2")
        buf.write(u"\2\2\u0a83\u0a84\3\2\2\2\u0a84\u0a86\3\2\2\2\u0a85\u0a81")
        buf.write(u"\3\2\2\2\u0a85\u0a86\3\2\2\2\u0a86\u0133\3\2\2\2\u0a87")
        buf.write(u"\u0a88\t \2\2\u0a88\u0135\3\2\2\2\u0a89\u0a8a\t!\2\2")
        buf.write(u"\u0a8a\u0137\3\2\2\2\u0a8b\u0a8c\t\"\2\2\u0a8c\u0139")
        buf.write(u"\3\2\2\2\u0a8d\u0a8f\7\u0172\2\2\u0a8e\u0a90\7A\2\2\u0a8f")
        buf.write(u"\u0a8e\3\2\2\2\u0a8f\u0a90\3\2\2\2\u0a90\u0a92\3\2\2")
        buf.write(u"\2\u0a91\u0a93\7\u0104\2\2\u0a92\u0a91\3\2\2\2\u0a92")
        buf.write(u"\u0a93\3\2\2\2\u0a93\u0a96\3\2\2\2\u0a94\u0a97\5\u0436")
        buf.write(u"\u021c\2\u0a95\u0a97\5\u0498\u024d\2\u0a96\u0a94\3\2")
        buf.write(u"\2\2\u0a96\u0a95\3\2\2\2\u0a97\u0a99\3\2\2\2\u0a98\u0a9a")
        buf.write(u"\5\u013c\u009f\2\u0a99\u0a98\3\2\2\2\u0a99\u0a9a\3\2")
        buf.write(u"\2\2\u0a9a\u013b\3\2\2\2\u0a9b\u0a9c\7\u0147\2\2\u0a9c")
        buf.write(u"\u0a9e\5\u049e\u0250\2\u0a9d\u0a9f\7\u01ee\2\2\u0a9e")
        buf.write(u"\u0a9d\3\2\2\2\u0a9e\u0a9f\3\2\2\2\u0a9f\u013d\3\2\2")
        buf.write(u"\2\u0aa0\u0aa1\t#\2\2\u0aa1\u013f\3\2\2\2\u0aa2\u0aa3")
        buf.write(u"\7\u0211\2\2\u0aa3\u0141\3\2\2\2\u0aa4\u0aa5\7\u0191")
        buf.write(u"\2\2\u0aa5\u0aa6\7\u01a9\2\2\u0aa6\u0aaa\7\u021d\2\2")
        buf.write(u"\u0aa7\u0aa9\5\u0144\u00a3\2\u0aa8\u0aa7\3\2\2\2\u0aa9")
        buf.write(u"\u0aac\3\2\2\2\u0aaa\u0aa8\3\2\2\2\u0aaa\u0aab\3\2\2")
        buf.write(u"\2\u0aab\u0143\3\2\2\2\u0aac\u0aaa\3\2\2\2\u0aad\u0aaf")
        buf.write(u"\5\u0146\u00a4\2\u0aae\u0ab0\5\u0154\u00ab\2\u0aaf\u0aae")
        buf.write(u"\3\2\2\2\u0ab0\u0ab1\3\2\2\2\u0ab1\u0aaf\3\2\2\2\u0ab1")
        buf.write(u"\u0ab2\3\2\2\2\u0ab2\u0145\3\2\2\2\u0ab3\u0ab4\7\u017a")
        buf.write(u"\2\2\u0ab4\u0ab6\5\u0488\u0245\2\u0ab5\u0ab7\5\u0148")
        buf.write(u"\u00a5\2\u0ab6\u0ab5\3\2\2\2\u0ab6\u0ab7\3\2\2\2\u0ab7")
        buf.write(u"\u0ac5\3\2\2\2\u0ab8\u0aba\5\u014a\u00a6\2\u0ab9\u0abb")
        buf.write(u"\5\u014c\u00a7\2\u0aba\u0ab9\3\2\2\2\u0aba\u0abb\3\2")
        buf.write(u"\2\2\u0abb\u0abd\3\2\2\2\u0abc\u0abe\5\u014e\u00a8\2")
        buf.write(u"\u0abd\u0abc\3\2\2\2\u0abd\u0abe\3\2\2\2\u0abe\u0ac0")
        buf.write(u"\3\2\2\2\u0abf\u0ac1\5\u0150\u00a9\2\u0ac0\u0abf\3\2")
        buf.write(u"\2\2\u0ac0\u0ac1\3\2\2\2\u0ac1\u0ac3\3\2\2\2\u0ac2\u0ac4")
        buf.write(u"\5\u0152\u00aa\2\u0ac3\u0ac2\3\2\2\2\u0ac3\u0ac4\3\2")
        buf.write(u"\2\2\u0ac4\u0ac6\3\2\2\2\u0ac5\u0ab8\3\2\2\2\u0ac5\u0ac6")
        buf.write(u"\3\2\2\2\u0ac6\u0ac7\3\2\2\2\u0ac7\u0ac8\7\u021d\2\2")
        buf.write(u"\u0ac8\u0147\3\2\2\2\u0ac9\u0acb\7\u0104\2\2\u0aca\u0ac9")
        buf.write(u"\3\2\2\2\u0aca\u0acb\3\2\2\2\u0acb\u0acc\3\2\2\2\u0acc")
        buf.write(u"\u0acd\7\u00e5\2\2\u0acd\u0149\3\2\2\2\u0ace\u0ad7\7")
        buf.write(u"\u015a\2\2\u0acf\u0ad1\7\u0119\2\2\u0ad0\u0ad2\7\u0104")
        buf.write(u"\2\2\u0ad1\u0ad0\3\2\2\2\u0ad1\u0ad2\3\2\2\2\u0ad2\u0ad8")
        buf.write(u"\3\2\2\2\u0ad3\u0ad5\7\u011a\2\2\u0ad4\u0ad6\7\27\2\2")
        buf.write(u"\u0ad5\u0ad4\3\2\2\2\u0ad5\u0ad6\3\2\2\2\u0ad6\u0ad8")
        buf.write(u"\3\2\2\2\u0ad7\u0acf\3\2\2\2\u0ad7\u0ad3\3\2\2\2\u0ad7")
        buf.write(u"\u0ad8\3\2\2\2\u0ad8\u0ad9\3\2\2\2\u0ad9\u0adb\5\u049e")
        buf.write(u"\u0250\2\u0ada\u0adc\t$\2\2\u0adb\u0ada\3\2\2\2\u0adb")
        buf.write(u"\u0adc\3\2\2\2\u0adc\u014b\3\2\2\2\u0add\u0ade\7\u00ea")
        buf.write(u"\2\2\u0ade\u0adf\5\u049e\u0250\2\u0adf\u014d\3\2\2\2")
        buf.write(u"\u0ae0\u0ae1\7\u00d8\2\2\u0ae1\u0ae2\7\u008e\2\2\u0ae2")
        buf.write(u"\u0ae3\5\u049e\u0250\2\u0ae3\u014f\3\2\2\2\u0ae4\u0ae5")
        buf.write(u"\7\u010d\2\2\u0ae5\u0ae6\7\u008e\2\2\u0ae6\u0ae7\5\u049e")
        buf.write(u"\u0250\2\u0ae7\u0151\3\2\2\2\u0ae8\u0ae9\7\u00d9\2\2")
        buf.write(u"\u0ae9\u0aea\5\u049e\u0250\2\u0aea\u0153\3\2\2\2\u0aeb")
        buf.write(u"\u0aef\5\u0156\u00ac\2\u0aec\u0aef\5\u0158\u00ad\2\u0aed")
        buf.write(u"\u0aef\5\u015a\u00ae\2\u0aee\u0aeb\3\2\2\2\u0aee\u0aec")
        buf.write(u"\3\2\2\2\u0aee\u0aed\3\2\2\2\u0aef\u0155\3\2\2\2\u0af0")
        buf.write(u"\u0af1\5\u049e\u0250\2\u0af1\u0af3\5\u046c\u0237\2\u0af2")
        buf.write(u"\u0af4\5\u0164\u00b3\2\u0af3\u0af2\3\2\2\2\u0af3\u0af4")
        buf.write(u"\3\2\2\2\u0af4\u0af6\3\2\2\2\u0af5\u0af7\5\u016a\u00b6")
        buf.write(u"\2\u0af6\u0af5\3\2\2\2\u0af6\u0af7\3\2\2\2\u0af7\u0af8")
        buf.write(u"\3\2\2\2\u0af8\u0afa\5\u017a\u00be\2\u0af9\u0afb\5\u0186")
        buf.write(u"\u00c4\2\u0afa\u0af9\3\2\2\2\u0afa\u0afb\3\2\2\2\u0afb")
        buf.write(u"\u0afc\3\2\2\2\u0afc\u0afd\7\u021d\2\2\u0afd\u0157\3")
        buf.write(u"\2\2\2\u0afe\u0b00\5\u049e\u0250\2\u0aff\u0b01\5\u046c")
        buf.write(u"\u0237\2\u0b00\u0aff\3\2\2\2\u0b00\u0b01\3\2\2\2\u0b01")
        buf.write(u"\u0b03\3\2\2\2\u0b02\u0b04\5\u0164\u00b3\2\u0b03\u0b02")
        buf.write(u"\3\2\2\2\u0b03\u0b04\3\2\2\2\u0b04\u0b05\3\2\2\2\u0b05")
        buf.write(u"\u0b06\5\u0186\u00c4\2\u0b06\u0b07\7\u021d\2\2\u0b07")
        buf.write(u"\u0159\3\2\2\2\u0b08\u0b0a\5\u049e\u0250\2\u0b09\u0b0b")
        buf.write(u"\5\u046c\u0237\2\u0b0a\u0b09\3\2\2\2\u0b0a\u0b0b\3\2")
        buf.write(u"\2\2\u0b0b\u0b1c\3\2\2\2\u0b0c\u0b1b\5\u0170\u00b9\2")
        buf.write(u"\u0b0d\u0b1b\5\u0186\u00c4\2\u0b0e\u0b1b\5\u0174\u00bb")
        buf.write(u"\2\u0b0f\u0b1b\5\u0162\u00b2\2\u0b10\u0b1b\5\u015c\u00af")
        buf.write(u"\2\u0b11\u0b1b\5\u0164\u00b3\2\u0b12\u0b1b\5\u015e\u00b0")
        buf.write(u"\2\u0b13\u0b18\5\u0176\u00bc\2\u0b14\u0b18\5\u018c\u00c7")
        buf.write(u"\2\u0b15\u0b18\5\u0178\u00bd\2\u0b16\u0b18\5\u0172\u00ba")
        buf.write(u"\2\u0b17\u0b13\3\2\2\2\u0b17\u0b14\3\2\2\2\u0b17\u0b15")
        buf.write(u"\3\2\2\2\u0b17\u0b16\3\2\2\2\u0b18\u0b1b\3\2\2\2\u0b19")
        buf.write(u"\u0b1b\5\u0160\u00b1\2\u0b1a\u0b0c\3\2\2\2\u0b1a\u0b0d")
        buf.write(u"\3\2\2\2\u0b1a\u0b0e\3\2\2\2\u0b1a\u0b0f\3\2\2\2\u0b1a")
        buf.write(u"\u0b10\3\2\2\2\u0b1a\u0b11\3\2\2\2\u0b1a\u0b12\3\2\2")
        buf.write(u"\2\u0b1a\u0b17\3\2\2\2\u0b1a\u0b19\3\2\2\2\u0b1b\u0b1e")
        buf.write(u"\3\2\2\2\u0b1c\u0b1a\3\2\2\2\u0b1c\u0b1d\3\2\2\2\u0b1d")
        buf.write(u"\u0b1f\3\2\2\2\u0b1e\u0b1c\3\2\2\2\u0b1f\u0b20\7\u021d")
        buf.write(u"\2\2\u0b20\u015b\3\2\2\2\u0b21\u0b23\7.\2\2\u0b22\u0b24")
        buf.write(u"\7\u0207\2\2\u0b23\u0b22\3\2\2\2\u0b23\u0b24\3\2\2\2")
        buf.write(u"\u0b24\u0b25\3\2\2\2\u0b25\u0b26\7\u0210\2\2\u0b26\u015d")
        buf.write(u"\3\2\2\2\u0b27\u0b29\7N\2\2\u0b28\u0b2a\7\u0141\2\2\u0b29")
        buf.write(u"\u0b28\3\2\2\2\u0b29\u0b2a\3\2\2\2\u0b2a\u0b2c\3\2\2")
        buf.write(u"\2\u0b2b\u0b2d\7\u0104\2\2\u0b2c\u0b2b\3\2\2\2\u0b2c")
        buf.write(u"\u0b2d\3\2\2\2\u0b2d\u0b2e\3\2\2\2\u0b2e\u0b2f\5\u049e")
        buf.write(u"\u0250\2\u0b2f\u015f\3\2\2\2\u0b30\u0b32\7\u00e9\2\2")
        buf.write(u"\u0b31\u0b33\7\u00f8\2\2\u0b32\u0b31\3\2\2\2\u0b32\u0b33")
        buf.write(u"\3\2\2\2\u0b33\u0161\3\2\2\2\u0b34\u0b36\t\37\2\2\u0b35")
        buf.write(u"\u0b37\7\u01a1\2\2\u0b36\u0b35\3\2\2\2\u0b36\u0b37\3")
        buf.write(u"\2\2\2\u0b37\u0163\3\2\2\2\u0b38\u0b3a\7\u011d\2\2\u0b39")
        buf.write(u"\u0b38\3\2\2\2\u0b39\u0b3a\3\2\2\2\u0b3a\u0b3c\3\2\2")
        buf.write(u"\2\u0b3b\u0b3d\7\u0141\2\2\u0b3c\u0b3b\3\2\2\2\u0b3c")
        buf.write(u"\u0b3d\3\2\2\2\u0b3d\u0b3f\3\2\2\2\u0b3e\u0b40\7\u0104")
        buf.write(u"\2\2\u0b3f\u0b3e\3\2\2\2\u0b3f\u0b40\3\2\2\2\u0b40\u0b43")
        buf.write(u"\3\2\2\2\u0b41\u0b44\5\u0166\u00b4\2\u0b42\u0b44\5\u0168")
        buf.write(u"\u00b5\2\u0b43\u0b41\3\2\2\2\u0b43\u0b42\3\2\2\2\u0b44")
        buf.write(u"\u0165\3\2\2\2\u0b45\u0b4b\5\u049e\u0250\2\u0b46\u0b48")
        buf.write(u"\7\u014c\2\2\u0b47\u0b46\3\2\2\2\u0b47\u0b48\3\2\2\2")
        buf.write(u"\u0b48\u0b49\3\2\2\2\u0b49\u0b4a\7\u013b\2\2\u0b4a\u0b4c")
        buf.write(u"\7\u015a\2\2\u0b4b\u0b47\3\2\2\2\u0b4b\u0b4c\3\2\2\2")
        buf.write(u"\u0b4c\u0167\3\2\2\2\u0b4d\u0b4e\7\u0162\2\2\u0b4e\u0b4f")
        buf.write(u"\5\u049e\u0250\2\u0b4f\u0169\3\2\2\2\u0b50\u0b51\7\u013b")
        buf.write(u"\2\2\u0b51\u0b53\7\u00e9\2\2\u0b52\u0b54\7\u0104\2\2")
        buf.write(u"\u0b53\u0b52\3\2\2\2\u0b53\u0b54\3\2\2\2\u0b54\u0b58")
        buf.write(u"\3\2\2\2\u0b55\u0b59\5\u049e\u0250\2\u0b56\u0b59\5\u016e")
        buf.write(u"\u00b8\2\u0b57\u0b59\5\u016c\u00b7\2\u0b58\u0b55\3\2")
        buf.write(u"\2\2\u0b58\u0b56\3\2\2\2\u0b58\u0b57\3\2\2\2\u0b59\u016b")
        buf.write(u"\3\2\2\2\u0b5a\u0b5b\7\u0162\2\2\u0b5b\u0b5c\5\u049e")
        buf.write(u"\u0250\2\u0b5c\u016d\3\2\2\2\u0b5d\u0b5e\7\u013b\2\2")
        buf.write(u"\u0b5e\u0b5f\7\u015a\2\2\u0b5f\u016f\3\2\2\2\u0b60\u0b62")
        buf.write(u"\t\35\2\2\u0b61\u0b63\7\u0104\2\2\u0b62\u0b61\3\2\2\2")
        buf.write(u"\u0b62\u0b63\3\2\2\2\u0b63\u0b64\3\2\2\2\u0b64\u0b65")
        buf.write(u"\5\u01d4\u00eb\2\u0b65\u0171\3\2\2\2\u0b66\u0b68\7\u0198")
        buf.write(u"\2\2\u0b67\u0b69\7\u014c\2\2\u0b68\u0b67\3\2\2\2\u0b68")
        buf.write(u"\u0b69\3\2\2\2\u0b69\u0b6c\3\2\2\2\u0b6a\u0b6d\7\u00d7")
        buf.write(u"\2\2\u0b6b\u0b6d\5\u046c\u0237\2\u0b6c\u0b6a\3\2\2\2")
        buf.write(u"\u0b6c\u0b6b\3\2\2\2\u0b6d\u0173\3\2\2\2\u0b6e\u0b70")
        buf.write(u"\7\u01bc\2\2\u0b6f\u0b71\7\u0104\2\2\u0b70\u0b6f\3\2")
        buf.write(u"\2\2\u0b70\u0b71\3\2\2\2\u0b71\u0b72\3\2\2\2\u0b72\u0b73")
        buf.write(u"\t\t\2\2\u0b73\u0b75\7\u01b1\2\2\u0b74\u0b76\7A\2\2\u0b75")
        buf.write(u"\u0b74\3\2\2\2\u0b75\u0b76\3\2\2\2\u0b76\u0175\3\2\2")
        buf.write(u"\2\u0b77\u0b79\7\u01c6\2\2\u0b78\u0b7a\7\u0104\2\2\u0b79")
        buf.write(u"\u0b78\3\2\2\2\u0b79\u0b7a\3\2\2\2\u0b7a\u0b7b\3\2\2")
        buf.write(u"\2\u0b7b\u0b7c\5\u0436\u021c\2\u0b7c\u0177\3\2\2\2\u0b7d")
        buf.write(u"\u0b7e\7\u01d7\2\2\u0b7e\u0b85\5\u0436\u021c\2\u0b7f")
        buf.write(u"\u0b81\7\u0218\2\2\u0b80\u0b7f\3\2\2\2\u0b80\u0b81\3")
        buf.write(u"\2\2\2\u0b81\u0b82\3\2\2\2\u0b82\u0b84\5\u0436\u021c")
        buf.write(u"\2\u0b83\u0b80\3\2\2\2\u0b84\u0b87\3\2\2\2\u0b85\u0b83")
        buf.write(u"\3\2\2\2\u0b85\u0b86\3\2\2\2\u0b86\u0b93\3\2\2\2\u0b87")
        buf.write(u"\u0b85\3\2\2\2\u0b88\u0b89\7\u01fe\2\2\u0b89\u0b90\5")
        buf.write(u"\u046c\u0237\2\u0b8a\u0b8c\7\u0218\2\2\u0b8b\u0b8a\3")
        buf.write(u"\2\2\2\u0b8b\u0b8c\3\2\2\2\u0b8c\u0b8d\3\2\2\2\u0b8d")
        buf.write(u"\u0b8f\5\u046c\u0237\2\u0b8e\u0b8b\3\2\2\2\u0b8f\u0b92")
        buf.write(u"\3\2\2\2\u0b90\u0b8e\3\2\2\2\u0b90\u0b91\3\2\2\2\u0b91")
        buf.write(u"\u0b94\3\2\2\2\u0b92\u0b90\3\2\2\2\u0b93\u0b88\3\2\2")
        buf.write(u"\2\u0b93\u0b94\3\2\2\2\u0b94\u0179\3\2\2\2\u0b95\u0b97")
        buf.write(u"\7\u01f7\2\2\u0b96\u0b98\7\u0104\2\2\u0b97\u0b96\3\2")
        buf.write(u"\2\2\u0b97\u0b98\3\2\2\2\u0b98\u0ba0\3\2\2\2\u0b99\u0ba1")
        buf.write(u"\5\u017c\u00bf\2\u0b9a\u0ba1\5\u017e\u00c0\2\u0b9b\u0ba1")
        buf.write(u"\5\u0180\u00c1\2\u0b9c\u0ba1\5\u0182\u00c2\2\u0b9d\u0ba1")
        buf.write(u"\5\u0184\u00c3\2\u0b9e\u0ba1\5\u0188\u00c5\2\u0b9f\u0ba1")
        buf.write(u"\5\u018a\u00c6\2\u0ba0\u0b99\3\2\2\2\u0ba0\u0b9a\3\2")
        buf.write(u"\2\2\u0ba0\u0b9b\3\2\2\2\u0ba0\u0b9c\3\2\2\2\u0ba0\u0b9d")
        buf.write(u"\3\2\2\2\u0ba0\u0b9e\3\2\2\2\u0ba0\u0b9f\3\2\2\2\u0ba1")
        buf.write(u"\u017b\3\2\2\2\u0ba2\u0ba3\7\u0191\2\2\u0ba3\u0ba6\7")
        buf.write(u"\u00ea\2\2\u0ba4\u0ba6\7\u01a0\2\2\u0ba5\u0ba2\3\2\2")
        buf.write(u"\2\u0ba5\u0ba4\3\2\2\2\u0ba6\u017d\3\2\2\2\u0ba7\u0ba8")
        buf.write(u"\7\u015a\2\2\u0ba8\u0bab\7\u00ea\2\2\u0ba9\u0bab\7\u015f")
        buf.write(u"\2\2\u0baa\u0ba7\3\2\2\2\u0baa\u0ba9\3\2\2\2\u0bab\u017f")
        buf.write(u"\3\2\2\2\u0bac\u0bad\7e\2\2\u0bad\u0bb0\7\u00ea\2\2\u0bae")
        buf.write(u"\u0bb0\7=\2\2\u0baf\u0bac\3\2\2\2\u0baf\u0bae\3\2\2\2")
        buf.write(u"\u0bb0\u0bb3\3\2\2\2\u0bb1\u0bb4\7\u00d7\2\2\u0bb2\u0bb4")
        buf.write(u"\5\u046c\u0237\2\u0bb3\u0bb1\3\2\2\2\u0bb3\u0bb2\3\2")
        buf.write(u"\2\2\u0bb4\u0181\3\2\2\2\u0bb5\u0bb6\t%\2\2\u0bb6\u0183")
        buf.write(u"\3\2\2\2\u0bb7\u0bb8\7e\2\2\u0bb8\u0bbb\7\u00d9\2\2\u0bb9")
        buf.write(u"\u0bbb\7<\2\2\u0bba\u0bb7\3\2\2\2\u0bba\u0bb9\3\2\2\2")
        buf.write(u"\u0bbb\u0bbe\3\2\2\2\u0bbc\u0bbf\7\u00d7\2\2\u0bbd\u0bbf")
        buf.write(u"\5\u046c\u0237\2\u0bbe\u0bbc\3\2\2\2\u0bbe\u0bbd\3\2")
        buf.write(u"\2\2\u0bbf\u0185\3\2\2\2\u0bc0\u0bc2\7\u01ff\2\2\u0bc1")
        buf.write(u"\u0bc3\7\u0104\2\2\u0bc2\u0bc1\3\2\2\2\u0bc2\u0bc3\3")
        buf.write(u"\2\2\2\u0bc3\u0bc5\3\2\2\2\u0bc4\u0bc0\3\2\2\2\u0bc4")
        buf.write(u"\u0bc5\3\2\2\2\u0bc5\u0bc6\3\2\2\2\u0bc6\u0bc7\t\36\2")
        buf.write(u"\2\u0bc7\u0187\3\2\2\2\u0bc8\u0bc9\7\u015a\2\2\u0bc9")
        buf.write(u"\u0bcc\7\u00d9\2\2\u0bca\u0bcc\7\u015e\2\2\u0bcb\u0bc8")
        buf.write(u"\3\2\2\2\u0bcb\u0bca\3\2\2\2\u0bcc\u0189\3\2\2\2\u0bcd")
        buf.write(u"\u0bce\7\u0191\2\2\u0bce\u0bd1\7\u00d9\2\2\u0bcf\u0bd1")
        buf.write(u"\7\u019f\2\2\u0bd0\u0bcd\3\2\2\2\u0bd0\u0bcf\3\2\2\2")
        buf.write(u"\u0bd1\u018b\3\2\2\2\u0bd2\u0bd4\7\u0202\2\2\u0bd3\u0bd5")
        buf.write(u"\7\u0104\2\2\u0bd4\u0bd3\3\2\2\2\u0bd4\u0bd5\3\2\2\2")
        buf.write(u"\u0bd5\u0bd6\3\2\2\2\u0bd6\u0bd7\5\u0498\u024d\2\u0bd7")
        buf.write(u"\u018d\3\2\2\2\u0bd8\u0bd9\7\u0171\2\2\u0bd9\u0bda\7")
        buf.write(u"\u01a9\2\2\u0bda\u0bde\7\u021d\2\2\u0bdb\u0bdd\5\u0190")
        buf.write(u"\u00c9\2\u0bdc\u0bdb\3\2\2\2\u0bdd\u0be0\3\2\2\2\u0bde")
        buf.write(u"\u0bdc\3\2\2\2\u0bde\u0bdf\3\2\2\2\u0bdf\u018f\3\2\2")
        buf.write(u"\2\u0be0\u0bde\3\2\2\2\u0be1\u0be4\5\u0192\u00ca\2\u0be2")
        buf.write(u"\u0be4\5\u0194\u00cb\2\u0be3\u0be1\3\2\2\2\u0be3\u0be2")
        buf.write(u"\3\2\2\2\u0be4\u0191\3\2\2\2\u0be5\u0be6\7\u010f\2\2")
        buf.write(u"\u0be6\u0be7\5\u047a\u023e\2\u0be7\u0be9\7\u00ce\2\2")
        buf.write(u"\u0be8\u0bea\5\u0196\u00cc\2\u0be9\u0be8\3\2\2\2\u0be9")
        buf.write(u"\u0bea\3\2\2\2\u0bea\u0bec\3\2\2\2\u0beb\u0bed\5\u01a0")
        buf.write(u"\u00d1\2\u0bec\u0beb\3\2\2\2\u0bec\u0bed\3\2\2\2\u0bed")
        buf.write(u"\u0193\3\2\2\2\u0bee\u0bef\7\u010e\2\2\u0bef\u0bf0\5")
        buf.write(u"\u047a\u023e\2\u0bf0\u0bf2\7\u00f4\2\2\u0bf1\u0bf3\5")
        buf.write(u"\u01b2\u00da\2\u0bf2\u0bf1\3\2\2\2\u0bf2\u0bf3\3\2\2")
        buf.write(u"\2\u0bf3\u0bf5\3\2\2\2\u0bf4\u0bf6\5\u01b0\u00d9\2\u0bf5")
        buf.write(u"\u0bf4\3\2\2\2\u0bf5\u0bf6\3\2\2\2\u0bf6\u0bfb\3\2\2")
        buf.write(u"\2\u0bf7\u0bfa\5\u0198\u00cd\2\u0bf8\u0bfa\5\u01a2\u00d2")
        buf.write(u"\2\u0bf9\u0bf7\3\2\2\2\u0bf9\u0bf8\3\2\2\2\u0bfa\u0bfd")
        buf.write(u"\3\2\2\2\u0bfb\u0bf9\3\2\2\2\u0bfb\u0bfc\3\2\2\2\u0bfc")
        buf.write(u"\u0195\3\2\2\2\u0bfd\u0bfb\3\2\2\2\u0bfe\u0c04\7!\2\2")
        buf.write(u"\u0bff\u0c01\7\u01b8\2\2\u0c00\u0c02\7\u0104\2\2\u0c01")
        buf.write(u"\u0c00\3\2\2\2\u0c01\u0c02\3\2\2\2\u0c02\u0c03\3\2\2")
        buf.write(u"\2\u0c03\u0c05\t&\2\2\u0c04\u0bff\3\2\2\2\u0c04\u0c05")
        buf.write(u"\3\2\2\2\u0c05\u0197\3\2\2\2\u0c06\u0c08\7!\2\2\u0c07")
        buf.write(u"\u0c09\5\u019a\u00ce\2\u0c08\u0c07\3\2\2\2\u0c08\u0c09")
        buf.write(u"\3\2\2\2\u0c09\u0c0f\3\2\2\2\u0c0a\u0c0c\7\u0116\2\2")
        buf.write(u"\u0c0b\u0c0d\7\u0104\2\2\u0c0c\u0c0b\3\2\2\2\u0c0c\u0c0d")
        buf.write(u"\3\2\2\2\u0c0d\u0c0e\3\2\2\2\u0c0e\u0c10\t\'\2\2\u0c0f")
        buf.write(u"\u0c0a\3\2\2\2\u0c0f\u0c10\3\2\2\2\u0c10\u0c12\3\2\2")
        buf.write(u"\2\u0c11\u0c13\5\u019c\u00cf\2\u0c12\u0c11\3\2\2\2\u0c12")
        buf.write(u"\u0c13\3\2\2\2\u0c13\u0c15\3\2\2\2\u0c14\u0c16\5\u019e")
        buf.write(u"\u00d0\2\u0c15\u0c14\3\2\2\2\u0c15\u0c16\3\2\2\2\u0c16")
        buf.write(u"\u0199\3\2\2\2\u0c17\u0c18\7\u00e0\2\2\u0c18\u0c19\7")
        buf.write(u"\u0104\2\2\u0c19\u0c1a\5\u0498\u024d\2\u0c1a\u019b\3")
        buf.write(u"\2\2\2\u0c1b\u0c1d\7\u0117\2\2\u0c1c\u0c1e\7\u0104\2")
        buf.write(u"\2\u0c1d\u0c1c\3\2\2\2\u0c1d\u0c1e\3\2\2\2\u0c1e\u0c1f")
        buf.write(u"\3\2\2\2\u0c1f\u0c20\5\u0498\u024d\2\u0c20\u019d\3\2")
        buf.write(u"\2\2\u0c21\u0c23\7\u01ef\2\2\u0c22\u0c24\7\u0104\2\2")
        buf.write(u"\u0c23\u0c22\3\2\2\2\u0c23\u0c24\3\2\2\2\u0c24\u0c25")
        buf.write(u"\3\2\2\2\u0c25\u0c26\5\u0498\u024d\2\u0c26\u019f\3\2")
        buf.write(u"\2\2\u0c27\u0c28\7\u00bd\2\2\u0c28\u0c2a\5\u0484\u0243")
        buf.write(u"\2\u0c29\u0c2b\5\u01a4\u00d3\2\u0c2a\u0c29\3\2\2\2\u0c2a")
        buf.write(u"\u0c2b\3\2\2\2\u0c2b\u01a1\3\2\2\2\u0c2c\u0c2d\7\u00bd")
        buf.write(u"\2\2\u0c2d\u0c2f\5\u0484\u0243\2\u0c2e\u0c30\5\u01a4")
        buf.write(u"\u00d3\2\u0c2f\u0c2e\3\2\2\2\u0c2f\u0c30\3\2\2\2\u0c30")
        buf.write(u"\u0c32\3\2\2\2\u0c31\u0c33\5\u01ac\u00d7\2\u0c32\u0c31")
        buf.write(u"\3\2\2\2\u0c32\u0c33\3\2\2\2\u0c33\u0c35\3\2\2\2\u0c34")
        buf.write(u"\u0c36\5\u01a8\u00d5\2\u0c35\u0c34\3\2\2\2\u0c35\u0c36")
        buf.write(u"\3\2\2\2\u0c36\u0c38\3\2\2\2\u0c37\u0c39\5\u01a6\u00d4")
        buf.write(u"\2\u0c38\u0c37\3\2\2\2\u0c38\u0c39\3\2\2\2\u0c39\u01a3")
        buf.write(u"\3\2\2\2\u0c3a\u0c3b\7\u00da\2\2\u0c3b\u0c3c\5\u0498")
        buf.write(u"\u024d\2\u0c3c\u01a5\3\2\2\2\u0c3d\u0c3e\7\u00e4\2\2")
        buf.write(u"\u0c3e\u0c3f\5\u046c\u0237\2\u0c3f\u01a7\3\2\2\2\u0c40")
        buf.write(u"\u0c42\7\u0201\2\2\u0c41\u0c43\5\u01aa\u00d6\2\u0c42")
        buf.write(u"\u0c41\3\2\2\2\u0c43\u0c44\3\2\2\2\u0c44\u0c42\3\2\2")
        buf.write(u"\2\u0c44\u0c45\3\2\2\2\u0c45\u01a9\3\2\2\2\u0c46\u0c49")
        buf.write(u"\5\u046c\u0237\2\u0c47\u0c49\5\u0472\u023a\2\u0c48\u0c46")
        buf.write(u"\3\2\2\2\u0c48\u0c47\3\2\2\2\u0c49\u01ab\3\2\2\2\u0c4a")
        buf.write(u"\u0c4c\7\u0209\2\2\u0c4b\u0c4d\5\u01ae\u00d8\2\u0c4c")
        buf.write(u"\u0c4b\3\2\2\2\u0c4d\u0c4e\3\2\2\2\u0c4e\u0c4c\3\2\2")
        buf.write(u"\2\u0c4e\u0c4f\3\2\2\2\u0c4f\u01ad\3\2\2\2\u0c50\u0c53")
        buf.write(u"\5\u047c\u023f\2\u0c51\u0c53\5\u0472\u023a\2\u0c52\u0c50")
        buf.write(u"\3\2\2\2\u0c52\u0c51\3\2\2\2\u0c53\u01af\3\2\2\2\u0c54")
        buf.write(u"\u0c56\7\u0104\2\2\u0c55\u0c54\3\2\2\2\u0c55\u0c56\3")
        buf.write(u"\2\2\2\u0c56\u0c57\3\2\2\2\u0c57\u0c58\7R\2\2\u0c58\u01b1")
        buf.write(u"\3\2\2\2\u0c59\u0c5b\7\u0104\2\2\u0c5a\u0c59\3\2\2\2")
        buf.write(u"\u0c5a\u0c5b\3\2\2\2\u0c5b\u0c5c\3\2\2\2\u0c5c\u0c5d")
        buf.write(u"\7\u00e5\2\2\u0c5d\u01b3\3\2\2\2\u0c5e\u0c63\5\u01b6")
        buf.write(u"\u00dc\2\u0c5f\u0c63\5\u01b8\u00dd\2\u0c60\u0c63\5\u01ba")
        buf.write(u"\u00de\2\u0c61\u0c63\5\u01bc\u00df\2\u0c62\u0c5e\3\2")
        buf.write(u"\2\2\u0c62\u0c5f\3\2\2\2\u0c62\u0c60\3\2\2\2\u0c62\u0c61")
        buf.write(u"\3\2\2\2\u0c63\u01b5\3\2\2\2\u0c64\u0c67\t(\2\2\u0c65")
        buf.write(u"\u0c68\7\u00d6\2\2\u0c66\u0c68\5\u046c\u0237\2\u0c67")
        buf.write(u"\u0c65\3\2\2\2\u0c67\u0c66\3\2\2\2\u0c67\u0c68\3\2\2")
        buf.write(u"\2\u0c68\u0c80\3\2\2\2\u0c69\u0c7f\5\u01de\u00f0\2\u0c6a")
        buf.write(u"\u0c7f\5\u01c8\u00e5\2\u0c6b\u0c7f\5\u01c4\u00e3\2\u0c6c")
        buf.write(u"\u0c7f\5\u01c6\u00e4\2\u0c6d\u0c7f\5\u01ea\u00f6\2\u0c6e")
        buf.write(u"\u0c7f\5\u01e6\u00f4\2\u0c6f\u0c7f\5\u01d2\u00ea\2\u0c70")
        buf.write(u"\u0c7f\5\u01c2\u00e2\2\u0c71\u0c7f\5\u01e8\u00f5\2\u0c72")
        buf.write(u"\u0c7f\5\u01ee\u00f8\2\u0c73\u0c7f\5\u01ec\u00f7\2\u0c74")
        buf.write(u"\u0c7f\5\u01f0\u00f9\2\u0c75\u0c7f\5\u01da\u00ee\2\u0c76")
        buf.write(u"\u0c7f\5\u01cc\u00e7\2\u0c77\u0c7f\5\u01e2\u00f2\2\u0c78")
        buf.write(u"\u0c7f\5\u01e4\u00f3\2\u0c79\u0c7f\5\u01ca\u00e6\2\u0c7a")
        buf.write(u"\u0c7f\5\u01c0\u00e1\2\u0c7b\u0c7f\5\u01f8\u00fd\2\u0c7c")
        buf.write(u"\u0c7f\5\u01be\u00e0\2\u0c7d\u0c7f\5\u01dc\u00ef\2\u0c7e")
        buf.write(u"\u0c69\3\2\2\2\u0c7e\u0c6a\3\2\2\2\u0c7e\u0c6b\3\2\2")
        buf.write(u"\2\u0c7e\u0c6c\3\2\2\2\u0c7e\u0c6d\3\2\2\2\u0c7e\u0c6e")
        buf.write(u"\3\2\2\2\u0c7e\u0c6f\3\2\2\2\u0c7e\u0c70\3\2\2\2\u0c7e")
        buf.write(u"\u0c71\3\2\2\2\u0c7e\u0c72\3\2\2\2\u0c7e\u0c73\3\2\2")
        buf.write(u"\2\u0c7e\u0c74\3\2\2\2\u0c7e\u0c75\3\2\2\2\u0c7e\u0c76")
        buf.write(u"\3\2\2\2\u0c7e\u0c77\3\2\2\2\u0c7e\u0c78\3\2\2\2\u0c7e")
        buf.write(u"\u0c79\3\2\2\2\u0c7e\u0c7a\3\2\2\2\u0c7e\u0c7b\3\2\2")
        buf.write(u"\2\u0c7e\u0c7c\3\2\2\2\u0c7e\u0c7d\3\2\2\2\u0c7f\u0c82")
        buf.write(u"\3\2\2\2\u0c80\u0c7e\3\2\2\2\u0c80\u0c81\3\2\2\2\u0c81")
        buf.write(u"\u0c83\3\2\2\2\u0c82\u0c80\3\2\2\2\u0c83\u0c84\7\u021d")
        buf.write(u"\2\2\u0c84\u01b7\3\2\2\2\u0c85\u0c86\7\u022f\2\2\u0c86")
        buf.write(u"\u0c87\5\u046c\u0237\2\u0c87\u0c88\5\u01e0\u00f1\2\u0c88")
        buf.write(u"\u0c89\7\u021d\2\2\u0c89\u01b9\3\2\2\2\u0c8a\u0c8b\7")
        buf.write(u"\u0231\2\2\u0c8b\u0c8c\5\u046a\u0236\2\u0c8c\u0c8d\5")
        buf.write(u"\u01f0\u00f9\2\u0c8d\u0c8e\7\u021d\2\2\u0c8e\u01bb\3")
        buf.write(u"\2\2\2\u0c8f\u0c91\7\u0238\2\2\u0c90\u0c8f\3\2\2\2\u0c91")
        buf.write(u"\u0c92\3\2\2\2\u0c92\u0c90\3\2\2\2\u0c92\u0c93\3\2\2")
        buf.write(u"\2\u0c93\u0c95\3\2\2\2\u0c94\u0c96\7\u021d\2\2\u0c95")
        buf.write(u"\u0c94\3\2\2\2\u0c95\u0c96\3\2\2\2\u0c96\u01bd\3\2\2")
        buf.write(u"\2\u0c97\u0c98\7\n\2\2\u0c98\u01bf\3\2\2\2\u0c99\u0c9b")
        buf.write(u"\7.\2\2\u0c9a\u0c9c\7\u0207\2\2\u0c9b\u0c9a\3\2\2\2\u0c9b")
        buf.write(u"\u0c9c\3\2\2\2\u0c9c\u0c9d\3\2\2\2\u0c9d\u0c9e\t)\2\2")
        buf.write(u"\u0c9e\u01c1\3\2\2\2\u0c9f\u0ca0\t*\2\2\u0ca0\u01c3\3")
        buf.write(u"\2\2\2\u0ca1\u0ca3\7\u0104\2\2\u0ca2\u0ca1\3\2\2\2\u0ca2")
        buf.write(u"\u0ca3\3\2\2\2\u0ca3\u0ca4\3\2\2\2\u0ca4\u0ca7\7\u00d1")
        buf.write(u"\2\2\u0ca5\u0ca6\7\64\2\2\u0ca6\u0ca8\5\u0498\u024d\2")
        buf.write(u"\u0ca7\u0ca5\3\2\2\2\u0ca7\u0ca8\3\2\2\2\u0ca8\u01c5")
        buf.write(u"\3\2\2\2\u0ca9\u0cab\7\u0104\2\2\u0caa\u0ca9\3\2\2\2")
        buf.write(u"\u0caa\u0cab\3\2\2\2\u0cab\u0cac\3\2\2\2\u0cac\u0cad")
        buf.write(u"\7\u00e5\2\2\u0cad\u01c7\3\2\2\2\u0cae\u0caf\t+\2\2\u0caf")
        buf.write(u"\u01c9\3\2\2\2\u0cb0\u0cb2\t\37\2\2\u0cb1\u0cb3\7\u01a1")
        buf.write(u"\2\2\u0cb2\u0cb1\3\2\2\2\u0cb2\u0cb3\3\2\2\2\u0cb3\u01cb")
        buf.write(u"\3\2\2\2\u0cb4\u0cb5\7\u0147\2\2\u0cb5\u0cb7\5\u049e")
        buf.write(u"\u0250\2\u0cb6\u0cb8\5\u01ce\u00e8\2\u0cb7\u0cb6\3\2")
        buf.write(u"\2\2\u0cb7\u0cb8\3\2\2\2\u0cb8\u0cba\3\2\2\2\u0cb9\u0cbb")
        buf.write(u"\7\u01ee\2\2\u0cba\u0cb9\3\2\2\2\u0cba\u0cbb\3\2\2\2")
        buf.write(u"\u0cbb\u0cc1\3\2\2\2\u0cbc\u0cbe\7\u008b\2\2\u0cbd\u0cbf")
        buf.write(u"\7\u014c\2\2\u0cbe\u0cbd\3\2\2\2\u0cbe\u0cbf\3\2\2\2")
        buf.write(u"\u0cbf\u0cc0\3\2\2\2\u0cc0\u0cc2\5\u0446\u0224\2\u0cc1")
        buf.write(u"\u0cbc\3\2\2\2\u0cc1\u0cc2\3\2\2\2\u0cc2\u0cc6\3\2\2")
        buf.write(u"\2\u0cc3\u0cc5\5\u01d0\u00e9\2\u0cc4\u0cc3\3\2\2\2\u0cc5")
        buf.write(u"\u0cc8\3\2\2\2\u0cc6\u0cc4\3\2\2\2\u0cc6\u0cc7\3\2\2")
        buf.write(u"\2\u0cc7\u0cd5\3\2\2\2\u0cc8\u0cc6\3\2\2\2\u0cc9\u0ccb")
        buf.write(u"\7\u00f7\2\2\u0cca\u0ccc\7\64\2\2\u0ccb\u0cca\3\2\2\2")
        buf.write(u"\u0ccb\u0ccc\3\2\2\2\u0ccc\u0cce\3\2\2\2\u0ccd\u0ccf")
        buf.write(u"\7\u0122\2\2\u0cce\u0ccd\3\2\2\2\u0cce\u0ccf\3\2\2\2")
        buf.write(u"\u0ccf\u0cd1\3\2\2\2\u0cd0\u0cd2\5\u0476\u023c\2\u0cd1")
        buf.write(u"\u0cd0\3\2\2\2\u0cd2\u0cd3\3\2\2\2\u0cd3\u0cd1\3\2\2")
        buf.write(u"\2\u0cd3\u0cd4\3\2\2\2\u0cd4\u0cd6\3\2\2\2\u0cd5\u0cc9")
        buf.write(u"\3\2\2\2\u0cd5\u0cd6\3\2\2\2\u0cd6\u01cd\3\2\2\2\u0cd7")
        buf.write(u"\u0cd8\7\u01f0\2\2\u0cd8\u0cd9\5\u049e\u0250\2\u0cd9")
        buf.write(u"\u01cf\3\2\2\2\u0cda\u0cdc\t,\2\2\u0cdb\u0cdd\7\u0109")
        buf.write(u"\2\2\u0cdc\u0cdb\3\2\2\2\u0cdc\u0cdd\3\2\2\2\u0cdd\u0cdf")
        buf.write(u"\3\2\2\2\u0cde\u0ce0\7\u0104\2\2\u0cdf\u0cde\3\2\2\2")
        buf.write(u"\u0cdf\u0ce0\3\2\2\2\u0ce0\u0ce2\3\2\2\2\u0ce1\u0ce3")
        buf.write(u"\5\u0446\u0224\2\u0ce2\u0ce1\3\2\2\2\u0ce3\u0ce4\3\2")
        buf.write(u"\2\2\u0ce4\u0ce2\3\2\2\2\u0ce4\u0ce5\3\2\2\2\u0ce5\u01d1")
        buf.write(u"\3\2\2\2\u0ce6\u0ce8\t\35\2\2\u0ce7\u0ce9\7\u0104\2\2")
        buf.write(u"\u0ce8\u0ce7\3\2\2\2\u0ce8\u0ce9\3\2\2\2\u0ce9\u0cea")
        buf.write(u"\3\2\2\2\u0cea\u0ceb\5\u01d4\u00eb\2\u0ceb\u01d3\3\2")
        buf.write(u"\2\2\u0cec\u0cee\5\u01d6\u00ec\2\u0ced\u0cec\3\2\2\2")
        buf.write(u"\u0cee\u0cef\3\2\2\2\u0cef\u0ced\3\2\2\2\u0cef\u0cf0")
        buf.write(u"\3\2\2\2\u0cf0\u0cf2\3\2\2\2\u0cf1\u0cf3\5\u01d8\u00ed")
        buf.write(u"\2\u0cf2\u0cf1\3\2\2\2\u0cf2\u0cf3\3\2\2\2\u0cf3\u0cf5")
        buf.write(u"\3\2\2\2\u0cf4\u0ced\3\2\2\2\u0cf5\u0cf6\3\2\2\2\u0cf6")
        buf.write(u"\u0cf4\3\2\2\2\u0cf6\u0cf7\3\2\2\2\u0cf7\u01d5\3\2\2")
        buf.write(u"\2\u0cf8\u0d09\7\u021b\2\2\u0cf9\u0d09\7\u0234\2\2\u0cfa")
        buf.write(u"\u0d09\7\u0233\2\2\u0cfb\u0d09\7\u022d\2\2\u0cfc\u0d09")
        buf.write(u"\7\u0218\2\2\u0cfd\u0d09\7\u021e\2\2\u0cfe\u0d09\7\u0217")
        buf.write(u"\2\2\u0cff\u0d09\7\u0215\2\2\u0d00\u0d09\7\u0216\2\2")
        buf.write(u"\u0d01\u0d09\7\u0225\2\2\u0d02\u0d09\7\u022c\2\2\u0d03")
        buf.write(u"\u0d09\7\u022a\2\2\u0d04\u0d09\7\u0226\2\2\u0d05\u0d09")
        buf.write(u"\7\u0223\2\2\u0d06\u0d09\7\u0227\2\2\u0d07\u0d09\5\u049e")
        buf.write(u"\u0250\2\u0d08\u0cf8\3\2\2\2\u0d08\u0cf9\3\2\2\2\u0d08")
        buf.write(u"\u0cfa\3\2\2\2\u0d08\u0cfb\3\2\2\2\u0d08\u0cfc\3\2\2")
        buf.write(u"\2\u0d08\u0cfd\3\2\2\2\u0d08\u0cfe\3\2\2\2\u0d08\u0cff")
        buf.write(u"\3\2\2\2\u0d08\u0d00\3\2\2\2\u0d08\u0d01\3\2\2\2\u0d08")
        buf.write(u"\u0d02\3\2\2\2\u0d08\u0d03\3\2\2\2\u0d08\u0d04\3\2\2")
        buf.write(u"\2\u0d08\u0d05\3\2\2\2\u0d08\u0d06\3\2\2\2\u0d08\u0d07")
        buf.write(u"\3\2\2\2\u0d09\u01d7\3\2\2\2\u0d0a\u0d0b\7\u0225\2\2")
        buf.write(u"\u0d0b\u0d0c\5\u049e\u0250\2\u0d0c\u0d0d\7\u022c\2\2")
        buf.write(u"\u0d0d\u01d9\3\2\2\2\u0d0e\u0d10\7\u017e\2\2\u0d0f\u0d0e")
        buf.write(u"\3\2\2\2\u0d0f\u0d10\3\2\2\2\u0d10\u0d12\3\2\2\2\u0d11")
        buf.write(u"\u0d13\7\64\2\2\u0d12\u0d11\3\2\2\2\u0d12\u0d13\3\2\2")
        buf.write(u"\2\u0d13\u0d14\3\2\2\2\u0d14\u0d15\t-\2\2\u0d15\u01db")
        buf.write(u"\3\2\2\2\u0d16\u0d17\7\u017f\2\2\u0d17\u0d18\7\30\2\2")
        buf.write(u"\u0d18\u01dd\3\2\2\2\u0d19\u0d1a\7\u0183\2\2\u0d1a\u0d1b")
        buf.write(u"\5\u046c\u0237\2\u0d1b\u01df\3\2\2\2\u0d1c\u0d1d\7\u018e")
        buf.write(u"\2\2\u0d1d\u0d20\5\u0446\u0224\2\u0d1e\u0d1f\t\6\2\2")
        buf.write(u"\u0d1f\u0d21\5\u0446\u0224\2\u0d20\u0d1e\3\2\2\2\u0d20")
        buf.write(u"\u0d21\3\2\2\2\u0d21\u01e1\3\2\2\2\u0d22\u0d24\7\u01bc")
        buf.write(u"\2\2\u0d23\u0d25\7\u0104\2\2\u0d24\u0d23\3\2\2\2\u0d24")
        buf.write(u"\u0d25\3\2\2\2\u0d25\u0d27\3\2\2\2\u0d26\u0d22\3\2\2")
        buf.write(u"\2\u0d26\u0d27\3\2\2\2\u0d27\u0d28\3\2\2\2\u0d28\u0d2d")
        buf.write(u"\t\t\2\2\u0d29\u0d2b\7\u01b1\2\2\u0d2a\u0d2c\7A\2\2\u0d2b")
        buf.write(u"\u0d2a\3\2\2\2\u0d2b\u0d2c\3\2\2\2\u0d2c\u0d2e\3\2\2")
        buf.write(u"\2\u0d2d\u0d29\3\2\2\2\u0d2d\u0d2e\3\2\2\2\u0d2e\u01e3")
        buf.write(u"\3\2\2\2\u0d2f\u0d31\t.\2\2\u0d30\u0d32\t/\2\2\u0d31")
        buf.write(u"\u0d30\3\2\2\2\u0d31\u0d32\3\2\2\2\u0d32\u01e5\3\2\2")
        buf.write(u"\2\u0d33\u0d35\7\u0104\2\2\u0d34\u0d33\3\2\2\2\u0d34")
        buf.write(u"\u0d35\3\2\2\2\u0d35\u0d36\3\2\2\2\u0d36\u0d37\7\u01e9")
        buf.write(u"\2\2\u0d37\u01e7\3\2\2\2\u0d38\u0d3a\7\u01f7\2\2\u0d39")
        buf.write(u"\u0d3b\7\u0104\2\2\u0d3a\u0d39\3\2\2\2\u0d3a\u0d3b\3")
        buf.write(u"\2\2\2\u0d3b\u0d46\3\2\2\2\u0d3c\u0d47\7\u01bb\2\2\u0d3d")
        buf.write(u"\u0d47\7\u0125\2\2\u0d3e\u0d47\7\u0143\2\2\u0d3f\u0d47")
        buf.write(u"\7\u0145\2\2\u0d40\u0d47\7\u0126\2\2\u0d41\u0d42\t\60")
        buf.write(u"\2\2\u0d42\u0d43\7\u0225\2\2\u0d43\u0d44\5\u049e\u0250")
        buf.write(u"\2\u0d44\u0d45\7\u022c\2\2\u0d45\u0d47\3\2\2\2\u0d46")
        buf.write(u"\u0d3c\3\2\2\2\u0d46\u0d3d\3\2\2\2\u0d46\u0d3e\3\2\2")
        buf.write(u"\2\u0d46\u0d3f\3\2\2\2\u0d46\u0d40\3\2\2\2\u0d46\u0d41")
        buf.write(u"\3\2\2\2\u0d47\u01e9\3\2\2\2\u0d48\u0d4a\7\u0104\2\2")
        buf.write(u"\u0d49\u0d48\3\2\2\2\u0d49\u0d4a\3\2\2\2\u0d4a\u0d4b")
        buf.write(u"\3\2\2\2\u0d4b\u0d4c\7\u01f8\2\2\u0d4c\u01eb\3\2\2\2")
        buf.write(u"\u0d4d\u0d4f\7\u01ff\2\2\u0d4e\u0d50\7\u0104\2\2\u0d4f")
        buf.write(u"\u0d4e\3\2\2\2\u0d4f\u0d50\3\2\2\2\u0d50\u0d52\3\2\2")
        buf.write(u"\2\u0d51\u0d4d\3\2\2\2\u0d51\u0d52\3\2\2\2\u0d52\u0d75")
        buf.write(u"\3\2\2\2\u0d53\u0d55\7,\2\2\u0d54\u0d56\t\61\2\2\u0d55")
        buf.write(u"\u0d54\3\2\2\2\u0d55\u0d56\3\2\2\2\u0d56\u0d76\3\2\2")
        buf.write(u"\2\u0d57\u0d76\7-\2\2\u0d58\u0d76\7T\2\2\u0d59\u0d76")
        buf.write(u"\7U\2\2\u0d5a\u0d76\7V\2\2\u0d5b\u0d76\7W\2\2\u0d5c\u0d76")
        buf.write(u"\7X\2\2\u0d5d\u0d76\7Y\2\2\u0d5e\u0d76\7Z\2\2\u0d5f\u0d76")
        buf.write(u"\7[\2\2\u0d60\u0d76\7\\\2\2\u0d61\u0d76\7]\2\2\u0d62")
        buf.write(u"\u0d76\7^\2\2\u0d63\u0d76\7_\2\2\u0d64\u0d76\7f\2\2\u0d65")
        buf.write(u"\u0d76\7s\2\2\u0d66\u0d76\7\u0093\2\2\u0d67\u0d76\7\u0094")
        buf.write(u"\2\2\u0d68\u0d76\7\u0098\2\2\u0d69\u0d76\7\u00c8\2\2")
        buf.write(u"\u0d6a\u0d76\7\u00e1\2\2\u0d6b\u0d76\7\u00f6\2\2\u0d6c")
        buf.write(u"\u0d76\7\u0107\2\2\u0d6d\u0d76\7\u0124\2\2\u0d6e\u0d76")
        buf.write(u"\7\u0136\2\2\u0d6f\u0d76\7\u0158\2\2\u0d70\u0d76\7\u0163")
        buf.write(u"\2\2\u0d71\u0d76\7\u016b\2\2\u0d72\u0d76\7\u017b\2\2")
        buf.write(u"\u0d73\u0d76\7\u01cb\2\2\u0d74\u0d76\7\u01e0\2\2\u0d75")
        buf.write(u"\u0d53\3\2\2\2\u0d75\u0d57\3\2\2\2\u0d75\u0d58\3\2\2")
        buf.write(u"\2\u0d75\u0d59\3\2\2\2\u0d75\u0d5a\3\2\2\2\u0d75\u0d5b")
        buf.write(u"\3\2\2\2\u0d75\u0d5c\3\2\2\2\u0d75\u0d5d\3\2\2\2\u0d75")
        buf.write(u"\u0d5e\3\2\2\2\u0d75\u0d5f\3\2\2\2\u0d75\u0d60\3\2\2")
        buf.write(u"\2\u0d75\u0d61\3\2\2\2\u0d75\u0d62\3\2\2\2\u0d75\u0d63")
        buf.write(u"\3\2\2\2\u0d75\u0d64\3\2\2\2\u0d75\u0d65\3\2\2\2\u0d75")
        buf.write(u"\u0d66\3\2\2\2\u0d75\u0d67\3\2\2\2\u0d75\u0d68\3\2\2")
        buf.write(u"\2\u0d75\u0d69\3\2\2\2\u0d75\u0d6a\3\2\2\2\u0d75\u0d6b")
        buf.write(u"\3\2\2\2\u0d75\u0d6c\3\2\2\2\u0d75\u0d6d\3\2\2\2\u0d75")
        buf.write(u"\u0d6e\3\2\2\2\u0d75\u0d6f\3\2\2\2\u0d75\u0d70\3\2\2")
        buf.write(u"\2\u0d75\u0d71\3\2\2\2\u0d75\u0d72\3\2\2\2\u0d75\u0d73")
        buf.write(u"\3\2\2\2\u0d75\u0d74\3\2\2\2\u0d76\u01ed\3\2\2\2\u0d77")
        buf.write(u"\u0d78\7\u0201\2\2\u0d78\u0d7a\t\62\2\2\u0d79\u0d7b\7")
        buf.write(u"\u0149\2\2\u0d7a\u0d79\3\2\2\2\u0d7a\u0d7b\3\2\2\2\u0d7b")
        buf.write(u"\u0d7e\3\2\2\2\u0d7c\u0d7f\5\u0496\u024c\2\u0d7d\u0d7f")
        buf.write(u"\5\u046c\u0237\2\u0d7e\u0d7c\3\2\2\2\u0d7e\u0d7d\3\2")
        buf.write(u"\2\2\u0d7f\u01ef\3\2\2\2\u0d80\u0d82\t\63\2\2\u0d81\u0d83")
        buf.write(u"\t\n\2\2\u0d82\u0d81\3\2\2\2\u0d82\u0d83\3\2\2\2\u0d83")
        buf.write(u"\u0d85\3\2\2\2\u0d84\u0d80\3\2\2\2\u0d84\u0d85\3\2\2")
        buf.write(u"\2\u0d85\u0d86\3\2\2\2\u0d86\u0d8d\5\u01f2\u00fa\2\u0d87")
        buf.write(u"\u0d89\7\u0218\2\2\u0d88\u0d87\3\2\2\2\u0d88\u0d89\3")
        buf.write(u"\2\2\2\u0d89\u0d8a\3\2\2\2\u0d8a\u0d8c\5\u01f2\u00fa")
        buf.write(u"\2\u0d8b\u0d88\3\2\2\2\u0d8c\u0d8f\3\2\2\2\u0d8d\u0d8b")
        buf.write(u"\3\2\2\2\u0d8d\u0d8e\3\2\2\2\u0d8e\u01f1\3\2\2\2\u0d8f")
        buf.write(u"\u0d8d\3\2\2\2\u0d90\u0d92\5\u01f4\u00fb\2\u0d91\u0d93")
        buf.write(u"\5\u01f6\u00fc\2\u0d92\u0d91\3\2\2\2\u0d92\u0d93\3\2")
        buf.write(u"\2\2\u0d93\u01f3\3\2\2\2\u0d94\u0d97\5\u0498\u024d\2")
        buf.write(u"\u0d95\u0d97\5\u0496\u024c\2\u0d96\u0d94\3\2\2\2\u0d96")
        buf.write(u"\u0d95\3\2\2\2\u0d97\u01f5\3\2\2\2\u0d98\u0d99\t\6\2")
        buf.write(u"\2\u0d99\u0d9a\5\u0498\u024d\2\u0d9a\u01f7\3\2\2\2\u0d9b")
        buf.write(u"\u0d9d\7\u0209\2\2\u0d9c\u0d9b\3\2\2\2\u0d9c\u0d9d\3")
        buf.write(u"\2\2\2\u0d9d\u0d9e\3\2\2\2\u0d9e\u0d9f\7\u0127\2\2\u0d9f")
        buf.write(u"\u0da0\7\62\2\2\u0da0\u01f9\3\2\2\2\u0da1\u0da2\7\u016a")
        buf.write(u"\2\2\u0da2\u0da4\7\u0096\2\2\u0da3\u0da5\5\u01fc\u00ff")
        buf.write(u"\2\u0da4\u0da3\3\2\2\2\u0da4\u0da5\3\2\2\2\u0da5\u0da7")
        buf.write(u"\3\2\2\2\u0da6\u0da8\5\u01fe\u0100\2\u0da7\u0da6\3\2")
        buf.write(u"\2\2\u0da7\u0da8\3\2\2\2\u0da8\u0da9\3\2\2\2\u0da9\u0dab")
        buf.write(u"\7\u021d\2\2\u0daa\u0dac\5\u020a\u0106\2\u0dab\u0daa")
        buf.write(u"\3\2\2\2\u0dab\u0dac\3\2\2\2\u0dac\u0dad\3\2\2\2\u0dad")
        buf.write(u"\u0dae\5\u0210\u0109\2\u0dae\u01fb\3\2\2\2\u0daf\u0db1")
        buf.write(u"\t\64\2\2\u0db0\u0db2\5\u0200\u0101\2\u0db1\u0db0\3\2")
        buf.write(u"\2\2\u0db2\u0db3\3\2\2\2\u0db3\u0db1\3\2\2\2\u0db3\u0db4")
        buf.write(u"\3\2\2\2\u0db4\u01fd\3\2\2\2\u0db5\u0db6\t\65\2\2\u0db6")
        buf.write(u"\u0db7\5\u046c\u0237\2\u0db7\u01ff\3\2\2\2\u0db8\u0dbb")
        buf.write(u"\5\u0202\u0102\2\u0db9\u0dbb\5\u0206\u0104\2\u0dba\u0db8")
        buf.write(u"\3\2\2\2\u0dba\u0db9\3\2\2\2\u0dbb\u0201\3\2\2\2\u0dbc")
        buf.write(u"\u0dbe\7\64\2\2\u0dbd\u0dbc\3\2\2\2\u0dbd\u0dbe\3\2\2")
        buf.write(u"\2\u0dbe\u0dbf\3\2\2\2\u0dbf\u0dc1\7\u0186\2\2\u0dc0")
        buf.write(u"\u0dbd\3\2\2\2\u0dc0\u0dc1\3\2\2\2\u0dc1\u0dc3\3\2\2")
        buf.write(u"\2\u0dc2\u0dc4\5\u0204\u0103\2\u0dc3\u0dc2\3\2\2\2\u0dc4")
        buf.write(u"\u0dc5\3\2\2\2\u0dc5\u0dc3\3\2\2\2\u0dc5\u0dc6\3\2\2")
        buf.write(u"\2\u0dc6\u0203\3\2\2\2\u0dc7\u0dc9\7\u014e\2\2\u0dc8")
        buf.write(u"\u0dc7\3\2\2\2\u0dc8\u0dc9\3\2\2\2\u0dc9\u0dcc\3\2\2")
        buf.write(u"\2\u0dca\u0dcd\5\u0436\u021c\2\u0dcb\u0dcd\5\u0472\u023a")
        buf.write(u"\2\u0dcc\u0dca\3\2\2\2\u0dcc\u0dcb\3\2\2\2\u0dcd\u0dd0")
        buf.write(u"\3\2\2\2\u0dce\u0dd0\7\26\2\2\u0dcf\u0dc8\3\2\2\2\u0dcf")
        buf.write(u"\u0dce\3\2\2\2\u0dd0\u0205\3\2\2\2\u0dd1\u0dd3\7\64\2")
        buf.write(u"\2\u0dd2\u0dd1\3\2\2\2\u0dd2\u0dd3\3\2\2\2\u0dd3\u0dd4")
        buf.write(u"\3\2\2\2\u0dd4\u0dd6\7\u0202\2\2\u0dd5\u0dd7\5\u0208")
        buf.write(u"\u0105\2\u0dd6\u0dd5\3\2\2\2\u0dd7\u0dd8\3\2\2\2\u0dd8")
        buf.write(u"\u0dd6\3\2\2\2\u0dd8\u0dd9\3\2\2\2\u0dd9\u0207\3\2\2")
        buf.write(u"\2\u0dda\u0dde\5\u0436\u021c\2\u0ddb\u0dde\5\u0498\u024d")
        buf.write(u"\2\u0ddc\u0dde\7\26\2\2\u0ddd\u0dda\3\2\2\2\u0ddd\u0ddb")
        buf.write(u"\3\2\2\2\u0ddd\u0ddc\3\2\2\2\u0dde\u0209\3\2\2\2\u0ddf")
        buf.write(u"\u0de0\7\u0084\2\2\u0de0\u0de2\7\u021d\2\2\u0de1\u0de3")
        buf.write(u"\5\u020c\u0107\2\u0de2\u0de1\3\2\2\2\u0de3\u0de4\3\2")
        buf.write(u"\2\2\u0de4\u0de2\3\2\2\2\u0de4\u0de5\3\2\2\2\u0de5\u0de6")
        buf.write(u"\3\2\2\2\u0de6\u0de7\7\u00a3\2\2\u0de7\u0de8\7\u0084")
        buf.write(u"\2\2\u0de8\u0de9\7\u021d\2\2\u0de9\u020b\3\2\2\2\u0dea")
        buf.write(u"\u0deb\5\u020e\u0108\2\u0deb\u0dec\7\u021d\2\2\u0dec")
        buf.write(u"\u0ded\5\u03de\u01f0\2\u0ded\u0dee\7\u021d\2\2\u0dee")
        buf.write(u"\u0def\5\u0214\u010b\2\u0def\u020d\3\2\2\2\u0df0\u0df1")
        buf.write(u"\5\u048e\u0248\2\u0df1\u0df3\7\u01a9\2\2\u0df2\u0df4")
        buf.write(u"\5\u049e\u0250\2\u0df3\u0df2\3\2\2\2\u0df3\u0df4\3\2")
        buf.write(u"\2\2\u0df4\u020f\3\2\2\2\u0df5\u0df9\5\u0214\u010b\2")
        buf.write(u"\u0df6\u0df8\5\u0212\u010a\2\u0df7\u0df6\3\2\2\2\u0df8")
        buf.write(u"\u0dfb\3\2\2\2\u0df9\u0df7\3\2\2\2\u0df9\u0dfa\3\2\2")
        buf.write(u"\2\u0dfa\u0211\3\2\2\2\u0dfb\u0df9\3\2\2\2\u0dfc\u0dfd")
        buf.write(u"\5\u020e\u0108\2\u0dfd\u0dfe\7\u021d\2\2\u0dfe\u0dff")
        buf.write(u"\5\u0214\u010b\2\u0dff\u0213\3\2\2\2\u0e00\u0e02\5\u0218")
        buf.write(u"\u010d\2\u0e01\u0e00\3\2\2\2\u0e02\u0e05\3\2\2\2\u0e03")
        buf.write(u"\u0e01\3\2\2\2\u0e03\u0e04\3\2\2\2\u0e04\u0e09\3\2\2")
        buf.write(u"\2\u0e05\u0e03\3\2\2\2\u0e06\u0e08\5\u0216\u010c\2\u0e07")
        buf.write(u"\u0e06\3\2\2\2\u0e08\u0e0b\3\2\2\2\u0e09\u0e07\3\2\2")
        buf.write(u"\2\u0e09\u0e0a\3\2\2\2\u0e0a\u0215\3\2\2\2\u0e0b\u0e09")
        buf.write(u"\3\2\2\2\u0e0c\u0e0e\5\u0480\u0241\2\u0e0d\u0e0f\7\u021d")
        buf.write(u"\2\2\u0e0e\u0e0d\3\2\2\2\u0e0e\u0e0f\3\2\2\2\u0e0f\u0e17")
        buf.write(u"\3\2\2\2\u0e10\u0e18\5\u0236\u011c\2\u0e11\u0e13\5\u0218")
        buf.write(u"\u010d\2\u0e12\u0e11\3\2\2\2\u0e13\u0e16\3\2\2\2\u0e14")
        buf.write(u"\u0e12\3\2\2\2\u0e14\u0e15\3\2\2\2\u0e15\u0e18\3\2\2")
        buf.write(u"\2\u0e16\u0e14\3\2\2\2\u0e17\u0e10\3\2\2\2\u0e17\u0e14")
        buf.write(u"\3\2\2\2\u0e18\u0217\3\2\2\2\u0e19\u0e1b\5\u021a\u010e")
        buf.write(u"\2\u0e1a\u0e19\3\2\2\2\u0e1b\u0e1e\3\2\2\2\u0e1c\u0e1a")
        buf.write(u"\3\2\2\2\u0e1c\u0e1d\3\2\2\2\u0e1d\u0e1f\3\2\2\2\u0e1e")
        buf.write(u"\u0e1c\3\2\2\2\u0e1f\u0e20\7\u021d\2\2\u0e20\u0219\3")
        buf.write(u"\2\2\2\u0e21\u0e53\5\u021c\u010f\2\u0e22\u0e53\5\u0226")
        buf.write(u"\u0114\2\u0e23\u0e53\5\u0238\u011d\2\u0e24\u0e53\5\u023c")
        buf.write(u"\u011f\2\u0e25\u0e53\5\u0250\u0129\2\u0e26\u0e53\5\u0254")
        buf.write(u"\u012b\2\u0e27\u0e53\5\u0266\u0134\2\u0e28\u0e53\5\u026a")
        buf.write(u"\u0136\2\u0e29\u0e53\5\u026c\u0137\2\u0e2a\u0e53\5\u026e")
        buf.write(u"\u0138\2\u0e2b\u0e53\5\u0270\u0139\2\u0e2c\u0e53\5\u027a")
        buf.write(u"\u013e\2\u0e2d\u0e53\5\u028a\u0146\2\u0e2e\u0e53\5\u028c")
        buf.write(u"\u0147\2\u0e2f\u0e53\5\u028e\u0148\2\u0e30\u0e53\5\u02a8")
        buf.write(u"\u0155\2\u0e31\u0e53\5\u02a2\u0152\2\u0e32\u0e53\5\u02a4")
        buf.write(u"\u0153\2\u0e33\u0e53\5\u02a6\u0154\2\u0e34\u0e53\5\u02ac")
        buf.write(u"\u0157\2\u0e35\u0e53\5\u02ae\u0158\2\u0e36\u0e53\5\u02b0")
        buf.write(u"\u0159\2\u0e37\u0e53\5\u02b2\u015a\2\u0e38\u0e53\5\u02b8")
        buf.write(u"\u015d\2\u0e39\u0e53\5\u02be\u0160\2\u0e3a\u0e53\5\u02c4")
        buf.write(u"\u0163\2\u0e3b\u0e53\5\u02c6\u0164\2\u0e3c\u0e53\5\u02e4")
        buf.write(u"\u0173\2\u0e3d\u0e53\5\u02f8\u017d\2\u0e3e\u0e53\5\u0302")
        buf.write(u"\u0182\2\u0e3f\u0e53\5\u030e\u0188\2\u0e40\u0e53\5\u031c")
        buf.write(u"\u018f\2\u0e41\u0e53\5\u0336\u019c\2\u0e42\u0e53\5\u0338")
        buf.write(u"\u019d\2\u0e43\u0e53\5\u0340\u01a1\2\u0e44\u0e53\5\u0356")
        buf.write(u"\u01ac\2\u0e45\u0e53\5\u0358\u01ad\2\u0e46\u0e53\5\u035c")
        buf.write(u"\u01af\2\u0e47\u0e53\5\u0360\u01b1\2\u0e48\u0e53\5\u0366")
        buf.write(u"\u01b4\2\u0e49\u0e53\5\u037a\u01be\2\u0e4a\u0e53\5\u0386")
        buf.write(u"\u01c4\2\u0e4b\u0e53\5\u03a0\u01d1\2\u0e4c\u0e53\5\u03a4")
        buf.write(u"\u01d3\2\u0e4d\u0e53\5\u03a8\u01d5\2\u0e4e\u0e53\5\u03b6")
        buf.write(u"\u01dc\2\u0e4f\u0e53\5\u03c8\u01e5\2\u0e50\u0e53\5\u03ca")
        buf.write(u"\u01e6\2\u0e51\u0e53\5\u03e8\u01f5\2\u0e52\u0e21\3\2")
        buf.write(u"\2\2\u0e52\u0e22\3\2\2\2\u0e52\u0e23\3\2\2\2\u0e52\u0e24")
        buf.write(u"\3\2\2\2\u0e52\u0e25\3\2\2\2\u0e52\u0e26\3\2\2\2\u0e52")
        buf.write(u"\u0e27\3\2\2\2\u0e52\u0e28\3\2\2\2\u0e52\u0e29\3\2\2")
        buf.write(u"\2\u0e52\u0e2a\3\2\2\2\u0e52\u0e2b\3\2\2\2\u0e52\u0e2c")
        buf.write(u"\3\2\2\2\u0e52\u0e2d\3\2\2\2\u0e52\u0e2e\3\2\2\2\u0e52")
        buf.write(u"\u0e2f\3\2\2\2\u0e52\u0e30\3\2\2\2\u0e52\u0e31\3\2\2")
        buf.write(u"\2\u0e52\u0e32\3\2\2\2\u0e52\u0e33\3\2\2\2\u0e52\u0e34")
        buf.write(u"\3\2\2\2\u0e52\u0e35\3\2\2\2\u0e52\u0e36\3\2\2\2\u0e52")
        buf.write(u"\u0e37\3\2\2\2\u0e52\u0e38\3\2\2\2\u0e52\u0e39\3\2\2")
        buf.write(u"\2\u0e52\u0e3a\3\2\2\2\u0e52\u0e3b\3\2\2\2\u0e52\u0e3c")
        buf.write(u"\3\2\2\2\u0e52\u0e3d\3\2\2\2\u0e52\u0e3e\3\2\2\2\u0e52")
        buf.write(u"\u0e3f\3\2\2\2\u0e52\u0e40\3\2\2\2\u0e52\u0e41\3\2\2")
        buf.write(u"\2\u0e52\u0e42\3\2\2\2\u0e52\u0e43\3\2\2\2\u0e52\u0e44")
        buf.write(u"\3\2\2\2\u0e52\u0e45\3\2\2\2\u0e52\u0e46\3\2\2\2\u0e52")
        buf.write(u"\u0e47\3\2\2\2\u0e52\u0e48\3\2\2\2\u0e52\u0e49\3\2\2")
        buf.write(u"\2\u0e52\u0e4a\3\2\2\2\u0e52\u0e4b\3\2\2\2\u0e52\u0e4c")
        buf.write(u"\3\2\2\2\u0e52\u0e4d\3\2\2\2\u0e52\u0e4e\3\2\2\2\u0e52")
        buf.write(u"\u0e4f\3\2\2\2\u0e52\u0e50\3\2\2\2\u0e52\u0e51\3\2\2")
        buf.write(u"\2\u0e53\u021b\3\2\2\2\u0e54\u0e55\7\4\2\2\u0e55\u0e5a")
        buf.write(u"\5\u0436\u021c\2\u0e56\u0e5b\5\u021e\u0110\2\u0e57\u0e5b")
        buf.write(u"\5\u0222\u0112\2\u0e58\u0e5b\5\u0220\u0111\2\u0e59\u0e5b")
        buf.write(u"\5\u0224\u0113\2\u0e5a\u0e56\3\2\2\2\u0e5a\u0e57\3\2")
        buf.write(u"\2\2\u0e5a\u0e58\3\2\2\2\u0e5a\u0e59\3\2\2\2\u0e5a\u0e5b")
        buf.write(u"\3\2\2\2\u0e5b\u0e5d\3\2\2\2\u0e5c\u0e5e\5\u0408\u0205")
        buf.write(u"\2\u0e5d\u0e5c\3\2\2\2\u0e5d\u0e5e\3\2\2\2\u0e5e\u0e60")
        buf.write(u"\3\2\2\2\u0e5f\u0e61\5\u040a\u0206\2\u0e60\u0e5f\3\2")
        buf.write(u"\2\2\u0e60\u0e61\3\2\2\2\u0e61\u0e63\3\2\2\2\u0e62\u0e64")
        buf.write(u"\7\u00a4\2\2\u0e63\u0e62\3\2\2\2\u0e63\u0e64\3\2\2\2")
        buf.write(u"\u0e64\u021d\3\2\2\2\u0e65\u0e79\7\u00dd\2\2\u0e66\u0e68")
        buf.write(u"\7s\2\2\u0e67\u0e69\7\u020e\2\2\u0e68\u0e67\3\2\2\2\u0e68")
        buf.write(u"\u0e69\3\2\2\2\u0e69\u0e7a\3\2\2\2\u0e6a\u0e6c\7v\2\2")
        buf.write(u"\u0e6b\u0e6d\7\u020f\2\2\u0e6c\u0e6b\3\2\2\2\u0e6c\u0e6d")
        buf.write(u"\3\2\2\2\u0e6d\u0e7a\3\2\2\2\u0e6e\u0e7a\7w\2\2\u0e6f")
        buf.write(u"\u0e7a\7\u01ec\2\2\u0e70\u0e7a\7\u01ed\2\2\u0e71\u0e73")
        buf.write(u"\7\u01f1\2\2\u0e72\u0e74\7\u012e\2\2\u0e73\u0e72\3\2")
        buf.write(u"\2\2\u0e73\u0e74\3\2\2\2\u0e74\u0e7a\3\2\2\2\u0e75\u0e7a")
        buf.write(u"\7\u01f2\2\2\u0e76\u0e7a\7\u020d\2\2\u0e77\u0e7a\7\u020e")
        buf.write(u"\2\2\u0e78\u0e7a\7\u020f\2\2\u0e79\u0e66\3\2\2\2\u0e79")
        buf.write(u"\u0e6a\3\2\2\2\u0e79\u0e6e\3\2\2\2\u0e79\u0e6f\3\2\2")
        buf.write(u"\2\u0e79\u0e70\3\2\2\2\u0e79\u0e71\3\2\2\2\u0e79\u0e75")
        buf.write(u"\3\2\2\2\u0e79\u0e76\3\2\2\2\u0e79\u0e77\3\2\2\2\u0e79")
        buf.write(u"\u0e78\3\2\2\2\u0e7a\u021f\3\2\2\2\u0e7b\u0e7c\7\u00dd")
        buf.write(u"\2\2\u0e7c\u0e7d\5\u047e\u0240\2\u0e7d\u0221\3\2\2\2")
        buf.write(u"\u0e7e\u0e7f\7\u00dd\2\2\u0e7f\u0e80\7\u00c5\2\2\u0e80")
        buf.write(u"\u0e81\7\u0109\2\2\u0e81\u0223\3\2\2\2\u0e82\u0e84\7")
        buf.write(u"\u012d\2\2\u0e83\u0e82\3\2\2\2\u0e83\u0e84\3\2\2\2\u0e84")
        buf.write(u"\u0e85\3\2\2\2\u0e85\u0e86\7m\2\2\u0e86\u0225\3\2\2\2")
        buf.write(u"\u0e87\u0e8b\7\6\2\2\u0e88\u0e8c\5\u0228\u0115\2\u0e89")
        buf.write(u"\u0e8c\5\u022a\u0116\2\u0e8a\u0e8c\5\u022c\u0117\2\u0e8b")
        buf.write(u"\u0e88\3\2\2\2\u0e8b\u0e89\3\2\2\2\u0e8b\u0e8a\3\2\2")
        buf.write(u"\2\u0e8c\u0e8e\3\2\2\2\u0e8d\u0e8f\5\u0404\u0203\2\u0e8e")
        buf.write(u"\u0e8d\3\2\2\2\u0e8e\u0e8f\3\2\2\2\u0e8f\u0e91\3\2\2")
        buf.write(u"\2\u0e90\u0e92\5\u0406\u0204\2\u0e91\u0e90\3\2\2\2\u0e91")
        buf.write(u"\u0e92\3\2\2\2\u0e92\u0e94\3\2\2\2\u0e93\u0e95\7\u00a5")
        buf.write(u"\2\2\u0e94\u0e93\3\2\2\2\u0e94\u0e95\3\2\2\2\u0e95\u0227")
        buf.write(u"\3\2\2\2\u0e96\u0e98\5\u022e\u0118\2\u0e97\u0e96\3\2")
        buf.write(u"\2\2\u0e98\u0e99\3\2\2\2\u0e99\u0e97\3\2\2\2\u0e99\u0e9a")
        buf.write(u"\3\2\2\2\u0e9a\u0e9b\3\2\2\2\u0e9b\u0e9d\7\u01f0\2\2")
        buf.write(u"\u0e9c\u0e9e\5\u0230\u0119\2\u0e9d\u0e9c\3\2\2\2\u0e9e")
        buf.write(u"\u0e9f\3\2\2\2\u0e9f\u0e9d\3\2\2\2\u0e9f\u0ea0\3\2\2")
        buf.write(u"\2\u0ea0\u0229\3\2\2\2\u0ea1\u0ea3\5\u022e\u0118\2\u0ea2")
        buf.write(u"\u0ea1\3\2\2\2\u0ea3\u0ea4\3\2\2\2\u0ea4\u0ea2\3\2\2")
        buf.write(u"\2\u0ea4\u0ea5\3\2\2\2\u0ea5\u0eac\3\2\2\2\u0ea6\u0ea8")
        buf.write(u"\7\u01f0\2\2\u0ea7\u0ea9\5\u0232\u011a\2\u0ea8\u0ea7")
        buf.write(u"\3\2\2\2\u0ea9\u0eaa\3\2\2\2\u0eaa\u0ea8\3\2\2\2\u0eaa")
        buf.write(u"\u0eab\3\2\2\2\u0eab\u0ead\3\2\2\2\u0eac\u0ea6\3\2\2")
        buf.write(u"\2\u0eac\u0ead\3\2\2\2\u0ead\u0eae\3\2\2\2\u0eae\u0eb0")
        buf.write(u"\7\u00e4\2\2\u0eaf\u0eb1\5\u0234\u011b\2\u0eb0\u0eaf")
        buf.write(u"\3\2\2\2\u0eb1\u0eb2\3\2\2\2\u0eb2\u0eb0\3\2\2\2\u0eb2")
        buf.write(u"\u0eb3\3\2\2\2\u0eb3\u022b\3\2\2\2\u0eb4\u0eb5\t\66\2")
        buf.write(u"\2\u0eb5\u0eb6\5\u0436\u021c\2\u0eb6\u0eb7\7\u01f0\2")
        buf.write(u"\2\u0eb7\u0eb8\5\u0230\u0119\2\u0eb8\u022d\3\2\2\2\u0eb9")
        buf.write(u"\u0ebc\5\u0436\u021c\2\u0eba\u0ebc\5\u0498\u024d\2\u0ebb")
        buf.write(u"\u0eb9\3\2\2\2\u0ebb\u0eba\3\2\2\2\u0ebc\u022f\3\2\2")
        buf.write(u"\2\u0ebd\u0ebf\5\u0436\u021c\2\u0ebe\u0ec0\7\u01a2\2")
        buf.write(u"\2\u0ebf\u0ebe\3\2\2\2\u0ebf\u0ec0\3\2\2\2\u0ec0\u0231")
        buf.write(u"\3\2\2\2\u0ec1\u0ec4\5\u0436\u021c\2\u0ec2\u0ec4\5\u0498")
        buf.write(u"\u024d\2\u0ec3\u0ec1\3\2\2\2\u0ec3\u0ec2\3\2\2\2\u0ec4")
        buf.write(u"\u0233\3\2\2\2\u0ec5\u0ec7\5\u0436\u021c\2\u0ec6\u0ec8")
        buf.write(u"\7\u01a2\2\2\u0ec7\u0ec6\3\2\2\2\u0ec7\u0ec8\3\2\2\2")
        buf.write(u"\u0ec8\u0235\3\2\2\2\u0ec9\u0ecb\7\u00e6\2\2\u0eca\u0ecc")
        buf.write(u"\7\u01f0\2\2\u0ecb\u0eca\3\2\2\2\u0ecb\u0ecc\3\2\2\2")
        buf.write(u"\u0ecc\u0ecd\3\2\2\2\u0ecd\u0ece\7\u021d\2\2\u0ece\u0237")
        buf.write(u"\3\2\2\2\u0ecf\u0ed1\7\23\2\2\u0ed0\u0ed2\5\u023a\u011e")
        buf.write(u"\2\u0ed1\u0ed0\3\2\2\2\u0ed2\u0ed3\3\2\2\2\u0ed3\u0ed1")
        buf.write(u"\3\2\2\2\u0ed3\u0ed4\3\2\2\2\u0ed4\u0239\3\2\2\2\u0ed5")
        buf.write(u"\u0ed6\5\u0482\u0242\2\u0ed6\u0ed9\7\u01f0\2\2\u0ed7")
        buf.write(u"\u0ed8\7\u016d\2\2\u0ed8\u0eda\7\u01f0\2\2\u0ed9\u0ed7")
        buf.write(u"\3\2\2\2\u0ed9\u0eda\3\2\2\2\u0eda\u0edb\3\2\2\2\u0edb")
        buf.write(u"\u0edc\5\u0482\u0242\2\u0edc\u023b\3\2\2\2\u0edd\u0ee0")
        buf.write(u"\7\67\2\2\u0ede\u0ee1\5\u0436\u021c\2\u0edf\u0ee1\5\u0498")
        buf.write(u"\u024d\2\u0ee0\u0ede\3\2\2\2\u0ee0\u0edf\3\2\2\2\u0ee1")
        buf.write(u"\u0ee3\3\2\2\2\u0ee2\u0ee4\5\u023e\u0120\2\u0ee3\u0ee2")
        buf.write(u"\3\2\2\2\u0ee3\u0ee4\3\2\2\2\u0ee4\u0ee6\3\2\2\2\u0ee5")
        buf.write(u"\u0ee7\5\u024e\u0128\2\u0ee6\u0ee5\3\2\2\2\u0ee6\u0ee7")
        buf.write(u"\3\2\2\2\u0ee7\u0ee9\3\2\2\2\u0ee8\u0eea\5\u0400\u0201")
        buf.write(u"\2\u0ee9\u0ee8\3\2\2\2\u0ee9\u0eea\3\2\2\2\u0eea\u0eec")
        buf.write(u"\3\2\2\2\u0eeb\u0eed\5\u0408\u0205\2\u0eec\u0eeb\3\2")
        buf.write(u"\2\2\u0eec\u0eed\3\2\2\2\u0eed\u0eef\3\2\2\2\u0eee\u0ef0")
        buf.write(u"\5\u040a\u0206\2\u0eef\u0eee\3\2\2\2\u0eef\u0ef0\3\2")
        buf.write(u"\2\2\u0ef0\u0ef2\3\2\2\2\u0ef1\u0ef3\7\u00a6\2\2\u0ef2")
        buf.write(u"\u0ef1\3\2\2\2\u0ef2\u0ef3\3\2\2\2\u0ef3\u023d\3\2\2")
        buf.write(u"\2\u0ef4\u0ef6\7\u0201\2\2\u0ef5\u0ef7\5\u0240\u0121")
        buf.write(u"\2\u0ef6\u0ef5\3\2\2\2\u0ef7\u0ef8\3\2\2\2\u0ef8\u0ef6")
        buf.write(u"\3\2\2\2\u0ef8\u0ef9\3\2\2\2\u0ef9\u023f\3\2\2\2\u0efa")
        buf.write(u"\u0efe\5\u0242\u0122\2\u0efb\u0efe\5\u0246\u0124\2\u0efc")
        buf.write(u"\u0efe\5\u024a\u0126\2\u0efd\u0efa\3\2\2\2\u0efd\u0efb")
        buf.write(u"\3\2\2\2\u0efd\u0efc\3\2\2\2\u0efe\u0241\3\2\2\2\u0eff")
        buf.write(u"\u0f01\7\64\2\2\u0f00\u0eff\3\2\2\2\u0f00\u0f01\3\2\2")
        buf.write(u"\2\u0f01\u0f02\3\2\2\2\u0f02\u0f04\7\u0186\2\2\u0f03")
        buf.write(u"\u0f00\3\2\2\2\u0f03\u0f04\3\2\2\2\u0f04\u0f06\3\2\2")
        buf.write(u"\2\u0f05\u0f07\5\u0244\u0123\2\u0f06\u0f05\3\2\2\2\u0f07")
        buf.write(u"\u0f08\3\2\2\2\u0f08\u0f06\3\2\2\2\u0f08\u0f09\3\2\2")
        buf.write(u"\2\u0f09\u0243\3\2\2\2\u0f0a\u0f0b\7\7\2\2\u0f0b\u0f0f")
        buf.write(u"\7\u0149\2\2\u0f0c\u0f0f\7\u0100\2\2\u0f0d\u0f0f\7\u01d2")
        buf.write(u"\2\2\u0f0e\u0f0a\3\2\2\2\u0f0e\u0f0c\3\2\2\2\u0f0e\u0f0d")
        buf.write(u"\3\2\2\2\u0f0e\u0f0f\3\2\2\2\u0f0f\u0f10\3\2\2\2\u0f10")
        buf.write(u"\u0f14\5\u0436\u021c\2\u0f11\u0f14\5\u0498\u024d\2\u0f12")
        buf.write(u"\u0f14\5\u0472\u023a\2\u0f13\u0f0e\3\2\2\2\u0f13\u0f11")
        buf.write(u"\3\2\2\2\u0f13\u0f12\3\2\2\2\u0f14\u0f17\3\2\2\2\u0f15")
        buf.write(u"\u0f17\7\u014b\2\2\u0f16\u0f13\3\2\2\2\u0f16\u0f15\3")
        buf.write(u"\2\2\2\u0f17\u0245\3\2\2\2\u0f18\u0f1a\7\64\2\2\u0f19")
        buf.write(u"\u0f18\3\2\2\2\u0f19\u0f1a\3\2\2\2\u0f1a\u0f1b\3\2\2")
        buf.write(u"\2\u0f1b\u0f1d\7\u0202\2\2\u0f1c\u0f1e\5\u0248\u0125")
        buf.write(u"\2\u0f1d\u0f1c\3\2\2\2\u0f1e\u0f1f\3\2\2\2\u0f1f\u0f1d")
        buf.write(u"\3\2\2\2\u0f1f\u0f20\3\2\2\2\u0f20\u0247\3\2\2\2\u0f21")
        buf.write(u"\u0f22\7\7\2\2\u0f22\u0f28\7\u0149\2\2\u0f23\u0f25\7")
        buf.write(u"\u0113\2\2\u0f24\u0f26\7\u0149\2\2\u0f25\u0f24\3\2\2")
        buf.write(u"\2\u0f25\u0f26\3\2\2\2\u0f26\u0f28\3\2\2\2\u0f27\u0f21")
        buf.write(u"\3\2\2\2\u0f27\u0f23\3\2\2\2\u0f27\u0f28\3\2\2\2\u0f28")
        buf.write(u"\u0f2b\3\2\2\2\u0f29\u0f2c\5\u0436\u021c\2\u0f2a\u0f2c")
        buf.write(u"\5\u0498\u024d\2\u0f2b\u0f29\3\2\2\2\u0f2b\u0f2a\3\2")
        buf.write(u"\2\2\u0f2c\u0249\3\2\2\2\u0f2d\u0f2f\7\64\2\2\u0f2e\u0f2d")
        buf.write(u"\3\2\2\2\u0f2e\u0f2f\3\2\2\2\u0f2f\u0f30\3\2\2\2\u0f30")
        buf.write(u"\u0f32\7c\2\2\u0f31\u0f33\5\u024c\u0127\2\u0f32\u0f31")
        buf.write(u"\3\2\2\2\u0f33\u0f34\3\2\2\2\u0f34\u0f32\3\2\2\2\u0f34")
        buf.write(u"\u0f35\3\2\2\2\u0f35\u024b\3\2\2\2\u0f36\u0f37\7\7\2")
        buf.write(u"\2\u0f37\u0f3d\7\u0149\2\2\u0f38\u0f3a\7\u0113\2\2\u0f39")
        buf.write(u"\u0f3b\7\u0149\2\2\u0f3a\u0f39\3\2\2\2\u0f3a\u0f3b\3")
        buf.write(u"\2\2\2\u0f3b\u0f3d\3\2\2\2\u0f3c\u0f36\3\2\2\2\u0f3c")
        buf.write(u"\u0f38\3\2\2\2\u0f3c\u0f3d\3\2\2\2\u0f3d\u0f3e\3\2\2")
        buf.write(u"\2\u0f3e\u0f42\5\u0436\u021c\2\u0f3f\u0f42\5\u0498\u024d")
        buf.write(u"\2\u0f40\u0f42\7\u014b\2\2\u0f41\u0f3c\3\2\2\2\u0f41")
        buf.write(u"\u0f3f\3\2\2\2\u0f41\u0f40\3\2\2\2\u0f42\u024d\3\2\2")
        buf.write(u"\2\u0f43\u0f44\t\65\2\2\u0f44\u0f45\5\u0436\u021c\2\u0f45")
        buf.write(u"\u024f\3\2\2\2\u0f46\u0f48\78\2\2\u0f47\u0f49\5\u0252")
        buf.write(u"\u012a\2\u0f48\u0f47\3\2\2\2\u0f49\u0f4a\3\2\2\2\u0f4a")
        buf.write(u"\u0f48\3\2\2\2\u0f4a\u0f4b\3\2\2\2\u0f4b\u0251\3\2\2")
        buf.write(u"\2\u0f4c\u0f4d\5\u047a\u023e\2\u0f4d\u0f4e\t\'\2\2\u0f4e")
        buf.write(u"\u0f52\3\2\2\2\u0f4f\u0f52\5\u0436\u021c\2\u0f50\u0f52")
        buf.write(u"\5\u0498\u024d\2\u0f51\u0f4c\3\2\2\2\u0f51\u0f4f\3\2")
        buf.write(u"\2\2\u0f51\u0f50\3\2\2\2\u0f52\u0253\3\2\2\2\u0f53\u0f55")
        buf.write(u"\7G\2\2\u0f54\u0f56\5\u0256\u012c\2\u0f55\u0f54\3\2\2")
        buf.write(u"\2\u0f56\u0f57\3\2\2\2\u0f57\u0f55\3\2\2\2\u0f57\u0f58")
        buf.write(u"\3\2\2\2\u0f58\u0255\3\2\2\2\u0f59\u0f5d\5\u0472\u023a")
        buf.write(u"\2\u0f5a\u0f5e\5\u0258\u012d\2\u0f5b\u0f5e\5\u025a\u012e")
        buf.write(u"\2\u0f5c\u0f5e\5\u025c\u012f\2\u0f5d\u0f5a\3\2\2\2\u0f5d")
        buf.write(u"\u0f5b\3\2\2\2\u0f5d\u0f5c\3\2\2\2\u0f5d\u0f5e\3\2\2")
        buf.write(u"\2\u0f5e\u0257\3\2\2\2\u0f5f\u0f64\t\17\2\2\u0f60\u0f62")
        buf.write(u"\7\u00da\2\2\u0f61\u0f60\3\2\2\2\u0f61\u0f62\3\2\2\2")
        buf.write(u"\u0f62\u0f63\3\2\2\2\u0f63\u0f65\7\u018c\2\2\u0f64\u0f61")
        buf.write(u"\3\2\2\2\u0f64\u0f65\3\2\2\2\u0f65\u0f6e\3\2\2\2\u0f66")
        buf.write(u"\u0f68\7\u0209\2\2\u0f67\u0f66\3\2\2\2\u0f67\u0f68\3")
        buf.write(u"\2\2\2\u0f68\u0f6c\3\2\2\2\u0f69\u0f6a\7\u013c\2\2\u0f6a")
        buf.write(u"\u0f6d\7\u019d\2\2\u0f6b\u0f6d\7\u0124\2\2\u0f6c\u0f69")
        buf.write(u"\3\2\2\2\u0f6c\u0f6b\3\2\2\2\u0f6d\u0f6f\3\2\2\2\u0f6e")
        buf.write(u"\u0f67\3\2\2\2\u0f6e\u0f6f\3\2\2\2\u0f6f\u0259\3\2\2")
        buf.write(u"\2\u0f70\u0f72\7\u0209\2\2\u0f71\u0f70\3\2\2\2\u0f71")
        buf.write(u"\u0f72\3\2\2\2\u0f72\u0f76\3\2\2\2\u0f73\u0f74\7\u013c")
        buf.write(u"\2\2\u0f74\u0f77\7\u019d\2\2\u0f75\u0f77\7\u0124\2\2")
        buf.write(u"\u0f76\u0f73\3\2\2\2\u0f76\u0f75\3\2\2\2\u0f77\u025b")
        buf.write(u"\3\2\2\2\u0f78\u0f7a\7\u0209\2\2\u0f79\u0f78\3\2\2\2")
        buf.write(u"\u0f79\u0f7a\3\2\2\2\u0f7a\u0f7b\3\2\2\2\u0f7b\u0f7c")
        buf.write(u"\7\u013c\2\2\u0f7c\u0f80\7\u0206\2\2\u0f7d\u0f7e\7\u0209")
        buf.write(u"\2\2\u0f7e\u0f80\7\u0206\2\2\u0f7f\u0f79\3\2\2\2\u0f7f")
        buf.write(u"\u0f7d\3\2\2\2\u0f80\u0f87\3\2\2\2\u0f81\u0f83\7\u0201")
        buf.write(u"\2\2\u0f82\u0f84\5\u025e\u0130\2\u0f83\u0f82\3\2\2\2")
        buf.write(u"\u0f84\u0f85\3\2\2\2\u0f85\u0f83\3\2\2\2\u0f85\u0f86")
        buf.write(u"\3\2\2\2\u0f86\u0f88\3\2\2\2\u0f87\u0f81\3\2\2\2\u0f87")
        buf.write(u"\u0f88\3\2\2\2\u0f88\u025d\3\2\2\2\u0f89\u0f8d\5\u0260")
        buf.write(u"\u0131\2\u0f8a\u0f8d\5\u0262\u0132\2\u0f8b\u0f8d\5\u0264")
        buf.write(u"\u0133\2\u0f8c\u0f89\3\2\2\2\u0f8c\u0f8a\3\2\2\2\u0f8c")
        buf.write(u"\u0f8b\3\2\2\2\u0f8d\u025f\3\2\2\2\u0f8e\u0f90\7H\2\2")
        buf.write(u"\u0f8f\u0f91\7\u0149\2\2\u0f90\u0f8f\3\2\2\2\u0f90\u0f91")
        buf.write(u"\3\2\2\2\u0f91\u0f92\3\2\2\2\u0f92\u0f93\t\67\2\2\u0f93")
        buf.write(u"\u0261\3\2\2\2\u0f94\u0f97\7\36\2\2\u0f95\u0f98\5\u0436")
        buf.write(u"\u021c\2\u0f96\u0f98\5\u049e\u0250\2\u0f97\u0f95\3\2")
        buf.write(u"\2\2\u0f97\u0f96\3\2\2\2\u0f98\u0263\3\2\2\2\u0f99\u0f9b")
        buf.write(u"\7\37\2\2\u0f9a\u0f9c\7\u0149\2\2\u0f9b\u0f9a\3\2\2\2")
        buf.write(u"\u0f9b\u0f9c\3\2\2\2\u0f9c\u0f9f\3\2\2\2\u0f9d\u0fa0")
        buf.write(u"\5\u0436\u021c\2\u0f9e\u0fa0\5\u049e\u0250\2\u0f9f\u0f9d")
        buf.write(u"\3\2\2\2\u0f9f\u0f9e\3\2\2\2\u0fa0\u0265\3\2\2\2\u0fa1")
        buf.write(u"\u0fa3\7`\2\2\u0fa2\u0fa4\5\u0268\u0135\2\u0fa3\u0fa2")
        buf.write(u"\3\2\2\2\u0fa4\u0fa5\3\2\2\2\u0fa5\u0fa3\3\2\2\2\u0fa5")
        buf.write(u"\u0fa6\3\2\2\2\u0fa6\u0fa7\3\2\2\2\u0fa7\u0fa8\t8\2\2")
        buf.write(u"\u0fa8\u0faa\5\u040c\u0207\2\u0fa9\u0fab\5\u0404\u0203")
        buf.write(u"\2\u0faa\u0fa9\3\2\2\2\u0faa\u0fab\3\2\2\2\u0fab\u0fad")
        buf.write(u"\3\2\2\2\u0fac\u0fae\5\u0406\u0204\2\u0fad\u0fac\3\2")
        buf.write(u"\2\2\u0fad\u0fae\3\2\2\2\u0fae\u0fb0\3\2\2\2\u0faf\u0fb1")
        buf.write(u"\7\u00a7\2\2\u0fb0\u0faf\3\2\2\2\u0fb0\u0fb1\3\2\2\2")
        buf.write(u"\u0fb1\u0267\3\2\2\2\u0fb2\u0fb4\5\u0436\u021c\2\u0fb3")
        buf.write(u"\u0fb5\7\u01a2\2\2\u0fb4\u0fb3\3\2\2\2\u0fb4\u0fb5\3")
        buf.write(u"\2\2\2\u0fb5\u0269\3\2\2\2\u0fb6\u0fb7\7d\2\2\u0fb7\u026b")
        buf.write(u"\3\2\2\2\u0fb8\u0fb9\7\u0088\2\2\u0fb9\u0fbb\5\u0472")
        buf.write(u"\u023a\2\u0fba\u0fbc\7\u017f\2\2\u0fbb\u0fba\3\2\2\2")
        buf.write(u"\u0fbb\u0fbc\3\2\2\2\u0fbc\u0fbe\3\2\2\2\u0fbd\u0fbf")
        buf.write(u"\5\u03fc\u01ff\2\u0fbe\u0fbd\3\2\2\2\u0fbe\u0fbf\3\2")
        buf.write(u"\2\2\u0fbf\u0fc1\3\2\2\2\u0fc0\u0fc2\5\u03fe\u0200\2")
        buf.write(u"\u0fc1\u0fc0\3\2\2\2\u0fc1\u0fc2\3\2\2\2\u0fc2\u0fc4")
        buf.write(u"\3\2\2\2\u0fc3\u0fc5\7\u00a8\2\2\u0fc4\u0fc3\3\2\2\2")
        buf.write(u"\u0fc4\u0fc5\3\2\2\2\u0fc5\u026d\3\2\2\2\u0fc6\u0fce")
        buf.write(u"\7\u0091\2\2\u0fc7\u0fc9\7\u00fc\2\2\u0fc8\u0fca\7\u01e2")
        buf.write(u"\2\2\u0fc9\u0fc8\3\2\2\2\u0fc9\u0fca\3\2\2\2\u0fca\u0fcf")
        buf.write(u"\3\2\2\2\u0fcb\u0fcc\7\u00ee\2\2\u0fcc\u0fcf\7\u01e2")
        buf.write(u"\2\2\u0fcd\u0fcf\7\u0154\2\2\u0fce\u0fc7\3\2\2\2\u0fce")
        buf.write(u"\u0fcb\3\2\2\2\u0fce\u0fcd\3\2\2\2\u0fcf\u0fd0\3\2\2")
        buf.write(u"\2\u0fd0\u0fd2\5\u0464\u0233\2\u0fd1\u0fd3\7\u0209\2")
        buf.write(u"\2\u0fd2\u0fd1\3\2\2\2\u0fd2\u0fd3\3\2\2\2\u0fd3\u0fd4")
        buf.write(u"\3\2\2\2\u0fd4\u0fd7\7\u0109\2\2\u0fd5\u0fd8\5\u0436")
        buf.write(u"\u021c\2\u0fd6\u0fd8\5\u0498\u024d\2\u0fd7\u0fd5\3\2")
        buf.write(u"\2\2\u0fd7\u0fd6\3\2\2\2\u0fd8\u026f\3\2\2\2\u0fd9\u0fdb")
        buf.write(u"\7\u0093\2\2\u0fda\u0fdc\5\u0272\u013a\2\u0fdb\u0fda")
        buf.write(u"\3\2\2\2\u0fdc\u0fdd\3\2\2\2\u0fdd\u0fdb\3\2\2\2\u0fdd")
        buf.write(u"\u0fde\3\2\2\2\u0fde\u0fe0\3\2\2\2\u0fdf\u0fe1\5\u0274")
        buf.write(u"\u013b\2\u0fe0\u0fdf\3\2\2\2\u0fe0\u0fe1\3\2\2\2\u0fe1")
        buf.write(u"\u0fe3\3\2\2\2\u0fe2\u0fe4\5\u0276\u013c\2\u0fe3\u0fe2")
        buf.write(u"\3\2\2\2\u0fe3\u0fe4\3\2\2\2\u0fe4\u0fe6\3\2\2\2\u0fe5")
        buf.write(u"\u0fe7\5\u0278\u013d\2\u0fe6\u0fe5\3\2\2\2\u0fe6\u0fe7")
        buf.write(u"\3\2\2\2\u0fe7\u0271\3\2\2\2\u0fe8\u0feb\5\u0436\u021c")
        buf.write(u"\2\u0fe9\u0feb\5\u0498\u024d\2\u0fea\u0fe8\3\2\2\2\u0fea")
        buf.write(u"\u0fe9\3\2\2\2\u0feb\u0273\3\2\2\2\u0fec\u0fef\7 \2\2")
        buf.write(u"\u0fed\u0ff0\5\u0436\u021c\2\u0fee\u0ff0\5\u0498\u024d")
        buf.write(u"\2\u0fef\u0fed\3\2\2\2\u0fef\u0fee\3\2\2\2\u0ff0\u0275")
        buf.write(u"\3\2\2\2\u0ff1\u0ff4\7\u01fe\2\2\u0ff2\u0ff5\5\u047e")
        buf.write(u"\u0240\2\u0ff3\u0ff5\5\u0470\u0239\2\u0ff4\u0ff2\3\2")
        buf.write(u"\2\2\u0ff4\u0ff3\3\2\2\2\u0ff5\u0277\3\2\2\2\u0ff6\u0ff8")
        buf.write(u"\7\u0209\2\2\u0ff7\u0ff6\3\2\2\2\u0ff7\u0ff8\3\2\2\2")
        buf.write(u"\u0ff8\u0ff9\3\2\2\2\u0ff9\u0ffa\7\u013c\2\2\u0ffa\u0ffb")
        buf.write(u"\7\b\2\2\u0ffb\u0279\3\2\2\2\u0ffc\u0fff\7\u0095\2\2")
        buf.write(u"\u0ffd\u1000\5\u0436\u021c\2\u0ffe\u1000\5\u0498\u024d")
        buf.write(u"\2\u0fff\u0ffd\3\2\2\2\u0fff\u0ffe\3\2\2\2\u1000\u1004")
        buf.write(u"\3\2\2\2\u1001\u1005\5\u027c\u013f\2\u1002\u1005\5\u027e")
        buf.write(u"\u0140\2\u1003\u1005\5\u0280\u0141\2\u1004\u1001\3\2")
        buf.write(u"\2\2\u1004\u1002\3\2\2\2\u1004\u1003\3\2\2\2\u1005\u1007")
        buf.write(u"\3\2\2\2\u1006\u1008\5\u0288\u0145\2\u1007\u1006\3\2")
        buf.write(u"\2\2\u1007\u1008\3\2\2\2\u1008\u100a\3\2\2\2\u1009\u100b")
        buf.write(u"\5\u0404\u0203\2\u100a\u1009\3\2\2\2\u100a\u100b\3\2")
        buf.write(u"\2\2\u100b\u100d\3\2\2\2\u100c\u100e\5\u0406\u0204\2")
        buf.write(u"\u100d\u100c\3\2\2\2\u100d\u100e\3\2\2\2\u100e\u1010")
        buf.write(u"\3\2\2\2\u100f\u1011\7\u00a9\2\2\u1010\u100f\3\2\2\2")
        buf.write(u"\u1010\u1011\3\2\2\2\u1011\u027b\3\2\2\2\u1012\u1014")
        buf.write(u"\7\u0101\2\2\u1013\u1015\5\u0284\u0143\2\u1014\u1013")
        buf.write(u"\3\2\2\2\u1015\u1016\3\2\2\2\u1016\u1014\3\2\2\2\u1016")
        buf.write(u"\u1017\3\2\2\2\u1017\u027d\3\2\2\2\u1018\u101b\7\u0101")
        buf.write(u"\2\2\u1019\u101c\5\u0436\u021c\2\u101a\u101c\5\u0498")
        buf.write(u"\u024d\2\u101b\u1019\3\2\2\2\u101b\u101a\3\2\2\2\u101c")
        buf.write(u"\u101e\3\2\2\2\u101d\u101f\5\u0282\u0142\2\u101e\u101d")
        buf.write(u"\3\2\2\2\u101e\u101f\3\2\2\2\u101f\u027f\3\2\2\2\u1020")
        buf.write(u"\u1023\7\64\2\2\u1021\u1024\5\u0436\u021c\2\u1022\u1024")
        buf.write(u"\5\u0498\u024d\2\u1023\u1021\3\2\2\2\u1023\u1022\3\2")
        buf.write(u"\2\2\u1024\u1026\3\2\2\2\u1025\u1027\5\u0282\u0142\2")
        buf.write(u"\u1026\u1025\3\2\2\2\u1026\u1027\3\2\2\2\u1027\u0281")
        buf.write(u"\3\2\2\2\u1028\u102a\7\u00e4\2\2\u1029\u102b\5\u0286")
        buf.write(u"\u0144\2\u102a\u1029\3\2\2\2\u102b\u102c\3\2\2\2\u102c")
        buf.write(u"\u102a\3\2\2\2\u102c\u102d\3\2\2\2\u102d\u0283\3\2\2")
        buf.write(u"\2\u102e\u1030\5\u0436\u021c\2\u102f\u1031\7\u01a2\2")
        buf.write(u"\2\u1030\u102f\3\2\2\2\u1030\u1031\3\2\2\2\u1031\u0285")
        buf.write(u"\3\2\2\2\u1032\u1034\5\u0436\u021c\2\u1033\u1035\7\u01a2")
        buf.write(u"\2\2\u1034\u1033\3\2\2\2\u1034\u1035\3\2\2\2\u1035\u0287")
        buf.write(u"\3\2\2\2\u1036\u1037\7\u018a\2\2\u1037\u1038\5\u0436")
        buf.write(u"\u021c\2\u1038\u0289\3\2\2\2\u1039\u1041\7\u00a2\2\2")
        buf.write(u"\u103a\u103c\7\u00fc\2\2\u103b\u103d\7\u01e2\2\2\u103c")
        buf.write(u"\u103b\3\2\2\2\u103c\u103d\3\2\2\2\u103d\u1042\3\2\2")
        buf.write(u"\2\u103e\u103f\7\u00ee\2\2\u103f\u1042\7\u01e2\2\2\u1040")
        buf.write(u"\u1042\7\u0154\2\2\u1041\u103a\3\2\2\2\u1041\u103e\3")
        buf.write(u"\2\2\2\u1041\u1040\3\2\2\2\u1042\u1043\3\2\2\2\u1043")
        buf.write(u"\u1045\5\u0464\u0233\2\u1044\u1046\7\u0209\2\2\u1045")
        buf.write(u"\u1044\3\2\2\2\u1045\u1046\3\2\2\2\u1046\u1047\3\2\2")
        buf.write(u"\2\u1047\u104a\7\u0109\2\2\u1048\u104b\5\u0498\u024d")
        buf.write(u"\2\u1049\u104b\5\u0436\u021c\2\u104a\u1048\3\2\2\2\u104a")
        buf.write(u"\u1049\3\2\2\2\u104b\u028b\3\2\2\2\u104c\u104d\7\u00bc")
        buf.write(u"\2\2\u104d\u1054\5\u0498\u024d\2\u104e\u1050\7\u0201")
        buf.write(u"\2\2\u104f\u1051\5\u0436\u021c\2\u1050\u104f\3\2\2\2")
        buf.write(u"\u1051\u1052\3\2\2\2\u1052\u1050\3\2\2\2\u1052\u1053")
        buf.write(u"\3\2\2\2\u1053\u1055\3\2\2\2\u1054\u104e\3\2\2\2\u1054")
        buf.write(u"\u1055\3\2\2\2\u1055\u028d\3\2\2\2\u1056\u1057\7\u00c7")
        buf.write(u"\2\2\u1057\u105b\5\u0290\u0149\2\u1058\u105a\5\u0292")
        buf.write(u"\u014a\2\u1059\u1058\3\2\2\2\u105a\u105d\3\2\2\2\u105b")
        buf.write(u"\u1059\3\2\2\2\u105b\u105c\3\2\2\2\u105c\u105f\3\2\2")
        buf.write(u"\2\u105d\u105b\3\2\2\2\u105e\u1060\5\u0294\u014b\2\u105f")
        buf.write(u"\u105e\3\2\2\2\u1060\u1061\3\2\2\2\u1061\u105f\3\2\2")
        buf.write(u"\2\u1061\u1062\3\2\2\2\u1062\u1064\3\2\2\2\u1063\u1065")
        buf.write(u"\5\u029e\u0150\2\u1064\u1063\3\2\2\2\u1064\u1065\3\2")
        buf.write(u"\2\2\u1065\u1067\3\2\2\2\u1066\u1068\7\u00aa\2\2\u1067")
        buf.write(u"\u1066\3\2\2\2\u1067\u1068\3\2\2\2\u1068\u028f\3\2\2")
        buf.write(u"\2\u1069\u106e\5\u0436\u021c\2\u106a\u106e\5\u0498\u024d")
        buf.write(u"\2\u106b\u106e\5\u040c\u0207\2\u106c\u106e\5\u041a\u020e")
        buf.write(u"\2\u106d\u1069\3\2\2\2\u106d\u106a\3\2\2\2\u106d\u106b")
        buf.write(u"\3\2\2\2\u106d\u106c\3\2\2\2\u106e\u0291\3\2\2\2\u106f")
        buf.write(u"\u1070\7\22\2\2\u1070\u1071\5\u0290\u0149\2\u1071\u0293")
        buf.write(u"\3\2\2\2\u1072\u1074\5\u0296\u014c\2\u1073\u1072\3\2")
        buf.write(u"\2\2\u1074\u1075\3\2\2\2\u1075\u1073\3\2\2\2\u1075\u1076")
        buf.write(u"\3\2\2\2\u1076\u107a\3\2\2\2\u1077\u1079\5\u021a\u010e")
        buf.write(u"\2\u1078\u1077\3\2\2\2\u1079\u107c\3\2\2\2\u107a\u1078")
        buf.write(u"\3\2\2\2\u107a\u107b\3\2\2\2\u107b\u0295\3\2\2\2\u107c")
        buf.write(u"\u107a\3\2\2\2\u107d\u107e\7\u0207\2\2\u107e\u1082\5")
        buf.write(u"\u0298\u014d\2\u107f\u1081\5\u029c\u014f\2\u1080\u107f")
        buf.write(u"\3\2\2\2\u1081\u1084\3\2\2\2\u1082\u1080\3\2\2\2\u1082")
        buf.write(u"\u1083\3\2\2\2\u1083\u0297\3\2\2\2\u1084\u1082\3\2\2")
        buf.write(u"\2\u1085\u1090\7\26\2\2\u1086\u1088\7\u013e\2\2\u1087")
        buf.write(u"\u1086\3\2\2\2\u1087\u1088\3\2\2\2\u1088\u1089\3\2\2")
        buf.write(u"\2\u1089\u108b\5\u02a0\u0151\2\u108a\u108c\5\u029a\u014e")
        buf.write(u"\2\u108b\u108a\3\2\2\2\u108b\u108c\3\2\2\2\u108c\u1090")
        buf.write(u"\3\2\2\2\u108d\u1090\5\u041a\u020e\2\u108e\u1090\5\u049a")
        buf.write(u"\u024e\2\u108f\u1085\3\2\2\2\u108f\u1087\3\2\2\2\u108f")
        buf.write(u"\u108d\3\2\2\2\u108f\u108e\3\2\2\2\u1090\u0299\3\2\2")
        buf.write(u"\2\u1091\u1092\t\6\2\2\u1092\u1093\5\u02a0\u0151\2\u1093")
        buf.write(u"\u029b\3\2\2\2\u1094\u1095\7\22\2\2\u1095\u1096\5\u0298")
        buf.write(u"\u014d\2\u1096\u029d\3\2\2\2\u1097\u1098\7\u0207\2\2")
        buf.write(u"\u1098\u109c\7\u0153\2\2\u1099\u109b\5\u021a\u010e\2")
        buf.write(u"\u109a\u1099\3\2\2\2\u109b\u109e\3\2\2\2\u109c\u109a")
        buf.write(u"\3\2\2\2\u109c\u109d\3\2\2\2\u109d\u029f\3\2\2\2\u109e")
        buf.write(u"\u109c\3\2\2\2\u109f\u10a3\5\u0436\u021c\2\u10a0\u10a3")
        buf.write(u"\5\u0498\u024d\2\u10a1\u10a3\5\u040c\u0207\2\u10a2\u109f")
        buf.write(u"\3\2\2\2\u10a2\u10a0\3\2\2\2\u10a2\u10a1\3\2\2\2\u10a3")
        buf.write(u"\u02a1\3\2\2\2\u10a4\u10a6\7\u0236\2\2\u10a5\u10a4\3")
        buf.write(u"\2\2\2\u10a6\u10a7\3\2\2\2\u10a7\u10a5\3\2\2\2\u10a7")
        buf.write(u"\u10a8\3\2\2\2\u10a8\u02a3\3\2\2\2\u10a9\u10ab\7\u0238")
        buf.write(u"\2\2\u10aa\u10a9\3\2\2\2\u10ab\u10ac\3\2\2\2\u10ac\u10aa")
        buf.write(u"\3\2\2\2\u10ac\u10ad\3\2\2\2\u10ad\u02a5\3\2\2\2\u10ae")
        buf.write(u"\u10b0\7\u0237\2\2\u10af\u10ae\3\2\2\2\u10b0\u10b1\3")
        buf.write(u"\2\2\2\u10b1\u10af\3\2\2\2\u10b1\u10b2\3\2\2\2\u10b2")
        buf.write(u"\u02a7\3\2\2\2\u10b3\u10b5\7\u00cc\2\2\u10b4\u10b6\7")
        buf.write(u"\u0135\2\2\u10b5\u10b4\3\2\2\2\u10b5\u10b6\3\2\2\2\u10b6")
        buf.write(u"\u10b8\3\2\2\2\u10b7\u10b9\7?\2\2\u10b8\u10b7\3\2\2\2")
        buf.write(u"\u10b8\u10b9\3\2\2\2\u10b9\u10bb\3\2\2\2\u10ba\u10bc")
        buf.write(u"\5\u02aa\u0156\2\u10bb\u10ba\3\2\2\2\u10bc\u10bd\3\2")
        buf.write(u"\2\2\u10bd\u10bb\3\2\2\2\u10bd\u10be\3\2\2\2\u10be\u02a9")
        buf.write(u"\3\2\2\2\u10bf\u10c2\5\u0436\u021c\2\u10c0\u10c2\5\u0498")
        buf.write(u"\u024d\2\u10c1\u10bf\3\2\2\2\u10c1\u10c0\3\2\2\2\u10c2")
        buf.write(u"\u02ab\3\2\2\2\u10c3\u10c5\7\u00cd\2\2\u10c4\u10c6\7")
        buf.write(u"\u016f\2\2\u10c5\u10c4\3\2\2\2\u10c5\u10c6\3\2\2\2\u10c6")
        buf.write(u"\u02ad\3\2\2\2\u10c7\u10c8\7\u00e2\2\2\u10c8\u10c9\5")
        buf.write(u"\u0488\u0245\2\u10c9\u02af\3\2\2\2\u10ca\u10cb\7\u00e3")
        buf.write(u"\2\2\u10cb\u02b1\3\2\2\2\u10cc\u10ce\7\u00e6\2\2\u10cd")
        buf.write(u"\u10cf\7\u01f0\2\2\u10ce\u10cd\3\2\2\2\u10ce\u10cf\3")
        buf.write(u"\2\2\2\u10cf\u10d2\3\2\2\2\u10d0\u10d3\5\u02b4\u015b")
        buf.write(u"\2\u10d1\u10d3\5\u02b6\u015c\2\u10d2\u10d0\3\2\2\2\u10d2")
        buf.write(u"\u10d1\3\2\2\2\u10d3\u02b3\3\2\2\2\u10d4\u10d5\5\u0482")
        buf.write(u"\u0242\2\u10d5\u02b5\3\2\2\2\u10d6\u10e4\7\u0131\2\2")
        buf.write(u"\u10d7\u10d9\5\u0482\u0242\2\u10d8\u10d7\3\2\2\2\u10d9")
        buf.write(u"\u10da\3\2\2\2\u10da\u10d8\3\2\2\2\u10da\u10db\3\2\2")
        buf.write(u"\2\u10db\u10e1\3\2\2\2\u10dc\u10de\7\u008b\2\2\u10dd")
        buf.write(u"\u10df\7\u014c\2\2\u10de\u10dd\3\2\2\2\u10de\u10df\3")
        buf.write(u"\2\2\2\u10df\u10e0\3\2\2\2\u10e0\u10e2\5\u0436\u021c")
        buf.write(u"\2\u10e1\u10dc\3\2\2\2\u10e1\u10e2\3\2\2\2\u10e2\u10e4")
        buf.write(u"\3\2\2\2\u10e3\u10d6\3\2\2\2\u10e3\u10d8\3\2\2\2\u10e4")
        buf.write(u"\u02b7\3\2\2\2\u10e5\u10e6\7\u00f2\2\2\u10e6\u10e7\5")
        buf.write(u"\u041a\u020e\2\u10e7\u10e9\5\u02ba\u015e\2\u10e8\u10ea")
        buf.write(u"\5\u02bc\u015f\2\u10e9\u10e8\3\2\2\2\u10e9\u10ea\3\2")
        buf.write(u"\2\2\u10ea\u10ec\3\2\2\2\u10eb\u10ed\7\u00ab\2\2\u10ec")
        buf.write(u"\u10eb\3\2\2\2\u10ec\u10ed\3\2\2\2\u10ed\u02b9\3\2\2")
        buf.write(u"\2\u10ee\u10f0\7\u01e7\2\2\u10ef\u10ee\3\2\2\2\u10ef")
        buf.write(u"\u10f0\3\2\2\2\u10f0\u10f9\3\2\2\2\u10f1\u10f2\7\u013b")
        buf.write(u"\2\2\u10f2\u10fa\7\u01b0\2\2\u10f3\u10f5\5\u021a\u010e")
        buf.write(u"\2\u10f4\u10f3\3\2\2\2\u10f5\u10f8\3\2\2\2\u10f6\u10f4")
        buf.write(u"\3\2\2\2\u10f6\u10f7\3\2\2\2\u10f7\u10fa\3\2\2\2\u10f8")
        buf.write(u"\u10f6\3\2\2\2\u10f9\u10f1\3\2\2\2\u10f9\u10f6\3\2\2")
        buf.write(u"\2\u10fa\u02bb\3\2\2\2\u10fb\u1104\7\u009f\2\2\u10fc")
        buf.write(u"\u10fd\7\u013b\2\2\u10fd\u1105\7\u01b0\2\2\u10fe\u1100")
        buf.write(u"\5\u021a\u010e\2\u10ff\u10fe\3\2\2\2\u1100\u1103\3\2")
        buf.write(u"\2\2\u1101\u10ff\3\2\2\2\u1101\u1102\3\2\2\2\u1102\u1105")
        buf.write(u"\3\2\2\2\u1103\u1101\3\2\2\2\u1104\u10fc\3\2\2\2\u1104")
        buf.write(u"\u1101\3\2\2\2\u1105\u02bd\3\2\2\2\u1106\u1108\7\u00fa")
        buf.write(u"\2\2\u1107\u1109\5\u0436\u021c\2\u1108\u1107\3\2\2\2")
        buf.write(u"\u1109\u110a\3\2\2\2\u110a\u1108\3\2\2\2\u110a\u110b")
        buf.write(u"\3\2\2\2\u110b\u110d\3\2\2\2\u110c\u110e\5\u02c0\u0161")
        buf.write(u"\2\u110d\u110c\3\2\2\2\u110d\u110e\3\2\2\2\u110e\u02bf")
        buf.write(u"\3\2\2\2\u110f\u1111\7\u0190\2\2\u1110\u1112\5\u02c2")
        buf.write(u"\u0162\2\u1111\u1110\3\2\2\2\u1112\u1113\3\2\2\2\u1113")
        buf.write(u"\u1111\3\2\2\2\u1113\u1114\3\2\2\2\u1114\u02c1\3\2\2")
        buf.write(u"\2\u1115\u1117\t9\2\2\u1116\u1118\7q\2\2\u1117\u1116")
        buf.write(u"\3\2\2\2\u1117\u1118\3\2\2\2\u1118\u1119\3\2\2\2\u1119")
        buf.write(u"\u111c\7\64\2\2\u111a\u111d\5\u0436\u021c\2\u111b\u111d")
        buf.write(u"\5\u0498\u024d\2\u111c\u111a\3\2\2\2\u111c\u111b\3\2")
        buf.write(u"\2\2\u111d\u02c3\3\2\2\2\u111e\u1120\7\u00fb\2\2\u111f")
        buf.write(u"\u1121\5\u0488\u0245\2\u1120\u111f\3\2\2\2\u1121\u1122")
        buf.write(u"\3\2\2\2\u1122\u1120\3\2\2\2\u1122\u1123\3\2\2\2\u1123")
        buf.write(u"\u02c5\3\2\2\2\u1124\u1125\7\u00fe\2\2\u1125\u112a\5")
        buf.write(u"\u0436\u021c\2\u1126\u112b\5\u02c8\u0165\2\u1127\u112b")
        buf.write(u"\5\u02ca\u0166\2\u1128\u112b\5\u02cc\u0167\2\u1129\u112b")
        buf.write(u"\5\u02ce\u0168\2\u112a\u1126\3\2\2\2\u112a\u1127\3\2")
        buf.write(u"\2\2\u112a\u1128\3\2\2\2\u112a\u1129\3\2\2\2\u112b\u02c7")
        buf.write(u"\3\2\2\2\u112c\u112e\7\u01df\2\2\u112d\u112f\5\u02d0")
        buf.write(u"\u0169\2\u112e\u112d\3\2\2\2\u112f\u1130\3\2\2\2\u1130")
        buf.write(u"\u112e\3\2\2\2\u1130\u1131\3\2\2\2\u1131\u02c9\3\2\2")
        buf.write(u"\2\u1132\u1135\7\u0190\2\2\u1133\u1136\5\u02d4\u016b")
        buf.write(u"\2\u1134\u1136\5\u02d8\u016d\2\u1135\u1133\3\2\2\2\u1135")
        buf.write(u"\u1134\3\2\2\2\u1136\u1137\3\2\2\2\u1137\u1135\3\2\2")
        buf.write(u"\2\u1137\u1138\3\2\2\2\u1138\u02cb\3\2\2\2\u1139\u113b")
        buf.write(u"\7\u01df\2\2\u113a\u113c\5\u02d0\u0169\2\u113b\u113a")
        buf.write(u"\3\2\2\2\u113c\u113d\3\2\2\2\u113d\u113b\3\2\2\2\u113d")
        buf.write(u"\u113e\3\2\2\2\u113e\u1140\3\2\2\2\u113f\u1141\5\u02ca")
        buf.write(u"\u0166\2\u1140\u113f\3\2\2\2\u1141\u1142\3\2\2\2\u1142")
        buf.write(u"\u1140\3\2\2\2\u1142\u1143\3\2\2\2\u1143\u02cd\3\2\2")
        buf.write(u"\2\u1144\u1147\7i\2\2\u1145\u1148\5\u0436\u021c\2\u1146")
        buf.write(u"\u1148\5\u0498\u024d\2\u1147\u1145\3\2\2\2\u1147\u1146")
        buf.write(u"\3\2\2\2\u1148\u1149\3\2\2\2\u1149\u114d\5\u02e0\u0171")
        buf.write(u"\2\u114a\u114c\5\u02e2\u0172\2\u114b\u114a\3\2\2\2\u114c")
        buf.write(u"\u114f\3\2\2\2\u114d\u114b\3\2\2\2\u114d\u114e\3\2\2")
        buf.write(u"\2\u114e\u02cf\3\2\2\2\u114f\u114d\3\2\2\2\u1150\u1151")
        buf.write(u"\5\u0436\u021c\2\u1151\u1154\7\u00da\2\2\u1152\u1155")
        buf.write(u"\5\u02d2\u016a\2\u1153\u1155\5\u02d6\u016c\2\u1154\u1152")
        buf.write(u"\3\2\2\2\u1154\u1153\3\2\2\2\u1155\u1156\3\2\2\2\u1156")
        buf.write(u"\u1154\3\2\2\2\u1156\u1157\3\2\2\2\u1157\u02d1\3\2\2")
        buf.write(u"\2\u1158\u115c\7B\2\2\u1159\u115b\5\u02e2\u0172\2\u115a")
        buf.write(u"\u1159\3\2\2\2\u115b\u115e\3\2\2\2\u115c\u115a\3\2\2")
        buf.write(u"\2\u115c\u115d\3\2\2\2\u115d\u02d3\3\2\2\2\u115e\u115c")
        buf.write(u"\3\2\2\2\u115f\u1160\7B\2\2\u1160\u1164\5\u02de\u0170")
        buf.write(u"\2\u1161\u1163\5\u02e2\u0172\2\u1162\u1161\3\2\2\2\u1163")
        buf.write(u"\u1166\3\2\2\2\u1164\u1162\3\2\2\2\u1164\u1165\3\2\2")
        buf.write(u"\2\u1165\u02d5\3\2\2\2\u1166\u1164\3\2\2\2\u1167\u1169")
        buf.write(u"\t:\2\2\u1168\u116a\5\u02da\u016e\2\u1169\u1168\3\2\2")
        buf.write(u"\2\u116a\u116b\3\2\2\2\u116b\u1169\3\2\2\2\u116b\u116c")
        buf.write(u"\3\2\2\2\u116c\u02d7\3\2\2\2\u116d\u116f\t;\2\2\u116e")
        buf.write(u"\u1170\5\u02dc\u016f\2\u116f\u116e\3\2\2\2\u1170\u1171")
        buf.write(u"\3\2\2\2\u1171\u116f\3\2\2\2\u1171\u1172\3\2\2\2\u1172")
        buf.write(u"\u02d9\3\2\2\2\u1173\u1176\5\u0436\u021c\2\u1174\u1176")
        buf.write(u"\5\u0498\u024d\2\u1175\u1173\3\2\2\2\u1175\u1174\3\2")
        buf.write(u"\2\2\u1176\u117a\3\2\2\2\u1177\u1179\5\u02e2\u0172\2")
        buf.write(u"\u1178\u1177\3\2\2\2\u1179\u117c\3\2\2\2\u117a\u1178")
        buf.write(u"\3\2\2\2\u117a\u117b\3\2\2\2\u117b\u02db\3\2\2\2\u117c")
        buf.write(u"\u117a\3\2\2\2\u117d\u1180\5\u0436\u021c\2\u117e\u1180")
        buf.write(u"\5\u0498\u024d\2\u117f\u117d\3\2\2\2\u117f\u117e\3\2")
        buf.write(u"\2\2\u1180\u1181\3\2\2\2\u1181\u1185\5\u02de\u0170\2")
        buf.write(u"\u1182\u1184\5\u02e2\u0172\2\u1183\u1182\3\2\2\2\u1184")
        buf.write(u"\u1187\3\2\2\2\u1185\u1183\3\2\2\2\u1185\u1186\3\2\2")
        buf.write(u"\2\u1186\u02dd\3\2\2\2\u1187\u1185\3\2\2\2\u1188\u118b")
        buf.write(u"\7\64\2\2\u1189\u118c\5\u0436\u021c\2\u118a\u118c\5\u0498")
        buf.write(u"\u024d\2\u118b\u1189\3\2\2\2\u118b\u118a\3\2\2\2\u118c")
        buf.write(u"\u02df\3\2\2\2\u118d\u1190\7\u01f0\2\2\u118e\u1191\5")
        buf.write(u"\u0436\u021c\2\u118f\u1191\5\u0498\u024d\2\u1190\u118e")
        buf.write(u"\3\2\2\2\u1190\u118f\3\2\2\2\u1191\u02e1\3\2\2\2\u1192")
        buf.write(u"\u1194\t<\2\2\u1193\u1195\7\u00f9\2\2\u1194\u1193\3\2")
        buf.write(u"\2\2\u1194\u1195\3\2\2\2\u1195\u1198\3\2\2\2\u1196\u1199")
        buf.write(u"\5\u0436\u021c\2\u1197\u1199\5\u0498\u024d\2\u1198\u1196")
        buf.write(u"\3\2\2\2\u1198\u1197\3\2\2\2\u1199\u02e3\3\2\2\2\u119a")
        buf.write(u"\u119b\7\u012c\2\2\u119b\u119d\5\u0472\u023a\2\u119c")
        buf.write(u"\u119e\5\u02e6\u0174\2\u119d\u119c\3\2\2\2\u119e\u119f")
        buf.write(u"\3\2\2\2\u119f\u119d\3\2\2\2\u119f\u11a0\3\2\2\2\u11a0")
        buf.write(u"\u11a2\3\2\2\2\u11a1\u11a3\5\u02e8\u0175\2\u11a2\u11a1")
        buf.write(u"\3\2\2\2\u11a2\u11a3\3\2\2\2\u11a3\u11a7\3\2\2\2\u11a4")
        buf.write(u"\u11a6\5\u02ee\u0178\2\u11a5\u11a4\3\2\2\2\u11a6\u11a9")
        buf.write(u"\3\2\2\2\u11a7\u11a5\3\2\2\2\u11a7\u11a8\3\2\2\2\u11a8")
        buf.write(u"\u11ab\3\2\2\2\u11a9\u11a7\3\2\2\2\u11aa\u11ac\5\u02f0")
        buf.write(u"\u0179\2\u11ab\u11aa\3\2\2\2\u11ab\u11ac\3\2\2\2\u11ac")
        buf.write(u"\u11b0\3\2\2\2\u11ad\u11af\5\u02f4\u017b\2\u11ae\u11ad")
        buf.write(u"\3\2\2\2\u11af\u11b2\3\2\2\2\u11b0\u11ae\3\2\2\2\u11b0")
        buf.write(u"\u11b1\3\2\2\2\u11b1\u02e5\3\2\2\2\u11b2\u11b0\3\2\2")
        buf.write(u"\2\u11b3\u11b5\7\u014c\2\2\u11b4\u11b3\3\2\2\2\u11b4")
        buf.write(u"\u11b5\3\2\2\2\u11b5\u11b6\3\2\2\2\u11b6\u11b8\t,\2\2")
        buf.write(u"\u11b7\u11b9\7\u0109\2\2\u11b8\u11b7\3\2\2\2\u11b8\u11b9")
        buf.write(u"\3\2\2\2\u11b9\u11bb\3\2\2\2\u11ba\u11bc\5\u0446\u0224")
        buf.write(u"\2\u11bb\u11ba\3\2\2\2\u11bc\u11bd\3\2\2\2\u11bd\u11bb")
        buf.write(u"\3\2\2\2\u11bd\u11be\3\2\2\2\u11be\u02e7\3\2\2\2\u11bf")
        buf.write(u"\u11c1\7L\2\2\u11c0\u11bf\3\2\2\2\u11c0\u11c1\3\2\2\2")
        buf.write(u"\u11c1\u11c2\3\2\2\2\u11c2\u11c4\7\u01b2\2\2\u11c3\u11c5")
        buf.write(u"\7\u0104\2\2\u11c4\u11c3\3\2\2\2\u11c4\u11c5\3\2\2\2")
        buf.write(u"\u11c5\u11c7\3\2\2\2\u11c6\u11c8\5\u045e\u0230\2\u11c7")
        buf.write(u"\u11c6\3\2\2\2\u11c8\u11c9\3\2\2\2\u11c9\u11c7\3\2\2")
        buf.write(u"\2\u11c9\u11ca\3\2\2\2\u11ca\u11cc\3\2\2\2\u11cb\u11cd")
        buf.write(u"\5\u02ea\u0176\2\u11cc\u11cb\3\2\2\2\u11cc\u11cd\3\2")
        buf.write(u"\2\2\u11cd\u11cf\3\2\2\2\u11ce\u11d0\5\u02ec\u0177\2")
        buf.write(u"\u11cf\u11ce\3\2\2\2\u11cf\u11d0\3\2\2\2\u11d0\u02e9")
        buf.write(u"\3\2\2\2\u11d1\u11d3\7\u00da\2\2\u11d2\u11d1\3\2\2\2")
        buf.write(u"\u11d2\u11d3\3\2\2\2\u11d3\u11d4\3\2\2\2\u11d4\u11d5")
        buf.write(u"\7\20\2\2\u11d5\u11d6\7\u0104\2\2\u11d6\u11d7\5\u045e")
        buf.write(u"\u0230\2\u11d7\u02eb\3\2\2\2\u11d8\u11da\7\u00da\2\2")
        buf.write(u"\u11d9\u11d8\3\2\2\2\u11d9\u11da\3\2\2\2\u11da\u11db")
        buf.write(u"\3\2\2\2\u11db\u11dd\7\u0136\2\2\u11dc\u11de\7\u0104")
        buf.write(u"\2\2\u11dd\u11dc\3\2\2\2\u11dd\u11de\3\2\2\2\u11de\u11df")
        buf.write(u"\3\2\2\2\u11df\u11e0\5\u045e\u0230\2\u11e0\u02ed\3\2")
        buf.write(u"\2\2\u11e1\u11e3\7\u0201\2\2\u11e2\u11e4\5\u0472\u023a")
        buf.write(u"\2\u11e3\u11e2\3\2\2\2\u11e4\u11e5\3\2\2\2\u11e5\u11e3")
        buf.write(u"\3\2\2\2\u11e5\u11e6\3\2\2\2\u11e6\u02ef\3\2\2\2\u11e7")
        buf.write(u"\u11e8\7\u0154\2\2\u11e8\u11ea\7\u016a\2\2\u11e9\u11eb")
        buf.write(u"\7\u0104\2\2\u11ea\u11e9\3\2\2\2\u11ea\u11eb\3\2\2\2")
        buf.write(u"\u11eb\u11ec\3\2\2\2\u11ec\u11ee\5\u0482\u0242\2\u11ed")
        buf.write(u"\u11ef\5\u02f2\u017a\2\u11ee\u11ed\3\2\2\2\u11ee\u11ef")
        buf.write(u"\3\2\2\2\u11ef\u02f1\3\2\2\2\u11f0\u11f1\t\6\2\2\u11f1")
        buf.write(u"\u11f2\5\u0482\u0242\2\u11f2\u02f3\3\2\2\2\u11f3\u11f5")
        buf.write(u"\7\u00e4\2\2\u11f4\u11f6\5\u02f6\u017c\2\u11f5\u11f4")
        buf.write(u"\3\2\2\2\u11f6\u11f7\3\2\2\2\u11f7\u11f5\3\2\2\2\u11f7")
        buf.write(u"\u11f8\3\2\2\2\u11f8\u02f5\3\2\2\2\u11f9\u1203\5\u0472")
        buf.write(u"\u023a\2\u11fa\u1204\7\u0124\2\2\u11fb\u1204\7\u01a5")
        buf.write(u"\2\2\u11fc\u11fd\7\u013c\2\2\u11fd\u1204\7\u019d\2\2")
        buf.write(u"\u11fe\u1204\7n\2\2\u11ff\u1204\7\u0189\2\2\u1200\u1201")
        buf.write(u"\7\u0209\2\2\u1201\u1202\7\u018d\2\2\u1202\u1204\7n\2")
        buf.write(u"\2\u1203\u11fa\3\2\2\2\u1203\u11fb\3\2\2\2\u1203\u11fc")
        buf.write(u"\3\2\2\2\u1203\u11fe\3\2\2\2\u1203\u11ff\3\2\2\2\u1203")
        buf.write(u"\u1200\3\2\2\2\u1203\u1204\3\2\2\2\u1204\u02f7\3\2\2")
        buf.write(u"\2\u1205\u1207\7\u0132\2\2\u1206\u1208\7\13\2\2\u1207")
        buf.write(u"\u1206\3\2\2\2\u1207\u1208\3\2\2\2\u1208\u120b\3\2\2")
        buf.write(u"\2\u1209\u120c\5\u02fa\u017e\2\u120a\u120c\5\u02fe\u0180")
        buf.write(u"\2\u120b\u1209\3\2\2\2\u120b\u120a\3\2\2\2\u120c\u02f9")
        buf.write(u"\3\2\2\2\u120d\u120e\5\u02fc\u017f\2\u120e\u1210\7\u01f0")
        buf.write(u"\2\2\u120f\u1211\5\u0436\u021c\2\u1210\u120f\3\2\2\2")
        buf.write(u"\u1211\u1212\3\2\2\2\u1212\u1210\3\2\2\2\u1212\u1213")
        buf.write(u"\3\2\2\2\u1213\u02fb\3\2\2\2\u1214\u1217\5\u0436\u021c")
        buf.write(u"\2\u1215\u1217\5\u0498\u024d\2\u1216\u1214\3\2\2\2\u1216")
        buf.write(u"\u1215\3\2\2\2\u1217\u02fd\3\2\2\2\u1218\u1219\t\66\2")
        buf.write(u"\2\u1219\u121a\5\u0300\u0181\2\u121a\u121c\7\u01f0\2")
        buf.write(u"\2\u121b\u121d\5\u0436\u021c\2\u121c\u121b\3\2\2\2\u121d")
        buf.write(u"\u121e\3\2\2\2\u121e\u121c\3\2\2\2\u121e\u121f\3\2\2")
        buf.write(u"\2\u121f\u02ff\3\2\2\2\u1220\u1221\5\u0436\u021c\2\u1221")
        buf.write(u"\u0301\3\2\2\2\u1222\u1225\7\u0134\2\2\u1223\u1226\5")
        buf.write(u"\u0436\u021c\2\u1224\u1226\5\u0498\u024d\2\u1225\u1223")
        buf.write(u"\3\2\2\2\u1225\u1224\3\2\2\2\u1226\u1227\3\2\2\2\u1227")
        buf.write(u"\u122a\7\64\2\2\u1228\u122b\5\u0304\u0183\2\u1229\u122b")
        buf.write(u"\5\u0308\u0185\2\u122a\u1228\3\2\2\2\u122a\u1229\3\2")
        buf.write(u"\2\2\u122b\u122d\3\2\2\2\u122c\u122e\5\u0404\u0203\2")
        buf.write(u"\u122d\u122c\3\2\2\2\u122d\u122e\3\2\2\2\u122e\u1230")
        buf.write(u"\3\2\2\2\u122f\u1231\5\u0406\u0204\2\u1230\u122f\3\2")
        buf.write(u"\2\2\u1230\u1231\3\2\2\2\u1231\u1233\3\2\2\2\u1232\u1234")
        buf.write(u"\7\u00ac\2\2\u1233\u1232\3\2\2\2\u1233\u1234\3\2\2\2")
        buf.write(u"\u1234\u0303\3\2\2\2\u1235\u1237\5\u0306\u0184\2\u1236")
        buf.write(u"\u1235\3\2\2\2\u1237\u1238\3\2\2\2\u1238\u1236\3\2\2")
        buf.write(u"\2\u1238\u1239\3\2\2\2\u1239\u0305\3\2\2\2\u123a\u123c")
        buf.write(u"\5\u0436\u021c\2\u123b\u123d\7\u01a2\2\2\u123c\u123b")
        buf.write(u"\3\2\2\2\u123c\u123d\3\2\2\2\u123d\u0307\3\2\2\2\u123e")
        buf.write(u"\u123f\5\u030a\u0186\2\u123f\u1241\7\u00e4\2\2\u1240")
        buf.write(u"\u1242\5\u030c\u0187\2\u1241\u1240\3\2\2\2\u1242\u1243")
        buf.write(u"\3\2\2\2\u1243\u1241\3\2\2\2\u1243\u1244\3\2\2\2\u1244")
        buf.write(u"\u0309\3\2\2\2\u1245\u1248\5\u0436\u021c\2\u1246\u1248")
        buf.write(u"\5\u0498\u024d\2\u1247\u1245\3\2\2\2\u1247\u1246\3\2")
        buf.write(u"\2\2\u1248\u030b\3\2\2\2\u1249\u124b\5\u0436\u021c\2")
        buf.write(u"\u124a\u124c\7\u01a2\2\2\u124b\u124a\3\2\2\2\u124b\u124c")
        buf.write(u"\3\2\2\2\u124c\u030d\3\2\2\2\u124d\u1252\7\u014d\2\2")
        buf.write(u"\u124e\u1253\5\u0310\u0189\2\u124f\u1253\5\u0314\u018b")
        buf.write(u"\2\u1250\u1253\5\u0318\u018d\2\u1251\u1253\5\u031a\u018e")
        buf.write(u"\2\u1252\u124e\3\2\2\2\u1252\u124f\3\2\2\2\u1252\u1250")
        buf.write(u"\3\2\2\2\u1252\u1251\3\2\2\2\u1253\u1254\3\2\2\2\u1254")
        buf.write(u"\u1252\3\2\2\2\u1254\u1255\3\2\2\2\u1255\u030f\3\2\2")
        buf.write(u"\2\u1256\u1258\7\u00fc\2\2\u1257\u1259\5\u0312\u018a")
        buf.write(u"\2\u1258\u1257\3\2\2\2\u1259\u125a\3\2\2\2\u125a\u1258")
        buf.write(u"\3\2\2\2\u125a\u125b\3\2\2\2\u125b\u0311\3\2\2\2\u125c")
        buf.write(u"\u1263\5\u0472\u023a\2\u125d\u1264\7\u019c\2\2\u125e")
        buf.write(u"\u1260\7\u0209\2\2\u125f\u125e\3\2\2\2\u125f\u1260\3")
        buf.write(u"\2\2\2\u1260\u1261\3\2\2\2\u1261\u1262\7\u013c\2\2\u1262")
        buf.write(u"\u1264\7\u019d\2\2\u1263\u125d\3\2\2\2\u1263\u125f\3")
        buf.write(u"\2\2\2\u1263\u1264\3\2\2\2\u1264\u0313\3\2\2\2\u1265")
        buf.write(u"\u1267\7\u0154\2\2\u1266\u1268\5\u0316\u018c\2\u1267")
        buf.write(u"\u1266\3\2\2\2\u1268\u1269\3\2\2\2\u1269\u1267\3\2\2")
        buf.write(u"\2\u1269\u126a\3\2\2\2\u126a\u0315\3\2\2\2\u126b\u1271")
        buf.write(u"\5\u0472\u023a\2\u126c\u126e\7\u0209\2\2\u126d\u126c")
        buf.write(u"\3\2\2\2\u126d\u126e\3\2\2\2\u126e\u126f\3\2\2\2\u126f")
        buf.write(u"\u1270\7\u013c\2\2\u1270\u1272\7\u019d\2\2\u1271\u126d")
        buf.write(u"\3\2\2\2\u1271\u1272\3\2\2\2\u1272\u0317\3\2\2\2\u1273")
        buf.write(u"\u1275\7\u00ee\2\2\u1274\u1276\5\u0472\u023a\2\u1275")
        buf.write(u"\u1274\3\2\2\2\u1276\u1277\3\2\2\2\u1277\u1275\3\2\2")
        buf.write(u"\2\u1277\u1278\3\2\2\2\u1278\u0319\3\2\2\2\u1279\u127b")
        buf.write(u"\7\u00cf\2\2\u127a\u127c\5\u0472\u023a\2\u127b\u127a")
        buf.write(u"\3\2\2\2\u127c\u127d\3\2\2\2\u127d\u127b\3\2\2\2\u127d")
        buf.write(u"\u127e\3\2\2\2\u127e\u031b\3\2\2\2\u127f\u1282\7\u015d")
        buf.write(u"\2\2\u1280\u1283\5\u031e\u0190\2\u1281\u1283\5\u0320")
        buf.write(u"\u0191\2\u1282\u1280\3\2\2\2\u1282\u1281\3\2\2\2\u1283")
        buf.write(u"\u031d\3\2\2\2\u1284\u1286\5\u0322\u0192\2\u1285\u1284")
        buf.write(u"\3\2\2\2\u1285\u1286\3\2\2\2\u1286\u128a\3\2\2\2\u1287")
        buf.write(u"\u1289\5\u021a\u010e\2\u1288\u1287\3\2\2\2\u1289\u128c")
        buf.write(u"\3\2\2\2\u128a\u1288\3\2\2\2\u128a\u128b\3\2\2\2\u128b")
        buf.write(u"\u128d\3\2\2\2\u128c\u128a\3\2\2\2\u128d\u128e\7\u00ae")
        buf.write(u"\2\2\u128e\u031f\3\2\2\2\u128f\u1292\5\u0482\u0242\2")
        buf.write(u"\u1290\u1291\t\6\2\2\u1291\u1293\5\u0482\u0242\2\u1292")
        buf.write(u"\u1290\3\2\2\2\u1292\u1293\3\2\2\2\u1293\u1295\3\2\2")
        buf.write(u"\2\u1294\u1296\5\u0322\u0192\2\u1295\u1294\3\2\2\2\u1295")
        buf.write(u"\u1296\3\2\2\2\u1296\u0321\3\2\2\2\u1297\u129b\5\u0324")
        buf.write(u"\u0193\2\u1298\u129b\5\u0326\u0194\2\u1299\u129b\5\u0328")
        buf.write(u"\u0195\2\u129a\u1297\3\2\2\2\u129a\u1298\3\2\2\2\u129a")
        buf.write(u"\u1299\3\2\2\2\u129b\u0323\3\2\2\2\u129c\u129f\5\u0436")
        buf.write(u"\u021c\2\u129d\u129f\5\u049e\u0250\2\u129e\u129c\3\2")
        buf.write(u"\2\2\u129e\u129d\3\2\2\2\u129f\u12a0\3\2\2\2\u12a0\u12a1")
        buf.write(u"\7\u01ee\2\2\u12a1\u0325\3\2\2\2\u12a2\u12a4\5\u0334")
        buf.write(u"\u019b\2\u12a3\u12a2\3\2\2\2\u12a3\u12a4\3\2\2\2\u12a4")
        buf.write(u"\u12a5\3\2\2\2\u12a5\u12a6\7\u01fc\2\2\u12a6\u12a7\5")
        buf.write(u"\u041a\u020e\2\u12a7\u0327\3\2\2\2\u12a8\u12a9\5\u0334")
        buf.write(u"\u019b\2\u12a9\u12aa\5\u032a\u0196\2\u12aa\u12b0\3\2")
        buf.write(u"\2\2\u12ab\u12ad\5\u032a\u0196\2\u12ac\u12ae\5\u0334")
        buf.write(u"\u019b\2\u12ad\u12ac\3\2\2\2\u12ad\u12ae\3\2\2\2\u12ae")
        buf.write(u"\u12b0\3\2\2\2\u12af\u12a8\3\2\2\2\u12af\u12ab\3\2\2")
        buf.write(u"\2\u12b0\u0329\3\2\2\2\u12b1\u12b2\7\u0204\2\2\u12b2")
        buf.write(u"\u12b6\5\u032c\u0197\2\u12b3\u12b5\5\u032e\u0198\2\u12b4")
        buf.write(u"\u12b3\3\2\2\2\u12b5\u12b8\3\2\2\2\u12b6\u12b4\3\2\2")
        buf.write(u"\2\u12b6\u12b7\3\2\2\2\u12b7\u032b\3\2\2\2\u12b8\u12b6")
        buf.write(u"\3\2\2\2\u12b9\u12bc\5\u0436\u021c\2\u12ba\u12bc\5\u0498")
        buf.write(u"\u024d\2\u12bb\u12b9\3\2\2\2\u12bb\u12ba\3\2\2\2\u12bc")
        buf.write(u"\u12bd\3\2\2\2\u12bd\u12be\5\u0330\u0199\2\u12be\u12bf")
        buf.write(u"\5\u0332\u019a\2\u12bf\u12c0\5\u0326\u0194\2\u12c0\u032d")
        buf.write(u"\3\2\2\2\u12c1\u12c2\7\t\2\2\u12c2\u12c3\5\u032c\u0197")
        buf.write(u"\2\u12c3\u032f\3\2\2\2\u12c4\u12c8\7\u00dd\2\2\u12c5")
        buf.write(u"\u12c9\5\u0436\u021c\2\u12c6\u12c9\5\u0498\u024d\2\u12c7")
        buf.write(u"\u12c9\5\u040c\u0207\2\u12c8\u12c5\3\2\2\2\u12c8\u12c6")
        buf.write(u"\3\2\2\2\u12c8\u12c7\3\2\2\2\u12c9\u0331\3\2\2\2\u12ca")
        buf.write(u"\u12ce\7\64\2\2\u12cb\u12cf\5\u0436\u021c\2\u12cc\u12cf")
        buf.write(u"\5\u0498\u024d\2\u12cd\u12cf\5\u040c\u0207\2\u12ce\u12cb")
        buf.write(u"\3\2\2\2\u12ce\u12cc\3\2\2\2\u12ce\u12cd\3\2\2\2\u12cf")
        buf.write(u"\u0333\3\2\2\2\u12d0\u12d2\7\u0209\2\2\u12d1\u12d0\3")
        buf.write(u"\2\2\2\u12d1\u12d2\3\2\2\2\u12d2\u12d3\3\2\2\2\u12d3")
        buf.write(u"\u12d4\7\u01e4\2\2\u12d4\u12d5\t<\2\2\u12d5\u0335\3\2")
        buf.write(u"\2\2\u12d6\u12d8\7\u0173\2\2\u12d7\u12d9\5\u0464\u0233")
        buf.write(u"\2\u12d8\u12d7\3\2\2\2\u12d9\u12da\3\2\2\2\u12da\u12d8")
        buf.write(u"\3\2\2\2\u12da\u12db\3\2\2\2\u12db\u0337\3\2\2\2\u12dc")
        buf.write(u"\u12dd\7\u017c\2\2\u12dd\u12df\5\u0472\u023a\2\u12de")
        buf.write(u"\u12e0\7\u013b\2\2\u12df\u12de\3\2\2\2\u12df\u12e0\3")
        buf.write(u"\2\2\2\u12e0\u12e2\3\2\2\2\u12e1\u12e3\7\u017f\2\2\u12e2")
        buf.write(u"\u12e1\3\2\2\2\u12e2\u12e3\3\2\2\2\u12e3\u12e5\3\2\2")
        buf.write(u"\2\u12e4\u12e6\5\u033a\u019e\2\u12e5\u12e4\3\2\2\2\u12e5")
        buf.write(u"\u12e6\3\2\2\2\u12e6\u12e8\3\2\2\2\u12e7\u12e9\5\u033c")
        buf.write(u"\u019f\2\u12e8\u12e7\3\2\2\2\u12e8\u12e9\3\2\2\2\u12e9")
        buf.write(u"\u12eb\3\2\2\2\u12ea\u12ec\5\u033e\u01a0\2\u12eb\u12ea")
        buf.write(u"\3\2\2\2\u12eb\u12ec\3\2\2\2\u12ec\u12ee\3\2\2\2\u12ed")
        buf.write(u"\u12ef\5\u03fc\u01ff\2\u12ee\u12ed\3\2\2\2\u12ee\u12ef")
        buf.write(u"\3\2\2\2\u12ef\u12f1\3\2\2\2\u12f0\u12f2\5\u03fe\u0200")
        buf.write(u"\2\u12f1\u12f0\3\2\2\2\u12f1\u12f2\3\2\2\2\u12f2\u12f4")
        buf.write(u"\3\2\2\2\u12f3\u12f5\5\u03f8\u01fd\2\u12f4\u12f3\3\2")
        buf.write(u"\2\2\u12f4\u12f5\3\2\2\2\u12f5\u12f7\3\2\2\2\u12f6\u12f8")
        buf.write(u"\5\u03fa\u01fe\2\u12f7\u12f6\3\2\2\2\u12f7\u12f8\3\2")
        buf.write(u"\2\2\u12f8\u12fa\3\2\2\2\u12f9\u12fb\7\u00af\2\2\u12fa")
        buf.write(u"\u12f9\3\2\2\2\u12fa\u12fb\3\2\2\2\u12fb\u0339\3\2\2")
        buf.write(u"\2\u12fc\u12fd\7\u0101\2\2\u12fd\u12fe\5\u0436\u021c")
        buf.write(u"\2\u12fe\u033b\3\2\2\2\u12ff\u1301\7\u0209\2\2\u1300")
        buf.write(u"\u12ff\3\2\2\2\u1300\u1301\3\2\2\2\u1301\u1305\3\2\2")
        buf.write(u"\2\u1302\u1303\t=\2\2\u1303\u1306\7\u0124\2\2\u1304\u1306")
        buf.write(u"\7\u0206\2\2\u1305\u1302\3\2\2\2\u1305\u1304\3\2\2\2")
        buf.write(u"\u1306\u033d\3\2\2\2\u1307\u1309\7\u0109\2\2\u1308\u130a")
        buf.write(u"\7\u0104\2\2\u1309\u1308\3\2\2\2\u1309\u130a\3\2\2\2")
        buf.write(u"\u130a\u130b\3\2\2\2\u130b\u130c\5\u0446\u0224\2\u130c")
        buf.write(u"\u033f\3\2\2\2\u130d\u1310\7\u017d\2\2\u130e\u1311\5")
        buf.write(u"\u0342\u01a2\2\u130f\u1311\5\u0346\u01a4\2\u1310\u130e")
        buf.write(u"\3\2\2\2\u1310\u130f\3\2\2\2\u1311\u1313\3\2\2\2\u1312")
        buf.write(u"\u1314\5\u0408\u0205\2\u1313\u1312\3\2\2\2\u1313\u1314")
        buf.write(u"\3\2\2\2\u1314\u1316\3\2\2\2\u1315\u1317\5\u040a\u0206")
        buf.write(u"\2\u1316\u1315\3\2\2\2\u1316\u1317\3\2\2\2\u1317\u1319")
        buf.write(u"\3\2\2\2\u1318\u131a\7\u00b0\2\2\u1319\u1318\3\2\2\2")
        buf.write(u"\u1319\u131a\3\2\2\2\u131a\u0341\3\2\2\2\u131b\u131c")
        buf.write(u"\5\u046c\u0237\2\u131c\u131d\7\u00dd\2\2\u131d\u1325")
        buf.write(u"\5\u0344\u01a3\2\u131e\u1324\5\u034c\u01a7\2\u131f\u1324")
        buf.write(u"\5\u034e\u01a8\2\u1320\u1324\5\u0350\u01a9\2\u1321\u1324")
        buf.write(u"\5\u0352\u01aa\2\u1322\u1324\5\u0354\u01ab\2\u1323\u131e")
        buf.write(u"\3\2\2\2\u1323\u131f\3\2\2\2\u1323\u1320\3\2\2\2\u1323")
        buf.write(u"\u1321\3\2\2\2\u1323\u1322\3\2\2\2\u1324\u1327\3\2\2")
        buf.write(u"\2\u1325\u1323\3\2\2\2\u1325\u1326\3\2\2\2\u1326\u0343")
        buf.write(u"\3\2\2\2\u1327\u1325\3\2\2\2\u1328\u1329\7\u01e8\2\2")
        buf.write(u"\u1329\u132f\5\u046c\u0237\2\u132a\u132b\7\u010d\2\2")
        buf.write(u"\u132b\u132f\7\u01e8\2\2\u132c\u132d\7\26\2\2\u132d\u132f")
        buf.write(u"\7\u01e8\2\2\u132e\u1328\3\2\2\2\u132e\u132a\3\2\2\2")
        buf.write(u"\u132e\u132c\3\2\2\2\u132f\u0345\3\2\2\2\u1330\u1331")
        buf.write(u"\5\u0464\u0233\2\u1331\u1333\t>\2\2\u1332\u1334\7\u0101")
        buf.write(u"\2\2\u1333\u1332\3\2\2\2\u1333\u1334\3\2\2\2\u1334\u1335")
        buf.write(u"\3\2\2\2\u1335\u1337\5\u0436\u021c\2\u1336\u1338\5\u0348")
        buf.write(u"\u01a5\2\u1337\u1336\3\2\2\2\u1337\u1338\3\2\2\2\u1338")
        buf.write(u"\u133a\3\2\2\2\u1339\u133b\5\u034a\u01a6\2\u133a\u1339")
        buf.write(u"\3\2\2\2\u133a\u133b\3\2\2\2\u133b\u0347\3\2\2\2\u133c")
        buf.write(u"\u133d\7\u013c\2\2\u133d\u1341\7q\2\2\u133e\u1340\5\u021a")
        buf.write(u"\u010e\2\u133f\u133e\3\2\2\2\u1340\u1343\3\2\2\2\u1341")
        buf.write(u"\u133f\3\2\2\2\u1341\u1342\3\2\2\2\u1342\u0349\3\2\2")
        buf.write(u"\2\u1343\u1341\3\2\2\2\u1344\u1345\7\u0209\2\2\u1345")
        buf.write(u"\u1349\7q\2\2\u1346\u1348\5\u021a\u010e\2\u1347\u1346")
        buf.write(u"\3\2\2\2\u1348\u134b\3\2\2\2\u1349\u1347\3\2\2\2\u1349")
        buf.write(u"\u134a\3\2\2\2\u134a\u034b\3\2\2\2\u134b\u1349\3\2\2")
        buf.write(u"\2\u134c\u134e\7)\2\2\u134d\u134f\7\u01ec\2\2\u134e\u134d")
        buf.write(u"\3\2\2\2\u134e\u134f\3\2\2\2\u134f\u1352\3\2\2\2\u1350")
        buf.write(u"\u1353\5\u049c\u024f\2\u1351\u1353\5\u0436\u021c\2\u1352")
        buf.write(u"\u1350\3\2\2\2\u1352\u1351\3\2\2\2\u1353\u034d\3\2\2")
        buf.write(u"\2\u1354\u1356\7\u0209\2\2\u1355\u1354\3\2\2\2\u1355")
        buf.write(u"\u1356\3\2\2\2\u1356\u1357\3\2\2\2\u1357\u1358\7\u013c")
        buf.write(u"\2\2\u1358\u1359\7\u0206\2\2\u1359\u034f\3\2\2\2\u135a")
        buf.write(u"\u135c\7\u01e8\2\2\u135b\u135d\7\u00f5\2\2\u135c\u135b")
        buf.write(u"\3\2\2\2\u135c\u135d\3\2\2\2\u135d\u135e\3\2\2\2\u135e")
        buf.write(u"\u135f\5\u046c\u0237\2\u135f\u0351\3\2\2\2\u1360\u1362")
        buf.write(u"\7\u01bd\2\2\u1361\u1363\7\u00f5\2\2\u1362\u1361\3\2")
        buf.write(u"\2\2\u1362\u1363\3\2\2\2\u1363\u1366\3\2\2\2\u1364\u1367")
        buf.write(u"\5\u049c\u024f\2\u1365\u1367\5\u0436\u021c\2\u1366\u1364")
        buf.write(u"\3\2\2\2\u1366\u1365\3\2\2\2\u1367\u0353\3\2\2\2\u1368")
        buf.write(u"\u136a\7\u01d0\2\2\u1369\u136b\7\u00f5\2\2\u136a\u1369")
        buf.write(u"\3\2\2\2\u136a\u136b\3\2\2\2\u136b\u136c\3\2\2\2\u136c")
        buf.write(u"\u136d\5\u0436\u021c\2\u136d\u0355\3\2\2\2\u136e\u136f")
        buf.write(u"\7\u0189\2\2\u136f\u1372\5\u0486\u0244\2\u1370\u1371")
        buf.write(u"\7\u00dd\2\2\u1371\u1373\5\u0446\u0224\2\u1372\u1370")
        buf.write(u"\3\2\2\2\u1372\u1373\3\2\2\2\u1373\u0357\3\2\2\2\u1374")
        buf.write(u"\u1375\7\u0199\2\2\u1375\u1377\5\u0472\u023a\2\u1376")
        buf.write(u"\u1378\7\u017f\2\2\u1377\u1376\3\2\2\2\u1377\u1378\3")
        buf.write(u"\2\2\2\u1378\u137a\3\2\2\2\u1379\u137b\5\u035a\u01ae")
        buf.write(u"\2\u137a\u1379\3\2\2\2\u137a\u137b\3\2\2\2\u137b\u137c")
        buf.write(u"\3\2\2\2\u137c\u137e\5\u03f8\u01fd\2\u137d\u137f\5\u03fa")
        buf.write(u"\u01fe\2\u137e\u137d\3\2\2\2\u137e\u137f\3\2\2\2\u137f")
        buf.write(u"\u1381\3\2\2\2\u1380\u1382\7\u00b2\2\2\u1381\u1380\3")
        buf.write(u"\2\2\2\u1381\u1382\3\2\2\2\u1382\u0359\3\2\2\2\u1383")
        buf.write(u"\u1384\7\u0101\2\2\u1384\u1385\5\u0446\u0224\2\u1385")
        buf.write(u"\u035b\3\2\2\2\u1386\u1387\7\u019e\2\2\u1387\u1389\5")
        buf.write(u"\u0486\u0244\2\u1388\u138a\5\u035e\u01b0\2\u1389\u1388")
        buf.write(u"\3\2\2\2\u1389\u138a\3\2\2\2\u138a\u138c\3\2\2\2\u138b")
        buf.write(u"\u138d\5\u03fc\u01ff\2\u138c\u138b\3\2\2\2\u138c\u138d")
        buf.write(u"\3\2\2\2\u138d\u138f\3\2\2\2\u138e\u1390\5\u03fe\u0200")
        buf.write(u"\2\u138f\u138e\3\2\2\2\u138f\u1390\3\2\2\2\u1390\u1392")
        buf.write(u"\3\2\2\2\u1391\u1393\7\u00b3\2\2\u1392\u1391\3\2\2\2")
        buf.write(u"\u1392\u1393\3\2\2\2\u1393\u035d\3\2\2\2\u1394\u1395")
        buf.write(u"\7\u00dd\2\2\u1395\u1396\5\u0436\u021c\2\u1396\u035f")
        buf.write(u"\3\2\2\2\u1397\u1399\7\u01a8\2\2\u1398\u139a\7\13\2\2")
        buf.write(u"\u1399\u1398\3\2\2\2\u1399\u139a\3\2\2\2\u139a\u139b")
        buf.write(u"\3\2\2\2\u139b\u139d\5\u0446\u0224\2\u139c\u139e\5\u0362")
        buf.write(u"\u01b2\2\u139d\u139c\3\2\2\2\u139d\u139e\3\2\2\2\u139e")
        buf.write(u"\u13a0\3\2\2\2\u139f\u13a1\5\u03f8\u01fd\2\u13a0\u139f")
        buf.write(u"\3\2\2\2\u13a0\u13a1\3\2\2\2\u13a1\u13a3\3\2\2\2\u13a2")
        buf.write(u"\u13a4\5\u0364\u01b3\2\u13a3\u13a2\3\2\2\2\u13a4\u13a5")
        buf.write(u"\3\2\2\2\u13a5\u13a3\3\2\2\2\u13a5\u13a6\3\2\2\2\u13a6")
        buf.write(u"\u13a8\3\2\2\2\u13a7\u13a9\7\u00b4\2\2\u13a8\u13a7\3")
        buf.write(u"\2\2\2\u13a8\u13a9\3\2\2\2\u13a9\u0361\3\2\2\2\u13aa")
        buf.write(u"\u13ab\7\u0204\2\2\u13ab\u13ac\5\u0446\u0224\2\u13ac")
        buf.write(u"\u0363\3\2\2\2\u13ad\u13ae\7\u0207\2\2\u13ae\u13b7\5")
        buf.write(u"\u041a\u020e\2\u13af\u13b0\7\u013b\2\2\u13b0\u13b8\7")
        buf.write(u"\u01b0\2\2\u13b1\u13b3\5\u021a\u010e\2\u13b2\u13b1\3")
        buf.write(u"\2\2\2\u13b3\u13b6\3\2\2\2\u13b4\u13b2\3\2\2\2\u13b4")
        buf.write(u"\u13b5\3\2\2\2\u13b5\u13b8\3\2\2\2\u13b6\u13b4\3\2\2")
        buf.write(u"\2\u13b7\u13af\3\2\2\2\u13b7\u13b4\3\2\2\2\u13b8\u0365")
        buf.write(u"\3\2\2\2\u13b9\u13bc\7\u01af\2\2\u13ba\u13bd\5\u0368")
        buf.write(u"\u01b5\2\u13bb\u13bd\5\u036a\u01b6\2\u13bc\u13ba\3\2")
        buf.write(u"\2\2\u13bc\u13bb\3\2\2\2\u13bd\u13bf\3\2\2\2\u13be\u13c0")
        buf.write(u"\5\u0408\u0205\2\u13bf\u13be\3\2\2\2\u13bf\u13c0\3\2")
        buf.write(u"\2\2\u13c0\u13c2\3\2\2\2\u13c1\u13c3\5\u040a\u0206\2")
        buf.write(u"\u13c2\u13c1\3\2\2\2\u13c2\u13c3\3\2\2\2\u13c3\u0367")
        buf.write(u"\3\2\2\2\u13c4\u13c7\5\u0436\u021c\2\u13c5\u13c7\5\u0498")
        buf.write(u"\u024d\2\u13c6\u13c4\3\2\2\2\u13c6\u13c5\3\2\2\2\u13c7")
        buf.write(u"\u13c9\3\2\2\2\u13c8\u13ca\5\u036c\u01b7\2\u13c9\u13c8")
        buf.write(u"\3\2\2\2\u13c9\u13ca\3\2\2\2\u13ca\u13cc\3\2\2\2\u13cb")
        buf.write(u"\u13cd\5\u036e\u01b8\2\u13cc\u13cb\3\2\2\2\u13cc\u13cd")
        buf.write(u"\3\2\2\2\u13cd\u13cf\3\2\2\2\u13ce\u13d0\5\u0370\u01b9")
        buf.write(u"\2\u13cf\u13ce\3\2\2\2\u13cf\u13d0\3\2\2\2\u13d0\u13d2")
        buf.write(u"\3\2\2\2\u13d1\u13d3\5\u0372\u01ba\2\u13d2\u13d1\3\2")
        buf.write(u"\2\2\u13d2\u13d3\3\2\2\2\u13d3\u0369\3\2\2\2\u13d4\u13d5")
        buf.write(u"\7\u01f0\2\2\u13d5\u13d6\t?\2\2\u13d6\u13d7\5\u0436\u021c")
        buf.write(u"\2\u13d7\u036b\3\2\2\2\u13d8\u13d9\7\u00dd\2\2\u13d9")
        buf.write(u"\u13da\5\u0436\u021c\2\u13da\u036d\3\2\2\2\u13db\u13e0")
        buf.write(u"\7\u0209\2\2\u13dc\u13e1\7\u009e\2\2\u13dd\u13e1\7\u00a0")
        buf.write(u"\2\2\u13de\u13e1\7\u00c6\2\2\u13df\u13e1\5\u0436\u021c")
        buf.write(u"\2\u13e0\u13dc\3\2\2\2\u13e0\u13dd\3\2\2\2\u13e0\u13de")
        buf.write(u"\3\2\2\2\u13e0\u13df\3\2\2\2\u13e1\u036f\3\2\2\2\u13e2")
        buf.write(u"\u13e4\7\u0190\2\2\u13e3\u13e5\7\u011d\2\2\u13e4\u13e3")
        buf.write(u"\3\2\2\2\u13e4\u13e5\3\2\2\2\u13e5\u0371\3\2\2\2\u13e6")
        buf.write(u"\u13e8\t<\2\2\u13e7\u13e9\7\b\2\2\u13e8\u13e7\3\2\2\2")
        buf.write(u"\u13e8\u13e9\3\2\2\2\u13e9\u13ed\3\2\2\2\u13ea\u13ee")
        buf.write(u"\5\u0374\u01bb\2\u13eb\u13ee\5\u0376\u01bc\2\u13ec\u13ee")
        buf.write(u"\5\u0378\u01bd\2\u13ed\u13ea\3\2\2\2\u13ed\u13eb\3\2")
        buf.write(u"\2\2\u13ed\u13ec\3\2\2\2\u13ee\u0373\3\2\2\2\u13ef\u13f0")
        buf.write(u"\7\u015a\2\2\u13f0\u0375\3\2\2\2\u13f1\u13f4\5\u0436")
        buf.write(u"\u021c\2\u13f2\u13f4\5\u0498\u024d\2\u13f3\u13f1\3\2")
        buf.write(u"\2\2\u13f3\u13f2\3\2\2\2\u13f4\u13f6\3\2\2\2\u13f5\u13f7")
        buf.write(u"\t$\2\2\u13f6\u13f5\3\2\2\2\u13f6\u13f7\3\2\2\2\u13f7")
        buf.write(u"\u0377\3\2\2\2\u13f8\u13f9\5\u047e\u0240\2\u13f9\u0379")
        buf.write(u"\3\2\2\2\u13fa\u1401\7\u01b4\2\2\u13fb\u13fd\5\u037c")
        buf.write(u"\u01bf\2\u13fc\u13fb\3\2\2\2\u13fd\u13fe\3\2\2\2\u13fe")
        buf.write(u"\u13fc\3\2\2\2\u13fe\u13ff\3\2\2\2\u13ff\u1402\3\2\2")
        buf.write(u"\2\u1400\u1402\5\u037e\u01c0\2\u1401\u13fc\3\2\2\2\u1401")
        buf.write(u"\u1400\3\2\2\2\u1402\u037b\3\2\2\2\u1403\u1405\5\u0380")
        buf.write(u"\u01c1\2\u1404\u1403\3\2\2\2\u1405\u1406\3\2\2\2\u1406")
        buf.write(u"\u1404\3\2\2\2\u1406\u1407\3\2\2\2\u1407\u1408\3\2\2")
        buf.write(u"\2\u1408\u140a\7\u01f0\2\2\u1409\u140b\5\u0382\u01c2")
        buf.write(u"\2\u140a\u1409\3\2\2\2\u140b\u140c\3\2\2\2\u140c\u140a")
        buf.write(u"\3\2\2\2\u140c\u140d\3\2\2\2\u140d\u037d\3\2\2\2\u140e")
        buf.write(u"\u1410\5\u0380\u01c1\2\u140f\u140e\3\2\2\2\u1410\u1411")
        buf.write(u"\3\2\2\2\u1411\u140f\3\2\2\2\u1411\u1412\3\2\2\2\u1412")
        buf.write(u"\u1417\3\2\2\2\u1413\u1414\7\u01fd\2\2\u1414\u1418\7")
        buf.write(u"\64\2\2\u1415\u1416\7\u0099\2\2\u1416\u1418\7\64\2\2")
        buf.write(u"\u1417\u1413\3\2\2\2\u1417\u1415\3\2\2\2\u1418\u1419")
        buf.write(u"\3\2\2\2\u1419\u141a\5\u0384\u01c3\2\u141a\u037f\3\2")
        buf.write(u"\2\2\u141b\u141c\5\u0436\u021c\2\u141c\u0381\3\2\2\2")
        buf.write(u"\u141d\u1427\7\u014c\2\2\u141e\u1427\7\u014a\2\2\u141f")
        buf.write(u"\u1422\7\u00bc\2\2\u1420\u1423\5\u0436\u021c\2\u1421")
        buf.write(u"\u1423\5\u0498\u024d\2\u1422\u1420\3\2\2\2\u1422\u1421")
        buf.write(u"\3\2\2\2\u1423\u1427\3\2\2\2\u1424\u1427\5\u0436\u021c")
        buf.write(u"\2\u1425\u1427\5\u0498\u024d\2\u1426\u141d\3\2\2\2\u1426")
        buf.write(u"\u141e\3\2\2\2\u1426\u141f\3\2\2\2\u1426\u1424\3\2\2")
        buf.write(u"\2\u1426\u1425\3\2\2\2\u1427\u0383\3\2\2\2\u1428\u142b")
        buf.write(u"\5\u0436\u021c\2\u1429\u142b\5\u0498\u024d\2\u142a\u1428")
        buf.write(u"\3\2\2\2\u142a\u1429\3\2\2\2\u142b\u0385\3\2\2\2\u142c")
        buf.write(u"\u142d\7\u01be\2\2\u142d\u142f\5\u0472\u023a\2\u142e")
        buf.write(u"\u1430\5\u0388\u01c5\2\u142f\u142e\3\2\2\2\u1430\u1431")
        buf.write(u"\3\2\2\2\u1431\u142f\3\2\2\2\u1431\u1432\3\2\2\2\u1432")
        buf.write(u"\u1434\3\2\2\2\u1433\u1435\5\u038a\u01c6\2\u1434\u1433")
        buf.write(u"\3\2\2\2\u1434\u1435\3\2\2\2\u1435\u1437\3\2\2\2\u1436")
        buf.write(u"\u1438\5\u038c\u01c7\2\u1437\u1436\3\2\2\2\u1437\u1438")
        buf.write(u"\3\2\2\2\u1438\u143a\3\2\2\2\u1439\u143b\5\u0392\u01ca")
        buf.write(u"\2\u143a\u1439\3\2\2\2\u143a\u143b\3\2\2\2\u143b\u143f")
        buf.write(u"\3\2\2\2\u143c\u143e\5\u0396\u01cc\2\u143d\u143c\3\2")
        buf.write(u"\2\2\u143e\u1441\3\2\2\2\u143f\u143d\3\2\2\2\u143f\u1440")
        buf.write(u"\3\2\2\2\u1440\u1443\3\2\2\2\u1441\u143f\3\2\2\2\u1442")
        buf.write(u"\u1444\5\u0398\u01cd\2\u1443\u1442\3\2\2\2\u1443\u1444")
        buf.write(u"\3\2\2\2\u1444\u1448\3\2\2\2\u1445\u1447\5\u039c\u01cf")
        buf.write(u"\2\u1446\u1445\3\2\2\2\u1447\u144a\3\2\2\2\u1448\u1446")
        buf.write(u"\3\2\2\2\u1448\u1449\3\2\2\2\u1449\u0387\3\2\2\2\u144a")
        buf.write(u"\u1448\3\2\2\2\u144b\u144d\7\u014c\2\2\u144c\u144b\3")
        buf.write(u"\2\2\2\u144c\u144d\3\2\2\2\u144d\u144e\3\2\2\2\u144e")
        buf.write(u"\u1450\t,\2\2\u144f\u1451\7\u0109\2\2\u1450\u144f\3\2")
        buf.write(u"\2\2\u1450\u1451\3\2\2\2\u1451\u1453\3\2\2\2\u1452\u1454")
        buf.write(u"\5\u0446\u0224\2\u1453\u1452\3\2\2\2\u1454\u1455\3\2")
        buf.write(u"\2\2\u1455\u1453\3\2\2\2\u1455\u1456\3\2\2\2\u1456\u0389")
        buf.write(u"\3\2\2\2\u1457\u1459\7\u0209\2\2\u1458\u1457\3\2\2\2")
        buf.write(u"\u1458\u1459\3\2\2\2\u1459\u145a\3\2\2\2\u145a\u145c")
        buf.write(u"\7\u009a\2\2\u145b\u145d\7\u00f5\2\2\u145c\u145b\3\2")
        buf.write(u"\2\2\u145c\u145d\3\2\2\2\u145d\u145f\3\2\2\2\u145e\u1460")
        buf.write(u"\7\u0150\2\2\u145f\u145e\3\2\2\2\u145f\u1460\3\2\2\2")
        buf.write(u"\u1460\u038b\3\2\2\2\u1461\u1463\7L\2\2\u1462\u1461\3")
        buf.write(u"\2\2\2\u1462\u1463\3\2\2\2\u1463\u1464\3\2\2\2\u1464")
        buf.write(u"\u1466\7\u01b2\2\2\u1465\u1467\7\u0104\2\2\u1466\u1465")
        buf.write(u"\3\2\2\2\u1466\u1467\3\2\2\2\u1467\u1469\3\2\2\2\u1468")
        buf.write(u"\u146a\5\u045e\u0230\2\u1469\u1468\3\2\2\2\u146a\u146b")
        buf.write(u"\3\2\2\2\u146b\u1469\3\2\2\2\u146b\u146c\3\2\2\2\u146c")
        buf.write(u"\u146e\3\2\2\2\u146d\u146f\5\u038e\u01c8\2\u146e\u146d")
        buf.write(u"\3\2\2\2\u146e\u146f\3\2\2\2\u146f\u1471\3\2\2\2\u1470")
        buf.write(u"\u1472\5\u0390\u01c9\2\u1471\u1470\3\2\2\2\u1471\u1472")
        buf.write(u"\3\2\2\2\u1472\u038d\3\2\2\2\u1473\u1475\7\u00da\2\2")
        buf.write(u"\u1474\u1473\3\2\2\2\u1474\u1475\3\2\2\2\u1475\u1476")
        buf.write(u"\3\2\2\2\u1476\u1477\7\20\2\2\u1477\u1478\7\u0104\2\2")
        buf.write(u"\u1478\u1479\5\u045e\u0230\2\u1479\u038f\3\2\2\2\u147a")
        buf.write(u"\u147c\7\u00da\2\2\u147b\u147a\3\2\2\2\u147b\u147c\3")
        buf.write(u"\2\2\2\u147c\u147d\3\2\2\2\u147d\u147f\7\u0136\2\2\u147e")
        buf.write(u"\u1480\7\u0104\2\2\u147f\u147e\3\2\2\2\u147f\u1480\3")
        buf.write(u"\2\2\2\u1480\u1481\3\2\2\2\u1481\u1482\5\u045e\u0230")
        buf.write(u"\2\u1482\u0391\3\2\2\2\u1483\u1484\7\u00fc\2\2\u1484")
        buf.write(u"\u1486\7\u016a\2\2\u1485\u1487\7\u0104\2\2\u1486\u1485")
        buf.write(u"\3\2\2\2\u1486\u1487\3\2\2\2\u1487\u1488\3\2\2\2\u1488")
        buf.write(u"\u148a\5\u0482\u0242\2\u1489\u148b\5\u0394\u01cb\2\u148a")
        buf.write(u"\u1489\3\2\2\2\u148a\u148b\3\2\2\2\u148b\u0393\3\2\2")
        buf.write(u"\2\u148c\u148d\t\6\2\2\u148d\u148e\5\u0482\u0242\2\u148e")
        buf.write(u"\u0395\3\2\2\2\u148f\u1491\7\u0201\2\2\u1490\u1492\5")
        buf.write(u"\u0472\u023a\2\u1491\u1490\3\2\2\2\u1492\u1493\3\2\2")
        buf.write(u"\2\u1493\u1491\3\2\2\2\u1493\u1494\3\2\2\2\u1494\u0397")
        buf.write(u"\3\2\2\2\u1495\u1496\7\u0154\2\2\u1496\u1498\7\u016a")
        buf.write(u"\2\2\u1497\u1499\7\u0104\2\2\u1498\u1497\3\2\2\2\u1498")
        buf.write(u"\u1499\3\2\2\2\u1499\u149a\3\2\2\2\u149a\u149c\5\u0482")
        buf.write(u"\u0242\2\u149b\u149d\5\u039a\u01ce\2\u149c\u149b\3\2")
        buf.write(u"\2\2\u149c\u149d\3\2\2\2\u149d\u0399\3\2\2\2\u149e\u149f")
        buf.write(u"\t\6\2\2\u149f\u14a0\5\u0482\u0242\2\u14a0\u039b\3\2")
        buf.write(u"\2\2\u14a1\u14a3\7\u00e4\2\2\u14a2\u14a4\5\u039e\u01d0")
        buf.write(u"\2\u14a3\u14a2\3\2\2\2\u14a4\u14a5\3\2\2\2\u14a5\u14a3")
        buf.write(u"\3\2\2\2\u14a5\u14a6\3\2\2\2\u14a6\u039d\3\2\2\2\u14a7")
        buf.write(u"\u14b1\5\u0472\u023a\2\u14a8\u14b2\7\u0124\2\2\u14a9")
        buf.write(u"\u14b2\7\u01a5\2\2\u14aa\u14ab\7\u013c\2\2\u14ab\u14b2")
        buf.write(u"\7\u019d\2\2\u14ac\u14b2\7n\2\2\u14ad\u14b2\7\u0189\2")
        buf.write(u"\2\u14ae\u14af\7\u0209\2\2\u14af\u14b0\7\u018d\2\2\u14b0")
        buf.write(u"\u14b2\7n\2\2\u14b1\u14a8\3\2\2\2\u14b1\u14a9\3\2\2\2")
        buf.write(u"\u14b1\u14aa\3\2\2\2\u14b1\u14ac\3\2\2\2\u14b1\u14ad")
        buf.write(u"\3\2\2\2\u14b1\u14ae\3\2\2\2\u14b1\u14b2\3\2\2\2\u14b2")
        buf.write(u"\u039f\3\2\2\2\u14b3\u14b4\7\u01cf\2\2\u14b4\u14b6\5")
        buf.write(u"\u0472\u023a\2\u14b5\u14b7\5\u03a2\u01d2\2\u14b6\u14b5")
        buf.write(u"\3\2\2\2\u14b6\u14b7\3\2\2\2\u14b7\u14b9\3\2\2\2\u14b8")
        buf.write(u"\u14ba\5\u03fc\u01ff\2\u14b9\u14b8\3\2\2\2\u14b9\u14ba")
        buf.write(u"\3\2\2\2\u14ba\u14bc\3\2\2\2\u14bb\u14bd\5\u03fe\u0200")
        buf.write(u"\2\u14bc\u14bb\3\2\2\2\u14bc\u14bd\3\2\2\2\u14bd\u14bf")
        buf.write(u"\3\2\2\2\u14be\u14c0\7\u00b5\2\2\u14bf\u14be\3\2\2\2")
        buf.write(u"\u14bf\u14c0\3\2\2\2\u14c0\u03a1\3\2\2\2\u14c1\u14c3")
        buf.write(u"\7\u0109\2\2\u14c2\u14c4\7\u0104\2\2\u14c3\u14c2\3\2")
        buf.write(u"\2\2\u14c3\u14c4\3\2\2\2\u14c4\u14e0\3\2\2\2\u14c5\u14c7")
        buf.write(u"\7\u00c0\2\2\u14c6\u14c8\7\u01f0\2\2\u14c7\u14c6\3\2")
        buf.write(u"\2\2\u14c7\u14c8\3\2\2\2\u14c8\u14e1\3\2\2\2\u14c9\u14e1")
        buf.write(u"\7\u021f\2\2\u14ca\u14cc\7\u00e7\2\2\u14cb\u14cd\7\u01e6")
        buf.write(u"\2\2\u14cc\u14cb\3\2\2\2\u14cc\u14cd\3\2\2\2\u14cd\u14e1")
        buf.write(u"\3\2\2\2\u14ce\u14e1\7\u0227\2\2\u14cf\u14d0\7\u013e")
        buf.write(u"\2\2\u14d0\u14d2\7\u0115\2\2\u14d1\u14d3\7\u01e6\2\2")
        buf.write(u"\u14d2\u14d1\3\2\2\2\u14d2\u14d3\3\2\2\2\u14d3\u14e1")
        buf.write(u"\3\2\2\2\u14d4\u14d5\7\u013e\2\2\u14d5\u14e1\7\u0223")
        buf.write(u"\2\2\u14d6\u14d8\7\u00e7\2\2\u14d7\u14d9\7\u01e6\2\2")
        buf.write(u"\u14d8\u14d7\3\2\2\2\u14d8\u14d9\3\2\2\2\u14d9\u14da")
        buf.write(u"\3\2\2\2\u14da\u14db\7\u014f\2\2\u14db\u14dd\7\u00c0")
        buf.write(u"\2\2\u14dc\u14de\7\u01f0\2\2\u14dd\u14dc\3\2\2\2\u14dd")
        buf.write(u"\u14de\3\2\2\2\u14de\u14e1\3\2\2\2\u14df\u14e1\7\u0228")
        buf.write(u"\2\2\u14e0\u14c5\3\2\2\2\u14e0\u14c9\3\2\2\2\u14e0\u14ca")
        buf.write(u"\3\2\2\2\u14e0\u14ce\3\2\2\2\u14e0\u14cf\3\2\2\2\u14e0")
        buf.write(u"\u14d4\3\2\2\2\u14e0\u14d6\3\2\2\2\u14e0\u14df\3\2\2")
        buf.write(u"\2\u14e1\u14e2\3\2\2\2\u14e2\u14e3\5\u0446\u0224\2\u14e3")
        buf.write(u"\u03a3\3\2\2\2\u14e4\u14e8\7\u01d1\2\2\u14e5\u14e9\7")
        buf.write(u"\u01a3\2\2\u14e6\u14e9\5\u0498\u024d\2\u14e7\u14e9\5")
        buf.write(u"\u03a6\u01d4\2\u14e8\u14e5\3\2\2\2\u14e8\u14e6\3\2\2")
        buf.write(u"\2\u14e8\u14e7\3\2\2\2\u14e9\u03a5\3\2\2\2\u14ea\u14eb")
        buf.write(u"\7\u01a3\2\2\u14eb\u14ee\t\65\2\2\u14ec\u14ef\5\u0436")
        buf.write(u"\u021c\2\u14ed\u14ef\5\u049e\u0250\2\u14ee\u14ec\3\2")
        buf.write(u"\2\2\u14ee\u14ed\3\2\2\2\u14ef\u03a7\3\2\2\2\u14f0\u14f2")
        buf.write(u"\7\u01d2\2\2\u14f1\u14f3\5\u03aa\u01d6\2\u14f2\u14f1")
        buf.write(u"\3\2\2\2\u14f3\u14f4\3\2\2\2\u14f4\u14f2\3\2\2\2\u14f4")
        buf.write(u"\u14f5\3\2\2\2\u14f5\u14f6\3\2\2\2\u14f6\u14f8\5\u03b2")
        buf.write(u"\u01da\2\u14f7\u14f9\5\u03b4\u01db\2\u14f8\u14f7\3\2")
        buf.write(u"\2\2\u14f8\u14f9\3\2\2\2\u14f9\u14fb\3\2\2\2\u14fa\u14fc")
        buf.write(u"\5\u0400\u0201\2\u14fb\u14fa\3\2\2\2\u14fb\u14fc\3\2")
        buf.write(u"\2\2\u14fc\u14fe\3\2\2\2\u14fd\u14ff\5\u0402\u0202\2")
        buf.write(u"\u14fe\u14fd\3\2\2\2\u14fe\u14ff\3\2\2\2\u14ff\u1501")
        buf.write(u"\3\2\2\2\u1500\u1502\7\u00b6\2\2\u1501\u1500\3\2\2\2")
        buf.write(u"\u1501\u1502\3\2\2\2\u1502\u03a9\3\2\2\2\u1503\u150a")
        buf.write(u"\5\u03ac\u01d7\2\u1504\u1506\7\u0218\2\2\u1505\u1504")
        buf.write(u"\3\2\2\2\u1505\u1506\3\2\2\2\u1506\u1507\3\2\2\2\u1507")
        buf.write(u"\u1509\5\u03ac\u01d7\2\u1508\u1505\3\2\2\2\u1509\u150c")
        buf.write(u"\3\2\2\2\u150a\u1508\3\2\2\2\u150a\u150b\3\2\2\2\u150b")
        buf.write(u"\u150f\3\2\2\2\u150c\u150a\3\2\2\2\u150d\u1510\5\u03ae")
        buf.write(u"\u01d8\2\u150e\u1510\5\u03b0\u01d9\2\u150f\u150d\3\2")
        buf.write(u"\2\2\u150f\u150e\3\2\2\2\u1510\u03ab\3\2\2\2\u1511\u1514")
        buf.write(u"\5\u0436\u021c\2\u1512\u1514\5\u0498\u024d\2\u1513\u1511")
        buf.write(u"\3\2\2\2\u1513\u1512\3\2\2\2\u1514\u03ad\3\2\2\2\u1515")
        buf.write(u"\u1517\7\u0089\2\2\u1516\u1518\7\64\2\2\u1517\u1516\3")
        buf.write(u"\2\2\2\u1517\u1518\3\2\2\2\u1518\u151c\3\2\2\2\u1519")
        buf.write(u"\u151d\7\u01bd\2\2\u151a\u151d\5\u0436\u021c\2\u151b")
        buf.write(u"\u151d\5\u0498\u024d\2\u151c\u1519\3\2\2\2\u151c\u151a")
        buf.write(u"\3\2\2\2\u151c\u151b\3\2\2\2\u151d\u03af\3\2\2\2\u151e")
        buf.write(u"\u1521\7\u00da\2\2\u151f\u1522\5\u0436\u021c\2\u1520")
        buf.write(u"\u1522\5\u0498\u024d\2\u1521\u151f\3\2\2\2\u1521\u1520")
        buf.write(u"\3\2\2\2\u1522\u03b1\3\2\2\2\u1523\u1524\7\u0101\2\2")
        buf.write(u"\u1524\u1525\5\u0436\u021c\2\u1525\u03b3\3\2\2\2\u1526")
        buf.write(u"\u1528\7\u0209\2\2\u1527\u1526\3\2\2\2\u1527\u1528\3")
        buf.write(u"\2\2\2\u1528\u1529\3\2\2\2\u1529\u152a\7\u0163\2\2\u152a")
        buf.write(u"\u152b\5\u0446\u0224\2\u152b\u03b5\3\2\2\2\u152c\u1530")
        buf.write(u"\7\u01d6\2\2\u152d\u1531\5\u03b8\u01dd\2\u152e\u1531")
        buf.write(u"\5\u03ba\u01de\2\u152f\u1531\5\u03bc\u01df\2\u1530\u152d")
        buf.write(u"\3\2\2\2\u1530\u152e\3\2\2\2\u1530\u152f\3\2\2\2\u1531")
        buf.write(u"\u1533\3\2\2\2\u1532\u1534\5\u0404\u0203\2\u1533\u1532")
        buf.write(u"\3\2\2\2\u1533\u1534\3\2\2\2\u1534\u1536\3\2\2\2\u1535")
        buf.write(u"\u1537\5\u0406\u0204\2\u1536\u1535\3\2\2\2\u1536\u1537")
        buf.write(u"\3\2\2\2\u1537\u1539\3\2\2\2\u1538\u153a\7\u00b7\2\2")
        buf.write(u"\u1539\u1538\3\2\2\2\u1539\u153a\3\2\2\2\u153a\u03b7")
        buf.write(u"\3\2\2\2\u153b\u153d\5\u03be\u01e0\2\u153c\u153b\3\2")
        buf.write(u"\2\2\u153d\u153e\3\2\2\2\u153e\u153c\3\2\2\2\u153e\u153f")
        buf.write(u"\3\2\2\2\u153f\u1540\3\2\2\2\u1540\u1542\7\u00dd\2\2")
        buf.write(u"\u1541\u1543\5\u03c0\u01e1\2\u1542\u1541\3\2\2\2\u1543")
        buf.write(u"\u1544\3\2\2\2\u1544\u1542\3\2\2\2\u1544\u1545\3\2\2")
        buf.write(u"\2\u1545\u03b9\3\2\2\2\u1546\u1548\5\u03be\u01e0\2\u1547")
        buf.write(u"\u1546\3\2\2\2\u1548\u1549\3\2\2\2\u1549\u1547\3\2\2")
        buf.write(u"\2\u1549\u154a\3\2\2\2\u154a\u154b\3\2\2\2\u154b\u154c")
        buf.write(u"\7\u00dd\2\2\u154c\u154d\5\u03c2\u01e2\2\u154d\u154f")
        buf.write(u"\7\u00e4\2\2\u154e\u1550\5\u03c4\u01e3\2\u154f\u154e")
        buf.write(u"\3\2\2\2\u1550\u1551\3\2\2\2\u1551\u154f\3\2\2\2\u1551")
        buf.write(u"\u1552\3\2\2\2\u1552\u03bb\3\2\2\2\u1553\u1554\t\66\2")
        buf.write(u"\2\u1554\u1555\5\u0446\u0224\2\u1555\u1556\7\u00dd\2")
        buf.write(u"\2\u1556\u1557\5\u03c6\u01e4\2\u1557\u03bd\3\2\2\2\u1558")
        buf.write(u"\u155b\5\u0436\u021c\2\u1559\u155b\5\u0498\u024d\2\u155a")
        buf.write(u"\u1558\3\2\2\2\u155a\u1559\3\2\2\2\u155b\u03bf\3\2\2")
        buf.write(u"\2\u155c\u155e\5\u0436\u021c\2\u155d\u155f\7\u01a2\2")
        buf.write(u"\2\u155e\u155d\3\2\2\2\u155e\u155f\3\2\2\2\u155f\u03c1")
        buf.write(u"\3\2\2\2\u1560\u1563\5\u0436\u021c\2\u1561\u1563\5\u0498")
        buf.write(u"\u024d\2\u1562\u1560\3\2\2\2\u1562\u1561\3\2\2\2\u1563")
        buf.write(u"\u03c3\3\2\2\2\u1564\u1566\5\u0436\u021c\2\u1565\u1567")
        buf.write(u"\7\u01a2\2\2\u1566\u1565\3\2\2\2\u1566\u1567\3\2\2\2")
        buf.write(u"\u1567\u03c5\3\2\2\2\u1568\u156a\5\u0446\u0224\2\u1569")
        buf.write(u"\u156b\7\u01a2\2\2\u156a\u1569\3\2\2\2\u156a\u156b\3")
        buf.write(u"\2\2\2\u156b\u03c7\3\2\2\2\u156c\u156d\7\u01e3\2\2\u156d")
        buf.write(u"\u156e\5\u0488\u0245\2\u156e\u03c9\3\2\2\2\u156f\u1570")
        buf.write(u"\7\u01fb\2\2\u1570\u1571\5\u03cc\u01e7\2\u1571\u1573")
        buf.write(u"\5\u03d2\u01ea\2\u1572\u1574\5\u03da\u01ee\2\u1573\u1572")
        buf.write(u"\3\2\2\2\u1573\u1574\3\2\2\2\u1574\u1576\3\2\2\2\u1575")
        buf.write(u"\u1577\5\u03dc\u01ef\2\u1576\u1575\3\2\2\2\u1576\u1577")
        buf.write(u"\3\2\2\2\u1577\u1579\3\2\2\2\u1578\u157a\5\u0400\u0201")
        buf.write(u"\2\u1579\u1578\3\2\2\2\u1579\u157a\3\2\2\2\u157a\u157c")
        buf.write(u"\3\2\2\2\u157b\u157d\5\u0402\u0202\2\u157c\u157b\3\2")
        buf.write(u"\2\2\u157c\u157d\3\2\2\2\u157d\u157f\3\2\2\2\u157e\u1580")
        buf.write(u"\7\u00b8\2\2\u157f\u157e\3\2\2\2\u157f\u1580\3\2\2\2")
        buf.write(u"\u1580\u03cb\3\2\2\2\u1581\u1589\5\u0436\u021c\2\u1582")
        buf.write(u"\u1586\5\u03ce\u01e8\2\u1583\u1585\5\u03d0\u01e9\2\u1584")
        buf.write(u"\u1583\3\2\2\2\u1585\u1588\3\2\2\2\u1586\u1584\3\2\2")
        buf.write(u"\2\u1586\u1587\3\2\2\2\u1587\u158a\3\2\2\2\u1588\u1586")
        buf.write(u"\3\2\2\2\u1589\u1582\3\2\2\2\u1589\u158a\3\2\2\2\u158a")
        buf.write(u"\u03cd\3\2\2\2\u158b\u158d\7\u0089\2\2\u158c\u158e\7")
        buf.write(u"\64\2\2\u158d\u158c\3\2\2\2\u158d\u158e\3\2\2\2\u158e")
        buf.write(u"\u1590\3\2\2\2\u158f\u1591\7\13\2\2\u1590\u158f\3\2\2")
        buf.write(u"\2\u1590\u1591\3\2\2\2\u1591\u1594\3\2\2\2\u1592\u1595")
        buf.write(u"\5\u0436\u021c\2\u1593\u1595\5\u0498\u024d\2\u1594\u1592")
        buf.write(u"\3\2\2\2\u1594\u1593\3\2\2\2\u1595\u03cf\3\2\2\2\u1596")
        buf.write(u"\u1598\7\u014f\2\2\u1597\u1599\7\13\2\2\u1598\u1597\3")
        buf.write(u"\2\2\2\u1598\u1599\3\2\2\2\u1599\u159c\3\2\2\2\u159a")
        buf.write(u"\u159d\5\u0436\u021c\2\u159b\u159d\5\u0498\u024d\2\u159c")
        buf.write(u"\u159a\3\2\2\2\u159c\u159b\3\2\2\2\u159d\u03d1\3\2\2")
        buf.write(u"\2\u159e\u15a0\7\u0101\2\2\u159f\u15a1\5\u03d4\u01eb")
        buf.write(u"\2\u15a0\u159f\3\2\2\2\u15a1\u15a2\3\2\2\2\u15a2\u15a0")
        buf.write(u"\3\2\2\2\u15a2\u15a3\3\2\2\2\u15a3\u03d3\3\2\2\2\u15a4")
        buf.write(u"\u15a6\5\u0436\u021c\2\u15a5\u15a7\5\u03d6\u01ec\2\u15a6")
        buf.write(u"\u15a5\3\2\2\2\u15a6\u15a7\3\2\2\2\u15a7\u15a9\3\2\2")
        buf.write(u"\2\u15a8\u15aa\5\u03d8\u01ed\2\u15a9\u15a8\3\2\2\2\u15a9")
        buf.write(u"\u15aa\3\2\2\2\u15aa\u03d5\3\2\2\2\u15ab\u15ad\7\u008a")
        buf.write(u"\2\2\u15ac\u15ae\7\u00f5\2\2\u15ad\u15ac\3\2\2\2\u15ad")
        buf.write(u"\u15ae\3\2\2\2\u15ae\u15af\3\2\2\2\u15af\u15b0\5\u0436")
        buf.write(u"\u021c\2\u15b0\u03d7\3\2\2\2\u15b1\u15b3\7m\2\2\u15b2")
        buf.write(u"\u15b4\7\u00f5\2\2\u15b3\u15b2\3\2\2\2\u15b3\u15b4\3")
        buf.write(u"\2\2\2\u15b4\u15b5\3\2\2\2\u15b5\u15b6\5\u0436\u021c")
        buf.write(u"\2\u15b6\u03d9\3\2\2\2\u15b7\u15b9\7\u0209\2\2\u15b8")
        buf.write(u"\u15b7\3\2\2\2\u15b8\u15b9\3\2\2\2\u15b9\u15ba\3\2\2")
        buf.write(u"\2\u15ba\u15bb\7\u0163\2\2\u15bb\u15bc\5\u0446\u0224")
        buf.write(u"\2\u15bc\u03db\3\2\2\2\u15bd\u15bf\7\u01df\2\2\u15be")
        buf.write(u"\u15c0\7\u00f5\2\2\u15bf\u15be\3\2\2\2\u15bf\u15c0\3")
        buf.write(u"\2\2\2\u15c0\u15c1\3\2\2\2\u15c1\u15c2\5\u0446\u0224")
        buf.write(u"\2\u15c2\u03dd\3\2\2\2\u15c3\u15c6\7\u0200\2\2\u15c4")
        buf.write(u"\u15c7\5\u03e0\u01f1\2\u15c5\u15c7\5\u03e4\u01f3\2\u15c6")
        buf.write(u"\u15c4\3\2\2\2\u15c6\u15c5\3\2\2\2\u15c7\u03df\3\2\2")
        buf.write(u"\2\u15c8\u15ca\7\u00e5\2\2\u15c9\u15c8\3\2\2\2\u15c9")
        buf.write(u"\u15ca\3\2\2\2\u15ca\u15cb\3\2\2\2\u15cb\u15cd\7\t\2")
        buf.write(u"\2\u15cc\u15ce\7\u01cc\2\2\u15cd\u15cc\3\2\2\2\u15cd")
        buf.write(u"\u15ce\3\2\2\2\u15ce\u15cf\3\2\2\2\u15cf\u15d0\t@\2\2")
        buf.write(u"\u15d0\u15d2\7\u016a\2\2\u15d1\u15d3\7\u014c\2\2\u15d2")
        buf.write(u"\u15d1\3\2\2\2\u15d2\u15d3\3\2\2\2\u15d3\u15d4\3\2\2")
        buf.write(u"\2\u15d4\u15d5\5\u03e2\u01f2\2\u15d5\u03e1\3\2\2\2\u15d6")
        buf.write(u"\u15e0\7\u00fc\2\2\u15d7\u15e0\7\u0154\2\2\u15d8\u15e0")
        buf.write(u"\7\u00ee\2\2\u15d9\u15e0\7\u00cf\2\2\u15da\u15dc\5\u0472")
        buf.write(u"\u023a\2\u15db\u15da\3\2\2\2\u15dc\u15dd\3\2\2\2\u15dd")
        buf.write(u"\u15db\3\2\2\2\u15dd\u15de\3\2\2\2\u15de\u15e0\3\2\2")
        buf.write(u"\2\u15df\u15d6\3\2\2\2\u15df\u15d7\3\2\2\2\u15df\u15d8")
        buf.write(u"\3\2\2\2\u15df\u15d9\3\2\2\2\u15df\u15db\3\2\2\2\u15e0")
        buf.write(u"\u03e3\3\2\2\2\u15e1\u15e3\7\u00da\2\2\u15e2\u15e1\3")
        buf.write(u"\2\2\2\u15e2\u15e3\3\2\2\2\u15e3\u15e4\3\2\2\2\u15e4")
        buf.write(u"\u15e6\7\u0082\2\2\u15e5\u15e7\7\u014c\2\2\u15e6\u15e5")
        buf.write(u"\3\2\2\2\u15e6\u15e7\3\2\2\2\u15e7\u15e9\3\2\2\2\u15e8")
        buf.write(u"\u15ea\5\u03e6\u01f4\2\u15e9\u15e8\3\2\2\2\u15ea\u15eb")
        buf.write(u"\3\2\2\2\u15eb\u15e9\3\2\2\2\u15eb\u15ec\3\2\2\2\u15ec")
        buf.write(u"\u03e5\3\2\2\2\u15ed\u15ee\7\13\2\2\u15ee\u15fa\7\u016c")
        buf.write(u"\2\2\u15ef\u15f1\7\13\2\2\u15f0\u15f2\7\u0187\2\2\u15f1")
        buf.write(u"\u15f0\3\2\2\2\u15f1\u15f2\3\2\2\2\u15f2\u15f4\3\2\2")
        buf.write(u"\2\u15f3\u15f5\7\u0149\2\2\u15f4\u15f3\3\2\2\2\u15f4")
        buf.write(u"\u15f5\3\2\2\2\u15f5\u15f6\3\2\2\2\u15f6\u15fa\5\u0436")
        buf.write(u"\u021c\2\u15f7\u15fa\5\u0482\u0242\2\u15f8\u15fa\5\u0472")
        buf.write(u"\u023a\2\u15f9\u15ed\3\2\2\2\u15f9\u15ef\3\2\2\2\u15f9")
        buf.write(u"\u15f7\3\2\2\2\u15f9\u15f8\3\2\2\2\u15fa\u03e7\3\2\2")
        buf.write(u"\2\u15fb\u15fc\7\u020c\2\2\u15fc\u15fe\5\u0486\u0244")
        buf.write(u"\2\u15fd\u15ff\5\u03ea\u01f6\2\u15fe\u15fd\3\2\2\2\u15fe")
        buf.write(u"\u15ff\3\2\2\2\u15ff\u1601\3\2\2\2\u1600\u1602\5\u03ec")
        buf.write(u"\u01f7\2\u1601\u1600\3\2\2\2\u1601\u1602\3\2\2\2\u1602")
        buf.write(u"\u1604\3\2\2\2\u1603\u1605\5\u03f4\u01fb\2\u1604\u1603")
        buf.write(u"\3\2\2\2\u1604\u1605\3\2\2\2\u1605\u1607\3\2\2\2\u1606")
        buf.write(u"\u1608\5\u03f6\u01fc\2\u1607\u1606\3\2\2\2\u1607\u1608")
        buf.write(u"\3\2\2\2\u1608\u160a\3\2\2\2\u1609\u160b\5\u03fc\u01ff")
        buf.write(u"\2\u160a\u1609\3\2\2\2\u160a\u160b\3\2\2\2\u160b\u160d")
        buf.write(u"\3\2\2\2\u160c\u160e\5\u03fe\u0200\2\u160d\u160c\3\2")
        buf.write(u"\2\2\u160d\u160e\3\2\2\2\u160e\u1610\3\2\2\2\u160f\u1611")
        buf.write(u"\7\u00b9\2\2\u1610\u160f\3\2\2\2\u1610\u1611\3\2\2\2")
        buf.write(u"\u1611\u03e9\3\2\2\2\u1612\u1615\7\u00dd\2\2\u1613\u1616")
        buf.write(u"\5\u0436\u021c\2\u1614\u1616\5\u0498\u024d\2\u1615\u1613")
        buf.write(u"\3\2\2\2\u1615\u1614\3\2\2\2\u1616\u03eb\3\2\2\2\u1617")
        buf.write(u"\u1619\t<\2\2\u1618\u161a\7\b\2\2\u1619\u1618\3\2\2\2")
        buf.write(u"\u1619\u161a\3\2\2\2\u161a\u161e\3\2\2\2\u161b\u161f")
        buf.write(u"\5\u03ee\u01f8\2\u161c\u161f\5\u03f0\u01f9\2\u161d\u161f")
        buf.write(u"\5\u03f2\u01fa\2\u161e\u161b\3\2\2\2\u161e\u161c\3\2")
        buf.write(u"\2\2\u161e\u161d\3\2\2\2\u161f\u03ed\3\2\2\2\u1620\u1621")
        buf.write(u"\7\u015a\2\2\u1621\u03ef\3\2\2\2\u1622\u1625\5\u0436")
        buf.write(u"\u021c\2\u1623\u1625\5\u0498\u024d\2\u1624\u1622\3\2")
        buf.write(u"\2\2\u1624\u1623\3\2\2\2\u1625\u1627\3\2\2\2\u1626\u1628")
        buf.write(u"\t$\2\2\u1627\u1626\3\2\2\2\u1627\u1628\3\2\2\2\u1628")
        buf.write(u"\u03f1\3\2\2\2\u1629\u162a\5\u047e\u0240\2\u162a\u03f3")
        buf.write(u"\3\2\2\2\u162b\u162d\7 \2\2\u162c\u162b\3\2\2\2\u162c")
        buf.write(u"\u162d\3\2\2\2\u162d\u162e\3\2\2\2\u162e\u1632\tA\2\2")
        buf.write(u"\u162f\u1631\5\u021a\u010e\2\u1630\u162f\3\2\2\2\u1631")
        buf.write(u"\u1634\3\2\2\2\u1632\u1630\3\2\2\2\u1632\u1633\3\2\2")
        buf.write(u"\2\u1633\u03f5\3\2\2\2\u1634\u1632\3\2\2\2\u1635\u1637")
        buf.write(u"\7\u013e\2\2\u1636\u1638\7 \2\2\u1637\u1636\3\2\2\2\u1637")
        buf.write(u"\u1638\3\2\2\2\u1638\u1639\3\2\2\2\u1639\u163d\tA\2\2")
        buf.write(u"\u163a\u163c\5\u021a\u010e\2\u163b\u163a\3\2\2\2\u163c")
        buf.write(u"\u163f\3\2\2\2\u163d\u163b\3\2\2\2\u163d\u163e\3\2\2")
        buf.write(u"\2\u163e\u03f7\3\2\2\2\u163f\u163d\3\2\2\2\u1640\u1642")
        buf.write(u"\7 \2\2\u1641\u1640\3\2\2\2\u1641\u1642\3\2\2\2\u1642")
        buf.write(u"\u1643\3\2\2\2\u1643\u1647\7\u00a3\2\2\u1644\u1646\5")
        buf.write(u"\u021a\u010e\2\u1645\u1644\3\2\2\2\u1646\u1649\3\2\2")
        buf.write(u"\2\u1647\u1645\3\2\2\2\u1647\u1648\3\2\2\2\u1648\u03f9")
        buf.write(u"\3\2\2\2\u1649\u1647\3\2\2\2\u164a\u164c\7\u013e\2\2")
        buf.write(u"\u164b\u164d\7 \2\2\u164c\u164b\3\2\2\2\u164c\u164d\3")
        buf.write(u"\2\2\2\u164d\u164e\3\2\2\2\u164e\u1652\7\u00a3\2\2\u164f")
        buf.write(u"\u1651\5\u021a\u010e\2\u1650\u164f\3\2\2\2\u1651\u1654")
        buf.write(u"\3\2\2\2\u1652\u1650\3\2\2\2\u1652\u1653\3\2\2\2\u1653")
        buf.write(u"\u03fb\3\2\2\2\u1654\u1652\3\2\2\2\u1655\u1657\7\u0102")
        buf.write(u"\2\2\u1656\u1658\7\u0109\2\2\u1657\u1656\3\2\2\2\u1657")
        buf.write(u"\u1658\3\2\2\2\u1658\u165c\3\2\2\2\u1659\u165b\5\u021a")
        buf.write(u"\u010e\2\u165a\u1659\3\2\2\2\u165b\u165e\3\2\2\2\u165c")
        buf.write(u"\u165a\3\2\2\2\u165c\u165d\3\2\2\2\u165d\u03fd\3\2\2")
        buf.write(u"\2\u165e\u165c\3\2\2\2\u165f\u1660\7\u013e\2\2\u1660")
        buf.write(u"\u1662\7\u0102\2\2\u1661\u1663\7\u0109\2\2\u1662\u1661")
        buf.write(u"\3\2\2\2\u1662\u1663\3\2\2\2\u1663\u1667\3\2\2\2\u1664")
        buf.write(u"\u1666\5\u021a\u010e\2\u1665\u1664\3\2\2\2\u1666\u1669")
        buf.write(u"\3\2\2\2\u1667\u1665\3\2\2\2\u1667\u1668\3\2\2\2\u1668")
        buf.write(u"\u03ff\3\2\2\2\u1669\u1667\3\2\2\2\u166a\u166c\7\u014c")
        buf.write(u"\2\2\u166b\u166a\3\2\2\2\u166b\u166c\3\2\2\2\u166c\u166d")
        buf.write(u"\3\2\2\2\u166d\u1671\7\u0155\2\2\u166e\u1670\5\u021a")
        buf.write(u"\u010e\2\u166f\u166e\3\2\2\2\u1670\u1673\3\2\2\2\u1671")
        buf.write(u"\u166f\3\2\2\2\u1671\u1672\3\2\2\2\u1672\u0401\3\2\2")
        buf.write(u"\2\u1673\u1671\3\2\2\2\u1674\u1676\7\u013e\2\2\u1675")
        buf.write(u"\u1677\7\u014c\2\2\u1676\u1675\3\2\2\2\u1676\u1677\3")
        buf.write(u"\2\2\2\u1677\u1678\3\2\2\2\u1678\u167c\7\u0155\2\2\u1679")
        buf.write(u"\u167b\5\u021a\u010e\2\u167a\u1679\3\2\2\2\u167b\u167e")
        buf.write(u"\3\2\2\2\u167c\u167a\3\2\2\2\u167c\u167d\3\2\2\2\u167d")
        buf.write(u"\u0403\3\2\2\2\u167e\u167c\3\2\2\2\u167f\u1681\7\u014c")
        buf.write(u"\2\2\u1680\u167f\3\2\2\2\u1680\u1681\3\2\2\2\u1681\u1682")
        buf.write(u"\3\2\2\2\u1682\u1683\7\u01bd\2\2\u1683\u1687\7\u00c2")
        buf.write(u"\2\2\u1684\u1686\5\u021a\u010e\2\u1685\u1684\3\2\2\2")
        buf.write(u"\u1686\u1689\3\2\2\2\u1687\u1685\3\2\2\2\u1687\u1688")
        buf.write(u"\3\2\2\2\u1688\u0405\3\2\2\2\u1689\u1687\3\2\2\2\u168a")
        buf.write(u"\u168c\7\u013e\2\2\u168b\u168d\7\u014c\2\2\u168c\u168b")
        buf.write(u"\3\2\2\2\u168c\u168d\3\2\2\2\u168d\u168e\3\2\2\2\u168e")
        buf.write(u"\u168f\7\u01bd\2\2\u168f\u1693\7\u00c2\2\2\u1690\u1692")
        buf.write(u"\5\u021a\u010e\2\u1691\u1690\3\2\2\2\u1692\u1695\3\2")
        buf.write(u"\2\2\u1693\u1691\3\2\2\2\u1693\u1694\3\2\2\2\u1694\u0407")
        buf.write(u"\3\2\2\2\u1695\u1693\3\2\2\2\u1696\u1698\7\u014c\2\2")
        buf.write(u"\u1697\u1696\3\2\2\2\u1697\u1698\3\2\2\2\u1698\u1699")
        buf.write(u"\3\2\2\2\u1699\u169d\7\u00ca\2\2\u169a\u169c\5\u021a")
        buf.write(u"\u010e\2\u169b\u169a\3\2\2\2\u169c\u169f\3\2\2\2\u169d")
        buf.write(u"\u169b\3\2\2\2\u169d\u169e\3\2\2\2\u169e\u0409\3\2\2")
        buf.write(u"\2\u169f\u169d\3\2\2\2\u16a0\u16a2\7\u013e\2\2\u16a1")
        buf.write(u"\u16a3\7\u014c\2\2\u16a2\u16a1\3\2\2\2\u16a2\u16a3\3")
        buf.write(u"\2\2\2\u16a3\u16a4\3\2\2\2\u16a4\u16a8\7\u00ca\2\2\u16a5")
        buf.write(u"\u16a7\5\u021a\u010e\2\u16a6\u16a5\3\2\2\2\u16a7\u16aa")
        buf.write(u"\3\2\2\2\u16a8\u16a6\3\2\2\2\u16a8\u16a9\3\2\2\2\u16a9")
        buf.write(u"\u040b\3\2\2\2\u16aa\u16a8\3\2\2\2\u16ab\u16af\5\u0410")
        buf.write(u"\u0209\2\u16ac\u16ae\5\u040e\u0208\2\u16ad\u16ac\3\2")
        buf.write(u"\2\2\u16ae\u16b1\3\2\2\2\u16af\u16ad\3\2\2\2\u16af\u16b0")
        buf.write(u"\3\2\2\2\u16b0\u040d\3\2\2\2\u16b1\u16af\3\2\2\2\u16b2")
        buf.write(u"\u16b3\tB\2\2\u16b3\u16b4\5\u0410\u0209\2\u16b4\u040f")
        buf.write(u"\3\2\2\2\u16b5\u16b9\5\u0414\u020b\2\u16b6\u16b8\5\u0412")
        buf.write(u"\u020a\2\u16b7\u16b6\3\2\2\2\u16b8\u16bb\3\2\2\2\u16b9")
        buf.write(u"\u16b7\3\2\2\2\u16b9\u16ba\3\2\2\2\u16ba\u0411\3\2\2")
        buf.write(u"\2\u16bb\u16b9\3\2\2\2\u16bc\u16bd\tC\2\2\u16bd\u16be")
        buf.write(u"\5\u0414\u020b\2\u16be\u0413\3\2\2\2\u16bf\u16c1\tB\2")
        buf.write(u"\2\u16c0\u16bf\3\2\2\2\u16c0\u16c1\3\2\2\2\u16c1\u16c2")
        buf.write(u"\3\2\2\2\u16c2\u16c6\5\u0418\u020d\2\u16c3\u16c5\5\u0416")
        buf.write(u"\u020c\2\u16c4\u16c3\3\2\2\2\u16c5\u16c8\3\2\2\2\u16c6")
        buf.write(u"\u16c4\3\2\2\2\u16c6\u16c7\3\2\2\2\u16c7\u0415\3\2\2")
        buf.write(u"\2\u16c8\u16c6\3\2\2\2\u16c9\u16ca\7\u0216\2\2\u16ca")
        buf.write(u"\u16cb\5\u0418\u020d\2\u16cb\u0417\3\2\2\2\u16cc\u16cd")
        buf.write(u"\7\u0225\2\2\u16cd\u16ce\5\u040c\u0207\2\u16ce\u16cf")
        buf.write(u"\7\u022c\2\2\u16cf\u16d3\3\2\2\2\u16d0\u16d3\5\u0436")
        buf.write(u"\u021c\2\u16d1\u16d3\5\u0498\u024d\2\u16d2\u16cc\3\2")
        buf.write(u"\2\2\u16d2\u16d0\3\2\2\2\u16d2\u16d1\3\2\2\2\u16d3\u0419")
        buf.write(u"\3\2\2\2\u16d4\u16d8\5\u041e\u0210\2\u16d5\u16d7\5\u041c")
        buf.write(u"\u020f\2\u16d6\u16d5\3\2\2\2\u16d7\u16da\3\2\2\2\u16d8")
        buf.write(u"\u16d6\3\2\2\2\u16d8\u16d9\3\2\2\2\u16d9\u041b\3\2\2")
        buf.write(u"\2\u16da\u16d8\3\2\2\2\u16db\u16e2\tD\2\2\u16dc\u16e3")
        buf.write(u"\5\u041e\u0210\2\u16dd\u16df\5\u0434\u021b\2\u16de\u16dd")
        buf.write(u"\3\2\2\2\u16df\u16e0\3\2\2\2\u16e0\u16de\3\2\2\2\u16e0")
        buf.write(u"\u16e1\3\2\2\2\u16e1\u16e3\3\2\2\2\u16e2\u16dc\3\2\2")
        buf.write(u"\2\u16e2\u16de\3\2\2\2\u16e3\u041d\3\2\2\2\u16e4\u16e6")
        buf.write(u"\7\u013e\2\2\u16e5\u16e4\3\2\2\2\u16e5\u16e6\3\2\2\2")
        buf.write(u"\u16e6\u16e7\3\2\2\2\u16e7\u16e8\5\u0420\u0211\2\u16e8")
        buf.write(u"\u041f\3\2\2\2\u16e9\u16ea\7\u0225\2\2\u16ea\u16eb\5")
        buf.write(u"\u041a\u020e\2\u16eb\u16ec\7\u022c\2\2\u16ec\u16f1\3")
        buf.write(u"\2\2\2\u16ed\u16f1\5\u0428\u0215\2\u16ee\u16f1\5\u0422")
        buf.write(u"\u0212\2\u16ef\u16f1\5\u0424\u0213\2\u16f0\u16e9\3\2")
        buf.write(u"\2\2\u16f0\u16ed\3\2\2\2\u16f0\u16ee\3\2\2\2\u16f0\u16ef")
        buf.write(u"\3\2\2\2\u16f1\u0421\3\2\2\2\u16f2\u16f4\5\u0436\u021c")
        buf.write(u"\2\u16f3\u16f5\7\u0104\2\2\u16f4\u16f3\3\2\2\2\u16f4")
        buf.write(u"\u16f5\3\2\2\2\u16f5\u16f7\3\2\2\2\u16f6\u16f8\7\u013e")
        buf.write(u"\2\2\u16f7\u16f6\3\2\2\2\u16f7\u16f8\3\2\2\2\u16f8\u1700")
        buf.write(u"\3\2\2\2\u16f9\u1701\7\u0142\2\2\u16fa\u1701\7\r\2\2")
        buf.write(u"\u16fb\u1701\7\16\2\2\u16fc\u1701\7\17\2\2\u16fd\u1701")
        buf.write(u"\7x\2\2\u16fe\u1701\7\u0107\2\2\u16ff\u1701\5\u0466\u0234")
        buf.write(u"\2\u1700\u16f9\3\2\2\2\u1700\u16fa\3\2\2\2\u1700\u16fb")
        buf.write(u"\3\2\2\2\u1700\u16fc\3\2\2\2\u1700\u16fd\3\2\2\2\u1700")
        buf.write(u"\u16fe\3\2\2\2\u1700\u16ff\3\2\2\2\u1701\u0423\3\2\2")
        buf.write(u"\2\u1702\u1718\5\u046a\u0236\2\u1703\u1705\5\u0452\u022a")
        buf.write(u"\2\u1704\u1703\3\2\2\2\u1705\u1708\3\2\2\2\u1706\u1704")
        buf.write(u"\3\2\2\2\u1706\u1707\3\2\2\2\u1707\u170a\3\2\2\2\u1708")
        buf.write(u"\u1706\3\2\2\2\u1709\u170b\5\u0454\u022b\2\u170a\u1709")
        buf.write(u"\3\2\2\2\u170a\u170b\3\2\2\2\u170b\u170f\3\2\2\2\u170c")
        buf.write(u"\u170e\5\u0426\u0214\2\u170d\u170c\3\2\2\2\u170e\u1711")
        buf.write(u"\3\2\2\2\u170f\u170d\3\2\2\2\u170f\u1710\3\2\2\2\u1710")
        buf.write(u"\u1719\3\2\2\2\u1711\u170f\3\2\2\2\u1712\u1714\5\u0456")
        buf.write(u"\u022c\2\u1713\u1712\3\2\2\2\u1714\u1717\3\2\2\2\u1715")
        buf.write(u"\u1713\3\2\2\2\u1715\u1716\3\2\2\2\u1716\u1719\3\2\2")
        buf.write(u"\2\u1717\u1715\3\2\2\2\u1718\u1706\3\2\2\2\u1718\u1715")
        buf.write(u"\3\2\2\2\u1719\u0425\3\2\2\2\u171a\u171b\7\u0225\2\2")
        buf.write(u"\u171b\u1722\5\u0442\u0222\2\u171c\u171e\7\u0218\2\2")
        buf.write(u"\u171d\u171c\3\2\2\2\u171d\u171e\3\2\2\2\u171e\u171f")
        buf.write(u"\3\2\2\2\u171f\u1721\5\u0442\u0222\2\u1720\u171d\3\2")
        buf.write(u"\2\2\u1721\u1724\3\2\2\2\u1722\u1720\3\2\2\2\u1722\u1723")
        buf.write(u"\3\2\2\2\u1723\u1725\3\2\2\2\u1724\u1722\3\2\2\2\u1725")
        buf.write(u"\u1726\7\u022c\2\2\u1726\u0427\3\2\2\2\u1727\u172b\5")
        buf.write(u"\u042a\u0216\2\u1728\u172b\5\u042c\u0217\2\u1729\u172b")
        buf.write(u"\5\u042e\u0218\2\u172a\u1727\3\2\2\2\u172a\u1728\3\2")
        buf.write(u"\2\2\u172a\u1729\3\2\2\2\u172b\u0429\3\2\2\2\u172c\u172e")
        buf.write(u"\5\u040c\u0207\2\u172d\u172f\7\u0104\2\2\u172e\u172d")
        buf.write(u"\3\2\2\2\u172e\u172f\3\2\2\2\u172f\u1731\3\2\2\2\u1730")
        buf.write(u"\u1732\7\u013e\2\2\u1731\u1730\3\2\2\2\u1731\u1732\3")
        buf.write(u"\2\2\2\u1732\u1733\3\2\2\2\u1733\u1734\tE\2\2\u1734\u042b")
        buf.write(u"\3\2\2\2\u1735\u1736\5\u040c\u0207\2\u1736\u1737\5\u0432")
        buf.write(u"\u021a\2\u1737\u1738\5\u040c\u0207\2\u1738\u042d\3\2")
        buf.write(u"\2\2\u1739\u173a\5\u040c\u0207\2\u173a\u173b\5\u0432")
        buf.write(u"\u021a\2\u173b\u173c\7\u0225\2\2\u173c\u173d\5\u0430")
        buf.write(u"\u0219\2\u173d\u173e\7\u022c\2\2\u173e\u042f\3\2\2\2")
        buf.write(u"\u173f\u1742\5\u040c\u0207\2\u1740\u1741\tD\2\2\u1741")
        buf.write(u"\u1743\5\u040c\u0207\2\u1742\u1740\3\2\2\2\u1743\u1744")
        buf.write(u"\3\2\2\2\u1744\u1742\3\2\2\2\u1744\u1745\3\2\2\2\u1745")
        buf.write(u"\u0431\3\2\2\2\u1746\u1748\t\n\2\2\u1747\u1746\3\2\2")
        buf.write(u"\2\u1747\u1748\3\2\2\2\u1748\u1772\3\2\2\2\u1749\u174b")
        buf.write(u"\7\u013e\2\2\u174a\u1749\3\2\2\2\u174a\u174b\3\2\2\2")
        buf.write(u"\u174b\u175b\3\2\2\2\u174c\u174e\7\u00e7\2\2\u174d\u174f")
        buf.write(u"\7\u01e6\2\2\u174e\u174d\3\2\2\2\u174e\u174f\3\2\2\2")
        buf.write(u"\u174f\u175c\3\2\2\2\u1750\u175c\7\u0227\2\2\u1751\u1753")
        buf.write(u"\7\u0115\2\2\u1752\u1754\7\u01e6\2\2\u1753\u1752\3\2")
        buf.write(u"\2\2\u1753\u1754\3\2\2\2\u1754\u175c\3\2\2\2\u1755\u175c")
        buf.write(u"\7\u0223\2\2\u1756\u1758\7\u00c0\2\2\u1757\u1759\7\u01f0")
        buf.write(u"\2\2\u1758\u1757\3\2\2\2\u1758\u1759\3\2\2\2\u1759\u175c")
        buf.write(u"\3\2\2\2\u175a\u175c\7\u021f\2\2\u175b\u174c\3\2\2\2")
        buf.write(u"\u175b\u1750\3\2\2\2\u175b\u1751\3\2\2\2\u175b\u1755")
        buf.write(u"\3\2\2\2\u175b\u1756\3\2\2\2\u175b\u175a\3\2\2\2\u175c")
        buf.write(u"\u1773\3\2\2\2\u175d\u1773\7\u0229\2\2\u175e\u1760\7")
        buf.write(u"\u00e7\2\2\u175f\u1761\7\u01e6\2\2\u1760\u175f\3\2\2")
        buf.write(u"\2\u1760\u1761\3\2\2\2\u1761\u1762\3\2\2\2\u1762\u1763")
        buf.write(u"\7\u014f\2\2\u1763\u1765\7\u00c0\2\2\u1764\u1766\7\u01f0")
        buf.write(u"\2\2\u1765\u1764\3\2\2\2\u1765\u1766\3\2\2\2\u1766\u1773")
        buf.write(u"\3\2\2\2\u1767\u1773\7\u0228\2\2\u1768\u176a\7\u0115")
        buf.write(u"\2\2\u1769\u176b\7\u01e6\2\2\u176a\u1769\3\2\2\2\u176a")
        buf.write(u"\u176b\3\2\2\2\u176b\u176c\3\2\2\2\u176c\u176d\7\u014f")
        buf.write(u"\2\2\u176d\u176f\7\u00c0\2\2\u176e\u1770\7\u01f0\2\2")
        buf.write(u"\u176f\u176e\3\2\2\2\u176f\u1770\3\2\2\2\u1770\u1773")
        buf.write(u"\3\2\2\2\u1771\u1773\7\u0224\2\2\u1772\u174a\3\2\2\2")
        buf.write(u"\u1772\u175d\3\2\2\2\u1772\u175e\3\2\2\2\u1772\u1767")
        buf.write(u"\3\2\2\2\u1772\u1768\3\2\2\2\u1772\u1771\3\2\2\2\u1773")
        buf.write(u"\u0433\3\2\2\2\u1774\u1776\7\u013e\2\2\u1775\u1774\3")
        buf.write(u"\2\2\2\u1775\u1776\3\2\2\2\u1776\u1778\3\2\2\2\u1777")
        buf.write(u"\u1779\5\u0432\u021a\2\u1778\u1777\3\2\2\2\u1778\u1779")
        buf.write(u"\3\2\2\2\u1779\u1780\3\2\2\2\u177a\u1781\5\u040c\u0207")
        buf.write(u"\2\u177b\u177c\7\u0225\2\2\u177c\u177d\5\u040c\u0207")
        buf.write(u"\2\u177d\u177e\5\u0434\u021b\2\u177e\u177f\7\u022c\2")
        buf.write(u"\2\u177f\u1781\3\2\2\2\u1780\u177a\3\2\2\2\u1780\u177b")
        buf.write(u"\3\2\2\2\u1781\u0435\3\2\2\2\u1782\u1787\5\u0446\u0224")
        buf.write(u"\2\u1783\u1787\5\u0438\u021d\2\u1784\u1787\5\u043a\u021e")
        buf.write(u"\2\u1785\u1787\5\u04a6\u0254\2\u1786\u1782\3\2\2\2\u1786")
        buf.write(u"\u1783\3\2\2\2\u1786\u1784\3\2\2\2\u1786\u1785\3\2\2")
        buf.write(u"\2\u1787\u0437\3\2\2\2\u1788\u1798\5\u0446\u0224\2\u1789")
        buf.write(u"\u178a\7\u0225\2\2\u178a\u1791\5\u0442\u0222\2\u178b")
        buf.write(u"\u178d\7\u0218\2\2\u178c\u178b\3\2\2\2\u178c\u178d\3")
        buf.write(u"\2\2\2\u178d\u178e\3\2\2\2\u178e\u1790\5\u0442\u0222")
        buf.write(u"\2\u178f\u178c\3\2\2\2\u1790\u1793\3\2\2\2\u1791\u178f")
        buf.write(u"\3\2\2\2\u1791\u1792\3\2\2\2\u1792\u1794\3\2\2\2\u1793")
        buf.write(u"\u1791\3\2\2\2\u1794\u1795\7\u022c\2\2\u1795\u1797\3")
        buf.write(u"\2\2\2\u1796\u1789\3\2\2\2\u1797\u179a\3\2\2\2\u1798")
        buf.write(u"\u1796\3\2\2\2\u1798\u1799\3\2\2\2\u1799\u179c\3\2\2")
        buf.write(u"\2\u179a\u1798\3\2\2\2\u179b\u179d\5\u043c\u021f\2\u179c")
        buf.write(u"\u179b\3\2\2\2\u179c\u179d\3\2\2\2\u179d\u0439\3\2\2")
        buf.write(u"\2\u179e\u179f\7\u00df\2\2\u179f\u17af\5\u0474\u023b")
        buf.write(u"\2\u17a0\u17a1\7\u0225\2\2\u17a1\u17a8\5\u0444\u0223")
        buf.write(u"\2\u17a2\u17a4\7\u0218\2\2\u17a3\u17a2\3\2\2\2\u17a3")
        buf.write(u"\u17a4\3\2\2\2\u17a4\u17a5\3\2\2\2\u17a5\u17a7\5\u0444")
        buf.write(u"\u0223\2\u17a6\u17a3\3\2\2\2\u17a7\u17aa\3\2\2\2\u17a8")
        buf.write(u"\u17a6\3\2\2\2\u17a8\u17a9\3\2\2\2\u17a9\u17ab\3\2\2")
        buf.write(u"\2\u17aa\u17a8\3\2\2\2\u17ab\u17ac\7\u022c\2\2\u17ac")
        buf.write(u"\u17ae\3\2\2\2\u17ad\u17a0\3\2\2\2\u17ae\u17b1\3\2\2")
        buf.write(u"\2\u17af\u17ad\3\2\2\2\u17af\u17b0\3\2\2\2\u17b0\u17b3")
        buf.write(u"\3\2\2\2\u17b1\u17af\3\2\2\2\u17b2\u17b4\5\u043c\u021f")
        buf.write(u"\2\u17b3\u17b2\3\2\2\2\u17b3\u17b4\3\2\2\2\u17b4\u043b")
        buf.write(u"\3\2\2\2\u17b5\u17b6\7\u0225\2\2\u17b6\u17b7\5\u043e")
        buf.write(u"\u0220\2\u17b7\u17b9\7\u0217\2\2\u17b8\u17ba\5\u0440")
        buf.write(u"\u0221\2\u17b9\u17b8\3\2\2\2\u17b9\u17ba\3\2\2\2\u17ba")
        buf.write(u"\u17bb\3\2\2\2\u17bb\u17bc\7\u022c\2\2\u17bc\u043d\3")
        buf.write(u"\2\2\2\u17bd\u17be\5\u040c\u0207\2\u17be\u043f\3\2\2")
        buf.write(u"\2\u17bf\u17c0\5\u040c\u0207\2\u17c0\u0441\3\2\2\2\u17c1")
        buf.write(u"\u17cd\7\13\2\2\u17c2\u17cd\5\u049e\u0250\2\u17c3\u17c5")
        buf.write(u"\5\u0446\u0224\2\u17c4\u17c6\5\u049e\u0250\2\u17c5\u17c4")
        buf.write(u"\3\2\2\2\u17c5\u17c6\3\2\2\2\u17c6\u17cd\3\2\2\2\u17c7")
        buf.write(u"\u17c9\5\u0476\u023c\2\u17c8\u17ca\5\u049e\u0250\2\u17c9")
        buf.write(u"\u17c8\3\2\2\2\u17c9\u17ca\3\2\2\2\u17ca\u17cd\3\2\2")
        buf.write(u"\2\u17cb\u17cd\5\u040c\u0207\2\u17cc\u17c1\3\2\2\2\u17cc")
        buf.write(u"\u17c2\3\2\2\2\u17cc\u17c3\3\2\2\2\u17cc\u17c7\3\2\2")
        buf.write(u"\2\u17cc\u17cb\3\2\2\2\u17cd\u0443\3\2\2\2\u17ce\u17da")
        buf.write(u"\5\u0498\u024d\2\u17cf\u17da\5\u0436\u021c\2\u17d0\u17d2")
        buf.write(u"\5\u0446\u0224\2\u17d1\u17d3\5\u049e\u0250\2\u17d2\u17d1")
        buf.write(u"\3\2\2\2\u17d2\u17d3\3\2\2\2\u17d3\u17da\3\2\2\2\u17d4")
        buf.write(u"\u17d6\5\u0476\u023c\2\u17d5\u17d7\5\u049e\u0250\2\u17d6")
        buf.write(u"\u17d5\3\2\2\2\u17d6\u17d7\3\2\2\2\u17d7\u17da\3\2\2")
        buf.write(u"\2\u17d8\u17da\5\u040c\u0207\2\u17d9\u17ce\3\2\2\2\u17d9")
        buf.write(u"\u17cf\3\2\2\2\u17d9\u17d0\3\2\2\2\u17d9\u17d4\3\2\2")
        buf.write(u"\2\u17d9\u17d8\3\2\2\2\u17da\u0445\3\2\2\2\u17db\u17e0")
        buf.write(u"\5\u0448\u0225\2\u17dc\u17e0\5\u044a\u0226\2\u17dd\u17e0")
        buf.write(u"\5\u044c\u0227\2\u17de\u17e0\5\u044e\u0228\2\u17df\u17db")
        buf.write(u"\3\2\2\2\u17df\u17dc\3\2\2\2\u17df\u17dd\3\2\2\2\u17df")
        buf.write(u"\u17de\3\2\2\2\u17e0\u0447\3\2\2\2\u17e1\u17e4\5\u046c")
        buf.write(u"\u0237\2\u17e2\u17e4\5\u046a\u0236\2\u17e3\u17e1\3\2")
        buf.write(u"\2\2\u17e3\u17e2\3\2\2\2\u17e4\u17ee\3\2\2\2\u17e5\u17e7")
        buf.write(u"\5\u0450\u0229\2\u17e6\u17e5\3\2\2\2\u17e7\u17e8\3\2")
        buf.write(u"\2\2\u17e8\u17e6\3\2\2\2\u17e8\u17e9\3\2\2\2\u17e9\u17eb")
        buf.write(u"\3\2\2\2\u17ea\u17ec\5\u0454\u022b\2\u17eb\u17ea\3\2")
        buf.write(u"\2\2\u17eb\u17ec\3\2\2\2\u17ec\u17ef\3\2\2\2\u17ed\u17ef")
        buf.write(u"\5\u0454\u022b\2\u17ee\u17e6\3\2\2\2\u17ee\u17ed\3\2")
        buf.write(u"\2\2\u17ee\u17ef\3\2\2\2\u17ef\u0449\3\2\2\2\u17f0\u17f1")
        buf.write(u"\5\u0480\u0241\2\u17f1\u17f2\5\u0458\u022d\2\u17f2\u044b")
        buf.write(u"\3\2\2\2\u17f3\u17f4\5\u0494\u024b\2\u17f4\u17f5\5\u045a")
        buf.write(u"\u022e\2\u17f5\u044d\3\2\2\2\u17f6\u17f7\7\u011c\2\2")
        buf.write(u"\u17f7\u17f8\5\u0454\u022b\2\u17f8\u044f\3\2\2\2\u17f9")
        buf.write(u"\u17fc\5\u0452\u022a\2\u17fa\u17fc\5\u045c\u022f\2\u17fb")
        buf.write(u"\u17f9\3\2\2\2\u17fb\u17fa\3\2\2\2\u17fc\u0451\3\2\2")
        buf.write(u"\2\u17fd\u17fe\tF\2\2\u17fe\u17ff\5\u046c\u0237\2\u17ff")
        buf.write(u"\u0453\3\2\2\2\u1800\u1801\tF\2\2\u1801\u1802\5\u0472")
        buf.write(u"\u023a\2\u1802\u0455\3\2\2\2\u1803\u1804\tF\2\2\u1804")
        buf.write(u"\u1805\5\u047e\u0240\2\u1805\u0457\3\2\2\2\u1806\u1807")
        buf.write(u"\tF\2\2\u1807\u1808\5\u048e\u0248\2\u1808\u0459\3\2\2")
        buf.write(u"\2\u1809\u180a\tF\2\2\u180a\u180b\5\u047a\u023e\2\u180b")
        buf.write(u"\u045b\3\2\2\2\u180c\u180d\tF\2\2\u180d\u180e\5\u0438")
        buf.write(u"\u021d\2\u180e\u045d\3\2\2\2\u180f\u1810\5\u0496\u024c")
        buf.write(u"\2\u1810\u045f\3\2\2\2\u1811\u1812\5\u0490\u0249\2\u1812")
        buf.write(u"\u0461\3\2\2\2\u1813\u1814\5\u0484\u0243\2\u1814\u0463")
        buf.write(u"\3\2\2\2\u1815\u1816\5\u0496\u024c\2\u1816\u0465\3\2")
        buf.write(u"\2\2\u1817\u1818\5\u0496\u024c\2\u1818\u0467\3\2\2\2")
        buf.write(u"\u1819\u181a\5\u0490\u0249\2\u181a\u0469\3\2\2\2\u181b")
        buf.write(u"\u181c\5\u0496\u024c\2\u181c\u046b\3\2\2\2\u181d\u181e")
        buf.write(u"\5\u0496\u024c\2\u181e\u046d\3\2\2\2\u181f\u1823\7\u00d6")
        buf.write(u"\2\2\u1820\u1823\7p\2\2\u1821\u1823\5\u046c\u0237\2\u1822")
        buf.write(u"\u181f\3\2\2\2\u1822\u1820\3\2\2\2\u1822\u1821\3\2\2")
        buf.write(u"\2\u1823\u046f\3\2\2\2\u1824\u1825\5\u0490\u0249\2\u1825")
        buf.write(u"\u0471\3\2\2\2\u1826\u1827\5\u0496\u024c\2\u1827\u0473")
        buf.write(u"\3\2\2\2\u1828\u182f\7\u0100\2\2\u1829\u182f\7\u0113")
        buf.write(u"\2\2\u182a\u182f\7\u0177\2\2\u182b\u182f\7\u01d7\2\2")
        buf.write(u"\u182c\u182f\7\u0208\2\2\u182d\u182f\5\u0496\u024c\2")
        buf.write(u"\u182e\u1828\3\2\2\2\u182e\u1829\3\2\2\2\u182e\u182a")
        buf.write(u"\3\2\2\2\u182e\u182b\3\2\2\2\u182e\u182c\3\2\2\2\u182e")
        buf.write(u"\u182d\3\2\2\2\u182f\u0475\3\2\2\2\u1830\u1831\5\u0496")
        buf.write(u"\u024c\2\u1831\u0477\3\2\2\2\u1832\u1833\5\u0490\u0249")
        buf.write(u"\2\u1833\u0479\3\2\2\2\u1834\u1835\5\u0496\u024c\2\u1835")
        buf.write(u"\u047b\3\2\2\2\u1836\u1837\5\u0496\u024c\2\u1837\u047d")
        buf.write(u"\3\2\2\2\u1838\u1839\5\u0496\u024c\2\u1839\u047f\3\2")
        buf.write(u"\2\2\u183a\u183d\5\u0496\u024c\2\u183b\u183d\5\u049e")
        buf.write(u"\u0250\2\u183c\u183a\3\2\2\2\u183c\u183b\3\2\2\2\u183d")
        buf.write(u"\u0481\3\2\2\2\u183e\u1840\5\u0480\u0241\2\u183f\u1841")
        buf.write(u"\5\u0458\u022d\2\u1840\u183f\3\2\2\2\u1840\u1841\3\2")
        buf.write(u"\2\2\u1841\u1844\3\2\2\2\u1842\u1844\5\u048e\u0248\2")
        buf.write(u"\u1843\u183e\3\2\2\2\u1843\u1842\3\2\2\2\u1844\u0483")
        buf.write(u"\3\2\2\2\u1845\u1848\7\u022e\2\2\u1846\u1848\5\u0496")
        buf.write(u"\u024c\2\u1847\u1845\3\2\2\2\u1847\u1846\3\2\2\2\u1848")
        buf.write(u"\u0485\3\2\2\2\u1849\u184a\5\u0446\u0224\2\u184a\u0487")
        buf.write(u"\3\2\2\2\u184b\u184c\5\u0446\u0224\2\u184c\u0489\3\2")
        buf.write(u"\2\2\u184d\u184e\5\u0496\u024c\2\u184e\u048b\3\2\2\2")
        buf.write(u"\u184f\u1850\5\u0496\u024c\2\u1850\u048d\3\2\2\2\u1851")
        buf.write(u"\u1854\5\u0496\u024c\2\u1852\u1854\5\u049e\u0250\2\u1853")
        buf.write(u"\u1851\3\2\2\2\u1853\u1852\3\2\2\2\u1854\u048f\3\2\2")
        buf.write(u"\2\u1855\u1856\5\u0496\u024c\2\u1856\u0491\3\2\2\2\u1857")
        buf.write(u"\u1858\5\u0496\u024c\2\u1858\u0493\3\2\2\2\u1859\u185a")
        buf.write(u"\5\u0496\u024c\2\u185a\u0495\3\2\2\2\u185b\u185c\tG\2")
        buf.write(u"\2\u185c\u0497\3\2\2\2\u185d\u1864\7\u022e\2\2\u185e")
        buf.write(u"\u1864\5\u04a4\u0253\2\u185f\u1864\5\u049c\u024f\2\u1860")
        buf.write(u"\u1864\5\u049a\u024e\2\u1861\u1864\5\u04a0\u0251\2\u1862")
        buf.write(u"\u1864\5\u04a2\u0252\2\u1863\u185d\3\2\2\2\u1863\u185e")
        buf.write(u"\3\2\2\2\u1863\u185f\3\2\2\2\u1863\u1860\3\2\2\2\u1863")
        buf.write(u"\u1861\3\2\2\2\u1863\u1862\3\2\2\2\u1864\u0499\3\2\2")
        buf.write(u"\2\u1865\u1866\tH\2\2\u1866\u049b\3\2\2\2\u1867\u186b")
        buf.write(u"\7\u0233\2\2\u1868\u186b\7\u0210\2\2\u1869\u186b\5\u049e")
        buf.write(u"\u0250\2\u186a\u1867\3\2\2\2\u186a\u1868\3\2\2\2\u186a")
        buf.write(u"\u1869\3\2\2\2\u186b\u049d\3\2\2\2\u186c\u186d\tI\2\2")
        buf.write(u"\u186d\u049f\3\2\2\2\u186e\u186f\7\u008f\2\2\u186f\u1872")
        buf.write(u"\7\u0225\2\2\u1870\u1873\5\u0496\u024c\2\u1871\u1873")
        buf.write(u"\5\u0498\u024d\2\u1872\u1870\3\2\2\2\u1872\u1871\3\2")
        buf.write(u"\2\2\u1873\u1874\3\2\2\2\u1874\u1875\7\u022c\2\2\u1875")
        buf.write(u"\u04a1\3\2\2\2\u1876\u1877\7\u0090\2\2\u1877\u187a\7")
        buf.write(u"\u0225\2\2\u1878\u187b\5\u0496\u024c\2\u1879\u187b\5")
        buf.write(u"\u0498\u024d\2\u187a\u1878\3\2\2\2\u187a\u1879\3\2\2")
        buf.write(u"\2\u187b\u187c\3\2\2\2\u187c\u187d\7\u022c\2\2\u187d")
        buf.write(u"\u04a3\3\2\2\2\u187e\u187f\7\13\2\2\u187f\u188e\5\u0498")
        buf.write(u"\u024d\2\u1880\u188e\7\u00ec\2\2\u1881\u188e\7\u00ed")
        buf.write(u"\2\2\u1882\u188e\7\u0129\2\2\u1883\u188e\7\u012a\2\2")
        buf.write(u"\u1884\u188e\7\u013f\2\2\u1885\u188e\7\u0140\2\2\u1886")
        buf.write(u"\u188e\7\u0175\2\2\u1887\u188e\7\u0176\2\2\u1888\u188e")
        buf.write(u"\7\u01c8\2\2\u1889\u188e\7\u01c9\2\2\u188a\u188e\7\u0210")
        buf.write(u"\2\2\u188b\u188e\7\u0212\2\2\u188c\u188e\7\u0213\2\2")
        buf.write(u"\u188d\u187e\3\2\2\2\u188d\u1880\3\2\2\2\u188d\u1881")
        buf.write(u"\3\2\2\2\u188d\u1882\3\2\2\2\u188d\u1883\3\2\2\2\u188d")
        buf.write(u"\u1884\3\2\2\2\u188d\u1885\3\2\2\2\u188d\u1886\3\2\2")
        buf.write(u"\2\u188d\u1887\3\2\2\2\u188d\u1888\3\2\2\2\u188d\u1889")
        buf.write(u"\3\2\2\2\u188d\u188a\3\2\2\2\u188d\u188b\3\2\2\2\u188d")
        buf.write(u"\u188c\3\2\2\2\u188e\u04a5\3\2\2\2\u188f\u1890\7\7\2")
        buf.write(u"\2\u1890\u1891\7\u0149\2\2\u1891\u18b1\5\u0436\u021c")
        buf.write(u"\2\u1892\u18b1\7s\2\2\u1893\u18b1\7v\2\2\u1894\u18b1")
        buf.write(u"\7w\2\2\u1895\u18b1\7{\2\2\u1896\u18b1\7|\2\2\u1897\u18b1")
        buf.write(u"\7}\2\2\u1898\u18b1\7~\2\2\u1899\u18b1\7\177\2\2\u189a")
        buf.write(u"\u18b1\7\u0080\2\2\u189b\u18b1\7\u0081\2\2\u189c\u189e")
        buf.write(u"\7\u0113\2\2\u189d\u189f\7\u0149\2\2\u189e\u189d\3\2")
        buf.write(u"\2\2\u189e\u189f\3\2\2\2\u189f\u18a0\3\2\2\2\u18a0\u18b1")
        buf.write(u"\5\u0436\u021c\2\u18a1\u18b1\7\u011c\2\2\u18a2\u18b1")
        buf.write(u"\7\u011f\2\2\u18a3\u18b1\7\u015b\2\2\u18a4\u18b1\7\u019a")
        buf.write(u"\2\2\u18a5\u18b1\7\u01b9\2\2\u18a6\u18b1\7\u01ba\2\2")
        buf.write(u"\u18a7\u18b1\7\u01bf\2\2\u18a8\u18b1\7\u01c0\2\2\u18a9")
        buf.write(u"\u18b1\7\u01c1\2\2\u18aa\u18b1\7\u01c3\2\2\u18ab\u18b1")
        buf.write(u"\7\u01c4\2\2\u18ac\u18b1\7\u01c5\2\2\u18ad\u18b1\7\u01de")
        buf.write(u"\2\2\u18ae\u18b1\7\u01ec\2\2\u18af\u18b1\7\u0208\2\2")
        buf.write(u"\u18b0\u188f\3\2\2\2\u18b0\u1892\3\2\2\2\u18b0\u1893")
        buf.write(u"\3\2\2\2\u18b0\u1894\3\2\2\2\u18b0\u1895\3\2\2\2\u18b0")
        buf.write(u"\u1896\3\2\2\2\u18b0\u1897\3\2\2\2\u18b0\u1898\3\2\2")
        buf.write(u"\2\u18b0\u1899\3\2\2\2\u18b0\u189a\3\2\2\2\u18b0\u189b")
        buf.write(u"\3\2\2\2\u18b0\u189c\3\2\2\2\u18b0\u18a1\3\2\2\2\u18b0")
        buf.write(u"\u18a2\3\2\2\2\u18b0\u18a3\3\2\2\2\u18b0\u18a4\3\2\2")
        buf.write(u"\2\u18b0\u18a5\3\2\2\2\u18b0\u18a6\3\2\2\2\u18b0\u18a7")
        buf.write(u"\3\2\2\2\u18b0\u18a8\3\2\2\2\u18b0\u18a9\3\2\2\2\u18b0")
        buf.write(u"\u18aa\3\2\2\2\u18b0\u18ab\3\2\2\2\u18b0\u18ac\3\2\2")
        buf.write(u"\2\u18b0\u18ad\3\2\2\2\u18b0\u18ae\3\2\2\2\u18b0\u18af")
        buf.write(u"\3\2\2\2\u18b1\u04a7\3\2\2\2\u18b2\u18b4\7\u0239\2\2")
        buf.write(u"\u18b3\u18b2\3\2\2\2\u18b4\u18b5\3\2\2\2\u18b5\u18b3")
        buf.write(u"\3\2\2\2\u18b5\u18b6\3\2\2\2\u18b6\u04a9\3\2\2\2\u03de")
        buf.write(u"\u04b0\u04b4\u04b7\u04ba\u04bf\u04c3\u04d1\u04da\u04e0")
        buf.write(u"\u04e4\u04e6\u04e9\u04ec\u04f1\u04f6\u04fb\u0500\u0505")
        buf.write(u"\u050a\u050d\u0510\u0518\u051e\u0526\u052c\u0532\u0536")
        buf.write(u"\u053a\u0542\u0547\u054e\u0552\u0556\u0559\u055d\u0560")
        buf.write(u"\u0564\u0567\u056a\u056d\u0571\u0576\u0579\u057c\u057f")
        buf.write(u"\u0583\u0588\u058c\u0592\u059f\u05a3\u05b0\u05b4\u05ba")
        buf.write(u"\u05bd\u05c8\u05ca\u05d1\u05d3\u05dc\u05e1\u05e5\u05ea")
        buf.write(u"\u05ef\u05f6\u05f9\u05fc\u0601\u0606\u060a\u060e\u0612")
        buf.write(u"\u0615\u0619\u061e\u0622\u0628\u062c\u062e\u0631\u0635")
        buf.write(u"\u063a\u063c\u0641\u0643\u0647\u064b\u064e\u0652\u0655")
        buf.write(u"\u065a\u065d\u0660\u0664\u0667\u066c\u066f\u0672\u0674")
        buf.write(u"\u0678\u067e\u0681\u0684\u0688\u068c\u068f\u0692\u0697")
        buf.write(u"\u069b\u06a0\u06a3\u06a8\u06b0\u06b5\u06b8\u06bb\u06c0")
        buf.write(u"\u06c9\u06ce\u06dd\u06e1\u06ed\u06f1\u06f6\u06f9\u06fc")
        buf.write(u"\u0700\u0702\u0709\u070f\u0712\u0716\u071b\u0720\u0724")
        buf.write(u"\u0727\u072d\u0730\u0734\u0737\u073a\u073f\u0742\u0746")
        buf.write(u"\u0749\u074c\u0750\u0755\u0759\u075d\u0761\u0764\u076d")
        buf.write(u"\u0772\u0776\u077c\u0782\u0784\u078a\u0790\u0793\u079b")
        buf.write(u"\u079f\u07a2\u07a5\u07aa\u07af\u07b2\u07b7\u07bc\u07c1")
        buf.write(u"\u07cb\u07d7\u07df\u07e5\u07ea\u07f1\u07ff\u0802\u0807")
        buf.write(u"\u080d\u0811\u0814\u081d\u0820\u0824\u0827\u082b\u082e")
        buf.write(u"\u0831\u0835\u0838\u083a\u083e\u0841\u0844\u0849\u0851")
        buf.write(u"\u0855\u0857\u085e\u0860\u0867\u086b\u086f\u0874\u0878")
        buf.write(u"\u087a\u087f\u0883\u0887\u088a\u088f\u0895\u0898\u089c")
        buf.write(u"\u08a0\u08a3\u08a6\u08ab\u08ae\u08b1\u08b6\u08ba\u08bd")
        buf.write(u"\u08c5\u08cb\u08cf\u08d1\u08d6\u08de\u08ec\u08f5\u08fd")
        buf.write(u"\u08ff\u0905\u090a\u090d\u0919\u091c\u091e\u0926\u092f")
        buf.write(u"\u0931\u0939\u0943\u0946\u0948\u0950\u095e\u0960\u0965")
        buf.write(u"\u096c\u0971\u0975\u097c\u0983\u098a\u098f\u0993\u0998")
        buf.write(u"\u099c\u09a1\u09a5\u09aa\u09ae\u09b3\u09b7\u09be\u09c9")
        buf.write(u"\u09ce\u09d7\u09dd\u09f1\u09fd\u09ff\u0a18\u0a1c\u0a20")
        buf.write(u"\u0a23\u0a26\u0a2a\u0a2e\u0a31\u0a34\u0a38\u0a3c\u0a40")
        buf.write(u"\u0a44\u0a48\u0a4c\u0a52\u0a58\u0a5f\u0a62\u0a6c\u0a72")
        buf.write(u"\u0a78\u0a7c\u0a7e\u0a83\u0a85\u0a8f\u0a92\u0a96\u0a99")
        buf.write(u"\u0a9e\u0aaa\u0ab1\u0ab6\u0aba\u0abd\u0ac0\u0ac3\u0ac5")
        buf.write(u"\u0aca\u0ad1\u0ad5\u0ad7\u0adb\u0aee\u0af3\u0af6\u0afa")
        buf.write(u"\u0b00\u0b03\u0b0a\u0b17\u0b1a\u0b1c\u0b23\u0b29\u0b2c")
        buf.write(u"\u0b32\u0b36\u0b39\u0b3c\u0b3f\u0b43\u0b47\u0b4b\u0b53")
        buf.write(u"\u0b58\u0b62\u0b68\u0b6c\u0b70\u0b75\u0b79\u0b80\u0b85")
        buf.write(u"\u0b8b\u0b90\u0b93\u0b97\u0ba0\u0ba5\u0baa\u0baf\u0bb3")
        buf.write(u"\u0bba\u0bbe\u0bc2\u0bc4\u0bcb\u0bd0\u0bd4\u0bde\u0be3")
        buf.write(u"\u0be9\u0bec\u0bf2\u0bf5\u0bf9\u0bfb\u0c01\u0c04\u0c08")
        buf.write(u"\u0c0c\u0c0f\u0c12\u0c15\u0c1d\u0c23\u0c2a\u0c2f\u0c32")
        buf.write(u"\u0c35\u0c38\u0c44\u0c48\u0c4e\u0c52\u0c55\u0c5a\u0c62")
        buf.write(u"\u0c67\u0c7e\u0c80\u0c92\u0c95\u0c9b\u0ca2\u0ca7\u0caa")
        buf.write(u"\u0cb2\u0cb7\u0cba\u0cbe\u0cc1\u0cc6\u0ccb\u0cce\u0cd3")
        buf.write(u"\u0cd5\u0cdc\u0cdf\u0ce4\u0ce8\u0cef\u0cf2\u0cf6\u0d08")
        buf.write(u"\u0d0f\u0d12\u0d20\u0d24\u0d26\u0d2b\u0d2d\u0d31\u0d34")
        buf.write(u"\u0d3a\u0d46\u0d49\u0d4f\u0d51\u0d55\u0d75\u0d7a\u0d7e")
        buf.write(u"\u0d82\u0d84\u0d88\u0d8d\u0d92\u0d96\u0d9c\u0da4\u0da7")
        buf.write(u"\u0dab\u0db3\u0dba\u0dbd\u0dc0\u0dc5\u0dc8\u0dcc\u0dcf")
        buf.write(u"\u0dd2\u0dd8\u0ddd\u0de4\u0df3\u0df9\u0e03\u0e09\u0e0e")
        buf.write(u"\u0e14\u0e17\u0e1c\u0e52\u0e5a\u0e5d\u0e60\u0e63\u0e68")
        buf.write(u"\u0e6c\u0e73\u0e79\u0e83\u0e8b\u0e8e\u0e91\u0e94\u0e99")
        buf.write(u"\u0e9f\u0ea4\u0eaa\u0eac\u0eb2\u0ebb\u0ebf\u0ec3\u0ec7")
        buf.write(u"\u0ecb\u0ed3\u0ed9\u0ee0\u0ee3\u0ee6\u0ee9\u0eec\u0eef")
        buf.write(u"\u0ef2\u0ef8\u0efd\u0f00\u0f03\u0f08\u0f0e\u0f13\u0f16")
        buf.write(u"\u0f19\u0f1f\u0f25\u0f27\u0f2b\u0f2e\u0f34\u0f3a\u0f3c")
        buf.write(u"\u0f41\u0f4a\u0f51\u0f57\u0f5d\u0f61\u0f64\u0f67\u0f6c")
        buf.write(u"\u0f6e\u0f71\u0f76\u0f79\u0f7f\u0f85\u0f87\u0f8c\u0f90")
        buf.write(u"\u0f97\u0f9b\u0f9f\u0fa5\u0faa\u0fad\u0fb0\u0fb4\u0fbb")
        buf.write(u"\u0fbe\u0fc1\u0fc4\u0fc9\u0fce\u0fd2\u0fd7\u0fdd\u0fe0")
        buf.write(u"\u0fe3\u0fe6\u0fea\u0fef\u0ff4\u0ff7\u0fff\u1004\u1007")
        buf.write(u"\u100a\u100d\u1010\u1016\u101b\u101e\u1023\u1026\u102c")
        buf.write(u"\u1030\u1034\u103c\u1041\u1045\u104a\u1052\u1054\u105b")
        buf.write(u"\u1061\u1064\u1067\u106d\u1075\u107a\u1082\u1087\u108b")
        buf.write(u"\u108f\u109c\u10a2\u10a7\u10ac\u10b1\u10b5\u10b8\u10bd")
        buf.write(u"\u10c1\u10c5\u10ce\u10d2\u10da\u10de\u10e1\u10e3\u10e9")
        buf.write(u"\u10ec\u10ef\u10f6\u10f9\u1101\u1104\u110a\u110d\u1113")
        buf.write(u"\u1117\u111c\u1122\u112a\u1130\u1135\u1137\u113d\u1142")
        buf.write(u"\u1147\u114d\u1154\u1156\u115c\u1164\u116b\u1171\u1175")
        buf.write(u"\u117a\u117f\u1185\u118b\u1190\u1194\u1198\u119f\u11a2")
        buf.write(u"\u11a7\u11ab\u11b0\u11b4\u11b8\u11bd\u11c0\u11c4\u11c9")
        buf.write(u"\u11cc\u11cf\u11d2\u11d9\u11dd\u11e5\u11ea\u11ee\u11f7")
        buf.write(u"\u1203\u1207\u120b\u1212\u1216\u121e\u1225\u122a\u122d")
        buf.write(u"\u1230\u1233\u1238\u123c\u1243\u1247\u124b\u1252\u1254")
        buf.write(u"\u125a\u125f\u1263\u1269\u126d\u1271\u1277\u127d\u1282")
        buf.write(u"\u1285\u128a\u1292\u1295\u129a\u129e\u12a3\u12ad\u12af")
        buf.write(u"\u12b6\u12bb\u12c8\u12ce\u12d1\u12da\u12df\u12e2\u12e5")
        buf.write(u"\u12e8\u12eb\u12ee\u12f1\u12f4\u12f7\u12fa\u1300\u1305")
        buf.write(u"\u1309\u1310\u1313\u1316\u1319\u1323\u1325\u132e\u1333")
        buf.write(u"\u1337\u133a\u1341\u1349\u134e\u1352\u1355\u135c\u1362")
        buf.write(u"\u1366\u136a\u1372\u1377\u137a\u137e\u1381\u1389\u138c")
        buf.write(u"\u138f\u1392\u1399\u139d\u13a0\u13a5\u13a8\u13b4\u13b7")
        buf.write(u"\u13bc\u13bf\u13c2\u13c6\u13c9\u13cc\u13cf\u13d2\u13e0")
        buf.write(u"\u13e4\u13e8\u13ed\u13f3\u13f6\u13fe\u1401\u1406\u140c")
        buf.write(u"\u1411\u1417\u1422\u1426\u142a\u1431\u1434\u1437\u143a")
        buf.write(u"\u143f\u1443\u1448\u144c\u1450\u1455\u1458\u145c\u145f")
        buf.write(u"\u1462\u1466\u146b\u146e\u1471\u1474\u147b\u147f\u1486")
        buf.write(u"\u148a\u1493\u1498\u149c\u14a5\u14b1\u14b6\u14b9\u14bc")
        buf.write(u"\u14bf\u14c3\u14c7\u14cc\u14d2\u14d8\u14dd\u14e0\u14e8")
        buf.write(u"\u14ee\u14f4\u14f8\u14fb\u14fe\u1501\u1505\u150a\u150f")
        buf.write(u"\u1513\u1517\u151c\u1521\u1527\u1530\u1533\u1536\u1539")
        buf.write(u"\u153e\u1544\u1549\u1551\u155a\u155e\u1562\u1566\u156a")
        buf.write(u"\u1573\u1576\u1579\u157c\u157f\u1586\u1589\u158d\u1590")
        buf.write(u"\u1594\u1598\u159c\u15a2\u15a6\u15a9\u15ad\u15b3\u15b8")
        buf.write(u"\u15bf\u15c6\u15c9\u15cd\u15d2\u15dd\u15df\u15e2\u15e6")
        buf.write(u"\u15eb\u15f1\u15f4\u15f9\u15fe\u1601\u1604\u1607\u160a")
        buf.write(u"\u160d\u1610\u1615\u1619\u161e\u1624\u1627\u162c\u1632")
        buf.write(u"\u1637\u163d\u1641\u1647\u164c\u1652\u1657\u165c\u1662")
        buf.write(u"\u1667\u166b\u1671\u1676\u167c\u1680\u1687\u168c\u1693")
        buf.write(u"\u1697\u169d\u16a2\u16a8\u16af\u16b9\u16c0\u16c6\u16d2")
        buf.write(u"\u16d8\u16e0\u16e2\u16e5\u16f0\u16f4\u16f7\u1700\u1706")
        buf.write(u"\u170a\u170f\u1715\u1718\u171d\u1722\u172a\u172e\u1731")
        buf.write(u"\u1744\u1747\u174a\u174e\u1753\u1758\u175b\u1760\u1765")
        buf.write(u"\u176a\u176f\u1772\u1775\u1778\u1780\u1786\u178c\u1791")
        buf.write(u"\u1798\u179c\u17a3\u17a8\u17af\u17b3\u17b9\u17c5\u17c9")
        buf.write(u"\u17cc\u17d2\u17d6\u17d9\u17df\u17e3\u17e8\u17eb\u17ee")
        buf.write(u"\u17fb\u1822\u182e\u183c\u1840\u1843\u1847\u1853\u1863")
        buf.write(u"\u186a\u1872\u187a\u188d\u189e\u18b0\u18b5")
        return buf.getvalue()


class Cobol85Parser ( Parser ):

    grammarFileName = "Cobol85.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"'&'", u"'*'", u"'**'", 
                     u"':'", u"','", u"'*>CE'", u"'*>'", u"'$'", u"'\"'", 
                     u"<INVALID>", u"'.'", u"'='", u"'*>EXECCICS'", u"'*>EXECSQL'", 
                     u"'*>EXECSQLIMS'", u"'<'", u"'<='", u"'('", u"'-'", 
                     u"'>'", u"'>='", u"'<>'", u"'+'", u"'''", u"')'", u"'/'", 
                     u"<INVALID>", u"'66'", u"'77'", u"'88'", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"', '" ]

    symbolicNames = [ u"<INVALID>", u"ABORT", u"ACCEPT", u"ACCESS", u"ADD", 
                      u"ADDRESS", u"ADVANCING", u"AFTER", u"ALIGNED", u"ALL", 
                      u"ALPHABET", u"ALPHABETIC", u"ALPHABETIC_LOWER", u"ALPHABETIC_UPPER", 
                      u"ALPHANUMERIC", u"ALPHANUMERIC_EDITED", u"ALSO", 
                      u"ALTER", u"ALTERNATE", u"AND", u"ANY", u"ARE", u"AREA", 
                      u"AREAS", u"AS", u"ASCENDING", u"ASCII", u"ASSIGN", 
                      u"ASSOCIATED_DATA", u"ASSOCIATED_DATA_LENGTH", u"AT", 
                      u"ATTRIBUTE", u"AUTHOR", u"AUTO", u"AUTO_SKIP", u"BACKGROUND_COLOR", 
                      u"BACKGROUND_COLOUR", u"BASIS", u"BEEP", u"BEFORE", 
                      u"BEGINNING", u"BELL", u"BINARY", u"BIT", u"BLANK", 
                      u"BLINK", u"BLOB", u"BLOCK", u"BOUNDS", u"BOTTOM", 
                      u"BY", u"BYFUNCTION", u"BYTITLE", u"CALL", u"CANCEL", 
                      u"CAPABLE", u"CCSVERSION", u"CD", u"CF", u"CH", u"CHAINING", 
                      u"CHANGED", u"CHANNEL", u"CHARACTER", u"CHARACTERS", 
                      u"CLASS", u"CLASS_ID", u"CLOB", u"CLOCK_UNITS", u"CLOSE", 
                      u"CLOSE_DISPOSITION", u"COBOL", u"CODE", u"CODE_SET", 
                      u"COLLATING", u"COL", u"COLUMN", u"COM_REG", u"COMMA", 
                      u"COMMITMENT", u"COMMON", u"COMMUNICATION", u"COMP", 
                      u"COMP_1", u"COMP_2", u"COMP_3", u"COMP_4", u"COMP_5", 
                      u"COMPUTATIONAL", u"COMPUTATIONAL_1", u"COMPUTATIONAL_2", 
                      u"COMPUTATIONAL_3", u"COMPUTATIONAL_4", u"COMPUTATIONAL_5", 
                      u"COMPUTE", u"CONFIGURATION", u"CONTAINS", u"CONTENT", 
                      u"CONTINUE", u"CONTROL", u"CONTROL_POINT", u"CONTROLS", 
                      u"CONVENTION", u"CONVERTING", u"COPY", u"CORR", u"CORRESPONDING", 
                      u"COUNT", u"CRUNCH", u"CURRENCY", u"CURSOR", u"DATA", 
                      u"DATA_BASE", u"DATE", u"DATE_COMPILED", u"DATE_WRITTEN", 
                      u"DAY", u"DAY_OF_WEEK", u"DBCS", u"DBCLOB", u"DE", 
                      u"DEBUG_CONTENTS", u"DEBUG_ITEM", u"DEBUG_LINE", u"DEBUG_NAME", 
                      u"DEBUG_SUB_1", u"DEBUG_SUB_2", u"DEBUG_SUB_3", u"DEBUGGING", 
                      u"DECIMAL_POINT", u"DECLARATIVES", u"DEFAULT", u"DEFAULT_DISPLAY", 
                      u"DEFINITION", u"DELETE", u"DELIMITED", u"DELIMITER", 
                      u"DEPENDING", u"DESCENDING", u"DESTINATION", u"DETAIL", 
                      u"DFHRESP", u"DFHVALUE", u"DISABLE", u"DISK", u"DISPLAY", 
                      u"DISPLAY_1", u"DIVIDE", u"DIVISION", u"DONTCARE", 
                      u"DOUBLE", u"DOWN", u"DUPLICATES", u"DYNAMIC", u"EBCDIC", 
                      u"EGCS", u"EGI", u"ELSE", u"EMI", u"EMPTY_CHECK", 
                      u"ENABLE", u"END", u"END_ACCEPT", u"END_ADD", u"END_CALL", 
                      u"END_COMPUTE", u"END_DELETE", u"END_DIVIDE", u"END_EVALUATE", 
                      u"END_IF", u"END_MULTIPLY", u"END_OF_PAGE", u"END_PERFORM", 
                      u"END_READ", u"END_RECEIVE", u"END_REMARKS", u"END_RETURN", 
                      u"END_REWRITE", u"END_SEARCH", u"END_START", u"END_STRING", 
                      u"END_SUBTRACT", u"END_UNSTRING", u"END_WRITE", u"ENDING", 
                      u"ENTER", u"ENTRY", u"ENTRY_PROCEDURE", u"ENVIRONMENT", 
                      u"EOP", u"EQUAL", u"ERASE", u"ERROR", u"EOL", u"EOS", 
                      u"ESCAPE", u"ESI", u"EVALUATE", u"EVENT", u"EVERY", 
                      u"EXCEPTION", u"EXCLUSIVE", u"EXHIBIT", u"EXIT", u"EXPORT", 
                      u"EXTEND", u"EXTENDED", u"EXTERNAL", u"FALSE", u"FD", 
                      u"FILE", u"FILE_CONTROL", u"FILLER", u"FINAL", u"FIRST", 
                      u"FOOTING", u"FOR", u"FOREGROUND_COLOR", u"FOREGROUND_COLOUR", 
                      u"FROM", u"FULL", u"FUNCTION", u"FUNCTIONNAME", u"FUNCTION_POINTER", 
                      u"GENERATE", u"GOBACK", u"GIVING", u"GLOBAL", u"GO", 
                      u"GREATER", u"GRID", u"GROUP", u"HEADING", u"HIGHLIGHT", 
                      u"HIGH_VALUE", u"HIGH_VALUES", u"I_O", u"I_O_CONTROL", 
                      u"ID", u"IDENTIFICATION", u"IF", u"IMPLICIT", u"IMPORT", 
                      u"IN", u"INDEX", u"INDEXED", u"INDICATE", u"INITIAL", 
                      u"INITIALIZE", u"INITIATE", u"INPUT", u"INPUT_OUTPUT", 
                      u"INSPECT", u"INSTALLATION", u"INTEGER", u"INTO", 
                      u"INVALID", u"INVOKE", u"IS", u"JUST", u"JUSTIFIED", 
                      u"KANJI", u"KEPT", u"KEY", u"KEYBOARD", u"LABEL", 
                      u"LANGUAGE", u"LAST", u"LB", u"LD", u"LEADING", u"LEFT", 
                      u"LEFTLINE", u"LENGTH", u"LENGTH_CHECK", u"LESS", 
                      u"LIBACCESS", u"LIBPARAMETER", u"LIBRARY", u"LIMIT", 
                      u"LIMITS", u"LINAGE", u"LINAGE_COUNTER", u"LINE", 
                      u"LINES", u"LINE_COUNTER", u"LINKAGE", u"LIST", u"LOCAL", 
                      u"LOCAL_STORAGE", u"LOCK", u"LONG_DATE", u"LONG_TIME", 
                      u"LOWER", u"LOWLIGHT", u"LOW_VALUE", u"LOW_VALUES", 
                      u"MEMORY", u"MERGE", u"MESSAGE", u"MMDDYYYY", u"MODE", 
                      u"MODULES", u"MORE_LABELS", u"MOVE", u"MULTIPLE", 
                      u"MULTIPLY", u"NAMED", u"NATIONAL", u"NATIONAL_EDITED", 
                      u"NATIVE", u"NEGATIVE", u"NETWORK", u"NEXT", u"NO", 
                      u"NO_ECHO", u"NOT", u"NULL", u"NULLS", u"NUMBER", 
                      u"NUMERIC", u"NUMERIC_DATE", u"NUMERIC_EDITED", u"NUMERIC_TIME", 
                      u"OBJECT_COMPUTER", u"OCCURS", u"ODT", u"OF", u"OFF", 
                      u"OMITTED", u"ON", u"OPEN", u"OPTIONAL", u"OR", u"ORDER", 
                      u"ORDERLY", u"ORGANIZATION", u"OTHER", u"OUTPUT", 
                      u"OVERFLOW", u"OVERLINE", u"OWN", u"PACKED_DECIMAL", 
                      u"PADDING", u"PAGE", u"PAGE_COUNTER", u"PASSWORD", 
                      u"PERFORM", u"PF", u"PH", u"PIC", u"PICTURE", u"PLUS", 
                      u"POINTER", u"POSITION", u"POSITIVE", u"PORT", u"PRINTER", 
                      u"PRINTING", u"PRIVATE", u"PROCEDURE", u"PROCEDURE_POINTER", 
                      u"PROCEDURES", u"PROCEED", u"PROCESS", u"PROGRAM", 
                      u"PROGRAM_ID", u"PROGRAM_LIBRARY", u"PROMPT", u"PURGE", 
                      u"QUEUE", u"QUOTE", u"QUOTES", u"RANDOM", u"READER", 
                      u"REMOTE", u"RD", u"REAL", u"READ", u"RECEIVE", u"RECEIVED", 
                      u"RECORD", u"RECORDING", u"RECORDS", u"RECURSIVE", 
                      u"REDEFINES", u"REEL", u"REF", u"REFERENCE", u"REFERENCES", 
                      u"RELATIVE", u"RELEASE", u"REMAINDER", u"REMARKS", 
                      u"REMOVAL", u"REMOVE", u"RENAMES", u"REPLACE", u"REPLACING", 
                      u"REPORT", u"REPORTING", u"REPORTS", u"REQUIRED", 
                      u"RERUN", u"RESERVE", u"REVERSE_VIDEO", u"RESET", 
                      u"RETURN", u"RETURN_CODE", u"RETURNING", u"REVERSED", 
                      u"REWIND", u"REWRITE", u"RF", u"RH", u"RIGHT", u"ROUNDED", 
                      u"RUN", u"SAME", u"SAVE", u"SCREEN", u"SD", u"SEARCH", 
                      u"SECTION", u"SECURE", u"SECURITY", u"SEGMENT", u"SEGMENT_LIMIT", 
                      u"SELECT", u"SEND", u"SENTENCE", u"SEPARATE", u"SEQUENCE", 
                      u"SEQUENTIAL", u"SET", u"SHARED", u"SHAREDBYALL", 
                      u"SHAREDBYRUNUNIT", u"SHARING", u"SHIFT_IN", u"SHIFT_OUT", 
                      u"SHORT_DATE", u"SIGN", u"SIZE", u"SORT", u"SORT_CONTROL", 
                      u"SORT_CORE_SIZE", u"SORT_FILE_SIZE", u"SORT_MERGE", 
                      u"SORT_MESSAGE", u"SORT_MODE_SIZE", u"SORT_RETURN", 
                      u"SOURCE", u"SOURCE_COMPUTER", u"SPACE", u"SPACES", 
                      u"SPECIAL_NAMES", u"SQL", u"STANDARD", u"STANDARD_1", 
                      u"STANDARD_2", u"START", u"STATUS", u"STOP", u"STRING", 
                      u"SUB_QUEUE_1", u"SUB_QUEUE_2", u"SUB_QUEUE_3", u"SUBTRACT", 
                      u"SUM", u"SUPPRESS", u"SYMBOL", u"SYMBOLIC", u"SYNC", 
                      u"SYNCHRONIZED", u"TABLE", u"TALLY", u"TALLYING", 
                      u"TASK", u"TAPE", u"TERMINAL", u"TERMINATE", u"TEST", 
                      u"TEXT", u"THAN", u"THEN", u"THREAD", u"THREAD_LOCAL", 
                      u"THROUGH", u"THRU", u"TIME", u"TIMER", u"TIMES", 
                      u"TITLE", u"TO", u"TODAYS_DATE", u"TODAYS_NAME", u"TOP", 
                      u"TRAILING", u"TRUE", u"TRUNCATED", u"TYPE", u"TYPEDEF", 
                      u"UNDERLINE", u"UNIT", u"UNSTRING", u"UNTIL", u"UP", 
                      u"UPON", u"USAGE", u"USE", u"USING", u"VALUE", u"VALUES", 
                      u"VARYING", u"VIRTUAL", u"WAIT", u"WHEN", u"WHEN_COMPILED", 
                      u"WITH", u"WORDS", u"WORKING_STORAGE", u"WRITE", u"YEAR", 
                      u"YYYYMMDD", u"YYYYDDD", u"ZERO", u"ZERO_FILL", u"ZEROS", 
                      u"ZEROES", u"AMPCHAR", u"ASTERISKCHAR", u"DOUBLEASTERISKCHAR", 
                      u"COLONCHAR", u"COMMACHAR", u"COMMENTENTRYTAG", u"COMMENTTAG", 
                      u"DOLLARCHAR", u"DOUBLEQUOTE", u"DOT_FS", u"DOT", 
                      u"EQUALCHAR", u"EXECCICSTAG", u"EXECSQLTAG", u"EXECSQLIMSTAG", 
                      u"LESSTHANCHAR", u"LESSTHANOREQUAL", u"LPARENCHAR", 
                      u"MINUSCHAR", u"MORETHANCHAR", u"MORETHANOREQUAL", 
                      u"NOTEQUALCHAR", u"PLUSCHAR", u"SINGLEQUOTE", u"RPARENCHAR", 
                      u"SLASHCHAR", u"NONNUMERICLITERAL", u"LEVEL_NUMBER_66", 
                      u"LEVEL_NUMBER_77", u"LEVEL_NUMBER_88", u"INTEGERLITERAL", 
                      u"NUMERICLITERAL", u"IDENTIFIER", u"NEWLINE", u"EXECCICSLINE", 
                      u"EXECSQLIMSLINE", u"EXECSQLLINE", u"COMMENTENTRYLINE", 
                      u"COMMENTLINE", u"WS", u"SEPARATOR" ]

    RULE_startRule = 0
    RULE_compilationUnit = 1
    RULE_programUnit = 2
    RULE_endProgramStatement = 3
    RULE_identificationDivision = 4
    RULE_identificationDivisionBody = 5
    RULE_programIdParagraph = 6
    RULE_authorParagraph = 7
    RULE_installationParagraph = 8
    RULE_dateWrittenParagraph = 9
    RULE_dateCompiledParagraph = 10
    RULE_securityParagraph = 11
    RULE_remarksParagraph = 12
    RULE_environmentDivision = 13
    RULE_environmentDivisionBody = 14
    RULE_configurationSection = 15
    RULE_configurationSectionParagraph = 16
    RULE_sourceComputerParagraph = 17
    RULE_objectComputerParagraph = 18
    RULE_objectComputerClause = 19
    RULE_memorySizeClause = 20
    RULE_diskSizeClause = 21
    RULE_collatingSequenceClause = 22
    RULE_collatingSequenceClauseAlphanumeric = 23
    RULE_collatingSequenceClauseNational = 24
    RULE_segmentLimitClause = 25
    RULE_characterSetClause = 26
    RULE_specialNamesParagraph = 27
    RULE_specialNameClause = 28
    RULE_alphabetClause = 29
    RULE_alphabetClauseFormat1 = 30
    RULE_alphabetLiterals = 31
    RULE_alphabetThrough = 32
    RULE_alphabetAlso = 33
    RULE_alphabetClauseFormat2 = 34
    RULE_channelClause = 35
    RULE_classClause = 36
    RULE_classClauseThrough = 37
    RULE_classClauseFrom = 38
    RULE_classClauseTo = 39
    RULE_currencySignClause = 40
    RULE_decimalPointClause = 41
    RULE_defaultComputationalSignClause = 42
    RULE_defaultDisplaySignClause = 43
    RULE_environmentSwitchNameClause = 44
    RULE_environmentSwitchNameSpecialNamesStatusPhrase = 45
    RULE_odtClause = 46
    RULE_reserveNetworkClause = 47
    RULE_symbolicCharactersClause = 48
    RULE_symbolicCharacters = 49
    RULE_inputOutputSection = 50
    RULE_inputOutputSectionParagraph = 51
    RULE_fileControlParagraph = 52
    RULE_fileControlEntry = 53
    RULE_selectClause = 54
    RULE_fileControlClause = 55
    RULE_assignClause = 56
    RULE_reserveClause = 57
    RULE_organizationClause = 58
    RULE_paddingCharacterClause = 59
    RULE_recordDelimiterClause = 60
    RULE_accessModeClause = 61
    RULE_recordKeyClause = 62
    RULE_alternateRecordKeyClause = 63
    RULE_passwordClause = 64
    RULE_fileStatusClause = 65
    RULE_relativeKeyClause = 66
    RULE_ioControlParagraph = 67
    RULE_ioControlClause = 68
    RULE_rerunClause = 69
    RULE_rerunEveryRecords = 70
    RULE_rerunEveryOf = 71
    RULE_rerunEveryClock = 72
    RULE_sameClause = 73
    RULE_multipleFileClause = 74
    RULE_multipleFilePosition = 75
    RULE_commitmentControlClause = 76
    RULE_dataDivision = 77
    RULE_dataDivisionSection = 78
    RULE_fileSection = 79
    RULE_fileDescriptionEntry = 80
    RULE_fileDescriptionEntryClause = 81
    RULE_externalClause = 82
    RULE_globalClause = 83
    RULE_blockContainsClause = 84
    RULE_blockContainsTo = 85
    RULE_recordContainsClause = 86
    RULE_recordContainsClauseFormat1 = 87
    RULE_recordContainsClauseFormat2 = 88
    RULE_recordContainsClauseFormat3 = 89
    RULE_recordContainsTo = 90
    RULE_labelRecordsClause = 91
    RULE_valueOfClause = 92
    RULE_valuePair = 93
    RULE_dataRecordsClause = 94
    RULE_linageClause = 95
    RULE_linageAt = 96
    RULE_linageFootingAt = 97
    RULE_linageLinesAtTop = 98
    RULE_linageLinesAtBottom = 99
    RULE_recordingModeClause = 100
    RULE_modeStatement = 101
    RULE_codeSetClause = 102
    RULE_reportClause = 103
    RULE_dataBaseSection = 104
    RULE_dataBaseSectionEntry = 105
    RULE_workingStorageSection = 106
    RULE_linkageSection = 107
    RULE_communicationSection = 108
    RULE_communicationDescriptionEntry = 109
    RULE_communicationDescriptionEntryFormat1 = 110
    RULE_communicationDescriptionEntryFormat2 = 111
    RULE_communicationDescriptionEntryFormat3 = 112
    RULE_destinationCountClause = 113
    RULE_destinationTableClause = 114
    RULE_endKeyClause = 115
    RULE_errorKeyClause = 116
    RULE_messageCountClause = 117
    RULE_messageDateClause = 118
    RULE_messageTimeClause = 119
    RULE_statusKeyClause = 120
    RULE_symbolicDestinationClause = 121
    RULE_symbolicQueueClause = 122
    RULE_symbolicSourceClause = 123
    RULE_symbolicTerminalClause = 124
    RULE_symbolicSubQueueClause = 125
    RULE_textLengthClause = 126
    RULE_localStorageSection = 127
    RULE_screenSection = 128
    RULE_screenDescriptionEntry = 129
    RULE_screenDescriptionBlankClause = 130
    RULE_screenDescriptionBellClause = 131
    RULE_screenDescriptionBlinkClause = 132
    RULE_screenDescriptionEraseClause = 133
    RULE_screenDescriptionLightClause = 134
    RULE_screenDescriptionGridClause = 135
    RULE_screenDescriptionReverseVideoClause = 136
    RULE_screenDescriptionUnderlineClause = 137
    RULE_screenDescriptionSizeClause = 138
    RULE_screenDescriptionLineClause = 139
    RULE_screenDescriptionColumnClause = 140
    RULE_screenDescriptionForegroundColorClause = 141
    RULE_screenDescriptionBackgroundColorClause = 142
    RULE_screenDescriptionControlClause = 143
    RULE_screenDescriptionValueClause = 144
    RULE_screenDescriptionPictureClause = 145
    RULE_screenDescriptionFromClause = 146
    RULE_screenDescriptionToClause = 147
    RULE_screenDescriptionUsingClause = 148
    RULE_screenDescriptionUsageClause = 149
    RULE_screenDescriptionBlankWhenZeroClause = 150
    RULE_screenDescriptionJustifiedClause = 151
    RULE_screenDescriptionSignClause = 152
    RULE_screenDescriptionAutoClause = 153
    RULE_screenDescriptionSecureClause = 154
    RULE_screenDescriptionRequiredClause = 155
    RULE_screenDescriptionPromptClause = 156
    RULE_screenDescriptionPromptOccursClause = 157
    RULE_screenDescriptionFullClause = 158
    RULE_screenDescriptionZeroFillClause = 159
    RULE_reportSection = 160
    RULE_reportDescription = 161
    RULE_reportDescriptionEntry = 162
    RULE_reportDescriptionGlobalClause = 163
    RULE_reportDescriptionPageLimitClause = 164
    RULE_reportDescriptionHeadingClause = 165
    RULE_reportDescriptionFirstDetailClause = 166
    RULE_reportDescriptionLastDetailClause = 167
    RULE_reportDescriptionFootingClause = 168
    RULE_reportGroupDescriptionEntry = 169
    RULE_reportGroupDescriptionEntryFormat1 = 170
    RULE_reportGroupDescriptionEntryFormat2 = 171
    RULE_reportGroupDescriptionEntryFormat3 = 172
    RULE_reportGroupBlankWhenZeroClause = 173
    RULE_reportGroupColumnNumberClause = 174
    RULE_reportGroupIndicateClause = 175
    RULE_reportGroupJustifiedClause = 176
    RULE_reportGroupLineNumberClause = 177
    RULE_reportGroupLineNumberNextPage = 178
    RULE_reportGroupLineNumberPlus = 179
    RULE_reportGroupNextGroupClause = 180
    RULE_reportGroupNextGroupPlus = 181
    RULE_reportGroupNextGroupNextPage = 182
    RULE_reportGroupPictureClause = 183
    RULE_reportGroupResetClause = 184
    RULE_reportGroupSignClause = 185
    RULE_reportGroupSourceClause = 186
    RULE_reportGroupSumClause = 187
    RULE_reportGroupTypeClause = 188
    RULE_reportGroupTypeReportHeading = 189
    RULE_reportGroupTypePageHeading = 190
    RULE_reportGroupTypeControlHeading = 191
    RULE_reportGroupTypeDetail = 192
    RULE_reportGroupTypeControlFooting = 193
    RULE_reportGroupUsageClause = 194
    RULE_reportGroupTypePageFooting = 195
    RULE_reportGroupTypeReportFooting = 196
    RULE_reportGroupValueClause = 197
    RULE_programLibrarySection = 198
    RULE_libraryDescriptionEntry = 199
    RULE_libraryDescriptionEntryFormat1 = 200
    RULE_libraryDescriptionEntryFormat2 = 201
    RULE_libraryAttributeClauseFormat1 = 202
    RULE_libraryAttributeClauseFormat2 = 203
    RULE_libraryAttributeFunction = 204
    RULE_libraryAttributeParameter = 205
    RULE_libraryAttributeTitle = 206
    RULE_libraryEntryProcedureClauseFormat1 = 207
    RULE_libraryEntryProcedureClauseFormat2 = 208
    RULE_libraryEntryProcedureForClause = 209
    RULE_libraryEntryProcedureGivingClause = 210
    RULE_libraryEntryProcedureUsingClause = 211
    RULE_libraryEntryProcedureUsingName = 212
    RULE_libraryEntryProcedureWithClause = 213
    RULE_libraryEntryProcedureWithName = 214
    RULE_libraryIsCommonClause = 215
    RULE_libraryIsGlobalClause = 216
    RULE_dataDescriptionEntry = 217
    RULE_dataDescriptionEntryFormat1 = 218
    RULE_dataDescriptionEntryFormat2 = 219
    RULE_dataDescriptionEntryFormat3 = 220
    RULE_dataDescriptionEntryExecSql = 221
    RULE_dataAlignedClause = 222
    RULE_dataBlankWhenZeroClause = 223
    RULE_dataCommonOwnLocalClause = 224
    RULE_dataExternalClause = 225
    RULE_dataGlobalClause = 226
    RULE_dataIntegerStringClause = 227
    RULE_dataJustifiedClause = 228
    RULE_dataOccursClause = 229
    RULE_dataOccursTo = 230
    RULE_dataOccursSort = 231
    RULE_dataPictureClause = 232
    RULE_pictureString = 233
    RULE_pictureChars = 234
    RULE_pictureCardinality = 235
    RULE_dataReceivedByClause = 236
    RULE_dataRecordAreaClause = 237
    RULE_dataRedefinesClause = 238
    RULE_dataRenamesClause = 239
    RULE_dataSignClause = 240
    RULE_dataSynchronizedClause = 241
    RULE_dataThreadLocalClause = 242
    RULE_dataTypeClause = 243
    RULE_dataTypeDefClause = 244
    RULE_dataUsageClause = 245
    RULE_dataUsingClause = 246
    RULE_dataValueClause = 247
    RULE_dataValueInterval = 248
    RULE_dataValueIntervalFrom = 249
    RULE_dataValueIntervalTo = 250
    RULE_dataWithLowerBoundsClause = 251
    RULE_procedureDivision = 252
    RULE_procedureDivisionUsingClause = 253
    RULE_procedureDivisionGivingClause = 254
    RULE_procedureDivisionUsingParameter = 255
    RULE_procedureDivisionByReferencePhrase = 256
    RULE_procedureDivisionByReference = 257
    RULE_procedureDivisionByValuePhrase = 258
    RULE_procedureDivisionByValue = 259
    RULE_procedureDeclaratives = 260
    RULE_procedureDeclarative = 261
    RULE_procedureSectionHeader = 262
    RULE_procedureDivisionBody = 263
    RULE_procedureSection = 264
    RULE_paragraphs = 265
    RULE_paragraph = 266
    RULE_sentence = 267
    RULE_statement = 268
    RULE_acceptStatement = 269
    RULE_acceptFromDateStatement = 270
    RULE_acceptFromMnemonicStatement = 271
    RULE_acceptFromEscapeKeyStatement = 272
    RULE_acceptMessageCountStatement = 273
    RULE_addStatement = 274
    RULE_addToStatement = 275
    RULE_addToGivingStatement = 276
    RULE_addCorrespondingStatement = 277
    RULE_addFrom = 278
    RULE_addTo = 279
    RULE_addToGiving = 280
    RULE_addGiving = 281
    RULE_alteredGoTo = 282
    RULE_alterStatement = 283
    RULE_alterProceedTo = 284
    RULE_callStatement = 285
    RULE_callUsingPhrase = 286
    RULE_callUsingParameter = 287
    RULE_callByReferencePhrase = 288
    RULE_callByReference = 289
    RULE_callByValuePhrase = 290
    RULE_callByValue = 291
    RULE_callByContentPhrase = 292
    RULE_callByContent = 293
    RULE_callGivingPhrase = 294
    RULE_cancelStatement = 295
    RULE_cancelCall = 296
    RULE_closeStatement = 297
    RULE_closeFile = 298
    RULE_closeReelUnitStatement = 299
    RULE_closeRelativeStatement = 300
    RULE_closePortFileIOStatement = 301
    RULE_closePortFileIOUsing = 302
    RULE_closePortFileIOUsingCloseDisposition = 303
    RULE_closePortFileIOUsingAssociatedData = 304
    RULE_closePortFileIOUsingAssociatedDataLength = 305
    RULE_computeStatement = 306
    RULE_computeStore = 307
    RULE_continueStatement = 308
    RULE_deleteStatement = 309
    RULE_disableStatement = 310
    RULE_displayStatement = 311
    RULE_displayOperand = 312
    RULE_displayAt = 313
    RULE_displayUpon = 314
    RULE_displayWith = 315
    RULE_divideStatement = 316
    RULE_divideIntoStatement = 317
    RULE_divideIntoGivingStatement = 318
    RULE_divideByGivingStatement = 319
    RULE_divideGivingPhrase = 320
    RULE_divideInto = 321
    RULE_divideGiving = 322
    RULE_divideRemainder = 323
    RULE_enableStatement = 324
    RULE_entryStatement = 325
    RULE_evaluateStatement = 326
    RULE_evaluateSelect = 327
    RULE_evaluateAlsoSelect = 328
    RULE_evaluateWhenPhrase = 329
    RULE_evaluateWhen = 330
    RULE_evaluateCondition = 331
    RULE_evaluateThrough = 332
    RULE_evaluateAlsoCondition = 333
    RULE_evaluateWhenOther = 334
    RULE_evaluateValue = 335
    RULE_execCicsStatement = 336
    RULE_execSqlStatement = 337
    RULE_execSqlImsStatement = 338
    RULE_exhibitStatement = 339
    RULE_exhibitOperand = 340
    RULE_exitStatement = 341
    RULE_generateStatement = 342
    RULE_gobackStatement = 343
    RULE_goToStatement = 344
    RULE_goToStatementSimple = 345
    RULE_goToDependingOnStatement = 346
    RULE_ifStatement = 347
    RULE_ifThen = 348
    RULE_ifElse = 349
    RULE_initializeStatement = 350
    RULE_initializeReplacingPhrase = 351
    RULE_initializeReplacingBy = 352
    RULE_initiateStatement = 353
    RULE_inspectStatement = 354
    RULE_inspectTallyingPhrase = 355
    RULE_inspectReplacingPhrase = 356
    RULE_inspectTallyingReplacingPhrase = 357
    RULE_inspectConvertingPhrase = 358
    RULE_inspectFor = 359
    RULE_inspectCharacters = 360
    RULE_inspectReplacingCharacters = 361
    RULE_inspectAllLeadings = 362
    RULE_inspectReplacingAllLeadings = 363
    RULE_inspectAllLeading = 364
    RULE_inspectReplacingAllLeading = 365
    RULE_inspectBy = 366
    RULE_inspectTo = 367
    RULE_inspectBeforeAfter = 368
    RULE_mergeStatement = 369
    RULE_mergeOnKeyClause = 370
    RULE_mergeCollatingSequencePhrase = 371
    RULE_mergeCollatingAlphanumeric = 372
    RULE_mergeCollatingNational = 373
    RULE_mergeUsing = 374
    RULE_mergeOutputProcedurePhrase = 375
    RULE_mergeOutputThrough = 376
    RULE_mergeGivingPhrase = 377
    RULE_mergeGiving = 378
    RULE_moveStatement = 379
    RULE_moveToStatement = 380
    RULE_moveToSendingArea = 381
    RULE_moveCorrespondingToStatement = 382
    RULE_moveCorrespondingToSendingArea = 383
    RULE_multiplyStatement = 384
    RULE_multiplyRegular = 385
    RULE_multiplyRegularOperand = 386
    RULE_multiplyGiving = 387
    RULE_multiplyGivingOperand = 388
    RULE_multiplyGivingResult = 389
    RULE_openStatement = 390
    RULE_openInputStatement = 391
    RULE_openInput = 392
    RULE_openOutputStatement = 393
    RULE_openOutput = 394
    RULE_openIOStatement = 395
    RULE_openExtendStatement = 396
    RULE_performStatement = 397
    RULE_performInlineStatement = 398
    RULE_performProcedureStatement = 399
    RULE_performType = 400
    RULE_performTimes = 401
    RULE_performUntil = 402
    RULE_performVarying = 403
    RULE_performVaryingClause = 404
    RULE_performVaryingPhrase = 405
    RULE_performAfter = 406
    RULE_performFrom = 407
    RULE_performBy = 408
    RULE_performTestClause = 409
    RULE_purgeStatement = 410
    RULE_readStatement = 411
    RULE_readInto = 412
    RULE_readWith = 413
    RULE_readKey = 414
    RULE_receiveStatement = 415
    RULE_receiveFromStatement = 416
    RULE_receiveFrom = 417
    RULE_receiveIntoStatement = 418
    RULE_receiveNoData = 419
    RULE_receiveWithData = 420
    RULE_receiveBefore = 421
    RULE_receiveWith = 422
    RULE_receiveThread = 423
    RULE_receiveSize = 424
    RULE_receiveStatus = 425
    RULE_releaseStatement = 426
    RULE_returnStatement = 427
    RULE_returnInto = 428
    RULE_rewriteStatement = 429
    RULE_rewriteFrom = 430
    RULE_searchStatement = 431
    RULE_searchVarying = 432
    RULE_searchWhen = 433
    RULE_sendStatement = 434
    RULE_sendStatementSync = 435
    RULE_sendStatementAsync = 436
    RULE_sendFromPhrase = 437
    RULE_sendWithPhrase = 438
    RULE_sendReplacingPhrase = 439
    RULE_sendAdvancingPhrase = 440
    RULE_sendAdvancingPage = 441
    RULE_sendAdvancingLines = 442
    RULE_sendAdvancingMnemonic = 443
    RULE_setStatement = 444
    RULE_setToStatement = 445
    RULE_setUpDownByStatement = 446
    RULE_setTo = 447
    RULE_setToValue = 448
    RULE_setByValue = 449
    RULE_sortStatement = 450
    RULE_sortOnKeyClause = 451
    RULE_sortDuplicatesPhrase = 452
    RULE_sortCollatingSequencePhrase = 453
    RULE_sortCollatingAlphanumeric = 454
    RULE_sortCollatingNational = 455
    RULE_sortInputProcedurePhrase = 456
    RULE_sortInputThrough = 457
    RULE_sortUsing = 458
    RULE_sortOutputProcedurePhrase = 459
    RULE_sortOutputThrough = 460
    RULE_sortGivingPhrase = 461
    RULE_sortGiving = 462
    RULE_startStatement = 463
    RULE_startKey = 464
    RULE_stopStatement = 465
    RULE_stopStatementGiving = 466
    RULE_stringStatement = 467
    RULE_stringSendingPhrase = 468
    RULE_stringSending = 469
    RULE_stringDelimitedByPhrase = 470
    RULE_stringForPhrase = 471
    RULE_stringIntoPhrase = 472
    RULE_stringWithPointerPhrase = 473
    RULE_subtractStatement = 474
    RULE_subtractFromStatement = 475
    RULE_subtractFromGivingStatement = 476
    RULE_subtractCorrespondingStatement = 477
    RULE_subtractSubtrahend = 478
    RULE_subtractMinuend = 479
    RULE_subtractMinuendGiving = 480
    RULE_subtractGiving = 481
    RULE_subtractMinuendCorresponding = 482
    RULE_terminateStatement = 483
    RULE_unstringStatement = 484
    RULE_unstringSendingPhrase = 485
    RULE_unstringDelimitedByPhrase = 486
    RULE_unstringOrAllPhrase = 487
    RULE_unstringIntoPhrase = 488
    RULE_unstringInto = 489
    RULE_unstringDelimiterIn = 490
    RULE_unstringCountIn = 491
    RULE_unstringWithPointerPhrase = 492
    RULE_unstringTallyingPhrase = 493
    RULE_useStatement = 494
    RULE_useAfterClause = 495
    RULE_useAfterOn = 496
    RULE_useDebugClause = 497
    RULE_useDebugOn = 498
    RULE_writeStatement = 499
    RULE_writeFromPhrase = 500
    RULE_writeAdvancingPhrase = 501
    RULE_writeAdvancingPage = 502
    RULE_writeAdvancingLines = 503
    RULE_writeAdvancingMnemonic = 504
    RULE_writeAtEndOfPagePhrase = 505
    RULE_writeNotAtEndOfPagePhrase = 506
    RULE_atEndPhrase = 507
    RULE_notAtEndPhrase = 508
    RULE_invalidKeyPhrase = 509
    RULE_notInvalidKeyPhrase = 510
    RULE_onOverflowPhrase = 511
    RULE_notOnOverflowPhrase = 512
    RULE_onSizeErrorPhrase = 513
    RULE_notOnSizeErrorPhrase = 514
    RULE_onExceptionClause = 515
    RULE_notOnExceptionClause = 516
    RULE_arithmeticExpression = 517
    RULE_plusMinus = 518
    RULE_multDivs = 519
    RULE_multDiv = 520
    RULE_powers = 521
    RULE_power = 522
    RULE_basis = 523
    RULE_condition = 524
    RULE_andOrCondition = 525
    RULE_combinableCondition = 526
    RULE_simpleCondition = 527
    RULE_classCondition = 528
    RULE_conditionNameReference = 529
    RULE_conditionNameSubscriptReference = 530
    RULE_relationCondition = 531
    RULE_relationSignCondition = 532
    RULE_relationArithmeticComparison = 533
    RULE_relationCombinedComparison = 534
    RULE_relationCombinedCondition = 535
    RULE_relationalOperator = 536
    RULE_abbreviation = 537
    RULE_identifier = 538
    RULE_tableCall = 539
    RULE_functionCall = 540
    RULE_referenceModifier = 541
    RULE_characterPosition = 542
    RULE_length = 543
    RULE_subscript = 544
    RULE_argument = 545
    RULE_qualifiedDataName = 546
    RULE_qualifiedDataNameFormat1 = 547
    RULE_qualifiedDataNameFormat2 = 548
    RULE_qualifiedDataNameFormat3 = 549
    RULE_qualifiedDataNameFormat4 = 550
    RULE_qualifiedInData = 551
    RULE_inData = 552
    RULE_inFile = 553
    RULE_inMnemonic = 554
    RULE_inSection = 555
    RULE_inLibrary = 556
    RULE_inTable = 557
    RULE_alphabetName = 558
    RULE_assignmentName = 559
    RULE_basisName = 560
    RULE_cdName = 561
    RULE_className = 562
    RULE_computerName = 563
    RULE_conditionName = 564
    RULE_dataName = 565
    RULE_dataDescName = 566
    RULE_environmentName = 567
    RULE_fileName = 568
    RULE_functionName = 569
    RULE_indexName = 570
    RULE_languageName = 571
    RULE_libraryName = 572
    RULE_localName = 573
    RULE_mnemonicName = 574
    RULE_paragraphName = 575
    RULE_procedureName = 576
    RULE_programName = 577
    RULE_recordName = 578
    RULE_reportName = 579
    RULE_routineName = 580
    RULE_screenName = 581
    RULE_sectionName = 582
    RULE_systemName = 583
    RULE_symbolicCharacter = 584
    RULE_textName = 585
    RULE_cobolWord = 586
    RULE_literal = 587
    RULE_booleanLiteral = 588
    RULE_numericLiteral = 589
    RULE_integerLiteral = 590
    RULE_cicsDfhRespLiteral = 591
    RULE_cicsDfhValueLiteral = 592
    RULE_figurativeConstant = 593
    RULE_specialRegister = 594
    RULE_commentEntry = 595

    ruleNames =  [ u"startRule", u"compilationUnit", u"programUnit", u"endProgramStatement", 
                   u"identificationDivision", u"identificationDivisionBody", 
                   u"programIdParagraph", u"authorParagraph", u"installationParagraph", 
                   u"dateWrittenParagraph", u"dateCompiledParagraph", u"securityParagraph", 
                   u"remarksParagraph", u"environmentDivision", u"environmentDivisionBody", 
                   u"configurationSection", u"configurationSectionParagraph", 
                   u"sourceComputerParagraph", u"objectComputerParagraph", 
                   u"objectComputerClause", u"memorySizeClause", u"diskSizeClause", 
                   u"collatingSequenceClause", u"collatingSequenceClauseAlphanumeric", 
                   u"collatingSequenceClauseNational", u"segmentLimitClause", 
                   u"characterSetClause", u"specialNamesParagraph", u"specialNameClause", 
                   u"alphabetClause", u"alphabetClauseFormat1", u"alphabetLiterals", 
                   u"alphabetThrough", u"alphabetAlso", u"alphabetClauseFormat2", 
                   u"channelClause", u"classClause", u"classClauseThrough", 
                   u"classClauseFrom", u"classClauseTo", u"currencySignClause", 
                   u"decimalPointClause", u"defaultComputationalSignClause", 
                   u"defaultDisplaySignClause", u"environmentSwitchNameClause", 
                   u"environmentSwitchNameSpecialNamesStatusPhrase", u"odtClause", 
                   u"reserveNetworkClause", u"symbolicCharactersClause", 
                   u"symbolicCharacters", u"inputOutputSection", u"inputOutputSectionParagraph", 
                   u"fileControlParagraph", u"fileControlEntry", u"selectClause", 
                   u"fileControlClause", u"assignClause", u"reserveClause", 
                   u"organizationClause", u"paddingCharacterClause", u"recordDelimiterClause", 
                   u"accessModeClause", u"recordKeyClause", u"alternateRecordKeyClause", 
                   u"passwordClause", u"fileStatusClause", u"relativeKeyClause", 
                   u"ioControlParagraph", u"ioControlClause", u"rerunClause", 
                   u"rerunEveryRecords", u"rerunEveryOf", u"rerunEveryClock", 
                   u"sameClause", u"multipleFileClause", u"multipleFilePosition", 
                   u"commitmentControlClause", u"dataDivision", u"dataDivisionSection", 
                   u"fileSection", u"fileDescriptionEntry", u"fileDescriptionEntryClause", 
                   u"externalClause", u"globalClause", u"blockContainsClause", 
                   u"blockContainsTo", u"recordContainsClause", u"recordContainsClauseFormat1", 
                   u"recordContainsClauseFormat2", u"recordContainsClauseFormat3", 
                   u"recordContainsTo", u"labelRecordsClause", u"valueOfClause", 
                   u"valuePair", u"dataRecordsClause", u"linageClause", 
                   u"linageAt", u"linageFootingAt", u"linageLinesAtTop", 
                   u"linageLinesAtBottom", u"recordingModeClause", u"modeStatement", 
                   u"codeSetClause", u"reportClause", u"dataBaseSection", 
                   u"dataBaseSectionEntry", u"workingStorageSection", u"linkageSection", 
                   u"communicationSection", u"communicationDescriptionEntry", 
                   u"communicationDescriptionEntryFormat1", u"communicationDescriptionEntryFormat2", 
                   u"communicationDescriptionEntryFormat3", u"destinationCountClause", 
                   u"destinationTableClause", u"endKeyClause", u"errorKeyClause", 
                   u"messageCountClause", u"messageDateClause", u"messageTimeClause", 
                   u"statusKeyClause", u"symbolicDestinationClause", u"symbolicQueueClause", 
                   u"symbolicSourceClause", u"symbolicTerminalClause", u"symbolicSubQueueClause", 
                   u"textLengthClause", u"localStorageSection", u"screenSection", 
                   u"screenDescriptionEntry", u"screenDescriptionBlankClause", 
                   u"screenDescriptionBellClause", u"screenDescriptionBlinkClause", 
                   u"screenDescriptionEraseClause", u"screenDescriptionLightClause", 
                   u"screenDescriptionGridClause", u"screenDescriptionReverseVideoClause", 
                   u"screenDescriptionUnderlineClause", u"screenDescriptionSizeClause", 
                   u"screenDescriptionLineClause", u"screenDescriptionColumnClause", 
                   u"screenDescriptionForegroundColorClause", u"screenDescriptionBackgroundColorClause", 
                   u"screenDescriptionControlClause", u"screenDescriptionValueClause", 
                   u"screenDescriptionPictureClause", u"screenDescriptionFromClause", 
                   u"screenDescriptionToClause", u"screenDescriptionUsingClause", 
                   u"screenDescriptionUsageClause", u"screenDescriptionBlankWhenZeroClause", 
                   u"screenDescriptionJustifiedClause", u"screenDescriptionSignClause", 
                   u"screenDescriptionAutoClause", u"screenDescriptionSecureClause", 
                   u"screenDescriptionRequiredClause", u"screenDescriptionPromptClause", 
                   u"screenDescriptionPromptOccursClause", u"screenDescriptionFullClause", 
                   u"screenDescriptionZeroFillClause", u"reportSection", 
                   u"reportDescription", u"reportDescriptionEntry", u"reportDescriptionGlobalClause", 
                   u"reportDescriptionPageLimitClause", u"reportDescriptionHeadingClause", 
                   u"reportDescriptionFirstDetailClause", u"reportDescriptionLastDetailClause", 
                   u"reportDescriptionFootingClause", u"reportGroupDescriptionEntry", 
                   u"reportGroupDescriptionEntryFormat1", u"reportGroupDescriptionEntryFormat2", 
                   u"reportGroupDescriptionEntryFormat3", u"reportGroupBlankWhenZeroClause", 
                   u"reportGroupColumnNumberClause", u"reportGroupIndicateClause", 
                   u"reportGroupJustifiedClause", u"reportGroupLineNumberClause", 
                   u"reportGroupLineNumberNextPage", u"reportGroupLineNumberPlus", 
                   u"reportGroupNextGroupClause", u"reportGroupNextGroupPlus", 
                   u"reportGroupNextGroupNextPage", u"reportGroupPictureClause", 
                   u"reportGroupResetClause", u"reportGroupSignClause", 
                   u"reportGroupSourceClause", u"reportGroupSumClause", 
                   u"reportGroupTypeClause", u"reportGroupTypeReportHeading", 
                   u"reportGroupTypePageHeading", u"reportGroupTypeControlHeading", 
                   u"reportGroupTypeDetail", u"reportGroupTypeControlFooting", 
                   u"reportGroupUsageClause", u"reportGroupTypePageFooting", 
                   u"reportGroupTypeReportFooting", u"reportGroupValueClause", 
                   u"programLibrarySection", u"libraryDescriptionEntry", 
                   u"libraryDescriptionEntryFormat1", u"libraryDescriptionEntryFormat2", 
                   u"libraryAttributeClauseFormat1", u"libraryAttributeClauseFormat2", 
                   u"libraryAttributeFunction", u"libraryAttributeParameter", 
                   u"libraryAttributeTitle", u"libraryEntryProcedureClauseFormat1", 
                   u"libraryEntryProcedureClauseFormat2", u"libraryEntryProcedureForClause", 
                   u"libraryEntryProcedureGivingClause", u"libraryEntryProcedureUsingClause", 
                   u"libraryEntryProcedureUsingName", u"libraryEntryProcedureWithClause", 
                   u"libraryEntryProcedureWithName", u"libraryIsCommonClause", 
                   u"libraryIsGlobalClause", u"dataDescriptionEntry", u"dataDescriptionEntryFormat1", 
                   u"dataDescriptionEntryFormat2", u"dataDescriptionEntryFormat3", 
                   u"dataDescriptionEntryExecSql", u"dataAlignedClause", 
                   u"dataBlankWhenZeroClause", u"dataCommonOwnLocalClause", 
                   u"dataExternalClause", u"dataGlobalClause", u"dataIntegerStringClause", 
                   u"dataJustifiedClause", u"dataOccursClause", u"dataOccursTo", 
                   u"dataOccursSort", u"dataPictureClause", u"pictureString", 
                   u"pictureChars", u"pictureCardinality", u"dataReceivedByClause", 
                   u"dataRecordAreaClause", u"dataRedefinesClause", u"dataRenamesClause", 
                   u"dataSignClause", u"dataSynchronizedClause", u"dataThreadLocalClause", 
                   u"dataTypeClause", u"dataTypeDefClause", u"dataUsageClause", 
                   u"dataUsingClause", u"dataValueClause", u"dataValueInterval", 
                   u"dataValueIntervalFrom", u"dataValueIntervalTo", u"dataWithLowerBoundsClause", 
                   u"procedureDivision", u"procedureDivisionUsingClause", 
                   u"procedureDivisionGivingClause", u"procedureDivisionUsingParameter", 
                   u"procedureDivisionByReferencePhrase", u"procedureDivisionByReference", 
                   u"procedureDivisionByValuePhrase", u"procedureDivisionByValue", 
                   u"procedureDeclaratives", u"procedureDeclarative", u"procedureSectionHeader", 
                   u"procedureDivisionBody", u"procedureSection", u"paragraphs", 
                   u"paragraph", u"sentence", u"statement", u"acceptStatement", 
                   u"acceptFromDateStatement", u"acceptFromMnemonicStatement", 
                   u"acceptFromEscapeKeyStatement", u"acceptMessageCountStatement", 
                   u"addStatement", u"addToStatement", u"addToGivingStatement", 
                   u"addCorrespondingStatement", u"addFrom", u"addTo", u"addToGiving", 
                   u"addGiving", u"alteredGoTo", u"alterStatement", u"alterProceedTo", 
                   u"callStatement", u"callUsingPhrase", u"callUsingParameter", 
                   u"callByReferencePhrase", u"callByReference", u"callByValuePhrase", 
                   u"callByValue", u"callByContentPhrase", u"callByContent", 
                   u"callGivingPhrase", u"cancelStatement", u"cancelCall", 
                   u"closeStatement", u"closeFile", u"closeReelUnitStatement", 
                   u"closeRelativeStatement", u"closePortFileIOStatement", 
                   u"closePortFileIOUsing", u"closePortFileIOUsingCloseDisposition", 
                   u"closePortFileIOUsingAssociatedData", u"closePortFileIOUsingAssociatedDataLength", 
                   u"computeStatement", u"computeStore", u"continueStatement", 
                   u"deleteStatement", u"disableStatement", u"displayStatement", 
                   u"displayOperand", u"displayAt", u"displayUpon", u"displayWith", 
                   u"divideStatement", u"divideIntoStatement", u"divideIntoGivingStatement", 
                   u"divideByGivingStatement", u"divideGivingPhrase", u"divideInto", 
                   u"divideGiving", u"divideRemainder", u"enableStatement", 
                   u"entryStatement", u"evaluateStatement", u"evaluateSelect", 
                   u"evaluateAlsoSelect", u"evaluateWhenPhrase", u"evaluateWhen", 
                   u"evaluateCondition", u"evaluateThrough", u"evaluateAlsoCondition", 
                   u"evaluateWhenOther", u"evaluateValue", u"execCicsStatement", 
                   u"execSqlStatement", u"execSqlImsStatement", u"exhibitStatement", 
                   u"exhibitOperand", u"exitStatement", u"generateStatement", 
                   u"gobackStatement", u"goToStatement", u"goToStatementSimple", 
                   u"goToDependingOnStatement", u"ifStatement", u"ifThen", 
                   u"ifElse", u"initializeStatement", u"initializeReplacingPhrase", 
                   u"initializeReplacingBy", u"initiateStatement", u"inspectStatement", 
                   u"inspectTallyingPhrase", u"inspectReplacingPhrase", 
                   u"inspectTallyingReplacingPhrase", u"inspectConvertingPhrase", 
                   u"inspectFor", u"inspectCharacters", u"inspectReplacingCharacters", 
                   u"inspectAllLeadings", u"inspectReplacingAllLeadings", 
                   u"inspectAllLeading", u"inspectReplacingAllLeading", 
                   u"inspectBy", u"inspectTo", u"inspectBeforeAfter", u"mergeStatement", 
                   u"mergeOnKeyClause", u"mergeCollatingSequencePhrase", 
                   u"mergeCollatingAlphanumeric", u"mergeCollatingNational", 
                   u"mergeUsing", u"mergeOutputProcedurePhrase", u"mergeOutputThrough", 
                   u"mergeGivingPhrase", u"mergeGiving", u"moveStatement", 
                   u"moveToStatement", u"moveToSendingArea", u"moveCorrespondingToStatement", 
                   u"moveCorrespondingToSendingArea", u"multiplyStatement", 
                   u"multiplyRegular", u"multiplyRegularOperand", u"multiplyGiving", 
                   u"multiplyGivingOperand", u"multiplyGivingResult", u"openStatement", 
                   u"openInputStatement", u"openInput", u"openOutputStatement", 
                   u"openOutput", u"openIOStatement", u"openExtendStatement", 
                   u"performStatement", u"performInlineStatement", u"performProcedureStatement", 
                   u"performType", u"performTimes", u"performUntil", u"performVarying", 
                   u"performVaryingClause", u"performVaryingPhrase", u"performAfter", 
                   u"performFrom", u"performBy", u"performTestClause", u"purgeStatement", 
                   u"readStatement", u"readInto", u"readWith", u"readKey", 
                   u"receiveStatement", u"receiveFromStatement", u"receiveFrom", 
                   u"receiveIntoStatement", u"receiveNoData", u"receiveWithData", 
                   u"receiveBefore", u"receiveWith", u"receiveThread", u"receiveSize", 
                   u"receiveStatus", u"releaseStatement", u"returnStatement", 
                   u"returnInto", u"rewriteStatement", u"rewriteFrom", u"searchStatement", 
                   u"searchVarying", u"searchWhen", u"sendStatement", u"sendStatementSync", 
                   u"sendStatementAsync", u"sendFromPhrase", u"sendWithPhrase", 
                   u"sendReplacingPhrase", u"sendAdvancingPhrase", u"sendAdvancingPage", 
                   u"sendAdvancingLines", u"sendAdvancingMnemonic", u"setStatement", 
                   u"setToStatement", u"setUpDownByStatement", u"setTo", 
                   u"setToValue", u"setByValue", u"sortStatement", u"sortOnKeyClause", 
                   u"sortDuplicatesPhrase", u"sortCollatingSequencePhrase", 
                   u"sortCollatingAlphanumeric", u"sortCollatingNational", 
                   u"sortInputProcedurePhrase", u"sortInputThrough", u"sortUsing", 
                   u"sortOutputProcedurePhrase", u"sortOutputThrough", u"sortGivingPhrase", 
                   u"sortGiving", u"startStatement", u"startKey", u"stopStatement", 
                   u"stopStatementGiving", u"stringStatement", u"stringSendingPhrase", 
                   u"stringSending", u"stringDelimitedByPhrase", u"stringForPhrase", 
                   u"stringIntoPhrase", u"stringWithPointerPhrase", u"subtractStatement", 
                   u"subtractFromStatement", u"subtractFromGivingStatement", 
                   u"subtractCorrespondingStatement", u"subtractSubtrahend", 
                   u"subtractMinuend", u"subtractMinuendGiving", u"subtractGiving", 
                   u"subtractMinuendCorresponding", u"terminateStatement", 
                   u"unstringStatement", u"unstringSendingPhrase", u"unstringDelimitedByPhrase", 
                   u"unstringOrAllPhrase", u"unstringIntoPhrase", u"unstringInto", 
                   u"unstringDelimiterIn", u"unstringCountIn", u"unstringWithPointerPhrase", 
                   u"unstringTallyingPhrase", u"useStatement", u"useAfterClause", 
                   u"useAfterOn", u"useDebugClause", u"useDebugOn", u"writeStatement", 
                   u"writeFromPhrase", u"writeAdvancingPhrase", u"writeAdvancingPage", 
                   u"writeAdvancingLines", u"writeAdvancingMnemonic", u"writeAtEndOfPagePhrase", 
                   u"writeNotAtEndOfPagePhrase", u"atEndPhrase", u"notAtEndPhrase", 
                   u"invalidKeyPhrase", u"notInvalidKeyPhrase", u"onOverflowPhrase", 
                   u"notOnOverflowPhrase", u"onSizeErrorPhrase", u"notOnSizeErrorPhrase", 
                   u"onExceptionClause", u"notOnExceptionClause", u"arithmeticExpression", 
                   u"plusMinus", u"multDivs", u"multDiv", u"powers", u"power", 
                   u"basis", u"condition", u"andOrCondition", u"combinableCondition", 
                   u"simpleCondition", u"classCondition", u"conditionNameReference", 
                   u"conditionNameSubscriptReference", u"relationCondition", 
                   u"relationSignCondition", u"relationArithmeticComparison", 
                   u"relationCombinedComparison", u"relationCombinedCondition", 
                   u"relationalOperator", u"abbreviation", u"identifier", 
                   u"tableCall", u"functionCall", u"referenceModifier", 
                   u"characterPosition", u"length", u"subscript", u"argument", 
                   u"qualifiedDataName", u"qualifiedDataNameFormat1", u"qualifiedDataNameFormat2", 
                   u"qualifiedDataNameFormat3", u"qualifiedDataNameFormat4", 
                   u"qualifiedInData", u"inData", u"inFile", u"inMnemonic", 
                   u"inSection", u"inLibrary", u"inTable", u"alphabetName", 
                   u"assignmentName", u"basisName", u"cdName", u"className", 
                   u"computerName", u"conditionName", u"dataName", u"dataDescName", 
                   u"environmentName", u"fileName", u"functionName", u"indexName", 
                   u"languageName", u"libraryName", u"localName", u"mnemonicName", 
                   u"paragraphName", u"procedureName", u"programName", u"recordName", 
                   u"reportName", u"routineName", u"screenName", u"sectionName", 
                   u"systemName", u"symbolicCharacter", u"textName", u"cobolWord", 
                   u"literal", u"booleanLiteral", u"numericLiteral", u"integerLiteral", 
                   u"cicsDfhRespLiteral", u"cicsDfhValueLiteral", u"figurativeConstant", 
                   u"specialRegister", u"commentEntry" ]

    EOF = Token.EOF
    ABORT=1
    ACCEPT=2
    ACCESS=3
    ADD=4
    ADDRESS=5
    ADVANCING=6
    AFTER=7
    ALIGNED=8
    ALL=9
    ALPHABET=10
    ALPHABETIC=11
    ALPHABETIC_LOWER=12
    ALPHABETIC_UPPER=13
    ALPHANUMERIC=14
    ALPHANUMERIC_EDITED=15
    ALSO=16
    ALTER=17
    ALTERNATE=18
    AND=19
    ANY=20
    ARE=21
    AREA=22
    AREAS=23
    AS=24
    ASCENDING=25
    ASCII=26
    ASSIGN=27
    ASSOCIATED_DATA=28
    ASSOCIATED_DATA_LENGTH=29
    AT=30
    ATTRIBUTE=31
    AUTHOR=32
    AUTO=33
    AUTO_SKIP=34
    BACKGROUND_COLOR=35
    BACKGROUND_COLOUR=36
    BASIS=37
    BEEP=38
    BEFORE=39
    BEGINNING=40
    BELL=41
    BINARY=42
    BIT=43
    BLANK=44
    BLINK=45
    BLOB=46
    BLOCK=47
    BOUNDS=48
    BOTTOM=49
    BY=50
    BYFUNCTION=51
    BYTITLE=52
    CALL=53
    CANCEL=54
    CAPABLE=55
    CCSVERSION=56
    CD=57
    CF=58
    CH=59
    CHAINING=60
    CHANGED=61
    CHANNEL=62
    CHARACTER=63
    CHARACTERS=64
    CLASS=65
    CLASS_ID=66
    CLOB=67
    CLOCK_UNITS=68
    CLOSE=69
    CLOSE_DISPOSITION=70
    COBOL=71
    CODE=72
    CODE_SET=73
    COLLATING=74
    COL=75
    COLUMN=76
    COM_REG=77
    COMMA=78
    COMMITMENT=79
    COMMON=80
    COMMUNICATION=81
    COMP=82
    COMP_1=83
    COMP_2=84
    COMP_3=85
    COMP_4=86
    COMP_5=87
    COMPUTATIONAL=88
    COMPUTATIONAL_1=89
    COMPUTATIONAL_2=90
    COMPUTATIONAL_3=91
    COMPUTATIONAL_4=92
    COMPUTATIONAL_5=93
    COMPUTE=94
    CONFIGURATION=95
    CONTAINS=96
    CONTENT=97
    CONTINUE=98
    CONTROL=99
    CONTROL_POINT=100
    CONTROLS=101
    CONVENTION=102
    CONVERTING=103
    COPY=104
    CORR=105
    CORRESPONDING=106
    COUNT=107
    CRUNCH=108
    CURRENCY=109
    CURSOR=110
    DATA=111
    DATA_BASE=112
    DATE=113
    DATE_COMPILED=114
    DATE_WRITTEN=115
    DAY=116
    DAY_OF_WEEK=117
    DBCS=118
    DBCLOB=119
    DE=120
    DEBUG_CONTENTS=121
    DEBUG_ITEM=122
    DEBUG_LINE=123
    DEBUG_NAME=124
    DEBUG_SUB_1=125
    DEBUG_SUB_2=126
    DEBUG_SUB_3=127
    DEBUGGING=128
    DECIMAL_POINT=129
    DECLARATIVES=130
    DEFAULT=131
    DEFAULT_DISPLAY=132
    DEFINITION=133
    DELETE=134
    DELIMITED=135
    DELIMITER=136
    DEPENDING=137
    DESCENDING=138
    DESTINATION=139
    DETAIL=140
    DFHRESP=141
    DFHVALUE=142
    DISABLE=143
    DISK=144
    DISPLAY=145
    DISPLAY_1=146
    DIVIDE=147
    DIVISION=148
    DONTCARE=149
    DOUBLE=150
    DOWN=151
    DUPLICATES=152
    DYNAMIC=153
    EBCDIC=154
    EGCS=155
    EGI=156
    ELSE=157
    EMI=158
    EMPTY_CHECK=159
    ENABLE=160
    END=161
    END_ACCEPT=162
    END_ADD=163
    END_CALL=164
    END_COMPUTE=165
    END_DELETE=166
    END_DIVIDE=167
    END_EVALUATE=168
    END_IF=169
    END_MULTIPLY=170
    END_OF_PAGE=171
    END_PERFORM=172
    END_READ=173
    END_RECEIVE=174
    END_REMARKS=175
    END_RETURN=176
    END_REWRITE=177
    END_SEARCH=178
    END_START=179
    END_STRING=180
    END_SUBTRACT=181
    END_UNSTRING=182
    END_WRITE=183
    ENDING=184
    ENTER=185
    ENTRY=186
    ENTRY_PROCEDURE=187
    ENVIRONMENT=188
    EOP=189
    EQUAL=190
    ERASE=191
    ERROR=192
    EOL=193
    EOS=194
    ESCAPE=195
    ESI=196
    EVALUATE=197
    EVENT=198
    EVERY=199
    EXCEPTION=200
    EXCLUSIVE=201
    EXHIBIT=202
    EXIT=203
    EXPORT=204
    EXTEND=205
    EXTENDED=206
    EXTERNAL=207
    FALSE=208
    FD=209
    FILE=210
    FILE_CONTROL=211
    FILLER=212
    FINAL=213
    FIRST=214
    FOOTING=215
    FOR=216
    FOREGROUND_COLOR=217
    FOREGROUND_COLOUR=218
    FROM=219
    FULL=220
    FUNCTION=221
    FUNCTIONNAME=222
    FUNCTION_POINTER=223
    GENERATE=224
    GOBACK=225
    GIVING=226
    GLOBAL=227
    GO=228
    GREATER=229
    GRID=230
    GROUP=231
    HEADING=232
    HIGHLIGHT=233
    HIGH_VALUE=234
    HIGH_VALUES=235
    I_O=236
    I_O_CONTROL=237
    ID=238
    IDENTIFICATION=239
    IF=240
    IMPLICIT=241
    IMPORT=242
    IN=243
    INDEX=244
    INDEXED=245
    INDICATE=246
    INITIAL=247
    INITIALIZE=248
    INITIATE=249
    INPUT=250
    INPUT_OUTPUT=251
    INSPECT=252
    INSTALLATION=253
    INTEGER=254
    INTO=255
    INVALID=256
    INVOKE=257
    IS=258
    JUST=259
    JUSTIFIED=260
    KANJI=261
    KEPT=262
    KEY=263
    KEYBOARD=264
    LABEL=265
    LANGUAGE=266
    LAST=267
    LB=268
    LD=269
    LEADING=270
    LEFT=271
    LEFTLINE=272
    LENGTH=273
    LENGTH_CHECK=274
    LESS=275
    LIBACCESS=276
    LIBPARAMETER=277
    LIBRARY=278
    LIMIT=279
    LIMITS=280
    LINAGE=281
    LINAGE_COUNTER=282
    LINE=283
    LINES=284
    LINE_COUNTER=285
    LINKAGE=286
    LIST=287
    LOCAL=288
    LOCAL_STORAGE=289
    LOCK=290
    LONG_DATE=291
    LONG_TIME=292
    LOWER=293
    LOWLIGHT=294
    LOW_VALUE=295
    LOW_VALUES=296
    MEMORY=297
    MERGE=298
    MESSAGE=299
    MMDDYYYY=300
    MODE=301
    MODULES=302
    MORE_LABELS=303
    MOVE=304
    MULTIPLE=305
    MULTIPLY=306
    NAMED=307
    NATIONAL=308
    NATIONAL_EDITED=309
    NATIVE=310
    NEGATIVE=311
    NETWORK=312
    NEXT=313
    NO=314
    NO_ECHO=315
    NOT=316
    NULL=317
    NULLS=318
    NUMBER=319
    NUMERIC=320
    NUMERIC_DATE=321
    NUMERIC_EDITED=322
    NUMERIC_TIME=323
    OBJECT_COMPUTER=324
    OCCURS=325
    ODT=326
    OF=327
    OFF=328
    OMITTED=329
    ON=330
    OPEN=331
    OPTIONAL=332
    OR=333
    ORDER=334
    ORDERLY=335
    ORGANIZATION=336
    OTHER=337
    OUTPUT=338
    OVERFLOW=339
    OVERLINE=340
    OWN=341
    PACKED_DECIMAL=342
    PADDING=343
    PAGE=344
    PAGE_COUNTER=345
    PASSWORD=346
    PERFORM=347
    PF=348
    PH=349
    PIC=350
    PICTURE=351
    PLUS=352
    POINTER=353
    POSITION=354
    POSITIVE=355
    PORT=356
    PRINTER=357
    PRINTING=358
    PRIVATE=359
    PROCEDURE=360
    PROCEDURE_POINTER=361
    PROCEDURES=362
    PROCEED=363
    PROCESS=364
    PROGRAM=365
    PROGRAM_ID=366
    PROGRAM_LIBRARY=367
    PROMPT=368
    PURGE=369
    QUEUE=370
    QUOTE=371
    QUOTES=372
    RANDOM=373
    READER=374
    REMOTE=375
    RD=376
    REAL=377
    READ=378
    RECEIVE=379
    RECEIVED=380
    RECORD=381
    RECORDING=382
    RECORDS=383
    RECURSIVE=384
    REDEFINES=385
    REEL=386
    REF=387
    REFERENCE=388
    REFERENCES=389
    RELATIVE=390
    RELEASE=391
    REMAINDER=392
    REMARKS=393
    REMOVAL=394
    REMOVE=395
    RENAMES=396
    REPLACE=397
    REPLACING=398
    REPORT=399
    REPORTING=400
    REPORTS=401
    REQUIRED=402
    RERUN=403
    RESERVE=404
    REVERSE_VIDEO=405
    RESET=406
    RETURN=407
    RETURN_CODE=408
    RETURNING=409
    REVERSED=410
    REWIND=411
    REWRITE=412
    RF=413
    RH=414
    RIGHT=415
    ROUNDED=416
    RUN=417
    SAME=418
    SAVE=419
    SCREEN=420
    SD=421
    SEARCH=422
    SECTION=423
    SECURE=424
    SECURITY=425
    SEGMENT=426
    SEGMENT_LIMIT=427
    SELECT=428
    SEND=429
    SENTENCE=430
    SEPARATE=431
    SEQUENCE=432
    SEQUENTIAL=433
    SET=434
    SHARED=435
    SHAREDBYALL=436
    SHAREDBYRUNUNIT=437
    SHARING=438
    SHIFT_IN=439
    SHIFT_OUT=440
    SHORT_DATE=441
    SIGN=442
    SIZE=443
    SORT=444
    SORT_CONTROL=445
    SORT_CORE_SIZE=446
    SORT_FILE_SIZE=447
    SORT_MERGE=448
    SORT_MESSAGE=449
    SORT_MODE_SIZE=450
    SORT_RETURN=451
    SOURCE=452
    SOURCE_COMPUTER=453
    SPACE=454
    SPACES=455
    SPECIAL_NAMES=456
    SQL=457
    STANDARD=458
    STANDARD_1=459
    STANDARD_2=460
    START=461
    STATUS=462
    STOP=463
    STRING=464
    SUB_QUEUE_1=465
    SUB_QUEUE_2=466
    SUB_QUEUE_3=467
    SUBTRACT=468
    SUM=469
    SUPPRESS=470
    SYMBOL=471
    SYMBOLIC=472
    SYNC=473
    SYNCHRONIZED=474
    TABLE=475
    TALLY=476
    TALLYING=477
    TASK=478
    TAPE=479
    TERMINAL=480
    TERMINATE=481
    TEST=482
    TEXT=483
    THAN=484
    THEN=485
    THREAD=486
    THREAD_LOCAL=487
    THROUGH=488
    THRU=489
    TIME=490
    TIMER=491
    TIMES=492
    TITLE=493
    TO=494
    TODAYS_DATE=495
    TODAYS_NAME=496
    TOP=497
    TRAILING=498
    TRUE=499
    TRUNCATED=500
    TYPE=501
    TYPEDEF=502
    UNDERLINE=503
    UNIT=504
    UNSTRING=505
    UNTIL=506
    UP=507
    UPON=508
    USAGE=509
    USE=510
    USING=511
    VALUE=512
    VALUES=513
    VARYING=514
    VIRTUAL=515
    WAIT=516
    WHEN=517
    WHEN_COMPILED=518
    WITH=519
    WORDS=520
    WORKING_STORAGE=521
    WRITE=522
    YEAR=523
    YYYYMMDD=524
    YYYYDDD=525
    ZERO=526
    ZERO_FILL=527
    ZEROS=528
    ZEROES=529
    AMPCHAR=530
    ASTERISKCHAR=531
    DOUBLEASTERISKCHAR=532
    COLONCHAR=533
    COMMACHAR=534
    COMMENTENTRYTAG=535
    COMMENTTAG=536
    DOLLARCHAR=537
    DOUBLEQUOTE=538
    DOT_FS=539
    DOT=540
    EQUALCHAR=541
    EXECCICSTAG=542
    EXECSQLTAG=543
    EXECSQLIMSTAG=544
    LESSTHANCHAR=545
    LESSTHANOREQUAL=546
    LPARENCHAR=547
    MINUSCHAR=548
    MORETHANCHAR=549
    MORETHANOREQUAL=550
    NOTEQUALCHAR=551
    PLUSCHAR=552
    SINGLEQUOTE=553
    RPARENCHAR=554
    SLASHCHAR=555
    NONNUMERICLITERAL=556
    LEVEL_NUMBER_66=557
    LEVEL_NUMBER_77=558
    LEVEL_NUMBER_88=559
    INTEGERLITERAL=560
    NUMERICLITERAL=561
    IDENTIFIER=562
    NEWLINE=563
    EXECCICSLINE=564
    EXECSQLIMSLINE=565
    EXECSQLLINE=566
    COMMENTENTRYLINE=567
    COMMENTLINE=568
    WS=569
    SEPARATOR=570

    def __init__(self, input, output=sys.stdout):
        super(Cobol85Parser, self).__init__(input, output=output)
        self.checkVersion("4.7.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None



    class StartRuleContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.StartRuleContext, self).__init__(parent, invokingState)
            self.parser = parser

        def compilationUnit(self):
            return self.getTypedRuleContext(Cobol85Parser.CompilationUnitContext,0)


        def EOF(self):
            return self.getToken(Cobol85Parser.EOF, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_startRule

        def enterRule(self, listener):
            if hasattr(listener, "enterStartRule"):
                listener.enterStartRule(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitStartRule"):
                listener.exitStartRule(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitStartRule"):
                return visitor.visitStartRule(self)
            else:
                return visitor.visitChildren(self)




    def startRule(self):

        localctx = Cobol85Parser.StartRuleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_startRule)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1192
            self.compilationUnit()
            self.state = 1193
            self.match(Cobol85Parser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CompilationUnitContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.CompilationUnitContext, self).__init__(parent, invokingState)
            self.parser = parser

        def programUnit(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.ProgramUnitContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.ProgramUnitContext,i)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_compilationUnit

        def enterRule(self, listener):
            if hasattr(listener, "enterCompilationUnit"):
                listener.enterCompilationUnit(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitCompilationUnit"):
                listener.exitCompilationUnit(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitCompilationUnit"):
                return visitor.visitCompilationUnit(self)
            else:
                return visitor.visitChildren(self)




    def compilationUnit(self):

        localctx = Cobol85Parser.CompilationUnitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_compilationUnit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1196 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1195
                self.programUnit()
                self.state = 1198 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==Cobol85Parser.ID or _la==Cobol85Parser.IDENTIFICATION):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ProgramUnitContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.ProgramUnitContext, self).__init__(parent, invokingState)
            self.parser = parser

        def identificationDivision(self):
            return self.getTypedRuleContext(Cobol85Parser.IdentificationDivisionContext,0)


        def environmentDivision(self):
            return self.getTypedRuleContext(Cobol85Parser.EnvironmentDivisionContext,0)


        def dataDivision(self):
            return self.getTypedRuleContext(Cobol85Parser.DataDivisionContext,0)


        def procedureDivision(self):
            return self.getTypedRuleContext(Cobol85Parser.ProcedureDivisionContext,0)


        def programUnit(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.ProgramUnitContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.ProgramUnitContext,i)


        def endProgramStatement(self):
            return self.getTypedRuleContext(Cobol85Parser.EndProgramStatementContext,0)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_programUnit

        def enterRule(self, listener):
            if hasattr(listener, "enterProgramUnit"):
                listener.enterProgramUnit(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitProgramUnit"):
                listener.exitProgramUnit(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitProgramUnit"):
                return visitor.visitProgramUnit(self)
            else:
                return visitor.visitChildren(self)




    def programUnit(self):

        localctx = Cobol85Parser.ProgramUnitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_programUnit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1200
            self.identificationDivision()
            self.state = 1202
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.ENVIRONMENT:
                self.state = 1201
                self.environmentDivision()


            self.state = 1205
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.DATA:
                self.state = 1204
                self.dataDivision()


            self.state = 1208
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.PROCEDURE:
                self.state = 1207
                self.procedureDivision()


            self.state = 1213
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,4,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1210
                    self.programUnit() 
                self.state = 1215
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,4,self._ctx)

            self.state = 1217
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,5,self._ctx)
            if la_ == 1:
                self.state = 1216
                self.endProgramStatement()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EndProgramStatementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.EndProgramStatementContext, self).__init__(parent, invokingState)
            self.parser = parser

        def END(self):
            return self.getToken(Cobol85Parser.END, 0)

        def PROGRAM(self):
            return self.getToken(Cobol85Parser.PROGRAM, 0)

        def programName(self):
            return self.getTypedRuleContext(Cobol85Parser.ProgramNameContext,0)


        def DOT_FS(self):
            return self.getToken(Cobol85Parser.DOT_FS, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_endProgramStatement

        def enterRule(self, listener):
            if hasattr(listener, "enterEndProgramStatement"):
                listener.enterEndProgramStatement(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitEndProgramStatement"):
                listener.exitEndProgramStatement(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitEndProgramStatement"):
                return visitor.visitEndProgramStatement(self)
            else:
                return visitor.visitChildren(self)




    def endProgramStatement(self):

        localctx = Cobol85Parser.EndProgramStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_endProgramStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1219
            self.match(Cobol85Parser.END)
            self.state = 1220
            self.match(Cobol85Parser.PROGRAM)
            self.state = 1221
            self.programName()
            self.state = 1222
            self.match(Cobol85Parser.DOT_FS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IdentificationDivisionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.IdentificationDivisionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def DIVISION(self):
            return self.getToken(Cobol85Parser.DIVISION, 0)

        def DOT_FS(self):
            return self.getToken(Cobol85Parser.DOT_FS, 0)

        def programIdParagraph(self):
            return self.getTypedRuleContext(Cobol85Parser.ProgramIdParagraphContext,0)


        def IDENTIFICATION(self):
            return self.getToken(Cobol85Parser.IDENTIFICATION, 0)

        def ID(self):
            return self.getToken(Cobol85Parser.ID, 0)

        def identificationDivisionBody(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.IdentificationDivisionBodyContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.IdentificationDivisionBodyContext,i)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_identificationDivision

        def enterRule(self, listener):
            if hasattr(listener, "enterIdentificationDivision"):
                listener.enterIdentificationDivision(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitIdentificationDivision"):
                listener.exitIdentificationDivision(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitIdentificationDivision"):
                return visitor.visitIdentificationDivision(self)
            else:
                return visitor.visitChildren(self)




    def identificationDivision(self):

        localctx = Cobol85Parser.IdentificationDivisionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_identificationDivision)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1224
            _la = self._input.LA(1)
            if not(_la==Cobol85Parser.ID or _la==Cobol85Parser.IDENTIFICATION):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1225
            self.match(Cobol85Parser.DIVISION)
            self.state = 1226
            self.match(Cobol85Parser.DOT_FS)
            self.state = 1227
            self.programIdParagraph()
            self.state = 1231
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==Cobol85Parser.AUTHOR or _la==Cobol85Parser.DATE_COMPILED or _la==Cobol85Parser.DATE_WRITTEN or _la==Cobol85Parser.INSTALLATION or _la==Cobol85Parser.REMARKS or _la==Cobol85Parser.SECURITY:
                self.state = 1228
                self.identificationDivisionBody()
                self.state = 1233
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IdentificationDivisionBodyContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.IdentificationDivisionBodyContext, self).__init__(parent, invokingState)
            self.parser = parser

        def authorParagraph(self):
            return self.getTypedRuleContext(Cobol85Parser.AuthorParagraphContext,0)


        def installationParagraph(self):
            return self.getTypedRuleContext(Cobol85Parser.InstallationParagraphContext,0)


        def dateWrittenParagraph(self):
            return self.getTypedRuleContext(Cobol85Parser.DateWrittenParagraphContext,0)


        def dateCompiledParagraph(self):
            return self.getTypedRuleContext(Cobol85Parser.DateCompiledParagraphContext,0)


        def securityParagraph(self):
            return self.getTypedRuleContext(Cobol85Parser.SecurityParagraphContext,0)


        def remarksParagraph(self):
            return self.getTypedRuleContext(Cobol85Parser.RemarksParagraphContext,0)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_identificationDivisionBody

        def enterRule(self, listener):
            if hasattr(listener, "enterIdentificationDivisionBody"):
                listener.enterIdentificationDivisionBody(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitIdentificationDivisionBody"):
                listener.exitIdentificationDivisionBody(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitIdentificationDivisionBody"):
                return visitor.visitIdentificationDivisionBody(self)
            else:
                return visitor.visitChildren(self)




    def identificationDivisionBody(self):

        localctx = Cobol85Parser.IdentificationDivisionBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_identificationDivisionBody)
        try:
            self.state = 1240
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Cobol85Parser.AUTHOR]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1234
                self.authorParagraph()
                pass
            elif token in [Cobol85Parser.INSTALLATION]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1235
                self.installationParagraph()
                pass
            elif token in [Cobol85Parser.DATE_WRITTEN]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1236
                self.dateWrittenParagraph()
                pass
            elif token in [Cobol85Parser.DATE_COMPILED]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1237
                self.dateCompiledParagraph()
                pass
            elif token in [Cobol85Parser.SECURITY]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1238
                self.securityParagraph()
                pass
            elif token in [Cobol85Parser.REMARKS]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1239
                self.remarksParagraph()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ProgramIdParagraphContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.ProgramIdParagraphContext, self).__init__(parent, invokingState)
            self.parser = parser

        def PROGRAM_ID(self):
            return self.getToken(Cobol85Parser.PROGRAM_ID, 0)

        def DOT_FS(self, i=None):
            if i is None:
                return self.getTokens(Cobol85Parser.DOT_FS)
            else:
                return self.getToken(Cobol85Parser.DOT_FS, i)

        def programName(self):
            return self.getTypedRuleContext(Cobol85Parser.ProgramNameContext,0)


        def commentEntry(self):
            return self.getTypedRuleContext(Cobol85Parser.CommentEntryContext,0)


        def COMMON(self):
            return self.getToken(Cobol85Parser.COMMON, 0)

        def INITIAL(self):
            return self.getToken(Cobol85Parser.INITIAL, 0)

        def LIBRARY(self):
            return self.getToken(Cobol85Parser.LIBRARY, 0)

        def DEFINITION(self):
            return self.getToken(Cobol85Parser.DEFINITION, 0)

        def RECURSIVE(self):
            return self.getToken(Cobol85Parser.RECURSIVE, 0)

        def IS(self):
            return self.getToken(Cobol85Parser.IS, 0)

        def PROGRAM(self):
            return self.getToken(Cobol85Parser.PROGRAM, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_programIdParagraph

        def enterRule(self, listener):
            if hasattr(listener, "enterProgramIdParagraph"):
                listener.enterProgramIdParagraph(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitProgramIdParagraph"):
                listener.exitProgramIdParagraph(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitProgramIdParagraph"):
                return visitor.visitProgramIdParagraph(self)
            else:
                return visitor.visitChildren(self)




    def programIdParagraph(self):

        localctx = Cobol85Parser.ProgramIdParagraphContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_programIdParagraph)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1242
            self.match(Cobol85Parser.PROGRAM_ID)
            self.state = 1243
            self.match(Cobol85Parser.DOT_FS)
            self.state = 1244
            self.programName()
            self.state = 1252
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.COMMON or _la==Cobol85Parser.DEFINITION or ((((_la - 247)) & ~0x3f) == 0 and ((1 << (_la - 247)) & ((1 << (Cobol85Parser.INITIAL - 247)) | (1 << (Cobol85Parser.IS - 247)) | (1 << (Cobol85Parser.LIBRARY - 247)))) != 0) or _la==Cobol85Parser.RECURSIVE:
                self.state = 1246
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Cobol85Parser.IS:
                    self.state = 1245
                    self.match(Cobol85Parser.IS)


                self.state = 1248
                _la = self._input.LA(1)
                if not(_la==Cobol85Parser.COMMON or _la==Cobol85Parser.DEFINITION or _la==Cobol85Parser.INITIAL or _la==Cobol85Parser.LIBRARY or _la==Cobol85Parser.RECURSIVE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1250
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Cobol85Parser.PROGRAM:
                    self.state = 1249
                    self.match(Cobol85Parser.PROGRAM)




            self.state = 1255
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.DOT_FS:
                self.state = 1254
                self.match(Cobol85Parser.DOT_FS)


            self.state = 1258
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.COMMENTENTRYLINE:
                self.state = 1257
                self.commentEntry()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AuthorParagraphContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.AuthorParagraphContext, self).__init__(parent, invokingState)
            self.parser = parser

        def AUTHOR(self):
            return self.getToken(Cobol85Parser.AUTHOR, 0)

        def DOT_FS(self):
            return self.getToken(Cobol85Parser.DOT_FS, 0)

        def commentEntry(self):
            return self.getTypedRuleContext(Cobol85Parser.CommentEntryContext,0)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_authorParagraph

        def enterRule(self, listener):
            if hasattr(listener, "enterAuthorParagraph"):
                listener.enterAuthorParagraph(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitAuthorParagraph"):
                listener.exitAuthorParagraph(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitAuthorParagraph"):
                return visitor.visitAuthorParagraph(self)
            else:
                return visitor.visitChildren(self)




    def authorParagraph(self):

        localctx = Cobol85Parser.AuthorParagraphContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_authorParagraph)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1260
            self.match(Cobol85Parser.AUTHOR)
            self.state = 1261
            self.match(Cobol85Parser.DOT_FS)
            self.state = 1263
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.COMMENTENTRYLINE:
                self.state = 1262
                self.commentEntry()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InstallationParagraphContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.InstallationParagraphContext, self).__init__(parent, invokingState)
            self.parser = parser

        def INSTALLATION(self):
            return self.getToken(Cobol85Parser.INSTALLATION, 0)

        def DOT_FS(self):
            return self.getToken(Cobol85Parser.DOT_FS, 0)

        def commentEntry(self):
            return self.getTypedRuleContext(Cobol85Parser.CommentEntryContext,0)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_installationParagraph

        def enterRule(self, listener):
            if hasattr(listener, "enterInstallationParagraph"):
                listener.enterInstallationParagraph(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitInstallationParagraph"):
                listener.exitInstallationParagraph(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitInstallationParagraph"):
                return visitor.visitInstallationParagraph(self)
            else:
                return visitor.visitChildren(self)




    def installationParagraph(self):

        localctx = Cobol85Parser.InstallationParagraphContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_installationParagraph)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1265
            self.match(Cobol85Parser.INSTALLATION)
            self.state = 1266
            self.match(Cobol85Parser.DOT_FS)
            self.state = 1268
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.COMMENTENTRYLINE:
                self.state = 1267
                self.commentEntry()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DateWrittenParagraphContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.DateWrittenParagraphContext, self).__init__(parent, invokingState)
            self.parser = parser

        def DATE_WRITTEN(self):
            return self.getToken(Cobol85Parser.DATE_WRITTEN, 0)

        def DOT_FS(self):
            return self.getToken(Cobol85Parser.DOT_FS, 0)

        def commentEntry(self):
            return self.getTypedRuleContext(Cobol85Parser.CommentEntryContext,0)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_dateWrittenParagraph

        def enterRule(self, listener):
            if hasattr(listener, "enterDateWrittenParagraph"):
                listener.enterDateWrittenParagraph(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitDateWrittenParagraph"):
                listener.exitDateWrittenParagraph(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitDateWrittenParagraph"):
                return visitor.visitDateWrittenParagraph(self)
            else:
                return visitor.visitChildren(self)




    def dateWrittenParagraph(self):

        localctx = Cobol85Parser.DateWrittenParagraphContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_dateWrittenParagraph)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1270
            self.match(Cobol85Parser.DATE_WRITTEN)
            self.state = 1271
            self.match(Cobol85Parser.DOT_FS)
            self.state = 1273
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.COMMENTENTRYLINE:
                self.state = 1272
                self.commentEntry()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DateCompiledParagraphContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.DateCompiledParagraphContext, self).__init__(parent, invokingState)
            self.parser = parser

        def DATE_COMPILED(self):
            return self.getToken(Cobol85Parser.DATE_COMPILED, 0)

        def DOT_FS(self):
            return self.getToken(Cobol85Parser.DOT_FS, 0)

        def commentEntry(self):
            return self.getTypedRuleContext(Cobol85Parser.CommentEntryContext,0)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_dateCompiledParagraph

        def enterRule(self, listener):
            if hasattr(listener, "enterDateCompiledParagraph"):
                listener.enterDateCompiledParagraph(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitDateCompiledParagraph"):
                listener.exitDateCompiledParagraph(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitDateCompiledParagraph"):
                return visitor.visitDateCompiledParagraph(self)
            else:
                return visitor.visitChildren(self)




    def dateCompiledParagraph(self):

        localctx = Cobol85Parser.DateCompiledParagraphContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_dateCompiledParagraph)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1275
            self.match(Cobol85Parser.DATE_COMPILED)
            self.state = 1276
            self.match(Cobol85Parser.DOT_FS)
            self.state = 1278
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.COMMENTENTRYLINE:
                self.state = 1277
                self.commentEntry()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SecurityParagraphContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.SecurityParagraphContext, self).__init__(parent, invokingState)
            self.parser = parser

        def SECURITY(self):
            return self.getToken(Cobol85Parser.SECURITY, 0)

        def DOT_FS(self):
            return self.getToken(Cobol85Parser.DOT_FS, 0)

        def commentEntry(self):
            return self.getTypedRuleContext(Cobol85Parser.CommentEntryContext,0)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_securityParagraph

        def enterRule(self, listener):
            if hasattr(listener, "enterSecurityParagraph"):
                listener.enterSecurityParagraph(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSecurityParagraph"):
                listener.exitSecurityParagraph(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitSecurityParagraph"):
                return visitor.visitSecurityParagraph(self)
            else:
                return visitor.visitChildren(self)




    def securityParagraph(self):

        localctx = Cobol85Parser.SecurityParagraphContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_securityParagraph)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1280
            self.match(Cobol85Parser.SECURITY)
            self.state = 1281
            self.match(Cobol85Parser.DOT_FS)
            self.state = 1283
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.COMMENTENTRYLINE:
                self.state = 1282
                self.commentEntry()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RemarksParagraphContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.RemarksParagraphContext, self).__init__(parent, invokingState)
            self.parser = parser

        def REMARKS(self):
            return self.getToken(Cobol85Parser.REMARKS, 0)

        def DOT_FS(self, i=None):
            if i is None:
                return self.getTokens(Cobol85Parser.DOT_FS)
            else:
                return self.getToken(Cobol85Parser.DOT_FS, i)

        def commentEntry(self):
            return self.getTypedRuleContext(Cobol85Parser.CommentEntryContext,0)


        def END_REMARKS(self):
            return self.getToken(Cobol85Parser.END_REMARKS, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_remarksParagraph

        def enterRule(self, listener):
            if hasattr(listener, "enterRemarksParagraph"):
                listener.enterRemarksParagraph(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitRemarksParagraph"):
                listener.exitRemarksParagraph(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitRemarksParagraph"):
                return visitor.visitRemarksParagraph(self)
            else:
                return visitor.visitChildren(self)




    def remarksParagraph(self):

        localctx = Cobol85Parser.RemarksParagraphContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_remarksParagraph)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1285
            self.match(Cobol85Parser.REMARKS)
            self.state = 1286
            self.match(Cobol85Parser.DOT_FS)
            self.state = 1288
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.COMMENTENTRYLINE:
                self.state = 1287
                self.commentEntry()


            self.state = 1291
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.END_REMARKS:
                self.state = 1290
                self.match(Cobol85Parser.END_REMARKS)


            self.state = 1294
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.DOT_FS:
                self.state = 1293
                self.match(Cobol85Parser.DOT_FS)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EnvironmentDivisionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.EnvironmentDivisionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ENVIRONMENT(self):
            return self.getToken(Cobol85Parser.ENVIRONMENT, 0)

        def DIVISION(self):
            return self.getToken(Cobol85Parser.DIVISION, 0)

        def DOT_FS(self):
            return self.getToken(Cobol85Parser.DOT_FS, 0)

        def environmentDivisionBody(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.EnvironmentDivisionBodyContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.EnvironmentDivisionBodyContext,i)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_environmentDivision

        def enterRule(self, listener):
            if hasattr(listener, "enterEnvironmentDivision"):
                listener.enterEnvironmentDivision(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitEnvironmentDivision"):
                listener.exitEnvironmentDivision(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitEnvironmentDivision"):
                return visitor.visitEnvironmentDivision(self)
            else:
                return visitor.visitChildren(self)




    def environmentDivision(self):

        localctx = Cobol85Parser.EnvironmentDivisionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_environmentDivision)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1296
            self.match(Cobol85Parser.ENVIRONMENT)
            self.state = 1297
            self.match(Cobol85Parser.DIVISION)
            self.state = 1298
            self.match(Cobol85Parser.DOT_FS)
            self.state = 1302
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==Cobol85Parser.CONFIGURATION or _la==Cobol85Parser.INPUT_OUTPUT or _la==Cobol85Parser.SPECIAL_NAMES:
                self.state = 1299
                self.environmentDivisionBody()
                self.state = 1304
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EnvironmentDivisionBodyContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.EnvironmentDivisionBodyContext, self).__init__(parent, invokingState)
            self.parser = parser

        def configurationSection(self):
            return self.getTypedRuleContext(Cobol85Parser.ConfigurationSectionContext,0)


        def specialNamesParagraph(self):
            return self.getTypedRuleContext(Cobol85Parser.SpecialNamesParagraphContext,0)


        def inputOutputSection(self):
            return self.getTypedRuleContext(Cobol85Parser.InputOutputSectionContext,0)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_environmentDivisionBody

        def enterRule(self, listener):
            if hasattr(listener, "enterEnvironmentDivisionBody"):
                listener.enterEnvironmentDivisionBody(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitEnvironmentDivisionBody"):
                listener.exitEnvironmentDivisionBody(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitEnvironmentDivisionBody"):
                return visitor.visitEnvironmentDivisionBody(self)
            else:
                return visitor.visitChildren(self)




    def environmentDivisionBody(self):

        localctx = Cobol85Parser.EnvironmentDivisionBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_environmentDivisionBody)
        try:
            self.state = 1308
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Cobol85Parser.CONFIGURATION]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1305
                self.configurationSection()
                pass
            elif token in [Cobol85Parser.SPECIAL_NAMES]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1306
                self.specialNamesParagraph()
                pass
            elif token in [Cobol85Parser.INPUT_OUTPUT]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1307
                self.inputOutputSection()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConfigurationSectionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.ConfigurationSectionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def CONFIGURATION(self):
            return self.getToken(Cobol85Parser.CONFIGURATION, 0)

        def SECTION(self):
            return self.getToken(Cobol85Parser.SECTION, 0)

        def DOT_FS(self):
            return self.getToken(Cobol85Parser.DOT_FS, 0)

        def configurationSectionParagraph(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.ConfigurationSectionParagraphContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.ConfigurationSectionParagraphContext,i)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_configurationSection

        def enterRule(self, listener):
            if hasattr(listener, "enterConfigurationSection"):
                listener.enterConfigurationSection(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitConfigurationSection"):
                listener.exitConfigurationSection(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitConfigurationSection"):
                return visitor.visitConfigurationSection(self)
            else:
                return visitor.visitChildren(self)




    def configurationSection(self):

        localctx = Cobol85Parser.ConfigurationSectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_configurationSection)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1310
            self.match(Cobol85Parser.CONFIGURATION)
            self.state = 1311
            self.match(Cobol85Parser.SECTION)
            self.state = 1312
            self.match(Cobol85Parser.DOT_FS)
            self.state = 1316
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,23,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1313
                    self.configurationSectionParagraph() 
                self.state = 1318
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,23,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConfigurationSectionParagraphContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.ConfigurationSectionParagraphContext, self).__init__(parent, invokingState)
            self.parser = parser

        def sourceComputerParagraph(self):
            return self.getTypedRuleContext(Cobol85Parser.SourceComputerParagraphContext,0)


        def objectComputerParagraph(self):
            return self.getTypedRuleContext(Cobol85Parser.ObjectComputerParagraphContext,0)


        def specialNamesParagraph(self):
            return self.getTypedRuleContext(Cobol85Parser.SpecialNamesParagraphContext,0)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_configurationSectionParagraph

        def enterRule(self, listener):
            if hasattr(listener, "enterConfigurationSectionParagraph"):
                listener.enterConfigurationSectionParagraph(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitConfigurationSectionParagraph"):
                listener.exitConfigurationSectionParagraph(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitConfigurationSectionParagraph"):
                return visitor.visitConfigurationSectionParagraph(self)
            else:
                return visitor.visitChildren(self)




    def configurationSectionParagraph(self):

        localctx = Cobol85Parser.ConfigurationSectionParagraphContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_configurationSectionParagraph)
        try:
            self.state = 1322
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Cobol85Parser.SOURCE_COMPUTER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1319
                self.sourceComputerParagraph()
                pass
            elif token in [Cobol85Parser.OBJECT_COMPUTER]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1320
                self.objectComputerParagraph()
                pass
            elif token in [Cobol85Parser.SPECIAL_NAMES]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1321
                self.specialNamesParagraph()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SourceComputerParagraphContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.SourceComputerParagraphContext, self).__init__(parent, invokingState)
            self.parser = parser

        def SOURCE_COMPUTER(self):
            return self.getToken(Cobol85Parser.SOURCE_COMPUTER, 0)

        def DOT_FS(self, i=None):
            if i is None:
                return self.getTokens(Cobol85Parser.DOT_FS)
            else:
                return self.getToken(Cobol85Parser.DOT_FS, i)

        def computerName(self):
            return self.getTypedRuleContext(Cobol85Parser.ComputerNameContext,0)


        def DEBUGGING(self):
            return self.getToken(Cobol85Parser.DEBUGGING, 0)

        def MODE(self):
            return self.getToken(Cobol85Parser.MODE, 0)

        def WITH(self):
            return self.getToken(Cobol85Parser.WITH, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_sourceComputerParagraph

        def enterRule(self, listener):
            if hasattr(listener, "enterSourceComputerParagraph"):
                listener.enterSourceComputerParagraph(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSourceComputerParagraph"):
                listener.exitSourceComputerParagraph(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitSourceComputerParagraph"):
                return visitor.visitSourceComputerParagraph(self)
            else:
                return visitor.visitChildren(self)




    def sourceComputerParagraph(self):

        localctx = Cobol85Parser.SourceComputerParagraphContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_sourceComputerParagraph)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1324
            self.match(Cobol85Parser.SOURCE_COMPUTER)
            self.state = 1325
            self.match(Cobol85Parser.DOT_FS)
            self.state = 1336
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE) | (1 << Cobol85Parser.AUTO) | (1 << Cobol85Parser.AUTO_SKIP) | (1 << Cobol85Parser.BACKGROUND_COLOR) | (1 << Cobol85Parser.BACKGROUND_COLOUR) | (1 << Cobol85Parser.BEEP) | (1 << Cobol85Parser.BELL) | (1 << Cobol85Parser.BINARY) | (1 << Cobol85Parser.BIT) | (1 << Cobol85Parser.BLINK) | (1 << Cobol85Parser.BLOB) | (1 << Cobol85Parser.BOUNDS) | (1 << Cobol85Parser.CAPABLE) | (1 << Cobol85Parser.CCSVERSION) | (1 << Cobol85Parser.CHANGED) | (1 << Cobol85Parser.CHANNEL))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (Cobol85Parser.CLOB - 67)) | (1 << (Cobol85Parser.CLOSE_DISPOSITION - 67)) | (1 << (Cobol85Parser.COBOL - 67)) | (1 << (Cobol85Parser.COMMITMENT - 67)) | (1 << (Cobol85Parser.CONTROL_POINT - 67)) | (1 << (Cobol85Parser.CONVENTION - 67)) | (1 << (Cobol85Parser.CRUNCH - 67)) | (1 << (Cobol85Parser.CURSOR - 67)) | (1 << (Cobol85Parser.DBCLOB - 67)))) != 0) or ((((_la - 131)) & ~0x3f) == 0 and ((1 << (_la - 131)) & ((1 << (Cobol85Parser.DEFAULT - 131)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 131)) | (1 << (Cobol85Parser.DEFINITION - 131)) | (1 << (Cobol85Parser.DFHRESP - 131)) | (1 << (Cobol85Parser.DFHVALUE - 131)) | (1 << (Cobol85Parser.DISK - 131)) | (1 << (Cobol85Parser.DONTCARE - 131)) | (1 << (Cobol85Parser.DOUBLE - 131)) | (1 << (Cobol85Parser.EBCDIC - 131)) | (1 << (Cobol85Parser.EMPTY_CHECK - 131)) | (1 << (Cobol85Parser.ENTER - 131)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 131)) | (1 << (Cobol85Parser.ERASE - 131)) | (1 << (Cobol85Parser.EOL - 131)) | (1 << (Cobol85Parser.EOS - 131)))) != 0) or ((((_la - 195)) & ~0x3f) == 0 and ((1 << (_la - 195)) & ((1 << (Cobol85Parser.ESCAPE - 195)) | (1 << (Cobol85Parser.EVENT - 195)) | (1 << (Cobol85Parser.EXCLUSIVE - 195)) | (1 << (Cobol85Parser.EXPORT - 195)) | (1 << (Cobol85Parser.EXTENDED - 195)) | (1 << (Cobol85Parser.FOREGROUND_COLOR - 195)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 195)) | (1 << (Cobol85Parser.FULL - 195)) | (1 << (Cobol85Parser.FUNCTIONNAME - 195)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 195)) | (1 << (Cobol85Parser.GRID - 195)) | (1 << (Cobol85Parser.HIGHLIGHT - 195)) | (1 << (Cobol85Parser.IMPLICIT - 195)) | (1 << (Cobol85Parser.IMPORT - 195)) | (1 << (Cobol85Parser.INTEGER - 195)))) != 0) or ((((_la - 262)) & ~0x3f) == 0 and ((1 << (_la - 262)) & ((1 << (Cobol85Parser.KEPT - 262)) | (1 << (Cobol85Parser.KEYBOARD - 262)) | (1 << (Cobol85Parser.LANGUAGE - 262)) | (1 << (Cobol85Parser.LB - 262)) | (1 << (Cobol85Parser.LD - 262)) | (1 << (Cobol85Parser.LEFTLINE - 262)) | (1 << (Cobol85Parser.LENGTH_CHECK - 262)) | (1 << (Cobol85Parser.LIBACCESS - 262)) | (1 << (Cobol85Parser.LIBPARAMETER - 262)) | (1 << (Cobol85Parser.LIBRARY - 262)) | (1 << (Cobol85Parser.LIST - 262)) | (1 << (Cobol85Parser.LOCAL - 262)) | (1 << (Cobol85Parser.LONG_DATE - 262)) | (1 << (Cobol85Parser.LONG_TIME - 262)) | (1 << (Cobol85Parser.LOWER - 262)) | (1 << (Cobol85Parser.LOWLIGHT - 262)) | (1 << (Cobol85Parser.MMDDYYYY - 262)) | (1 << (Cobol85Parser.NAMED - 262)) | (1 << (Cobol85Parser.NATIONAL - 262)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 262)) | (1 << (Cobol85Parser.NETWORK - 262)) | (1 << (Cobol85Parser.NO_ECHO - 262)) | (1 << (Cobol85Parser.NUMERIC_DATE - 262)) | (1 << (Cobol85Parser.NUMERIC_TIME - 262)))) != 0) or ((((_la - 326)) & ~0x3f) == 0 and ((1 << (_la - 326)) & ((1 << (Cobol85Parser.ODT - 326)) | (1 << (Cobol85Parser.ORDERLY - 326)) | (1 << (Cobol85Parser.OVERLINE - 326)) | (1 << (Cobol85Parser.OWN - 326)) | (1 << (Cobol85Parser.PASSWORD - 326)) | (1 << (Cobol85Parser.PORT - 326)) | (1 << (Cobol85Parser.PRINTER - 326)) | (1 << (Cobol85Parser.PRIVATE - 326)) | (1 << (Cobol85Parser.PROCESS - 326)) | (1 << (Cobol85Parser.PROGRAM - 326)) | (1 << (Cobol85Parser.PROMPT - 326)) | (1 << (Cobol85Parser.READER - 326)) | (1 << (Cobol85Parser.REMOTE - 326)) | (1 << (Cobol85Parser.REAL - 326)) | (1 << (Cobol85Parser.RECEIVED - 326)) | (1 << (Cobol85Parser.RECURSIVE - 326)) | (1 << (Cobol85Parser.REF - 326)))) != 0) or ((((_la - 395)) & ~0x3f) == 0 and ((1 << (_la - 395)) & ((1 << (Cobol85Parser.REMOVE - 395)) | (1 << (Cobol85Parser.REQUIRED - 395)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 395)) | (1 << (Cobol85Parser.SAVE - 395)) | (1 << (Cobol85Parser.SECURE - 395)) | (1 << (Cobol85Parser.SHARED - 395)) | (1 << (Cobol85Parser.SHAREDBYALL - 395)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 395)) | (1 << (Cobol85Parser.SHARING - 395)) | (1 << (Cobol85Parser.SHORT_DATE - 395)) | (1 << (Cobol85Parser.SQL - 395)))) != 0) or ((((_la - 471)) & ~0x3f) == 0 and ((1 << (_la - 471)) & ((1 << (Cobol85Parser.SYMBOL - 471)) | (1 << (Cobol85Parser.TASK - 471)) | (1 << (Cobol85Parser.THREAD - 471)) | (1 << (Cobol85Parser.THREAD_LOCAL - 471)) | (1 << (Cobol85Parser.TIMER - 471)) | (1 << (Cobol85Parser.TODAYS_DATE - 471)) | (1 << (Cobol85Parser.TODAYS_NAME - 471)) | (1 << (Cobol85Parser.TRUNCATED - 471)) | (1 << (Cobol85Parser.TYPEDEF - 471)) | (1 << (Cobol85Parser.UNDERLINE - 471)) | (1 << (Cobol85Parser.VIRTUAL - 471)) | (1 << (Cobol85Parser.WAIT - 471)) | (1 << (Cobol85Parser.YEAR - 471)) | (1 << (Cobol85Parser.YYYYMMDD - 471)) | (1 << (Cobol85Parser.YYYYDDD - 471)) | (1 << (Cobol85Parser.ZERO_FILL - 471)))) != 0) or _la==Cobol85Parser.IDENTIFIER:
                self.state = 1326
                self.computerName()
                self.state = 1332
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Cobol85Parser.DEBUGGING or _la==Cobol85Parser.WITH:
                    self.state = 1328
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==Cobol85Parser.WITH:
                        self.state = 1327
                        self.match(Cobol85Parser.WITH)


                    self.state = 1330
                    self.match(Cobol85Parser.DEBUGGING)
                    self.state = 1331
                    self.match(Cobol85Parser.MODE)


                self.state = 1334
                self.match(Cobol85Parser.DOT_FS)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ObjectComputerParagraphContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.ObjectComputerParagraphContext, self).__init__(parent, invokingState)
            self.parser = parser

        def OBJECT_COMPUTER(self):
            return self.getToken(Cobol85Parser.OBJECT_COMPUTER, 0)

        def DOT_FS(self, i=None):
            if i is None:
                return self.getTokens(Cobol85Parser.DOT_FS)
            else:
                return self.getToken(Cobol85Parser.DOT_FS, i)

        def computerName(self):
            return self.getTypedRuleContext(Cobol85Parser.ComputerNameContext,0)


        def objectComputerClause(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.ObjectComputerClauseContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.ObjectComputerClauseContext,i)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_objectComputerParagraph

        def enterRule(self, listener):
            if hasattr(listener, "enterObjectComputerParagraph"):
                listener.enterObjectComputerParagraph(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitObjectComputerParagraph"):
                listener.exitObjectComputerParagraph(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitObjectComputerParagraph"):
                return visitor.visitObjectComputerParagraph(self)
            else:
                return visitor.visitChildren(self)




    def objectComputerParagraph(self):

        localctx = Cobol85Parser.ObjectComputerParagraphContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_objectComputerParagraph)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1338
            self.match(Cobol85Parser.OBJECT_COMPUTER)
            self.state = 1339
            self.match(Cobol85Parser.DOT_FS)
            self.state = 1349
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE) | (1 << Cobol85Parser.AUTO) | (1 << Cobol85Parser.AUTO_SKIP) | (1 << Cobol85Parser.BACKGROUND_COLOR) | (1 << Cobol85Parser.BACKGROUND_COLOUR) | (1 << Cobol85Parser.BEEP) | (1 << Cobol85Parser.BELL) | (1 << Cobol85Parser.BINARY) | (1 << Cobol85Parser.BIT) | (1 << Cobol85Parser.BLINK) | (1 << Cobol85Parser.BLOB) | (1 << Cobol85Parser.BOUNDS) | (1 << Cobol85Parser.CAPABLE) | (1 << Cobol85Parser.CCSVERSION) | (1 << Cobol85Parser.CHANGED) | (1 << Cobol85Parser.CHANNEL))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (Cobol85Parser.CLOB - 67)) | (1 << (Cobol85Parser.CLOSE_DISPOSITION - 67)) | (1 << (Cobol85Parser.COBOL - 67)) | (1 << (Cobol85Parser.COMMITMENT - 67)) | (1 << (Cobol85Parser.CONTROL_POINT - 67)) | (1 << (Cobol85Parser.CONVENTION - 67)) | (1 << (Cobol85Parser.CRUNCH - 67)) | (1 << (Cobol85Parser.CURSOR - 67)) | (1 << (Cobol85Parser.DBCLOB - 67)))) != 0) or ((((_la - 131)) & ~0x3f) == 0 and ((1 << (_la - 131)) & ((1 << (Cobol85Parser.DEFAULT - 131)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 131)) | (1 << (Cobol85Parser.DEFINITION - 131)) | (1 << (Cobol85Parser.DFHRESP - 131)) | (1 << (Cobol85Parser.DFHVALUE - 131)) | (1 << (Cobol85Parser.DISK - 131)) | (1 << (Cobol85Parser.DONTCARE - 131)) | (1 << (Cobol85Parser.DOUBLE - 131)) | (1 << (Cobol85Parser.EBCDIC - 131)) | (1 << (Cobol85Parser.EMPTY_CHECK - 131)) | (1 << (Cobol85Parser.ENTER - 131)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 131)) | (1 << (Cobol85Parser.ERASE - 131)) | (1 << (Cobol85Parser.EOL - 131)) | (1 << (Cobol85Parser.EOS - 131)))) != 0) or ((((_la - 195)) & ~0x3f) == 0 and ((1 << (_la - 195)) & ((1 << (Cobol85Parser.ESCAPE - 195)) | (1 << (Cobol85Parser.EVENT - 195)) | (1 << (Cobol85Parser.EXCLUSIVE - 195)) | (1 << (Cobol85Parser.EXPORT - 195)) | (1 << (Cobol85Parser.EXTENDED - 195)) | (1 << (Cobol85Parser.FOREGROUND_COLOR - 195)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 195)) | (1 << (Cobol85Parser.FULL - 195)) | (1 << (Cobol85Parser.FUNCTIONNAME - 195)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 195)) | (1 << (Cobol85Parser.GRID - 195)) | (1 << (Cobol85Parser.HIGHLIGHT - 195)) | (1 << (Cobol85Parser.IMPLICIT - 195)) | (1 << (Cobol85Parser.IMPORT - 195)) | (1 << (Cobol85Parser.INTEGER - 195)))) != 0) or ((((_la - 262)) & ~0x3f) == 0 and ((1 << (_la - 262)) & ((1 << (Cobol85Parser.KEPT - 262)) | (1 << (Cobol85Parser.KEYBOARD - 262)) | (1 << (Cobol85Parser.LANGUAGE - 262)) | (1 << (Cobol85Parser.LB - 262)) | (1 << (Cobol85Parser.LD - 262)) | (1 << (Cobol85Parser.LEFTLINE - 262)) | (1 << (Cobol85Parser.LENGTH_CHECK - 262)) | (1 << (Cobol85Parser.LIBACCESS - 262)) | (1 << (Cobol85Parser.LIBPARAMETER - 262)) | (1 << (Cobol85Parser.LIBRARY - 262)) | (1 << (Cobol85Parser.LIST - 262)) | (1 << (Cobol85Parser.LOCAL - 262)) | (1 << (Cobol85Parser.LONG_DATE - 262)) | (1 << (Cobol85Parser.LONG_TIME - 262)) | (1 << (Cobol85Parser.LOWER - 262)) | (1 << (Cobol85Parser.LOWLIGHT - 262)) | (1 << (Cobol85Parser.MMDDYYYY - 262)) | (1 << (Cobol85Parser.NAMED - 262)) | (1 << (Cobol85Parser.NATIONAL - 262)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 262)) | (1 << (Cobol85Parser.NETWORK - 262)) | (1 << (Cobol85Parser.NO_ECHO - 262)) | (1 << (Cobol85Parser.NUMERIC_DATE - 262)) | (1 << (Cobol85Parser.NUMERIC_TIME - 262)))) != 0) or ((((_la - 326)) & ~0x3f) == 0 and ((1 << (_la - 326)) & ((1 << (Cobol85Parser.ODT - 326)) | (1 << (Cobol85Parser.ORDERLY - 326)) | (1 << (Cobol85Parser.OVERLINE - 326)) | (1 << (Cobol85Parser.OWN - 326)) | (1 << (Cobol85Parser.PASSWORD - 326)) | (1 << (Cobol85Parser.PORT - 326)) | (1 << (Cobol85Parser.PRINTER - 326)) | (1 << (Cobol85Parser.PRIVATE - 326)) | (1 << (Cobol85Parser.PROCESS - 326)) | (1 << (Cobol85Parser.PROGRAM - 326)) | (1 << (Cobol85Parser.PROMPT - 326)) | (1 << (Cobol85Parser.READER - 326)) | (1 << (Cobol85Parser.REMOTE - 326)) | (1 << (Cobol85Parser.REAL - 326)) | (1 << (Cobol85Parser.RECEIVED - 326)) | (1 << (Cobol85Parser.RECURSIVE - 326)) | (1 << (Cobol85Parser.REF - 326)))) != 0) or ((((_la - 395)) & ~0x3f) == 0 and ((1 << (_la - 395)) & ((1 << (Cobol85Parser.REMOVE - 395)) | (1 << (Cobol85Parser.REQUIRED - 395)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 395)) | (1 << (Cobol85Parser.SAVE - 395)) | (1 << (Cobol85Parser.SECURE - 395)) | (1 << (Cobol85Parser.SHARED - 395)) | (1 << (Cobol85Parser.SHAREDBYALL - 395)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 395)) | (1 << (Cobol85Parser.SHARING - 395)) | (1 << (Cobol85Parser.SHORT_DATE - 395)) | (1 << (Cobol85Parser.SQL - 395)))) != 0) or ((((_la - 471)) & ~0x3f) == 0 and ((1 << (_la - 471)) & ((1 << (Cobol85Parser.SYMBOL - 471)) | (1 << (Cobol85Parser.TASK - 471)) | (1 << (Cobol85Parser.THREAD - 471)) | (1 << (Cobol85Parser.THREAD_LOCAL - 471)) | (1 << (Cobol85Parser.TIMER - 471)) | (1 << (Cobol85Parser.TODAYS_DATE - 471)) | (1 << (Cobol85Parser.TODAYS_NAME - 471)) | (1 << (Cobol85Parser.TRUNCATED - 471)) | (1 << (Cobol85Parser.TYPEDEF - 471)) | (1 << (Cobol85Parser.UNDERLINE - 471)) | (1 << (Cobol85Parser.VIRTUAL - 471)) | (1 << (Cobol85Parser.WAIT - 471)) | (1 << (Cobol85Parser.YEAR - 471)) | (1 << (Cobol85Parser.YYYYMMDD - 471)) | (1 << (Cobol85Parser.YYYYDDD - 471)) | (1 << (Cobol85Parser.ZERO_FILL - 471)))) != 0) or _la==Cobol85Parser.IDENTIFIER:
                self.state = 1340
                self.computerName()
                self.state = 1344
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==Cobol85Parser.CHARACTER or _la==Cobol85Parser.COLLATING or _la==Cobol85Parser.DISK or _la==Cobol85Parser.MEMORY or _la==Cobol85Parser.PROGRAM or _la==Cobol85Parser.SEGMENT_LIMIT or _la==Cobol85Parser.SEQUENCE:
                    self.state = 1341
                    self.objectComputerClause()
                    self.state = 1346
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1347
                self.match(Cobol85Parser.DOT_FS)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ObjectComputerClauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.ObjectComputerClauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def memorySizeClause(self):
            return self.getTypedRuleContext(Cobol85Parser.MemorySizeClauseContext,0)


        def diskSizeClause(self):
            return self.getTypedRuleContext(Cobol85Parser.DiskSizeClauseContext,0)


        def collatingSequenceClause(self):
            return self.getTypedRuleContext(Cobol85Parser.CollatingSequenceClauseContext,0)


        def segmentLimitClause(self):
            return self.getTypedRuleContext(Cobol85Parser.SegmentLimitClauseContext,0)


        def characterSetClause(self):
            return self.getTypedRuleContext(Cobol85Parser.CharacterSetClauseContext,0)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_objectComputerClause

        def enterRule(self, listener):
            if hasattr(listener, "enterObjectComputerClause"):
                listener.enterObjectComputerClause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitObjectComputerClause"):
                listener.exitObjectComputerClause(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitObjectComputerClause"):
                return visitor.visitObjectComputerClause(self)
            else:
                return visitor.visitChildren(self)




    def objectComputerClause(self):

        localctx = Cobol85Parser.ObjectComputerClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_objectComputerClause)
        try:
            self.state = 1356
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Cobol85Parser.MEMORY]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1351
                self.memorySizeClause()
                pass
            elif token in [Cobol85Parser.DISK]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1352
                self.diskSizeClause()
                pass
            elif token in [Cobol85Parser.COLLATING, Cobol85Parser.PROGRAM, Cobol85Parser.SEQUENCE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1353
                self.collatingSequenceClause()
                pass
            elif token in [Cobol85Parser.SEGMENT_LIMIT]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1354
                self.segmentLimitClause()
                pass
            elif token in [Cobol85Parser.CHARACTER]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1355
                self.characterSetClause()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MemorySizeClauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.MemorySizeClauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def MEMORY(self):
            return self.getToken(Cobol85Parser.MEMORY, 0)

        def integerLiteral(self):
            return self.getTypedRuleContext(Cobol85Parser.IntegerLiteralContext,0)


        def cobolWord(self):
            return self.getTypedRuleContext(Cobol85Parser.CobolWordContext,0)


        def SIZE(self):
            return self.getToken(Cobol85Parser.SIZE, 0)

        def WORDS(self):
            return self.getToken(Cobol85Parser.WORDS, 0)

        def CHARACTERS(self):
            return self.getToken(Cobol85Parser.CHARACTERS, 0)

        def MODULES(self):
            return self.getToken(Cobol85Parser.MODULES, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_memorySizeClause

        def enterRule(self, listener):
            if hasattr(listener, "enterMemorySizeClause"):
                listener.enterMemorySizeClause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitMemorySizeClause"):
                listener.exitMemorySizeClause(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitMemorySizeClause"):
                return visitor.visitMemorySizeClause(self)
            else:
                return visitor.visitChildren(self)




    def memorySizeClause(self):

        localctx = Cobol85Parser.MemorySizeClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_memorySizeClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1358
            self.match(Cobol85Parser.MEMORY)
            self.state = 1360
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.SIZE:
                self.state = 1359
                self.match(Cobol85Parser.SIZE)


            self.state = 1364
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Cobol85Parser.LEVEL_NUMBER_66, Cobol85Parser.LEVEL_NUMBER_77, Cobol85Parser.LEVEL_NUMBER_88, Cobol85Parser.INTEGERLITERAL]:
                self.state = 1362
                self.integerLiteral()
                pass
            elif token in [Cobol85Parser.ABORT, Cobol85Parser.AS, Cobol85Parser.ASCII, Cobol85Parser.ASSOCIATED_DATA, Cobol85Parser.ASSOCIATED_DATA_LENGTH, Cobol85Parser.ATTRIBUTE, Cobol85Parser.AUTO, Cobol85Parser.AUTO_SKIP, Cobol85Parser.BACKGROUND_COLOR, Cobol85Parser.BACKGROUND_COLOUR, Cobol85Parser.BEEP, Cobol85Parser.BELL, Cobol85Parser.BINARY, Cobol85Parser.BIT, Cobol85Parser.BLINK, Cobol85Parser.BLOB, Cobol85Parser.BOUNDS, Cobol85Parser.CAPABLE, Cobol85Parser.CCSVERSION, Cobol85Parser.CHANGED, Cobol85Parser.CHANNEL, Cobol85Parser.CLOB, Cobol85Parser.CLOSE_DISPOSITION, Cobol85Parser.COBOL, Cobol85Parser.COMMITMENT, Cobol85Parser.CONTROL_POINT, Cobol85Parser.CONVENTION, Cobol85Parser.CRUNCH, Cobol85Parser.CURSOR, Cobol85Parser.DBCLOB, Cobol85Parser.DEFAULT, Cobol85Parser.DEFAULT_DISPLAY, Cobol85Parser.DEFINITION, Cobol85Parser.DFHRESP, Cobol85Parser.DFHVALUE, Cobol85Parser.DISK, Cobol85Parser.DONTCARE, Cobol85Parser.DOUBLE, Cobol85Parser.EBCDIC, Cobol85Parser.EMPTY_CHECK, Cobol85Parser.ENTER, Cobol85Parser.ENTRY_PROCEDURE, Cobol85Parser.ERASE, Cobol85Parser.EOL, Cobol85Parser.EOS, Cobol85Parser.ESCAPE, Cobol85Parser.EVENT, Cobol85Parser.EXCLUSIVE, Cobol85Parser.EXPORT, Cobol85Parser.EXTENDED, Cobol85Parser.FOREGROUND_COLOR, Cobol85Parser.FOREGROUND_COLOUR, Cobol85Parser.FULL, Cobol85Parser.FUNCTIONNAME, Cobol85Parser.FUNCTION_POINTER, Cobol85Parser.GRID, Cobol85Parser.HIGHLIGHT, Cobol85Parser.IMPLICIT, Cobol85Parser.IMPORT, Cobol85Parser.INTEGER, Cobol85Parser.KEPT, Cobol85Parser.KEYBOARD, Cobol85Parser.LANGUAGE, Cobol85Parser.LB, Cobol85Parser.LD, Cobol85Parser.LEFTLINE, Cobol85Parser.LENGTH_CHECK, Cobol85Parser.LIBACCESS, Cobol85Parser.LIBPARAMETER, Cobol85Parser.LIBRARY, Cobol85Parser.LIST, Cobol85Parser.LOCAL, Cobol85Parser.LONG_DATE, Cobol85Parser.LONG_TIME, Cobol85Parser.LOWER, Cobol85Parser.LOWLIGHT, Cobol85Parser.MMDDYYYY, Cobol85Parser.NAMED, Cobol85Parser.NATIONAL, Cobol85Parser.NATIONAL_EDITED, Cobol85Parser.NETWORK, Cobol85Parser.NO_ECHO, Cobol85Parser.NUMERIC_DATE, Cobol85Parser.NUMERIC_TIME, Cobol85Parser.ODT, Cobol85Parser.ORDERLY, Cobol85Parser.OVERLINE, Cobol85Parser.OWN, Cobol85Parser.PASSWORD, Cobol85Parser.PORT, Cobol85Parser.PRINTER, Cobol85Parser.PRIVATE, Cobol85Parser.PROCESS, Cobol85Parser.PROGRAM, Cobol85Parser.PROMPT, Cobol85Parser.READER, Cobol85Parser.REMOTE, Cobol85Parser.REAL, Cobol85Parser.RECEIVED, Cobol85Parser.RECURSIVE, Cobol85Parser.REF, Cobol85Parser.REMOVE, Cobol85Parser.REQUIRED, Cobol85Parser.REVERSE_VIDEO, Cobol85Parser.SAVE, Cobol85Parser.SECURE, Cobol85Parser.SHARED, Cobol85Parser.SHAREDBYALL, Cobol85Parser.SHAREDBYRUNUNIT, Cobol85Parser.SHARING, Cobol85Parser.SHORT_DATE, Cobol85Parser.SQL, Cobol85Parser.SYMBOL, Cobol85Parser.TASK, Cobol85Parser.THREAD, Cobol85Parser.THREAD_LOCAL, Cobol85Parser.TIMER, Cobol85Parser.TODAYS_DATE, Cobol85Parser.TODAYS_NAME, Cobol85Parser.TRUNCATED, Cobol85Parser.TYPEDEF, Cobol85Parser.UNDERLINE, Cobol85Parser.VIRTUAL, Cobol85Parser.WAIT, Cobol85Parser.YEAR, Cobol85Parser.YYYYMMDD, Cobol85Parser.YYYYDDD, Cobol85Parser.ZERO_FILL, Cobol85Parser.IDENTIFIER]:
                self.state = 1363
                self.cobolWord()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1367
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.CHARACTERS or _la==Cobol85Parser.MODULES or _la==Cobol85Parser.WORDS:
                self.state = 1366
                _la = self._input.LA(1)
                if not(_la==Cobol85Parser.CHARACTERS or _la==Cobol85Parser.MODULES or _la==Cobol85Parser.WORDS):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DiskSizeClauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.DiskSizeClauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def DISK(self):
            return self.getToken(Cobol85Parser.DISK, 0)

        def integerLiteral(self):
            return self.getTypedRuleContext(Cobol85Parser.IntegerLiteralContext,0)


        def cobolWord(self):
            return self.getTypedRuleContext(Cobol85Parser.CobolWordContext,0)


        def SIZE(self):
            return self.getToken(Cobol85Parser.SIZE, 0)

        def IS(self):
            return self.getToken(Cobol85Parser.IS, 0)

        def WORDS(self):
            return self.getToken(Cobol85Parser.WORDS, 0)

        def MODULES(self):
            return self.getToken(Cobol85Parser.MODULES, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_diskSizeClause

        def enterRule(self, listener):
            if hasattr(listener, "enterDiskSizeClause"):
                listener.enterDiskSizeClause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitDiskSizeClause"):
                listener.exitDiskSizeClause(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitDiskSizeClause"):
                return visitor.visitDiskSizeClause(self)
            else:
                return visitor.visitChildren(self)




    def diskSizeClause(self):

        localctx = Cobol85Parser.DiskSizeClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_diskSizeClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1369
            self.match(Cobol85Parser.DISK)
            self.state = 1371
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.SIZE:
                self.state = 1370
                self.match(Cobol85Parser.SIZE)


            self.state = 1374
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.IS:
                self.state = 1373
                self.match(Cobol85Parser.IS)


            self.state = 1378
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Cobol85Parser.LEVEL_NUMBER_66, Cobol85Parser.LEVEL_NUMBER_77, Cobol85Parser.LEVEL_NUMBER_88, Cobol85Parser.INTEGERLITERAL]:
                self.state = 1376
                self.integerLiteral()
                pass
            elif token in [Cobol85Parser.ABORT, Cobol85Parser.AS, Cobol85Parser.ASCII, Cobol85Parser.ASSOCIATED_DATA, Cobol85Parser.ASSOCIATED_DATA_LENGTH, Cobol85Parser.ATTRIBUTE, Cobol85Parser.AUTO, Cobol85Parser.AUTO_SKIP, Cobol85Parser.BACKGROUND_COLOR, Cobol85Parser.BACKGROUND_COLOUR, Cobol85Parser.BEEP, Cobol85Parser.BELL, Cobol85Parser.BINARY, Cobol85Parser.BIT, Cobol85Parser.BLINK, Cobol85Parser.BLOB, Cobol85Parser.BOUNDS, Cobol85Parser.CAPABLE, Cobol85Parser.CCSVERSION, Cobol85Parser.CHANGED, Cobol85Parser.CHANNEL, Cobol85Parser.CLOB, Cobol85Parser.CLOSE_DISPOSITION, Cobol85Parser.COBOL, Cobol85Parser.COMMITMENT, Cobol85Parser.CONTROL_POINT, Cobol85Parser.CONVENTION, Cobol85Parser.CRUNCH, Cobol85Parser.CURSOR, Cobol85Parser.DBCLOB, Cobol85Parser.DEFAULT, Cobol85Parser.DEFAULT_DISPLAY, Cobol85Parser.DEFINITION, Cobol85Parser.DFHRESP, Cobol85Parser.DFHVALUE, Cobol85Parser.DISK, Cobol85Parser.DONTCARE, Cobol85Parser.DOUBLE, Cobol85Parser.EBCDIC, Cobol85Parser.EMPTY_CHECK, Cobol85Parser.ENTER, Cobol85Parser.ENTRY_PROCEDURE, Cobol85Parser.ERASE, Cobol85Parser.EOL, Cobol85Parser.EOS, Cobol85Parser.ESCAPE, Cobol85Parser.EVENT, Cobol85Parser.EXCLUSIVE, Cobol85Parser.EXPORT, Cobol85Parser.EXTENDED, Cobol85Parser.FOREGROUND_COLOR, Cobol85Parser.FOREGROUND_COLOUR, Cobol85Parser.FULL, Cobol85Parser.FUNCTIONNAME, Cobol85Parser.FUNCTION_POINTER, Cobol85Parser.GRID, Cobol85Parser.HIGHLIGHT, Cobol85Parser.IMPLICIT, Cobol85Parser.IMPORT, Cobol85Parser.INTEGER, Cobol85Parser.KEPT, Cobol85Parser.KEYBOARD, Cobol85Parser.LANGUAGE, Cobol85Parser.LB, Cobol85Parser.LD, Cobol85Parser.LEFTLINE, Cobol85Parser.LENGTH_CHECK, Cobol85Parser.LIBACCESS, Cobol85Parser.LIBPARAMETER, Cobol85Parser.LIBRARY, Cobol85Parser.LIST, Cobol85Parser.LOCAL, Cobol85Parser.LONG_DATE, Cobol85Parser.LONG_TIME, Cobol85Parser.LOWER, Cobol85Parser.LOWLIGHT, Cobol85Parser.MMDDYYYY, Cobol85Parser.NAMED, Cobol85Parser.NATIONAL, Cobol85Parser.NATIONAL_EDITED, Cobol85Parser.NETWORK, Cobol85Parser.NO_ECHO, Cobol85Parser.NUMERIC_DATE, Cobol85Parser.NUMERIC_TIME, Cobol85Parser.ODT, Cobol85Parser.ORDERLY, Cobol85Parser.OVERLINE, Cobol85Parser.OWN, Cobol85Parser.PASSWORD, Cobol85Parser.PORT, Cobol85Parser.PRINTER, Cobol85Parser.PRIVATE, Cobol85Parser.PROCESS, Cobol85Parser.PROGRAM, Cobol85Parser.PROMPT, Cobol85Parser.READER, Cobol85Parser.REMOTE, Cobol85Parser.REAL, Cobol85Parser.RECEIVED, Cobol85Parser.RECURSIVE, Cobol85Parser.REF, Cobol85Parser.REMOVE, Cobol85Parser.REQUIRED, Cobol85Parser.REVERSE_VIDEO, Cobol85Parser.SAVE, Cobol85Parser.SECURE, Cobol85Parser.SHARED, Cobol85Parser.SHAREDBYALL, Cobol85Parser.SHAREDBYRUNUNIT, Cobol85Parser.SHARING, Cobol85Parser.SHORT_DATE, Cobol85Parser.SQL, Cobol85Parser.SYMBOL, Cobol85Parser.TASK, Cobol85Parser.THREAD, Cobol85Parser.THREAD_LOCAL, Cobol85Parser.TIMER, Cobol85Parser.TODAYS_DATE, Cobol85Parser.TODAYS_NAME, Cobol85Parser.TRUNCATED, Cobol85Parser.TYPEDEF, Cobol85Parser.UNDERLINE, Cobol85Parser.VIRTUAL, Cobol85Parser.WAIT, Cobol85Parser.YEAR, Cobol85Parser.YYYYMMDD, Cobol85Parser.YYYYDDD, Cobol85Parser.ZERO_FILL, Cobol85Parser.IDENTIFIER]:
                self.state = 1377
                self.cobolWord()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1381
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.MODULES or _la==Cobol85Parser.WORDS:
                self.state = 1380
                _la = self._input.LA(1)
                if not(_la==Cobol85Parser.MODULES or _la==Cobol85Parser.WORDS):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CollatingSequenceClauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.CollatingSequenceClauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def SEQUENCE(self):
            return self.getToken(Cobol85Parser.SEQUENCE, 0)

        def PROGRAM(self):
            return self.getToken(Cobol85Parser.PROGRAM, 0)

        def COLLATING(self):
            return self.getToken(Cobol85Parser.COLLATING, 0)

        def collatingSequenceClauseAlphanumeric(self):
            return self.getTypedRuleContext(Cobol85Parser.CollatingSequenceClauseAlphanumericContext,0)


        def collatingSequenceClauseNational(self):
            return self.getTypedRuleContext(Cobol85Parser.CollatingSequenceClauseNationalContext,0)


        def IS(self):
            return self.getToken(Cobol85Parser.IS, 0)

        def alphabetName(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.AlphabetNameContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.AlphabetNameContext,i)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_collatingSequenceClause

        def enterRule(self, listener):
            if hasattr(listener, "enterCollatingSequenceClause"):
                listener.enterCollatingSequenceClause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitCollatingSequenceClause"):
                listener.exitCollatingSequenceClause(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitCollatingSequenceClause"):
                return visitor.visitCollatingSequenceClause(self)
            else:
                return visitor.visitChildren(self)




    def collatingSequenceClause(self):

        localctx = Cobol85Parser.CollatingSequenceClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_collatingSequenceClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1384
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.PROGRAM:
                self.state = 1383
                self.match(Cobol85Parser.PROGRAM)


            self.state = 1387
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.COLLATING:
                self.state = 1386
                self.match(Cobol85Parser.COLLATING)


            self.state = 1389
            self.match(Cobol85Parser.SEQUENCE)

            self.state = 1391
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.IS:
                self.state = 1390
                self.match(Cobol85Parser.IS)


            self.state = 1394 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1393
                    self.alphabetName()

                else:
                    raise NoViableAltException(self)
                self.state = 1396 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,41,self._ctx)

            self.state = 1399
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,42,self._ctx)
            if la_ == 1:
                self.state = 1398
                self.collatingSequenceClauseAlphanumeric()


            self.state = 1402
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.FOR or _la==Cobol85Parser.NATIONAL:
                self.state = 1401
                self.collatingSequenceClauseNational()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CollatingSequenceClauseAlphanumericContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.CollatingSequenceClauseAlphanumericContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ALPHANUMERIC(self):
            return self.getToken(Cobol85Parser.ALPHANUMERIC, 0)

        def alphabetName(self):
            return self.getTypedRuleContext(Cobol85Parser.AlphabetNameContext,0)


        def FOR(self):
            return self.getToken(Cobol85Parser.FOR, 0)

        def IS(self):
            return self.getToken(Cobol85Parser.IS, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_collatingSequenceClauseAlphanumeric

        def enterRule(self, listener):
            if hasattr(listener, "enterCollatingSequenceClauseAlphanumeric"):
                listener.enterCollatingSequenceClauseAlphanumeric(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitCollatingSequenceClauseAlphanumeric"):
                listener.exitCollatingSequenceClauseAlphanumeric(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitCollatingSequenceClauseAlphanumeric"):
                return visitor.visitCollatingSequenceClauseAlphanumeric(self)
            else:
                return visitor.visitChildren(self)




    def collatingSequenceClauseAlphanumeric(self):

        localctx = Cobol85Parser.CollatingSequenceClauseAlphanumericContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_collatingSequenceClauseAlphanumeric)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1405
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.FOR:
                self.state = 1404
                self.match(Cobol85Parser.FOR)


            self.state = 1407
            self.match(Cobol85Parser.ALPHANUMERIC)
            self.state = 1409
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.IS:
                self.state = 1408
                self.match(Cobol85Parser.IS)


            self.state = 1411
            self.alphabetName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CollatingSequenceClauseNationalContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.CollatingSequenceClauseNationalContext, self).__init__(parent, invokingState)
            self.parser = parser

        def NATIONAL(self):
            return self.getToken(Cobol85Parser.NATIONAL, 0)

        def alphabetName(self):
            return self.getTypedRuleContext(Cobol85Parser.AlphabetNameContext,0)


        def FOR(self):
            return self.getToken(Cobol85Parser.FOR, 0)

        def IS(self):
            return self.getToken(Cobol85Parser.IS, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_collatingSequenceClauseNational

        def enterRule(self, listener):
            if hasattr(listener, "enterCollatingSequenceClauseNational"):
                listener.enterCollatingSequenceClauseNational(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitCollatingSequenceClauseNational"):
                listener.exitCollatingSequenceClauseNational(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitCollatingSequenceClauseNational"):
                return visitor.visitCollatingSequenceClauseNational(self)
            else:
                return visitor.visitChildren(self)




    def collatingSequenceClauseNational(self):

        localctx = Cobol85Parser.CollatingSequenceClauseNationalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_collatingSequenceClauseNational)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1414
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.FOR:
                self.state = 1413
                self.match(Cobol85Parser.FOR)


            self.state = 1416
            self.match(Cobol85Parser.NATIONAL)
            self.state = 1418
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.IS:
                self.state = 1417
                self.match(Cobol85Parser.IS)


            self.state = 1420
            self.alphabetName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SegmentLimitClauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.SegmentLimitClauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def SEGMENT_LIMIT(self):
            return self.getToken(Cobol85Parser.SEGMENT_LIMIT, 0)

        def integerLiteral(self):
            return self.getTypedRuleContext(Cobol85Parser.IntegerLiteralContext,0)


        def IS(self):
            return self.getToken(Cobol85Parser.IS, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_segmentLimitClause

        def enterRule(self, listener):
            if hasattr(listener, "enterSegmentLimitClause"):
                listener.enterSegmentLimitClause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSegmentLimitClause"):
                listener.exitSegmentLimitClause(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitSegmentLimitClause"):
                return visitor.visitSegmentLimitClause(self)
            else:
                return visitor.visitChildren(self)




    def segmentLimitClause(self):

        localctx = Cobol85Parser.SegmentLimitClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_segmentLimitClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1422
            self.match(Cobol85Parser.SEGMENT_LIMIT)
            self.state = 1424
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.IS:
                self.state = 1423
                self.match(Cobol85Parser.IS)


            self.state = 1426
            self.integerLiteral()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CharacterSetClauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.CharacterSetClauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def CHARACTER(self):
            return self.getToken(Cobol85Parser.CHARACTER, 0)

        def SET(self):
            return self.getToken(Cobol85Parser.SET, 0)

        def DOT_FS(self):
            return self.getToken(Cobol85Parser.DOT_FS, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_characterSetClause

        def enterRule(self, listener):
            if hasattr(listener, "enterCharacterSetClause"):
                listener.enterCharacterSetClause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitCharacterSetClause"):
                listener.exitCharacterSetClause(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitCharacterSetClause"):
                return visitor.visitCharacterSetClause(self)
            else:
                return visitor.visitChildren(self)




    def characterSetClause(self):

        localctx = Cobol85Parser.CharacterSetClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_characterSetClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1428
            self.match(Cobol85Parser.CHARACTER)
            self.state = 1429
            self.match(Cobol85Parser.SET)
            self.state = 1430
            self.match(Cobol85Parser.DOT_FS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SpecialNamesParagraphContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.SpecialNamesParagraphContext, self).__init__(parent, invokingState)
            self.parser = parser

        def SPECIAL_NAMES(self):
            return self.getToken(Cobol85Parser.SPECIAL_NAMES, 0)

        def DOT_FS(self, i=None):
            if i is None:
                return self.getTokens(Cobol85Parser.DOT_FS)
            else:
                return self.getToken(Cobol85Parser.DOT_FS, i)

        def specialNameClause(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.SpecialNameClauseContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.SpecialNameClauseContext,i)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_specialNamesParagraph

        def enterRule(self, listener):
            if hasattr(listener, "enterSpecialNamesParagraph"):
                listener.enterSpecialNamesParagraph(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSpecialNamesParagraph"):
                listener.exitSpecialNamesParagraph(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitSpecialNamesParagraph"):
                return visitor.visitSpecialNamesParagraph(self)
            else:
                return visitor.visitChildren(self)




    def specialNamesParagraph(self):

        localctx = Cobol85Parser.SpecialNamesParagraphContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_specialNamesParagraph)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1432
            self.match(Cobol85Parser.SPECIAL_NAMES)
            self.state = 1433
            self.match(Cobol85Parser.DOT_FS)
            self.state = 1441
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.ALPHABET) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE) | (1 << Cobol85Parser.AUTO) | (1 << Cobol85Parser.AUTO_SKIP) | (1 << Cobol85Parser.BACKGROUND_COLOR) | (1 << Cobol85Parser.BACKGROUND_COLOUR) | (1 << Cobol85Parser.BEEP) | (1 << Cobol85Parser.BELL) | (1 << Cobol85Parser.BINARY) | (1 << Cobol85Parser.BIT) | (1 << Cobol85Parser.BLINK) | (1 << Cobol85Parser.BLOB) | (1 << Cobol85Parser.BOUNDS) | (1 << Cobol85Parser.CAPABLE) | (1 << Cobol85Parser.CCSVERSION) | (1 << Cobol85Parser.CHANGED) | (1 << Cobol85Parser.CHANNEL))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (Cobol85Parser.CLASS - 65)) | (1 << (Cobol85Parser.CLOB - 65)) | (1 << (Cobol85Parser.CLOSE_DISPOSITION - 65)) | (1 << (Cobol85Parser.COBOL - 65)) | (1 << (Cobol85Parser.COMMITMENT - 65)) | (1 << (Cobol85Parser.CONTROL_POINT - 65)) | (1 << (Cobol85Parser.CONVENTION - 65)) | (1 << (Cobol85Parser.CRUNCH - 65)) | (1 << (Cobol85Parser.CURRENCY - 65)) | (1 << (Cobol85Parser.CURSOR - 65)) | (1 << (Cobol85Parser.DBCLOB - 65)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (Cobol85Parser.DECIMAL_POINT - 129)) | (1 << (Cobol85Parser.DEFAULT - 129)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 129)) | (1 << (Cobol85Parser.DEFINITION - 129)) | (1 << (Cobol85Parser.DFHRESP - 129)) | (1 << (Cobol85Parser.DFHVALUE - 129)) | (1 << (Cobol85Parser.DISK - 129)) | (1 << (Cobol85Parser.DONTCARE - 129)) | (1 << (Cobol85Parser.DOUBLE - 129)) | (1 << (Cobol85Parser.EBCDIC - 129)) | (1 << (Cobol85Parser.EMPTY_CHECK - 129)) | (1 << (Cobol85Parser.ENTER - 129)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 129)) | (1 << (Cobol85Parser.ERASE - 129)))) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (Cobol85Parser.EOL - 193)) | (1 << (Cobol85Parser.EOS - 193)) | (1 << (Cobol85Parser.ESCAPE - 193)) | (1 << (Cobol85Parser.EVENT - 193)) | (1 << (Cobol85Parser.EXCLUSIVE - 193)) | (1 << (Cobol85Parser.EXPORT - 193)) | (1 << (Cobol85Parser.EXTENDED - 193)) | (1 << (Cobol85Parser.FOREGROUND_COLOR - 193)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 193)) | (1 << (Cobol85Parser.FULL - 193)) | (1 << (Cobol85Parser.FUNCTIONNAME - 193)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 193)) | (1 << (Cobol85Parser.GRID - 193)) | (1 << (Cobol85Parser.HIGHLIGHT - 193)) | (1 << (Cobol85Parser.IMPLICIT - 193)) | (1 << (Cobol85Parser.IMPORT - 193)) | (1 << (Cobol85Parser.INTEGER - 193)))) != 0) or ((((_la - 262)) & ~0x3f) == 0 and ((1 << (_la - 262)) & ((1 << (Cobol85Parser.KEPT - 262)) | (1 << (Cobol85Parser.KEYBOARD - 262)) | (1 << (Cobol85Parser.LANGUAGE - 262)) | (1 << (Cobol85Parser.LB - 262)) | (1 << (Cobol85Parser.LD - 262)) | (1 << (Cobol85Parser.LEFTLINE - 262)) | (1 << (Cobol85Parser.LENGTH_CHECK - 262)) | (1 << (Cobol85Parser.LIBACCESS - 262)) | (1 << (Cobol85Parser.LIBPARAMETER - 262)) | (1 << (Cobol85Parser.LIBRARY - 262)) | (1 << (Cobol85Parser.LIST - 262)) | (1 << (Cobol85Parser.LOCAL - 262)) | (1 << (Cobol85Parser.LONG_DATE - 262)) | (1 << (Cobol85Parser.LONG_TIME - 262)) | (1 << (Cobol85Parser.LOWER - 262)) | (1 << (Cobol85Parser.LOWLIGHT - 262)) | (1 << (Cobol85Parser.MMDDYYYY - 262)) | (1 << (Cobol85Parser.NAMED - 262)) | (1 << (Cobol85Parser.NATIONAL - 262)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 262)) | (1 << (Cobol85Parser.NETWORK - 262)) | (1 << (Cobol85Parser.NO_ECHO - 262)) | (1 << (Cobol85Parser.NUMERIC_DATE - 262)) | (1 << (Cobol85Parser.NUMERIC_TIME - 262)))) != 0) or ((((_la - 326)) & ~0x3f) == 0 and ((1 << (_la - 326)) & ((1 << (Cobol85Parser.ODT - 326)) | (1 << (Cobol85Parser.OFF - 326)) | (1 << (Cobol85Parser.ON - 326)) | (1 << (Cobol85Parser.ORDERLY - 326)) | (1 << (Cobol85Parser.OVERLINE - 326)) | (1 << (Cobol85Parser.OWN - 326)) | (1 << (Cobol85Parser.PASSWORD - 326)) | (1 << (Cobol85Parser.PORT - 326)) | (1 << (Cobol85Parser.PRINTER - 326)) | (1 << (Cobol85Parser.PRIVATE - 326)) | (1 << (Cobol85Parser.PROCESS - 326)) | (1 << (Cobol85Parser.PROGRAM - 326)) | (1 << (Cobol85Parser.PROMPT - 326)) | (1 << (Cobol85Parser.READER - 326)) | (1 << (Cobol85Parser.REMOTE - 326)) | (1 << (Cobol85Parser.REAL - 326)) | (1 << (Cobol85Parser.RECEIVED - 326)) | (1 << (Cobol85Parser.RECURSIVE - 326)) | (1 << (Cobol85Parser.REF - 326)))) != 0) or ((((_la - 395)) & ~0x3f) == 0 and ((1 << (_la - 395)) & ((1 << (Cobol85Parser.REMOVE - 395)) | (1 << (Cobol85Parser.REQUIRED - 395)) | (1 << (Cobol85Parser.RESERVE - 395)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 395)) | (1 << (Cobol85Parser.SAVE - 395)) | (1 << (Cobol85Parser.SECURE - 395)) | (1 << (Cobol85Parser.SHARED - 395)) | (1 << (Cobol85Parser.SHAREDBYALL - 395)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 395)) | (1 << (Cobol85Parser.SHARING - 395)) | (1 << (Cobol85Parser.SHORT_DATE - 395)) | (1 << (Cobol85Parser.SQL - 395)))) != 0) or ((((_la - 471)) & ~0x3f) == 0 and ((1 << (_la - 471)) & ((1 << (Cobol85Parser.SYMBOL - 471)) | (1 << (Cobol85Parser.SYMBOLIC - 471)) | (1 << (Cobol85Parser.TASK - 471)) | (1 << (Cobol85Parser.THREAD - 471)) | (1 << (Cobol85Parser.THREAD_LOCAL - 471)) | (1 << (Cobol85Parser.TIMER - 471)) | (1 << (Cobol85Parser.TODAYS_DATE - 471)) | (1 << (Cobol85Parser.TODAYS_NAME - 471)) | (1 << (Cobol85Parser.TRUNCATED - 471)) | (1 << (Cobol85Parser.TYPEDEF - 471)) | (1 << (Cobol85Parser.UNDERLINE - 471)) | (1 << (Cobol85Parser.VIRTUAL - 471)) | (1 << (Cobol85Parser.WAIT - 471)) | (1 << (Cobol85Parser.YEAR - 471)) | (1 << (Cobol85Parser.YYYYMMDD - 471)) | (1 << (Cobol85Parser.YYYYDDD - 471)) | (1 << (Cobol85Parser.ZERO_FILL - 471)))) != 0) or _la==Cobol85Parser.IDENTIFIER:
                self.state = 1435 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1434
                    self.specialNameClause()
                    self.state = 1437 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.ALPHABET) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE) | (1 << Cobol85Parser.AUTO) | (1 << Cobol85Parser.AUTO_SKIP) | (1 << Cobol85Parser.BACKGROUND_COLOR) | (1 << Cobol85Parser.BACKGROUND_COLOUR) | (1 << Cobol85Parser.BEEP) | (1 << Cobol85Parser.BELL) | (1 << Cobol85Parser.BINARY) | (1 << Cobol85Parser.BIT) | (1 << Cobol85Parser.BLINK) | (1 << Cobol85Parser.BLOB) | (1 << Cobol85Parser.BOUNDS) | (1 << Cobol85Parser.CAPABLE) | (1 << Cobol85Parser.CCSVERSION) | (1 << Cobol85Parser.CHANGED) | (1 << Cobol85Parser.CHANNEL))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (Cobol85Parser.CLASS - 65)) | (1 << (Cobol85Parser.CLOB - 65)) | (1 << (Cobol85Parser.CLOSE_DISPOSITION - 65)) | (1 << (Cobol85Parser.COBOL - 65)) | (1 << (Cobol85Parser.COMMITMENT - 65)) | (1 << (Cobol85Parser.CONTROL_POINT - 65)) | (1 << (Cobol85Parser.CONVENTION - 65)) | (1 << (Cobol85Parser.CRUNCH - 65)) | (1 << (Cobol85Parser.CURRENCY - 65)) | (1 << (Cobol85Parser.CURSOR - 65)) | (1 << (Cobol85Parser.DBCLOB - 65)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (Cobol85Parser.DECIMAL_POINT - 129)) | (1 << (Cobol85Parser.DEFAULT - 129)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 129)) | (1 << (Cobol85Parser.DEFINITION - 129)) | (1 << (Cobol85Parser.DFHRESP - 129)) | (1 << (Cobol85Parser.DFHVALUE - 129)) | (1 << (Cobol85Parser.DISK - 129)) | (1 << (Cobol85Parser.DONTCARE - 129)) | (1 << (Cobol85Parser.DOUBLE - 129)) | (1 << (Cobol85Parser.EBCDIC - 129)) | (1 << (Cobol85Parser.EMPTY_CHECK - 129)) | (1 << (Cobol85Parser.ENTER - 129)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 129)) | (1 << (Cobol85Parser.ERASE - 129)))) != 0) or ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (Cobol85Parser.EOL - 193)) | (1 << (Cobol85Parser.EOS - 193)) | (1 << (Cobol85Parser.ESCAPE - 193)) | (1 << (Cobol85Parser.EVENT - 193)) | (1 << (Cobol85Parser.EXCLUSIVE - 193)) | (1 << (Cobol85Parser.EXPORT - 193)) | (1 << (Cobol85Parser.EXTENDED - 193)) | (1 << (Cobol85Parser.FOREGROUND_COLOR - 193)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 193)) | (1 << (Cobol85Parser.FULL - 193)) | (1 << (Cobol85Parser.FUNCTIONNAME - 193)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 193)) | (1 << (Cobol85Parser.GRID - 193)) | (1 << (Cobol85Parser.HIGHLIGHT - 193)) | (1 << (Cobol85Parser.IMPLICIT - 193)) | (1 << (Cobol85Parser.IMPORT - 193)) | (1 << (Cobol85Parser.INTEGER - 193)))) != 0) or ((((_la - 262)) & ~0x3f) == 0 and ((1 << (_la - 262)) & ((1 << (Cobol85Parser.KEPT - 262)) | (1 << (Cobol85Parser.KEYBOARD - 262)) | (1 << (Cobol85Parser.LANGUAGE - 262)) | (1 << (Cobol85Parser.LB - 262)) | (1 << (Cobol85Parser.LD - 262)) | (1 << (Cobol85Parser.LEFTLINE - 262)) | (1 << (Cobol85Parser.LENGTH_CHECK - 262)) | (1 << (Cobol85Parser.LIBACCESS - 262)) | (1 << (Cobol85Parser.LIBPARAMETER - 262)) | (1 << (Cobol85Parser.LIBRARY - 262)) | (1 << (Cobol85Parser.LIST - 262)) | (1 << (Cobol85Parser.LOCAL - 262)) | (1 << (Cobol85Parser.LONG_DATE - 262)) | (1 << (Cobol85Parser.LONG_TIME - 262)) | (1 << (Cobol85Parser.LOWER - 262)) | (1 << (Cobol85Parser.LOWLIGHT - 262)) | (1 << (Cobol85Parser.MMDDYYYY - 262)) | (1 << (Cobol85Parser.NAMED - 262)) | (1 << (Cobol85Parser.NATIONAL - 262)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 262)) | (1 << (Cobol85Parser.NETWORK - 262)) | (1 << (Cobol85Parser.NO_ECHO - 262)) | (1 << (Cobol85Parser.NUMERIC_DATE - 262)) | (1 << (Cobol85Parser.NUMERIC_TIME - 262)))) != 0) or ((((_la - 326)) & ~0x3f) == 0 and ((1 << (_la - 326)) & ((1 << (Cobol85Parser.ODT - 326)) | (1 << (Cobol85Parser.OFF - 326)) | (1 << (Cobol85Parser.ON - 326)) | (1 << (Cobol85Parser.ORDERLY - 326)) | (1 << (Cobol85Parser.OVERLINE - 326)) | (1 << (Cobol85Parser.OWN - 326)) | (1 << (Cobol85Parser.PASSWORD - 326)) | (1 << (Cobol85Parser.PORT - 326)) | (1 << (Cobol85Parser.PRINTER - 326)) | (1 << (Cobol85Parser.PRIVATE - 326)) | (1 << (Cobol85Parser.PROCESS - 326)) | (1 << (Cobol85Parser.PROGRAM - 326)) | (1 << (Cobol85Parser.PROMPT - 326)) | (1 << (Cobol85Parser.READER - 326)) | (1 << (Cobol85Parser.REMOTE - 326)) | (1 << (Cobol85Parser.REAL - 326)) | (1 << (Cobol85Parser.RECEIVED - 326)) | (1 << (Cobol85Parser.RECURSIVE - 326)) | (1 << (Cobol85Parser.REF - 326)))) != 0) or ((((_la - 395)) & ~0x3f) == 0 and ((1 << (_la - 395)) & ((1 << (Cobol85Parser.REMOVE - 395)) | (1 << (Cobol85Parser.REQUIRED - 395)) | (1 << (Cobol85Parser.RESERVE - 395)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 395)) | (1 << (Cobol85Parser.SAVE - 395)) | (1 << (Cobol85Parser.SECURE - 395)) | (1 << (Cobol85Parser.SHARED - 395)) | (1 << (Cobol85Parser.SHAREDBYALL - 395)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 395)) | (1 << (Cobol85Parser.SHARING - 395)) | (1 << (Cobol85Parser.SHORT_DATE - 395)) | (1 << (Cobol85Parser.SQL - 395)))) != 0) or ((((_la - 471)) & ~0x3f) == 0 and ((1 << (_la - 471)) & ((1 << (Cobol85Parser.SYMBOL - 471)) | (1 << (Cobol85Parser.SYMBOLIC - 471)) | (1 << (Cobol85Parser.TASK - 471)) | (1 << (Cobol85Parser.THREAD - 471)) | (1 << (Cobol85Parser.THREAD_LOCAL - 471)) | (1 << (Cobol85Parser.TIMER - 471)) | (1 << (Cobol85Parser.TODAYS_DATE - 471)) | (1 << (Cobol85Parser.TODAYS_NAME - 471)) | (1 << (Cobol85Parser.TRUNCATED - 471)) | (1 << (Cobol85Parser.TYPEDEF - 471)) | (1 << (Cobol85Parser.UNDERLINE - 471)) | (1 << (Cobol85Parser.VIRTUAL - 471)) | (1 << (Cobol85Parser.WAIT - 471)) | (1 << (Cobol85Parser.YEAR - 471)) | (1 << (Cobol85Parser.YYYYMMDD - 471)) | (1 << (Cobol85Parser.YYYYDDD - 471)) | (1 << (Cobol85Parser.ZERO_FILL - 471)))) != 0) or _la==Cobol85Parser.IDENTIFIER):
                        break

                self.state = 1439
                self.match(Cobol85Parser.DOT_FS)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SpecialNameClauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.SpecialNameClauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def channelClause(self):
            return self.getTypedRuleContext(Cobol85Parser.ChannelClauseContext,0)


        def odtClause(self):
            return self.getTypedRuleContext(Cobol85Parser.OdtClauseContext,0)


        def alphabetClause(self):
            return self.getTypedRuleContext(Cobol85Parser.AlphabetClauseContext,0)


        def classClause(self):
            return self.getTypedRuleContext(Cobol85Parser.ClassClauseContext,0)


        def currencySignClause(self):
            return self.getTypedRuleContext(Cobol85Parser.CurrencySignClauseContext,0)


        def decimalPointClause(self):
            return self.getTypedRuleContext(Cobol85Parser.DecimalPointClauseContext,0)


        def symbolicCharactersClause(self):
            return self.getTypedRuleContext(Cobol85Parser.SymbolicCharactersClauseContext,0)


        def environmentSwitchNameClause(self):
            return self.getTypedRuleContext(Cobol85Parser.EnvironmentSwitchNameClauseContext,0)


        def defaultDisplaySignClause(self):
            return self.getTypedRuleContext(Cobol85Parser.DefaultDisplaySignClauseContext,0)


        def defaultComputationalSignClause(self):
            return self.getTypedRuleContext(Cobol85Parser.DefaultComputationalSignClauseContext,0)


        def reserveNetworkClause(self):
            return self.getTypedRuleContext(Cobol85Parser.ReserveNetworkClauseContext,0)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_specialNameClause

        def enterRule(self, listener):
            if hasattr(listener, "enterSpecialNameClause"):
                listener.enterSpecialNameClause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSpecialNameClause"):
                listener.exitSpecialNameClause(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitSpecialNameClause"):
                return visitor.visitSpecialNameClause(self)
            else:
                return visitor.visitChildren(self)




    def specialNameClause(self):

        localctx = Cobol85Parser.SpecialNameClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_specialNameClause)
        try:
            self.state = 1454
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,51,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1443
                self.channelClause()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1444
                self.odtClause()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1445
                self.alphabetClause()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1446
                self.classClause()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1447
                self.currencySignClause()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1448
                self.decimalPointClause()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1449
                self.symbolicCharactersClause()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1450
                self.environmentSwitchNameClause()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1451
                self.defaultDisplaySignClause()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1452
                self.defaultComputationalSignClause()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1453
                self.reserveNetworkClause()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AlphabetClauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.AlphabetClauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def alphabetClauseFormat1(self):
            return self.getTypedRuleContext(Cobol85Parser.AlphabetClauseFormat1Context,0)


        def alphabetClauseFormat2(self):
            return self.getTypedRuleContext(Cobol85Parser.AlphabetClauseFormat2Context,0)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_alphabetClause

        def enterRule(self, listener):
            if hasattr(listener, "enterAlphabetClause"):
                listener.enterAlphabetClause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitAlphabetClause"):
                listener.exitAlphabetClause(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitAlphabetClause"):
                return visitor.visitAlphabetClause(self)
            else:
                return visitor.visitChildren(self)




    def alphabetClause(self):

        localctx = Cobol85Parser.AlphabetClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_alphabetClause)
        try:
            self.state = 1458
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,52,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1456
                self.alphabetClauseFormat1()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1457
                self.alphabetClauseFormat2()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AlphabetClauseFormat1Context(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.AlphabetClauseFormat1Context, self).__init__(parent, invokingState)
            self.parser = parser

        def ALPHABET(self):
            return self.getToken(Cobol85Parser.ALPHABET, 0)

        def alphabetName(self):
            return self.getTypedRuleContext(Cobol85Parser.AlphabetNameContext,0)


        def EBCDIC(self):
            return self.getToken(Cobol85Parser.EBCDIC, 0)

        def ASCII(self):
            return self.getToken(Cobol85Parser.ASCII, 0)

        def STANDARD_1(self):
            return self.getToken(Cobol85Parser.STANDARD_1, 0)

        def STANDARD_2(self):
            return self.getToken(Cobol85Parser.STANDARD_2, 0)

        def NATIVE(self):
            return self.getToken(Cobol85Parser.NATIVE, 0)

        def cobolWord(self):
            return self.getTypedRuleContext(Cobol85Parser.CobolWordContext,0)


        def FOR(self):
            return self.getToken(Cobol85Parser.FOR, 0)

        def ALPHANUMERIC(self):
            return self.getToken(Cobol85Parser.ALPHANUMERIC, 0)

        def IS(self):
            return self.getToken(Cobol85Parser.IS, 0)

        def alphabetLiterals(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.AlphabetLiteralsContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.AlphabetLiteralsContext,i)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_alphabetClauseFormat1

        def enterRule(self, listener):
            if hasattr(listener, "enterAlphabetClauseFormat1"):
                listener.enterAlphabetClauseFormat1(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitAlphabetClauseFormat1"):
                listener.exitAlphabetClauseFormat1(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitAlphabetClauseFormat1"):
                return visitor.visitAlphabetClauseFormat1(self)
            else:
                return visitor.visitChildren(self)




    def alphabetClauseFormat1(self):

        localctx = Cobol85Parser.AlphabetClauseFormat1Context(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_alphabetClauseFormat1)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1460
            self.match(Cobol85Parser.ALPHABET)
            self.state = 1461
            self.alphabetName()
            self.state = 1464
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.FOR:
                self.state = 1462
                self.match(Cobol85Parser.FOR)
                self.state = 1463
                self.match(Cobol85Parser.ALPHANUMERIC)


            self.state = 1467
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.IS:
                self.state = 1466
                self.match(Cobol85Parser.IS)


            self.state = 1480
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,56,self._ctx)
            if la_ == 1:
                self.state = 1469
                self.match(Cobol85Parser.EBCDIC)
                pass

            elif la_ == 2:
                self.state = 1470
                self.match(Cobol85Parser.ASCII)
                pass

            elif la_ == 3:
                self.state = 1471
                self.match(Cobol85Parser.STANDARD_1)
                pass

            elif la_ == 4:
                self.state = 1472
                self.match(Cobol85Parser.STANDARD_2)
                pass

            elif la_ == 5:
                self.state = 1473
                self.match(Cobol85Parser.NATIVE)
                pass

            elif la_ == 6:
                self.state = 1474
                self.cobolWord()
                pass

            elif la_ == 7:
                self.state = 1476 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1475
                        self.alphabetLiterals()

                    else:
                        raise NoViableAltException(self)
                    self.state = 1478 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,55,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AlphabetLiteralsContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.AlphabetLiteralsContext, self).__init__(parent, invokingState)
            self.parser = parser

        def literal(self):
            return self.getTypedRuleContext(Cobol85Parser.LiteralContext,0)


        def alphabetThrough(self):
            return self.getTypedRuleContext(Cobol85Parser.AlphabetThroughContext,0)


        def alphabetAlso(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.AlphabetAlsoContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.AlphabetAlsoContext,i)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_alphabetLiterals

        def enterRule(self, listener):
            if hasattr(listener, "enterAlphabetLiterals"):
                listener.enterAlphabetLiterals(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitAlphabetLiterals"):
                listener.exitAlphabetLiterals(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitAlphabetLiterals"):
                return visitor.visitAlphabetLiterals(self)
            else:
                return visitor.visitChildren(self)




    def alphabetLiterals(self):

        localctx = Cobol85Parser.AlphabetLiteralsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_alphabetLiterals)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1482
            self.literal()
            self.state = 1489
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Cobol85Parser.THROUGH, Cobol85Parser.THRU]:
                self.state = 1483
                self.alphabetThrough()
                pass
            elif token in [Cobol85Parser.ALSO]:
                self.state = 1485 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1484
                    self.alphabetAlso()
                    self.state = 1487 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==Cobol85Parser.ALSO):
                        break

                pass
            elif token in [Cobol85Parser.ABORT, Cobol85Parser.ALL, Cobol85Parser.ALPHABET, Cobol85Parser.AS, Cobol85Parser.ASCII, Cobol85Parser.ASSOCIATED_DATA, Cobol85Parser.ASSOCIATED_DATA_LENGTH, Cobol85Parser.ATTRIBUTE, Cobol85Parser.AUTO, Cobol85Parser.AUTO_SKIP, Cobol85Parser.BACKGROUND_COLOR, Cobol85Parser.BACKGROUND_COLOUR, Cobol85Parser.BEEP, Cobol85Parser.BELL, Cobol85Parser.BINARY, Cobol85Parser.BIT, Cobol85Parser.BLINK, Cobol85Parser.BLOB, Cobol85Parser.BOUNDS, Cobol85Parser.CAPABLE, Cobol85Parser.CCSVERSION, Cobol85Parser.CHANGED, Cobol85Parser.CHANNEL, Cobol85Parser.CLASS, Cobol85Parser.CLOB, Cobol85Parser.CLOSE_DISPOSITION, Cobol85Parser.COBOL, Cobol85Parser.COMMITMENT, Cobol85Parser.CONTROL_POINT, Cobol85Parser.CONVENTION, Cobol85Parser.CRUNCH, Cobol85Parser.CURRENCY, Cobol85Parser.CURSOR, Cobol85Parser.DBCLOB, Cobol85Parser.DECIMAL_POINT, Cobol85Parser.DEFAULT, Cobol85Parser.DEFAULT_DISPLAY, Cobol85Parser.DEFINITION, Cobol85Parser.DFHRESP, Cobol85Parser.DFHVALUE, Cobol85Parser.DISK, Cobol85Parser.DONTCARE, Cobol85Parser.DOUBLE, Cobol85Parser.EBCDIC, Cobol85Parser.EMPTY_CHECK, Cobol85Parser.ENTER, Cobol85Parser.ENTRY_PROCEDURE, Cobol85Parser.ERASE, Cobol85Parser.EOL, Cobol85Parser.EOS, Cobol85Parser.ESCAPE, Cobol85Parser.EVENT, Cobol85Parser.EXCLUSIVE, Cobol85Parser.EXPORT, Cobol85Parser.EXTENDED, Cobol85Parser.FALSE, Cobol85Parser.FOREGROUND_COLOR, Cobol85Parser.FOREGROUND_COLOUR, Cobol85Parser.FULL, Cobol85Parser.FUNCTIONNAME, Cobol85Parser.FUNCTION_POINTER, Cobol85Parser.GRID, Cobol85Parser.HIGHLIGHT, Cobol85Parser.HIGH_VALUE, Cobol85Parser.HIGH_VALUES, Cobol85Parser.IMPLICIT, Cobol85Parser.IMPORT, Cobol85Parser.INTEGER, Cobol85Parser.KEPT, Cobol85Parser.KEYBOARD, Cobol85Parser.LANGUAGE, Cobol85Parser.LB, Cobol85Parser.LD, Cobol85Parser.LEFTLINE, Cobol85Parser.LENGTH_CHECK, Cobol85Parser.LIBACCESS, Cobol85Parser.LIBPARAMETER, Cobol85Parser.LIBRARY, Cobol85Parser.LIST, Cobol85Parser.LOCAL, Cobol85Parser.LONG_DATE, Cobol85Parser.LONG_TIME, Cobol85Parser.LOWER, Cobol85Parser.LOWLIGHT, Cobol85Parser.LOW_VALUE, Cobol85Parser.LOW_VALUES, Cobol85Parser.MMDDYYYY, Cobol85Parser.NAMED, Cobol85Parser.NATIONAL, Cobol85Parser.NATIONAL_EDITED, Cobol85Parser.NETWORK, Cobol85Parser.NO_ECHO, Cobol85Parser.NULL, Cobol85Parser.NULLS, Cobol85Parser.NUMERIC_DATE, Cobol85Parser.NUMERIC_TIME, Cobol85Parser.ODT, Cobol85Parser.OFF, Cobol85Parser.ON, Cobol85Parser.ORDERLY, Cobol85Parser.OVERLINE, Cobol85Parser.OWN, Cobol85Parser.PASSWORD, Cobol85Parser.PORT, Cobol85Parser.PRINTER, Cobol85Parser.PRIVATE, Cobol85Parser.PROCESS, Cobol85Parser.PROGRAM, Cobol85Parser.PROMPT, Cobol85Parser.QUOTE, Cobol85Parser.QUOTES, Cobol85Parser.READER, Cobol85Parser.REMOTE, Cobol85Parser.REAL, Cobol85Parser.RECEIVED, Cobol85Parser.RECURSIVE, Cobol85Parser.REF, Cobol85Parser.REMOVE, Cobol85Parser.REQUIRED, Cobol85Parser.RESERVE, Cobol85Parser.REVERSE_VIDEO, Cobol85Parser.SAVE, Cobol85Parser.SECURE, Cobol85Parser.SHARED, Cobol85Parser.SHAREDBYALL, Cobol85Parser.SHAREDBYRUNUNIT, Cobol85Parser.SHARING, Cobol85Parser.SHORT_DATE, Cobol85Parser.SPACE, Cobol85Parser.SPACES, Cobol85Parser.SQL, Cobol85Parser.SYMBOL, Cobol85Parser.SYMBOLIC, Cobol85Parser.TASK, Cobol85Parser.THREAD, Cobol85Parser.THREAD_LOCAL, Cobol85Parser.TIMER, Cobol85Parser.TODAYS_DATE, Cobol85Parser.TODAYS_NAME, Cobol85Parser.TRUE, Cobol85Parser.TRUNCATED, Cobol85Parser.TYPEDEF, Cobol85Parser.UNDERLINE, Cobol85Parser.VIRTUAL, Cobol85Parser.WAIT, Cobol85Parser.YEAR, Cobol85Parser.YYYYMMDD, Cobol85Parser.YYYYDDD, Cobol85Parser.ZERO, Cobol85Parser.ZERO_FILL, Cobol85Parser.ZEROS, Cobol85Parser.ZEROES, Cobol85Parser.DOT_FS, Cobol85Parser.NONNUMERICLITERAL, Cobol85Parser.LEVEL_NUMBER_66, Cobol85Parser.LEVEL_NUMBER_77, Cobol85Parser.LEVEL_NUMBER_88, Cobol85Parser.INTEGERLITERAL, Cobol85Parser.NUMERICLITERAL, Cobol85Parser.IDENTIFIER]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AlphabetThroughContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.AlphabetThroughContext, self).__init__(parent, invokingState)
            self.parser = parser

        def literal(self):
            return self.getTypedRuleContext(Cobol85Parser.LiteralContext,0)


        def THROUGH(self):
            return self.getToken(Cobol85Parser.THROUGH, 0)

        def THRU(self):
            return self.getToken(Cobol85Parser.THRU, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_alphabetThrough

        def enterRule(self, listener):
            if hasattr(listener, "enterAlphabetThrough"):
                listener.enterAlphabetThrough(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitAlphabetThrough"):
                listener.exitAlphabetThrough(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitAlphabetThrough"):
                return visitor.visitAlphabetThrough(self)
            else:
                return visitor.visitChildren(self)




    def alphabetThrough(self):

        localctx = Cobol85Parser.AlphabetThroughContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_alphabetThrough)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1491
            _la = self._input.LA(1)
            if not(_la==Cobol85Parser.THROUGH or _la==Cobol85Parser.THRU):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1492
            self.literal()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AlphabetAlsoContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.AlphabetAlsoContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ALSO(self):
            return self.getToken(Cobol85Parser.ALSO, 0)

        def literal(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.LiteralContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.LiteralContext,i)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_alphabetAlso

        def enterRule(self, listener):
            if hasattr(listener, "enterAlphabetAlso"):
                listener.enterAlphabetAlso(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitAlphabetAlso"):
                listener.exitAlphabetAlso(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitAlphabetAlso"):
                return visitor.visitAlphabetAlso(self)
            else:
                return visitor.visitChildren(self)




    def alphabetAlso(self):

        localctx = Cobol85Parser.AlphabetAlsoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_alphabetAlso)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1494
            self.match(Cobol85Parser.ALSO)
            self.state = 1496 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1495
                    self.literal()

                else:
                    raise NoViableAltException(self)
                self.state = 1498 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,59,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AlphabetClauseFormat2Context(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.AlphabetClauseFormat2Context, self).__init__(parent, invokingState)
            self.parser = parser

        def ALPHABET(self):
            return self.getToken(Cobol85Parser.ALPHABET, 0)

        def alphabetName(self):
            return self.getTypedRuleContext(Cobol85Parser.AlphabetNameContext,0)


        def NATIONAL(self):
            return self.getToken(Cobol85Parser.NATIONAL, 0)

        def NATIVE(self):
            return self.getToken(Cobol85Parser.NATIVE, 0)

        def CCSVERSION(self):
            return self.getToken(Cobol85Parser.CCSVERSION, 0)

        def literal(self):
            return self.getTypedRuleContext(Cobol85Parser.LiteralContext,0)


        def FOR(self):
            return self.getToken(Cobol85Parser.FOR, 0)

        def IS(self):
            return self.getToken(Cobol85Parser.IS, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_alphabetClauseFormat2

        def enterRule(self, listener):
            if hasattr(listener, "enterAlphabetClauseFormat2"):
                listener.enterAlphabetClauseFormat2(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitAlphabetClauseFormat2"):
                listener.exitAlphabetClauseFormat2(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitAlphabetClauseFormat2"):
                return visitor.visitAlphabetClauseFormat2(self)
            else:
                return visitor.visitChildren(self)




    def alphabetClauseFormat2(self):

        localctx = Cobol85Parser.AlphabetClauseFormat2Context(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_alphabetClauseFormat2)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1500
            self.match(Cobol85Parser.ALPHABET)
            self.state = 1501
            self.alphabetName()
            self.state = 1503
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.FOR:
                self.state = 1502
                self.match(Cobol85Parser.FOR)


            self.state = 1505
            self.match(Cobol85Parser.NATIONAL)
            self.state = 1507
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.IS:
                self.state = 1506
                self.match(Cobol85Parser.IS)


            self.state = 1512
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Cobol85Parser.NATIVE]:
                self.state = 1509
                self.match(Cobol85Parser.NATIVE)
                pass
            elif token in [Cobol85Parser.CCSVERSION]:
                self.state = 1510
                self.match(Cobol85Parser.CCSVERSION)
                self.state = 1511
                self.literal()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ChannelClauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.ChannelClauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def CHANNEL(self):
            return self.getToken(Cobol85Parser.CHANNEL, 0)

        def integerLiteral(self):
            return self.getTypedRuleContext(Cobol85Parser.IntegerLiteralContext,0)


        def mnemonicName(self):
            return self.getTypedRuleContext(Cobol85Parser.MnemonicNameContext,0)


        def IS(self):
            return self.getToken(Cobol85Parser.IS, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_channelClause

        def enterRule(self, listener):
            if hasattr(listener, "enterChannelClause"):
                listener.enterChannelClause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitChannelClause"):
                listener.exitChannelClause(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitChannelClause"):
                return visitor.visitChannelClause(self)
            else:
                return visitor.visitChildren(self)




    def channelClause(self):

        localctx = Cobol85Parser.ChannelClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_channelClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1514
            self.match(Cobol85Parser.CHANNEL)
            self.state = 1515
            self.integerLiteral()
            self.state = 1517
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.IS:
                self.state = 1516
                self.match(Cobol85Parser.IS)


            self.state = 1519
            self.mnemonicName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ClassClauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.ClassClauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def CLASS(self):
            return self.getToken(Cobol85Parser.CLASS, 0)

        def className(self):
            return self.getTypedRuleContext(Cobol85Parser.ClassNameContext,0)


        def IS(self):
            return self.getToken(Cobol85Parser.IS, 0)

        def classClauseThrough(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.ClassClauseThroughContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.ClassClauseThroughContext,i)


        def ALPHANUMERIC(self):
            return self.getToken(Cobol85Parser.ALPHANUMERIC, 0)

        def NATIONAL(self):
            return self.getToken(Cobol85Parser.NATIONAL, 0)

        def FOR(self):
            return self.getToken(Cobol85Parser.FOR, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_classClause

        def enterRule(self, listener):
            if hasattr(listener, "enterClassClause"):
                listener.enterClassClause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitClassClause"):
                listener.exitClassClause(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitClassClause"):
                return visitor.visitClassClause(self)
            else:
                return visitor.visitChildren(self)




    def classClause(self):

        localctx = Cobol85Parser.ClassClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_classClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1521
            self.match(Cobol85Parser.CLASS)
            self.state = 1522
            self.className()
            self.state = 1527
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,65,self._ctx)
            if la_ == 1:
                self.state = 1524
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Cobol85Parser.FOR:
                    self.state = 1523
                    self.match(Cobol85Parser.FOR)


                self.state = 1526
                _la = self._input.LA(1)
                if not(_la==Cobol85Parser.ALPHANUMERIC or _la==Cobol85Parser.NATIONAL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 1530
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.IS:
                self.state = 1529
                self.match(Cobol85Parser.IS)


            self.state = 1533 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1532
                    self.classClauseThrough()

                else:
                    raise NoViableAltException(self)
                self.state = 1535 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,67,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ClassClauseThroughContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.ClassClauseThroughContext, self).__init__(parent, invokingState)
            self.parser = parser

        def classClauseFrom(self):
            return self.getTypedRuleContext(Cobol85Parser.ClassClauseFromContext,0)


        def classClauseTo(self):
            return self.getTypedRuleContext(Cobol85Parser.ClassClauseToContext,0)


        def THROUGH(self):
            return self.getToken(Cobol85Parser.THROUGH, 0)

        def THRU(self):
            return self.getToken(Cobol85Parser.THRU, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_classClauseThrough

        def enterRule(self, listener):
            if hasattr(listener, "enterClassClauseThrough"):
                listener.enterClassClauseThrough(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitClassClauseThrough"):
                listener.exitClassClauseThrough(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitClassClauseThrough"):
                return visitor.visitClassClauseThrough(self)
            else:
                return visitor.visitChildren(self)




    def classClauseThrough(self):

        localctx = Cobol85Parser.ClassClauseThroughContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_classClauseThrough)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1537
            self.classClauseFrom()
            self.state = 1540
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.THROUGH or _la==Cobol85Parser.THRU:
                self.state = 1538
                _la = self._input.LA(1)
                if not(_la==Cobol85Parser.THROUGH or _la==Cobol85Parser.THRU):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1539
                self.classClauseTo()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ClassClauseFromContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.ClassClauseFromContext, self).__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(Cobol85Parser.IdentifierContext,0)


        def literal(self):
            return self.getTypedRuleContext(Cobol85Parser.LiteralContext,0)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_classClauseFrom

        def enterRule(self, listener):
            if hasattr(listener, "enterClassClauseFrom"):
                listener.enterClassClauseFrom(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitClassClauseFrom"):
                listener.exitClassClauseFrom(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitClassClauseFrom"):
                return visitor.visitClassClauseFrom(self)
            else:
                return visitor.visitChildren(self)




    def classClauseFrom(self):

        localctx = Cobol85Parser.ClassClauseFromContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_classClauseFrom)
        try:
            self.state = 1544
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,69,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1542
                self.identifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1543
                self.literal()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ClassClauseToContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.ClassClauseToContext, self).__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(Cobol85Parser.IdentifierContext,0)


        def literal(self):
            return self.getTypedRuleContext(Cobol85Parser.LiteralContext,0)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_classClauseTo

        def enterRule(self, listener):
            if hasattr(listener, "enterClassClauseTo"):
                listener.enterClassClauseTo(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitClassClauseTo"):
                listener.exitClassClauseTo(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitClassClauseTo"):
                return visitor.visitClassClauseTo(self)
            else:
                return visitor.visitChildren(self)




    def classClauseTo(self):

        localctx = Cobol85Parser.ClassClauseToContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_classClauseTo)
        try:
            self.state = 1548
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,70,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1546
                self.identifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1547
                self.literal()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CurrencySignClauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.CurrencySignClauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def CURRENCY(self):
            return self.getToken(Cobol85Parser.CURRENCY, 0)

        def literal(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.LiteralContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.LiteralContext,i)


        def SIGN(self):
            return self.getToken(Cobol85Parser.SIGN, 0)

        def IS(self):
            return self.getToken(Cobol85Parser.IS, 0)

        def PICTURE(self):
            return self.getToken(Cobol85Parser.PICTURE, 0)

        def SYMBOL(self):
            return self.getToken(Cobol85Parser.SYMBOL, 0)

        def WITH(self):
            return self.getToken(Cobol85Parser.WITH, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_currencySignClause

        def enterRule(self, listener):
            if hasattr(listener, "enterCurrencySignClause"):
                listener.enterCurrencySignClause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitCurrencySignClause"):
                listener.exitCurrencySignClause(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitCurrencySignClause"):
                return visitor.visitCurrencySignClause(self)
            else:
                return visitor.visitChildren(self)




    def currencySignClause(self):

        localctx = Cobol85Parser.CurrencySignClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_currencySignClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1550
            self.match(Cobol85Parser.CURRENCY)
            self.state = 1552
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.SIGN:
                self.state = 1551
                self.match(Cobol85Parser.SIGN)


            self.state = 1555
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.IS:
                self.state = 1554
                self.match(Cobol85Parser.IS)


            self.state = 1557
            self.literal()
            self.state = 1564
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.PICTURE or _la==Cobol85Parser.WITH:
                self.state = 1559
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Cobol85Parser.WITH:
                    self.state = 1558
                    self.match(Cobol85Parser.WITH)


                self.state = 1561
                self.match(Cobol85Parser.PICTURE)
                self.state = 1562
                self.match(Cobol85Parser.SYMBOL)
                self.state = 1563
                self.literal()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DecimalPointClauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.DecimalPointClauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def DECIMAL_POINT(self):
            return self.getToken(Cobol85Parser.DECIMAL_POINT, 0)

        def COMMA(self):
            return self.getToken(Cobol85Parser.COMMA, 0)

        def IS(self):
            return self.getToken(Cobol85Parser.IS, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_decimalPointClause

        def enterRule(self, listener):
            if hasattr(listener, "enterDecimalPointClause"):
                listener.enterDecimalPointClause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitDecimalPointClause"):
                listener.exitDecimalPointClause(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitDecimalPointClause"):
                return visitor.visitDecimalPointClause(self)
            else:
                return visitor.visitChildren(self)




    def decimalPointClause(self):

        localctx = Cobol85Parser.DecimalPointClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_decimalPointClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1566
            self.match(Cobol85Parser.DECIMAL_POINT)
            self.state = 1568
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.IS:
                self.state = 1567
                self.match(Cobol85Parser.IS)


            self.state = 1570
            self.match(Cobol85Parser.COMMA)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DefaultComputationalSignClauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.DefaultComputationalSignClauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def DEFAULT(self):
            return self.getToken(Cobol85Parser.DEFAULT, 0)

        def SEPARATE(self):
            return self.getToken(Cobol85Parser.SEPARATE, 0)

        def SIGN(self):
            return self.getToken(Cobol85Parser.SIGN, 0)

        def COMPUTATIONAL(self):
            return self.getToken(Cobol85Parser.COMPUTATIONAL, 0)

        def COMP(self):
            return self.getToken(Cobol85Parser.COMP, 0)

        def LEADING(self):
            return self.getToken(Cobol85Parser.LEADING, 0)

        def TRAILING(self):
            return self.getToken(Cobol85Parser.TRAILING, 0)

        def CHARACTER(self):
            return self.getToken(Cobol85Parser.CHARACTER, 0)

        def IS(self):
            return self.getToken(Cobol85Parser.IS, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_defaultComputationalSignClause

        def enterRule(self, listener):
            if hasattr(listener, "enterDefaultComputationalSignClause"):
                listener.enterDefaultComputationalSignClause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitDefaultComputationalSignClause"):
                listener.exitDefaultComputationalSignClause(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitDefaultComputationalSignClause"):
                return visitor.visitDefaultComputationalSignClause(self)
            else:
                return visitor.visitChildren(self)




    def defaultComputationalSignClause(self):

        localctx = Cobol85Parser.DefaultComputationalSignClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_defaultComputationalSignClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1572
            self.match(Cobol85Parser.DEFAULT)
            self.state = 1574
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.COMP or _la==Cobol85Parser.COMPUTATIONAL:
                self.state = 1573
                _la = self._input.LA(1)
                if not(_la==Cobol85Parser.COMP or _la==Cobol85Parser.COMPUTATIONAL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 1580
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.SIGN:
                self.state = 1576
                self.match(Cobol85Parser.SIGN)
                self.state = 1578
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Cobol85Parser.IS:
                    self.state = 1577
                    self.match(Cobol85Parser.IS)




            self.state = 1583
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.LEADING or _la==Cobol85Parser.TRAILING:
                self.state = 1582
                _la = self._input.LA(1)
                if not(_la==Cobol85Parser.LEADING or _la==Cobol85Parser.TRAILING):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 1585
            self.match(Cobol85Parser.SEPARATE)
            self.state = 1587
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.CHARACTER:
                self.state = 1586
                self.match(Cobol85Parser.CHARACTER)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DefaultDisplaySignClauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.DefaultDisplaySignClauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def DEFAULT_DISPLAY(self):
            return self.getToken(Cobol85Parser.DEFAULT_DISPLAY, 0)

        def LEADING(self):
            return self.getToken(Cobol85Parser.LEADING, 0)

        def TRAILING(self):
            return self.getToken(Cobol85Parser.TRAILING, 0)

        def SIGN(self):
            return self.getToken(Cobol85Parser.SIGN, 0)

        def SEPARATE(self):
            return self.getToken(Cobol85Parser.SEPARATE, 0)

        def IS(self):
            return self.getToken(Cobol85Parser.IS, 0)

        def CHARACTER(self):
            return self.getToken(Cobol85Parser.CHARACTER, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_defaultDisplaySignClause

        def enterRule(self, listener):
            if hasattr(listener, "enterDefaultDisplaySignClause"):
                listener.enterDefaultDisplaySignClause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitDefaultDisplaySignClause"):
                listener.exitDefaultDisplaySignClause(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitDefaultDisplaySignClause"):
                return visitor.visitDefaultDisplaySignClause(self)
            else:
                return visitor.visitChildren(self)




    def defaultDisplaySignClause(self):

        localctx = Cobol85Parser.DefaultDisplaySignClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_defaultDisplaySignClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1589
            self.match(Cobol85Parser.DEFAULT_DISPLAY)
            self.state = 1594
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.SIGN:
                self.state = 1590
                self.match(Cobol85Parser.SIGN)
                self.state = 1592
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Cobol85Parser.IS:
                    self.state = 1591
                    self.match(Cobol85Parser.IS)




            self.state = 1596
            _la = self._input.LA(1)
            if not(_la==Cobol85Parser.LEADING or _la==Cobol85Parser.TRAILING):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1601
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.SEPARATE:
                self.state = 1597
                self.match(Cobol85Parser.SEPARATE)
                self.state = 1599
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Cobol85Parser.CHARACTER:
                    self.state = 1598
                    self.match(Cobol85Parser.CHARACTER)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EnvironmentSwitchNameClauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.EnvironmentSwitchNameClauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def environmentName(self):
            return self.getTypedRuleContext(Cobol85Parser.EnvironmentNameContext,0)


        def mnemonicName(self):
            return self.getTypedRuleContext(Cobol85Parser.MnemonicNameContext,0)


        def IS(self):
            return self.getToken(Cobol85Parser.IS, 0)

        def environmentSwitchNameSpecialNamesStatusPhrase(self):
            return self.getTypedRuleContext(Cobol85Parser.EnvironmentSwitchNameSpecialNamesStatusPhraseContext,0)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_environmentSwitchNameClause

        def enterRule(self, listener):
            if hasattr(listener, "enterEnvironmentSwitchNameClause"):
                listener.enterEnvironmentSwitchNameClause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitEnvironmentSwitchNameClause"):
                listener.exitEnvironmentSwitchNameClause(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitEnvironmentSwitchNameClause"):
                return visitor.visitEnvironmentSwitchNameClause(self)
            else:
                return visitor.visitChildren(self)




    def environmentSwitchNameClause(self):

        localctx = Cobol85Parser.EnvironmentSwitchNameClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_environmentSwitchNameClause)
        self._la = 0 # Token type
        try:
            self.state = 1612
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Cobol85Parser.ABORT, Cobol85Parser.AS, Cobol85Parser.ASCII, Cobol85Parser.ASSOCIATED_DATA, Cobol85Parser.ASSOCIATED_DATA_LENGTH, Cobol85Parser.ATTRIBUTE, Cobol85Parser.AUTO, Cobol85Parser.AUTO_SKIP, Cobol85Parser.BACKGROUND_COLOR, Cobol85Parser.BACKGROUND_COLOUR, Cobol85Parser.BEEP, Cobol85Parser.BELL, Cobol85Parser.BINARY, Cobol85Parser.BIT, Cobol85Parser.BLINK, Cobol85Parser.BLOB, Cobol85Parser.BOUNDS, Cobol85Parser.CAPABLE, Cobol85Parser.CCSVERSION, Cobol85Parser.CHANGED, Cobol85Parser.CHANNEL, Cobol85Parser.CLOB, Cobol85Parser.CLOSE_DISPOSITION, Cobol85Parser.COBOL, Cobol85Parser.COMMITMENT, Cobol85Parser.CONTROL_POINT, Cobol85Parser.CONVENTION, Cobol85Parser.CRUNCH, Cobol85Parser.CURSOR, Cobol85Parser.DBCLOB, Cobol85Parser.DEFAULT, Cobol85Parser.DEFAULT_DISPLAY, Cobol85Parser.DEFINITION, Cobol85Parser.DFHRESP, Cobol85Parser.DFHVALUE, Cobol85Parser.DISK, Cobol85Parser.DONTCARE, Cobol85Parser.DOUBLE, Cobol85Parser.EBCDIC, Cobol85Parser.EMPTY_CHECK, Cobol85Parser.ENTER, Cobol85Parser.ENTRY_PROCEDURE, Cobol85Parser.ERASE, Cobol85Parser.EOL, Cobol85Parser.EOS, Cobol85Parser.ESCAPE, Cobol85Parser.EVENT, Cobol85Parser.EXCLUSIVE, Cobol85Parser.EXPORT, Cobol85Parser.EXTENDED, Cobol85Parser.FOREGROUND_COLOR, Cobol85Parser.FOREGROUND_COLOUR, Cobol85Parser.FULL, Cobol85Parser.FUNCTIONNAME, Cobol85Parser.FUNCTION_POINTER, Cobol85Parser.GRID, Cobol85Parser.HIGHLIGHT, Cobol85Parser.IMPLICIT, Cobol85Parser.IMPORT, Cobol85Parser.INTEGER, Cobol85Parser.KEPT, Cobol85Parser.KEYBOARD, Cobol85Parser.LANGUAGE, Cobol85Parser.LB, Cobol85Parser.LD, Cobol85Parser.LEFTLINE, Cobol85Parser.LENGTH_CHECK, Cobol85Parser.LIBACCESS, Cobol85Parser.LIBPARAMETER, Cobol85Parser.LIBRARY, Cobol85Parser.LIST, Cobol85Parser.LOCAL, Cobol85Parser.LONG_DATE, Cobol85Parser.LONG_TIME, Cobol85Parser.LOWER, Cobol85Parser.LOWLIGHT, Cobol85Parser.MMDDYYYY, Cobol85Parser.NAMED, Cobol85Parser.NATIONAL, Cobol85Parser.NATIONAL_EDITED, Cobol85Parser.NETWORK, Cobol85Parser.NO_ECHO, Cobol85Parser.NUMERIC_DATE, Cobol85Parser.NUMERIC_TIME, Cobol85Parser.ODT, Cobol85Parser.ORDERLY, Cobol85Parser.OVERLINE, Cobol85Parser.OWN, Cobol85Parser.PASSWORD, Cobol85Parser.PORT, Cobol85Parser.PRINTER, Cobol85Parser.PRIVATE, Cobol85Parser.PROCESS, Cobol85Parser.PROGRAM, Cobol85Parser.PROMPT, Cobol85Parser.READER, Cobol85Parser.REMOTE, Cobol85Parser.REAL, Cobol85Parser.RECEIVED, Cobol85Parser.RECURSIVE, Cobol85Parser.REF, Cobol85Parser.REMOVE, Cobol85Parser.REQUIRED, Cobol85Parser.REVERSE_VIDEO, Cobol85Parser.SAVE, Cobol85Parser.SECURE, Cobol85Parser.SHARED, Cobol85Parser.SHAREDBYALL, Cobol85Parser.SHAREDBYRUNUNIT, Cobol85Parser.SHARING, Cobol85Parser.SHORT_DATE, Cobol85Parser.SQL, Cobol85Parser.SYMBOL, Cobol85Parser.TASK, Cobol85Parser.THREAD, Cobol85Parser.THREAD_LOCAL, Cobol85Parser.TIMER, Cobol85Parser.TODAYS_DATE, Cobol85Parser.TODAYS_NAME, Cobol85Parser.TRUNCATED, Cobol85Parser.TYPEDEF, Cobol85Parser.UNDERLINE, Cobol85Parser.VIRTUAL, Cobol85Parser.WAIT, Cobol85Parser.YEAR, Cobol85Parser.YYYYMMDD, Cobol85Parser.YYYYDDD, Cobol85Parser.ZERO_FILL, Cobol85Parser.IDENTIFIER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1603
                self.environmentName()
                self.state = 1605
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Cobol85Parser.IS:
                    self.state = 1604
                    self.match(Cobol85Parser.IS)


                self.state = 1607
                self.mnemonicName()
                self.state = 1609
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,86,self._ctx)
                if la_ == 1:
                    self.state = 1608
                    self.environmentSwitchNameSpecialNamesStatusPhrase()


                pass
            elif token in [Cobol85Parser.OFF, Cobol85Parser.ON]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1611
                self.environmentSwitchNameSpecialNamesStatusPhrase()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EnvironmentSwitchNameSpecialNamesStatusPhraseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.EnvironmentSwitchNameSpecialNamesStatusPhraseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(Cobol85Parser.ON, 0)

        def condition(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.ConditionContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.ConditionContext,i)


        def STATUS(self, i=None):
            if i is None:
                return self.getTokens(Cobol85Parser.STATUS)
            else:
                return self.getToken(Cobol85Parser.STATUS, i)

        def IS(self, i=None):
            if i is None:
                return self.getTokens(Cobol85Parser.IS)
            else:
                return self.getToken(Cobol85Parser.IS, i)

        def OFF(self):
            return self.getToken(Cobol85Parser.OFF, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_environmentSwitchNameSpecialNamesStatusPhrase

        def enterRule(self, listener):
            if hasattr(listener, "enterEnvironmentSwitchNameSpecialNamesStatusPhrase"):
                listener.enterEnvironmentSwitchNameSpecialNamesStatusPhrase(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitEnvironmentSwitchNameSpecialNamesStatusPhrase"):
                listener.exitEnvironmentSwitchNameSpecialNamesStatusPhrase(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitEnvironmentSwitchNameSpecialNamesStatusPhrase"):
                return visitor.visitEnvironmentSwitchNameSpecialNamesStatusPhrase(self)
            else:
                return visitor.visitChildren(self)




    def environmentSwitchNameSpecialNamesStatusPhrase(self):

        localctx = Cobol85Parser.EnvironmentSwitchNameSpecialNamesStatusPhraseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_environmentSwitchNameSpecialNamesStatusPhrase)
        self._la = 0 # Token type
        try:
            self.state = 1650
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Cobol85Parser.ON]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1614
                self.match(Cobol85Parser.ON)
                self.state = 1616
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Cobol85Parser.STATUS:
                    self.state = 1615
                    self.match(Cobol85Parser.STATUS)


                self.state = 1619
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Cobol85Parser.IS:
                    self.state = 1618
                    self.match(Cobol85Parser.IS)


                self.state = 1621
                self.condition()
                self.state = 1630
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,92,self._ctx)
                if la_ == 1:
                    self.state = 1622
                    self.match(Cobol85Parser.OFF)
                    self.state = 1624
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==Cobol85Parser.STATUS:
                        self.state = 1623
                        self.match(Cobol85Parser.STATUS)


                    self.state = 1627
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==Cobol85Parser.IS:
                        self.state = 1626
                        self.match(Cobol85Parser.IS)


                    self.state = 1629
                    self.condition()


                pass
            elif token in [Cobol85Parser.OFF]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1632
                self.match(Cobol85Parser.OFF)
                self.state = 1634
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Cobol85Parser.STATUS:
                    self.state = 1633
                    self.match(Cobol85Parser.STATUS)


                self.state = 1637
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Cobol85Parser.IS:
                    self.state = 1636
                    self.match(Cobol85Parser.IS)


                self.state = 1639
                self.condition()
                self.state = 1648
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,97,self._ctx)
                if la_ == 1:
                    self.state = 1640
                    self.match(Cobol85Parser.ON)
                    self.state = 1642
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==Cobol85Parser.STATUS:
                        self.state = 1641
                        self.match(Cobol85Parser.STATUS)


                    self.state = 1645
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==Cobol85Parser.IS:
                        self.state = 1644
                        self.match(Cobol85Parser.IS)


                    self.state = 1647
                    self.condition()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OdtClauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.OdtClauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ODT(self):
            return self.getToken(Cobol85Parser.ODT, 0)

        def mnemonicName(self):
            return self.getTypedRuleContext(Cobol85Parser.MnemonicNameContext,0)


        def IS(self):
            return self.getToken(Cobol85Parser.IS, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_odtClause

        def enterRule(self, listener):
            if hasattr(listener, "enterOdtClause"):
                listener.enterOdtClause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitOdtClause"):
                listener.exitOdtClause(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitOdtClause"):
                return visitor.visitOdtClause(self)
            else:
                return visitor.visitChildren(self)




    def odtClause(self):

        localctx = Cobol85Parser.OdtClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_odtClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1652
            self.match(Cobol85Parser.ODT)
            self.state = 1654
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.IS:
                self.state = 1653
                self.match(Cobol85Parser.IS)


            self.state = 1656
            self.mnemonicName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ReserveNetworkClauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.ReserveNetworkClauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def RESERVE(self):
            return self.getToken(Cobol85Parser.RESERVE, 0)

        def NETWORK(self):
            return self.getToken(Cobol85Parser.NETWORK, 0)

        def WORDS(self):
            return self.getToken(Cobol85Parser.WORDS, 0)

        def LIST(self):
            return self.getToken(Cobol85Parser.LIST, 0)

        def IS(self):
            return self.getToken(Cobol85Parser.IS, 0)

        def CAPABLE(self):
            return self.getToken(Cobol85Parser.CAPABLE, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_reserveNetworkClause

        def enterRule(self, listener):
            if hasattr(listener, "enterReserveNetworkClause"):
                listener.enterReserveNetworkClause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitReserveNetworkClause"):
                listener.exitReserveNetworkClause(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitReserveNetworkClause"):
                return visitor.visitReserveNetworkClause(self)
            else:
                return visitor.visitChildren(self)




    def reserveNetworkClause(self):

        localctx = Cobol85Parser.ReserveNetworkClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_reserveNetworkClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1658
            self.match(Cobol85Parser.RESERVE)
            self.state = 1660
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.WORDS:
                self.state = 1659
                self.match(Cobol85Parser.WORDS)


            self.state = 1663
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.LIST:
                self.state = 1662
                self.match(Cobol85Parser.LIST)


            self.state = 1666
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.IS:
                self.state = 1665
                self.match(Cobol85Parser.IS)


            self.state = 1668
            self.match(Cobol85Parser.NETWORK)
            self.state = 1670
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,103,self._ctx)
            if la_ == 1:
                self.state = 1669
                self.match(Cobol85Parser.CAPABLE)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SymbolicCharactersClauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.SymbolicCharactersClauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def SYMBOLIC(self):
            return self.getToken(Cobol85Parser.SYMBOLIC, 0)

        def CHARACTERS(self):
            return self.getToken(Cobol85Parser.CHARACTERS, 0)

        def symbolicCharacters(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.SymbolicCharactersContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.SymbolicCharactersContext,i)


        def IN(self):
            return self.getToken(Cobol85Parser.IN, 0)

        def alphabetName(self):
            return self.getTypedRuleContext(Cobol85Parser.AlphabetNameContext,0)


        def ALPHANUMERIC(self):
            return self.getToken(Cobol85Parser.ALPHANUMERIC, 0)

        def NATIONAL(self):
            return self.getToken(Cobol85Parser.NATIONAL, 0)

        def FOR(self):
            return self.getToken(Cobol85Parser.FOR, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_symbolicCharactersClause

        def enterRule(self, listener):
            if hasattr(listener, "enterSymbolicCharactersClause"):
                listener.enterSymbolicCharactersClause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSymbolicCharactersClause"):
                listener.exitSymbolicCharactersClause(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitSymbolicCharactersClause"):
                return visitor.visitSymbolicCharactersClause(self)
            else:
                return visitor.visitChildren(self)




    def symbolicCharactersClause(self):

        localctx = Cobol85Parser.SymbolicCharactersClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_symbolicCharactersClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1672
            self.match(Cobol85Parser.SYMBOLIC)
            self.state = 1674
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.CHARACTERS:
                self.state = 1673
                self.match(Cobol85Parser.CHARACTERS)


            self.state = 1680
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,106,self._ctx)
            if la_ == 1:
                self.state = 1677
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Cobol85Parser.FOR:
                    self.state = 1676
                    self.match(Cobol85Parser.FOR)


                self.state = 1679
                _la = self._input.LA(1)
                if not(_la==Cobol85Parser.ALPHANUMERIC or _la==Cobol85Parser.NATIONAL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 1683 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1682
                    self.symbolicCharacters()

                else:
                    raise NoViableAltException(self)
                self.state = 1685 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,107,self._ctx)

            self.state = 1689
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.IN:
                self.state = 1687
                self.match(Cobol85Parser.IN)
                self.state = 1688
                self.alphabetName()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SymbolicCharactersContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.SymbolicCharactersContext, self).__init__(parent, invokingState)
            self.parser = parser

        def symbolicCharacter(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.SymbolicCharacterContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.SymbolicCharacterContext,i)


        def integerLiteral(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.IntegerLiteralContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.IntegerLiteralContext,i)


        def IS(self):
            return self.getToken(Cobol85Parser.IS, 0)

        def ARE(self):
            return self.getToken(Cobol85Parser.ARE, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_symbolicCharacters

        def enterRule(self, listener):
            if hasattr(listener, "enterSymbolicCharacters"):
                listener.enterSymbolicCharacters(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSymbolicCharacters"):
                listener.exitSymbolicCharacters(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitSymbolicCharacters"):
                return visitor.visitSymbolicCharacters(self)
            else:
                return visitor.visitChildren(self)




    def symbolicCharacters(self):

        localctx = Cobol85Parser.SymbolicCharactersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_symbolicCharacters)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1692 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1691
                self.symbolicCharacter()
                self.state = 1694 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE) | (1 << Cobol85Parser.AUTO) | (1 << Cobol85Parser.AUTO_SKIP) | (1 << Cobol85Parser.BACKGROUND_COLOR) | (1 << Cobol85Parser.BACKGROUND_COLOUR) | (1 << Cobol85Parser.BEEP) | (1 << Cobol85Parser.BELL) | (1 << Cobol85Parser.BINARY) | (1 << Cobol85Parser.BIT) | (1 << Cobol85Parser.BLINK) | (1 << Cobol85Parser.BLOB) | (1 << Cobol85Parser.BOUNDS) | (1 << Cobol85Parser.CAPABLE) | (1 << Cobol85Parser.CCSVERSION) | (1 << Cobol85Parser.CHANGED) | (1 << Cobol85Parser.CHANNEL))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (Cobol85Parser.CLOB - 67)) | (1 << (Cobol85Parser.CLOSE_DISPOSITION - 67)) | (1 << (Cobol85Parser.COBOL - 67)) | (1 << (Cobol85Parser.COMMITMENT - 67)) | (1 << (Cobol85Parser.CONTROL_POINT - 67)) | (1 << (Cobol85Parser.CONVENTION - 67)) | (1 << (Cobol85Parser.CRUNCH - 67)) | (1 << (Cobol85Parser.CURSOR - 67)) | (1 << (Cobol85Parser.DBCLOB - 67)))) != 0) or ((((_la - 131)) & ~0x3f) == 0 and ((1 << (_la - 131)) & ((1 << (Cobol85Parser.DEFAULT - 131)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 131)) | (1 << (Cobol85Parser.DEFINITION - 131)) | (1 << (Cobol85Parser.DFHRESP - 131)) | (1 << (Cobol85Parser.DFHVALUE - 131)) | (1 << (Cobol85Parser.DISK - 131)) | (1 << (Cobol85Parser.DONTCARE - 131)) | (1 << (Cobol85Parser.DOUBLE - 131)) | (1 << (Cobol85Parser.EBCDIC - 131)) | (1 << (Cobol85Parser.EMPTY_CHECK - 131)) | (1 << (Cobol85Parser.ENTER - 131)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 131)) | (1 << (Cobol85Parser.ERASE - 131)) | (1 << (Cobol85Parser.EOL - 131)) | (1 << (Cobol85Parser.EOS - 131)))) != 0) or ((((_la - 195)) & ~0x3f) == 0 and ((1 << (_la - 195)) & ((1 << (Cobol85Parser.ESCAPE - 195)) | (1 << (Cobol85Parser.EVENT - 195)) | (1 << (Cobol85Parser.EXCLUSIVE - 195)) | (1 << (Cobol85Parser.EXPORT - 195)) | (1 << (Cobol85Parser.EXTENDED - 195)) | (1 << (Cobol85Parser.FOREGROUND_COLOR - 195)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 195)) | (1 << (Cobol85Parser.FULL - 195)) | (1 << (Cobol85Parser.FUNCTIONNAME - 195)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 195)) | (1 << (Cobol85Parser.GRID - 195)) | (1 << (Cobol85Parser.HIGHLIGHT - 195)) | (1 << (Cobol85Parser.IMPLICIT - 195)) | (1 << (Cobol85Parser.IMPORT - 195)) | (1 << (Cobol85Parser.INTEGER - 195)))) != 0) or ((((_la - 262)) & ~0x3f) == 0 and ((1 << (_la - 262)) & ((1 << (Cobol85Parser.KEPT - 262)) | (1 << (Cobol85Parser.KEYBOARD - 262)) | (1 << (Cobol85Parser.LANGUAGE - 262)) | (1 << (Cobol85Parser.LB - 262)) | (1 << (Cobol85Parser.LD - 262)) | (1 << (Cobol85Parser.LEFTLINE - 262)) | (1 << (Cobol85Parser.LENGTH_CHECK - 262)) | (1 << (Cobol85Parser.LIBACCESS - 262)) | (1 << (Cobol85Parser.LIBPARAMETER - 262)) | (1 << (Cobol85Parser.LIBRARY - 262)) | (1 << (Cobol85Parser.LIST - 262)) | (1 << (Cobol85Parser.LOCAL - 262)) | (1 << (Cobol85Parser.LONG_DATE - 262)) | (1 << (Cobol85Parser.LONG_TIME - 262)) | (1 << (Cobol85Parser.LOWER - 262)) | (1 << (Cobol85Parser.LOWLIGHT - 262)) | (1 << (Cobol85Parser.MMDDYYYY - 262)) | (1 << (Cobol85Parser.NAMED - 262)) | (1 << (Cobol85Parser.NATIONAL - 262)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 262)) | (1 << (Cobol85Parser.NETWORK - 262)) | (1 << (Cobol85Parser.NO_ECHO - 262)) | (1 << (Cobol85Parser.NUMERIC_DATE - 262)) | (1 << (Cobol85Parser.NUMERIC_TIME - 262)))) != 0) or ((((_la - 326)) & ~0x3f) == 0 and ((1 << (_la - 326)) & ((1 << (Cobol85Parser.ODT - 326)) | (1 << (Cobol85Parser.ORDERLY - 326)) | (1 << (Cobol85Parser.OVERLINE - 326)) | (1 << (Cobol85Parser.OWN - 326)) | (1 << (Cobol85Parser.PASSWORD - 326)) | (1 << (Cobol85Parser.PORT - 326)) | (1 << (Cobol85Parser.PRINTER - 326)) | (1 << (Cobol85Parser.PRIVATE - 326)) | (1 << (Cobol85Parser.PROCESS - 326)) | (1 << (Cobol85Parser.PROGRAM - 326)) | (1 << (Cobol85Parser.PROMPT - 326)) | (1 << (Cobol85Parser.READER - 326)) | (1 << (Cobol85Parser.REMOTE - 326)) | (1 << (Cobol85Parser.REAL - 326)) | (1 << (Cobol85Parser.RECEIVED - 326)) | (1 << (Cobol85Parser.RECURSIVE - 326)) | (1 << (Cobol85Parser.REF - 326)))) != 0) or ((((_la - 395)) & ~0x3f) == 0 and ((1 << (_la - 395)) & ((1 << (Cobol85Parser.REMOVE - 395)) | (1 << (Cobol85Parser.REQUIRED - 395)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 395)) | (1 << (Cobol85Parser.SAVE - 395)) | (1 << (Cobol85Parser.SECURE - 395)) | (1 << (Cobol85Parser.SHARED - 395)) | (1 << (Cobol85Parser.SHAREDBYALL - 395)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 395)) | (1 << (Cobol85Parser.SHARING - 395)) | (1 << (Cobol85Parser.SHORT_DATE - 395)) | (1 << (Cobol85Parser.SQL - 395)))) != 0) or ((((_la - 471)) & ~0x3f) == 0 and ((1 << (_la - 471)) & ((1 << (Cobol85Parser.SYMBOL - 471)) | (1 << (Cobol85Parser.TASK - 471)) | (1 << (Cobol85Parser.THREAD - 471)) | (1 << (Cobol85Parser.THREAD_LOCAL - 471)) | (1 << (Cobol85Parser.TIMER - 471)) | (1 << (Cobol85Parser.TODAYS_DATE - 471)) | (1 << (Cobol85Parser.TODAYS_NAME - 471)) | (1 << (Cobol85Parser.TRUNCATED - 471)) | (1 << (Cobol85Parser.TYPEDEF - 471)) | (1 << (Cobol85Parser.UNDERLINE - 471)) | (1 << (Cobol85Parser.VIRTUAL - 471)) | (1 << (Cobol85Parser.WAIT - 471)) | (1 << (Cobol85Parser.YEAR - 471)) | (1 << (Cobol85Parser.YYYYMMDD - 471)) | (1 << (Cobol85Parser.YYYYDDD - 471)) | (1 << (Cobol85Parser.ZERO_FILL - 471)))) != 0) or _la==Cobol85Parser.IDENTIFIER):
                    break

            self.state = 1697
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.ARE or _la==Cobol85Parser.IS:
                self.state = 1696
                _la = self._input.LA(1)
                if not(_la==Cobol85Parser.ARE or _la==Cobol85Parser.IS):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 1700 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1699
                self.integerLiteral()
                self.state = 1702 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 557)) & ~0x3f) == 0 and ((1 << (_la - 557)) & ((1 << (Cobol85Parser.LEVEL_NUMBER_66 - 557)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 557)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 557)) | (1 << (Cobol85Parser.INTEGERLITERAL - 557)))) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InputOutputSectionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.InputOutputSectionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def INPUT_OUTPUT(self):
            return self.getToken(Cobol85Parser.INPUT_OUTPUT, 0)

        def SECTION(self):
            return self.getToken(Cobol85Parser.SECTION, 0)

        def DOT_FS(self):
            return self.getToken(Cobol85Parser.DOT_FS, 0)

        def inputOutputSectionParagraph(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.InputOutputSectionParagraphContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.InputOutputSectionParagraphContext,i)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_inputOutputSection

        def enterRule(self, listener):
            if hasattr(listener, "enterInputOutputSection"):
                listener.enterInputOutputSection(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitInputOutputSection"):
                listener.exitInputOutputSection(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitInputOutputSection"):
                return visitor.visitInputOutputSection(self)
            else:
                return visitor.visitChildren(self)




    def inputOutputSection(self):

        localctx = Cobol85Parser.InputOutputSectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_inputOutputSection)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1704
            self.match(Cobol85Parser.INPUT_OUTPUT)
            self.state = 1705
            self.match(Cobol85Parser.SECTION)
            self.state = 1706
            self.match(Cobol85Parser.DOT_FS)
            self.state = 1710
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==Cobol85Parser.FILE_CONTROL or _la==Cobol85Parser.I_O_CONTROL or _la==Cobol85Parser.SELECT or _la==Cobol85Parser.DOT_FS:
                self.state = 1707
                self.inputOutputSectionParagraph()
                self.state = 1712
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InputOutputSectionParagraphContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.InputOutputSectionParagraphContext, self).__init__(parent, invokingState)
            self.parser = parser

        def fileControlParagraph(self):
            return self.getTypedRuleContext(Cobol85Parser.FileControlParagraphContext,0)


        def ioControlParagraph(self):
            return self.getTypedRuleContext(Cobol85Parser.IoControlParagraphContext,0)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_inputOutputSectionParagraph

        def enterRule(self, listener):
            if hasattr(listener, "enterInputOutputSectionParagraph"):
                listener.enterInputOutputSectionParagraph(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitInputOutputSectionParagraph"):
                listener.exitInputOutputSectionParagraph(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitInputOutputSectionParagraph"):
                return visitor.visitInputOutputSectionParagraph(self)
            else:
                return visitor.visitChildren(self)




    def inputOutputSectionParagraph(self):

        localctx = Cobol85Parser.InputOutputSectionParagraphContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_inputOutputSectionParagraph)
        try:
            self.state = 1715
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Cobol85Parser.FILE_CONTROL, Cobol85Parser.SELECT, Cobol85Parser.DOT_FS]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1713
                self.fileControlParagraph()
                pass
            elif token in [Cobol85Parser.I_O_CONTROL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1714
                self.ioControlParagraph()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FileControlParagraphContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.FileControlParagraphContext, self).__init__(parent, invokingState)
            self.parser = parser

        def DOT_FS(self, i=None):
            if i is None:
                return self.getTokens(Cobol85Parser.DOT_FS)
            else:
                return self.getToken(Cobol85Parser.DOT_FS, i)

        def FILE_CONTROL(self):
            return self.getToken(Cobol85Parser.FILE_CONTROL, 0)

        def fileControlEntry(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.FileControlEntryContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.FileControlEntryContext,i)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_fileControlParagraph

        def enterRule(self, listener):
            if hasattr(listener, "enterFileControlParagraph"):
                listener.enterFileControlParagraph(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitFileControlParagraph"):
                listener.exitFileControlParagraph(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitFileControlParagraph"):
                return visitor.visitFileControlParagraph(self)
            else:
                return visitor.visitChildren(self)




    def fileControlParagraph(self):

        localctx = Cobol85Parser.FileControlParagraphContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_fileControlParagraph)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1718
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.FILE_CONTROL:
                self.state = 1717
                self.match(Cobol85Parser.FILE_CONTROL)


            self.state = 1726
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,116,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1721
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==Cobol85Parser.DOT_FS:
                        self.state = 1720
                        self.match(Cobol85Parser.DOT_FS)


                    self.state = 1723
                    self.fileControlEntry() 
                self.state = 1728
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,116,self._ctx)

            self.state = 1729
            self.match(Cobol85Parser.DOT_FS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FileControlEntryContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.FileControlEntryContext, self).__init__(parent, invokingState)
            self.parser = parser

        def selectClause(self):
            return self.getTypedRuleContext(Cobol85Parser.SelectClauseContext,0)


        def fileControlClause(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.FileControlClauseContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.FileControlClauseContext,i)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_fileControlEntry

        def enterRule(self, listener):
            if hasattr(listener, "enterFileControlEntry"):
                listener.enterFileControlEntry(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitFileControlEntry"):
                listener.exitFileControlEntry(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitFileControlEntry"):
                return visitor.visitFileControlEntry(self)
            else:
                return visitor.visitChildren(self)




    def fileControlEntry(self):

        localctx = Cobol85Parser.FileControlEntryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_fileControlEntry)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1731
            self.selectClause()
            self.state = 1735
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Cobol85Parser.ACCESS) | (1 << Cobol85Parser.ALTERNATE) | (1 << Cobol85Parser.ASSIGN) | (1 << Cobol85Parser.BINARY))) != 0) or _la==Cobol85Parser.FILE or _la==Cobol85Parser.INDEXED or ((((_la - 283)) & ~0x3f) == 0 and ((1 << (_la - 283)) & ((1 << (Cobol85Parser.LINE - 283)) | (1 << (Cobol85Parser.ORGANIZATION - 283)) | (1 << (Cobol85Parser.PADDING - 283)) | (1 << (Cobol85Parser.PASSWORD - 283)))) != 0) or ((((_la - 381)) & ~0x3f) == 0 and ((1 << (_la - 381)) & ((1 << (Cobol85Parser.RECORD - 381)) | (1 << (Cobol85Parser.RELATIVE - 381)) | (1 << (Cobol85Parser.RESERVE - 381)) | (1 << (Cobol85Parser.SEQUENTIAL - 381)))) != 0) or _la==Cobol85Parser.STATUS:
                self.state = 1732
                self.fileControlClause()
                self.state = 1737
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SelectClauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.SelectClauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def SELECT(self):
            return self.getToken(Cobol85Parser.SELECT, 0)

        def fileName(self):
            return self.getTypedRuleContext(Cobol85Parser.FileNameContext,0)


        def OPTIONAL(self):
            return self.getToken(Cobol85Parser.OPTIONAL, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_selectClause

        def enterRule(self, listener):
            if hasattr(listener, "enterSelectClause"):
                listener.enterSelectClause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSelectClause"):
                listener.exitSelectClause(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitSelectClause"):
                return visitor.visitSelectClause(self)
            else:
                return visitor.visitChildren(self)




    def selectClause(self):

        localctx = Cobol85Parser.SelectClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_selectClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1738
            self.match(Cobol85Parser.SELECT)
            self.state = 1740
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.OPTIONAL:
                self.state = 1739
                self.match(Cobol85Parser.OPTIONAL)


            self.state = 1742
            self.fileName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FileControlClauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.FileControlClauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def assignClause(self):
            return self.getTypedRuleContext(Cobol85Parser.AssignClauseContext,0)


        def reserveClause(self):
            return self.getTypedRuleContext(Cobol85Parser.ReserveClauseContext,0)


        def organizationClause(self):
            return self.getTypedRuleContext(Cobol85Parser.OrganizationClauseContext,0)


        def paddingCharacterClause(self):
            return self.getTypedRuleContext(Cobol85Parser.PaddingCharacterClauseContext,0)


        def recordDelimiterClause(self):
            return self.getTypedRuleContext(Cobol85Parser.RecordDelimiterClauseContext,0)


        def accessModeClause(self):
            return self.getTypedRuleContext(Cobol85Parser.AccessModeClauseContext,0)


        def recordKeyClause(self):
            return self.getTypedRuleContext(Cobol85Parser.RecordKeyClauseContext,0)


        def alternateRecordKeyClause(self):
            return self.getTypedRuleContext(Cobol85Parser.AlternateRecordKeyClauseContext,0)


        def fileStatusClause(self):
            return self.getTypedRuleContext(Cobol85Parser.FileStatusClauseContext,0)


        def passwordClause(self):
            return self.getTypedRuleContext(Cobol85Parser.PasswordClauseContext,0)


        def relativeKeyClause(self):
            return self.getTypedRuleContext(Cobol85Parser.RelativeKeyClauseContext,0)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_fileControlClause

        def enterRule(self, listener):
            if hasattr(listener, "enterFileControlClause"):
                listener.enterFileControlClause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitFileControlClause"):
                listener.exitFileControlClause(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitFileControlClause"):
                return visitor.visitFileControlClause(self)
            else:
                return visitor.visitChildren(self)




    def fileControlClause(self):

        localctx = Cobol85Parser.FileControlClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_fileControlClause)
        try:
            self.state = 1755
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,119,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1744
                self.assignClause()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1745
                self.reserveClause()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1746
                self.organizationClause()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1747
                self.paddingCharacterClause()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1748
                self.recordDelimiterClause()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1749
                self.accessModeClause()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1750
                self.recordKeyClause()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1751
                self.alternateRecordKeyClause()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1752
                self.fileStatusClause()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1753
                self.passwordClause()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1754
                self.relativeKeyClause()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AssignClauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.AssignClauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ASSIGN(self):
            return self.getToken(Cobol85Parser.ASSIGN, 0)

        def DISK(self):
            return self.getToken(Cobol85Parser.DISK, 0)

        def DISPLAY(self):
            return self.getToken(Cobol85Parser.DISPLAY, 0)

        def KEYBOARD(self):
            return self.getToken(Cobol85Parser.KEYBOARD, 0)

        def PORT(self):
            return self.getToken(Cobol85Parser.PORT, 0)

        def PRINTER(self):
            return self.getToken(Cobol85Parser.PRINTER, 0)

        def READER(self):
            return self.getToken(Cobol85Parser.READER, 0)

        def REMOTE(self):
            return self.getToken(Cobol85Parser.REMOTE, 0)

        def TAPE(self):
            return self.getToken(Cobol85Parser.TAPE, 0)

        def VIRTUAL(self):
            return self.getToken(Cobol85Parser.VIRTUAL, 0)

        def assignmentName(self):
            return self.getTypedRuleContext(Cobol85Parser.AssignmentNameContext,0)


        def literal(self):
            return self.getTypedRuleContext(Cobol85Parser.LiteralContext,0)


        def TO(self):
            return self.getToken(Cobol85Parser.TO, 0)

        def DYNAMIC(self):
            return self.getToken(Cobol85Parser.DYNAMIC, 0)

        def EXTERNAL(self):
            return self.getToken(Cobol85Parser.EXTERNAL, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_assignClause

        def enterRule(self, listener):
            if hasattr(listener, "enterAssignClause"):
                listener.enterAssignClause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitAssignClause"):
                listener.exitAssignClause(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitAssignClause"):
                return visitor.visitAssignClause(self)
            else:
                return visitor.visitChildren(self)




    def assignClause(self):

        localctx = Cobol85Parser.AssignClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_assignClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1757
            self.match(Cobol85Parser.ASSIGN)
            self.state = 1759
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.TO:
                self.state = 1758
                self.match(Cobol85Parser.TO)


            self.state = 1775
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,122,self._ctx)
            if la_ == 1:
                self.state = 1761
                self.match(Cobol85Parser.DISK)
                pass

            elif la_ == 2:
                self.state = 1762
                self.match(Cobol85Parser.DISPLAY)
                pass

            elif la_ == 3:
                self.state = 1763
                self.match(Cobol85Parser.KEYBOARD)
                pass

            elif la_ == 4:
                self.state = 1764
                self.match(Cobol85Parser.PORT)
                pass

            elif la_ == 5:
                self.state = 1765
                self.match(Cobol85Parser.PRINTER)
                pass

            elif la_ == 6:
                self.state = 1766
                self.match(Cobol85Parser.READER)
                pass

            elif la_ == 7:
                self.state = 1767
                self.match(Cobol85Parser.REMOTE)
                pass

            elif la_ == 8:
                self.state = 1768
                self.match(Cobol85Parser.TAPE)
                pass

            elif la_ == 9:
                self.state = 1769
                self.match(Cobol85Parser.VIRTUAL)
                pass

            elif la_ == 10:
                self.state = 1771
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Cobol85Parser.DYNAMIC or _la==Cobol85Parser.EXTERNAL:
                    self.state = 1770
                    _la = self._input.LA(1)
                    if not(_la==Cobol85Parser.DYNAMIC or _la==Cobol85Parser.EXTERNAL):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 1773
                self.assignmentName()
                pass

            elif la_ == 11:
                self.state = 1774
                self.literal()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ReserveClauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.ReserveClauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def RESERVE(self):
            return self.getToken(Cobol85Parser.RESERVE, 0)

        def NO(self):
            return self.getToken(Cobol85Parser.NO, 0)

        def integerLiteral(self):
            return self.getTypedRuleContext(Cobol85Parser.IntegerLiteralContext,0)


        def ALTERNATE(self):
            return self.getToken(Cobol85Parser.ALTERNATE, 0)

        def AREA(self):
            return self.getToken(Cobol85Parser.AREA, 0)

        def AREAS(self):
            return self.getToken(Cobol85Parser.AREAS, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_reserveClause

        def enterRule(self, listener):
            if hasattr(listener, "enterReserveClause"):
                listener.enterReserveClause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitReserveClause"):
                listener.exitReserveClause(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitReserveClause"):
                return visitor.visitReserveClause(self)
            else:
                return visitor.visitChildren(self)




    def reserveClause(self):

        localctx = Cobol85Parser.ReserveClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_reserveClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1777
            self.match(Cobol85Parser.RESERVE)
            self.state = 1780
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Cobol85Parser.NO]:
                self.state = 1778
                self.match(Cobol85Parser.NO)
                pass
            elif token in [Cobol85Parser.LEVEL_NUMBER_66, Cobol85Parser.LEVEL_NUMBER_77, Cobol85Parser.LEVEL_NUMBER_88, Cobol85Parser.INTEGERLITERAL]:
                self.state = 1779
                self.integerLiteral()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1783
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,124,self._ctx)
            if la_ == 1:
                self.state = 1782
                self.match(Cobol85Parser.ALTERNATE)


            self.state = 1786
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.AREA or _la==Cobol85Parser.AREAS:
                self.state = 1785
                _la = self._input.LA(1)
                if not(_la==Cobol85Parser.AREA or _la==Cobol85Parser.AREAS):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OrganizationClauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.OrganizationClauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def SEQUENTIAL(self):
            return self.getToken(Cobol85Parser.SEQUENTIAL, 0)

        def RELATIVE(self):
            return self.getToken(Cobol85Parser.RELATIVE, 0)

        def INDEXED(self):
            return self.getToken(Cobol85Parser.INDEXED, 0)

        def ORGANIZATION(self):
            return self.getToken(Cobol85Parser.ORGANIZATION, 0)

        def LINE(self):
            return self.getToken(Cobol85Parser.LINE, 0)

        def RECORD(self):
            return self.getToken(Cobol85Parser.RECORD, 0)

        def BINARY(self):
            return self.getToken(Cobol85Parser.BINARY, 0)

        def IS(self):
            return self.getToken(Cobol85Parser.IS, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_organizationClause

        def enterRule(self, listener):
            if hasattr(listener, "enterOrganizationClause"):
                listener.enterOrganizationClause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitOrganizationClause"):
                listener.exitOrganizationClause(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitOrganizationClause"):
                return visitor.visitOrganizationClause(self)
            else:
                return visitor.visitChildren(self)




    def organizationClause(self):

        localctx = Cobol85Parser.OrganizationClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_organizationClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1792
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.ORGANIZATION:
                self.state = 1788
                self.match(Cobol85Parser.ORGANIZATION)
                self.state = 1790
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Cobol85Parser.IS:
                    self.state = 1789
                    self.match(Cobol85Parser.IS)




            self.state = 1799
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,128,self._ctx)
            if la_ == 1:
                self.state = 1794
                self.match(Cobol85Parser.LINE)

            elif la_ == 2:
                self.state = 1795
                self.match(Cobol85Parser.RECORD)
                self.state = 1796
                self.match(Cobol85Parser.BINARY)

            elif la_ == 3:
                self.state = 1797
                self.match(Cobol85Parser.RECORD)

            elif la_ == 4:
                self.state = 1798
                self.match(Cobol85Parser.BINARY)


            self.state = 1801
            _la = self._input.LA(1)
            if not(_la==Cobol85Parser.INDEXED or _la==Cobol85Parser.RELATIVE or _la==Cobol85Parser.SEQUENTIAL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PaddingCharacterClauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.PaddingCharacterClauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def PADDING(self):
            return self.getToken(Cobol85Parser.PADDING, 0)

        def qualifiedDataName(self):
            return self.getTypedRuleContext(Cobol85Parser.QualifiedDataNameContext,0)


        def literal(self):
            return self.getTypedRuleContext(Cobol85Parser.LiteralContext,0)


        def CHARACTER(self):
            return self.getToken(Cobol85Parser.CHARACTER, 0)

        def IS(self):
            return self.getToken(Cobol85Parser.IS, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_paddingCharacterClause

        def enterRule(self, listener):
            if hasattr(listener, "enterPaddingCharacterClause"):
                listener.enterPaddingCharacterClause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitPaddingCharacterClause"):
                listener.exitPaddingCharacterClause(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitPaddingCharacterClause"):
                return visitor.visitPaddingCharacterClause(self)
            else:
                return visitor.visitChildren(self)




    def paddingCharacterClause(self):

        localctx = Cobol85Parser.PaddingCharacterClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_paddingCharacterClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1803
            self.match(Cobol85Parser.PADDING)
            self.state = 1805
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.CHARACTER:
                self.state = 1804
                self.match(Cobol85Parser.CHARACTER)


            self.state = 1808
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.IS:
                self.state = 1807
                self.match(Cobol85Parser.IS)


            self.state = 1812
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,131,self._ctx)
            if la_ == 1:
                self.state = 1810
                self.qualifiedDataName()
                pass

            elif la_ == 2:
                self.state = 1811
                self.literal()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RecordDelimiterClauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.RecordDelimiterClauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def RECORD(self):
            return self.getToken(Cobol85Parser.RECORD, 0)

        def DELIMITER(self):
            return self.getToken(Cobol85Parser.DELIMITER, 0)

        def STANDARD_1(self):
            return self.getToken(Cobol85Parser.STANDARD_1, 0)

        def IMPLICIT(self):
            return self.getToken(Cobol85Parser.IMPLICIT, 0)

        def assignmentName(self):
            return self.getTypedRuleContext(Cobol85Parser.AssignmentNameContext,0)


        def IS(self):
            return self.getToken(Cobol85Parser.IS, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_recordDelimiterClause

        def enterRule(self, listener):
            if hasattr(listener, "enterRecordDelimiterClause"):
                listener.enterRecordDelimiterClause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitRecordDelimiterClause"):
                listener.exitRecordDelimiterClause(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitRecordDelimiterClause"):
                return visitor.visitRecordDelimiterClause(self)
            else:
                return visitor.visitChildren(self)




    def recordDelimiterClause(self):

        localctx = Cobol85Parser.RecordDelimiterClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_recordDelimiterClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1814
            self.match(Cobol85Parser.RECORD)
            self.state = 1815
            self.match(Cobol85Parser.DELIMITER)
            self.state = 1817
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.IS:
                self.state = 1816
                self.match(Cobol85Parser.IS)


            self.state = 1822
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,133,self._ctx)
            if la_ == 1:
                self.state = 1819
                self.match(Cobol85Parser.STANDARD_1)
                pass

            elif la_ == 2:
                self.state = 1820
                self.match(Cobol85Parser.IMPLICIT)
                pass

            elif la_ == 3:
                self.state = 1821
                self.assignmentName()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AccessModeClauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.AccessModeClauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ACCESS(self):
            return self.getToken(Cobol85Parser.ACCESS, 0)

        def SEQUENTIAL(self):
            return self.getToken(Cobol85Parser.SEQUENTIAL, 0)

        def RANDOM(self):
            return self.getToken(Cobol85Parser.RANDOM, 0)

        def DYNAMIC(self):
            return self.getToken(Cobol85Parser.DYNAMIC, 0)

        def EXCLUSIVE(self):
            return self.getToken(Cobol85Parser.EXCLUSIVE, 0)

        def MODE(self):
            return self.getToken(Cobol85Parser.MODE, 0)

        def IS(self):
            return self.getToken(Cobol85Parser.IS, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_accessModeClause

        def enterRule(self, listener):
            if hasattr(listener, "enterAccessModeClause"):
                listener.enterAccessModeClause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitAccessModeClause"):
                listener.exitAccessModeClause(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitAccessModeClause"):
                return visitor.visitAccessModeClause(self)
            else:
                return visitor.visitChildren(self)




    def accessModeClause(self):

        localctx = Cobol85Parser.AccessModeClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_accessModeClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1824
            self.match(Cobol85Parser.ACCESS)
            self.state = 1826
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.MODE:
                self.state = 1825
                self.match(Cobol85Parser.MODE)


            self.state = 1829
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.IS:
                self.state = 1828
                self.match(Cobol85Parser.IS)


            self.state = 1831
            _la = self._input.LA(1)
            if not(_la==Cobol85Parser.DYNAMIC or _la==Cobol85Parser.EXCLUSIVE or _la==Cobol85Parser.RANDOM or _la==Cobol85Parser.SEQUENTIAL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RecordKeyClauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.RecordKeyClauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def RECORD(self):
            return self.getToken(Cobol85Parser.RECORD, 0)

        def qualifiedDataName(self):
            return self.getTypedRuleContext(Cobol85Parser.QualifiedDataNameContext,0)


        def KEY(self):
            return self.getToken(Cobol85Parser.KEY, 0)

        def IS(self):
            return self.getToken(Cobol85Parser.IS, 0)

        def passwordClause(self):
            return self.getTypedRuleContext(Cobol85Parser.PasswordClauseContext,0)


        def DUPLICATES(self):
            return self.getToken(Cobol85Parser.DUPLICATES, 0)

        def WITH(self):
            return self.getToken(Cobol85Parser.WITH, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_recordKeyClause

        def enterRule(self, listener):
            if hasattr(listener, "enterRecordKeyClause"):
                listener.enterRecordKeyClause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitRecordKeyClause"):
                listener.exitRecordKeyClause(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitRecordKeyClause"):
                return visitor.visitRecordKeyClause(self)
            else:
                return visitor.visitChildren(self)




    def recordKeyClause(self):

        localctx = Cobol85Parser.RecordKeyClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_recordKeyClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1833
            self.match(Cobol85Parser.RECORD)
            self.state = 1835
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.KEY:
                self.state = 1834
                self.match(Cobol85Parser.KEY)


            self.state = 1838
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.IS:
                self.state = 1837
                self.match(Cobol85Parser.IS)


            self.state = 1840
            self.qualifiedDataName()
            self.state = 1842
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,138,self._ctx)
            if la_ == 1:
                self.state = 1841
                self.passwordClause()


            self.state = 1848
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.DUPLICATES or _la==Cobol85Parser.WITH:
                self.state = 1845
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Cobol85Parser.WITH:
                    self.state = 1844
                    self.match(Cobol85Parser.WITH)


                self.state = 1847
                self.match(Cobol85Parser.DUPLICATES)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AlternateRecordKeyClauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.AlternateRecordKeyClauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ALTERNATE(self):
            return self.getToken(Cobol85Parser.ALTERNATE, 0)

        def RECORD(self):
            return self.getToken(Cobol85Parser.RECORD, 0)

        def qualifiedDataName(self):
            return self.getTypedRuleContext(Cobol85Parser.QualifiedDataNameContext,0)


        def KEY(self):
            return self.getToken(Cobol85Parser.KEY, 0)

        def IS(self):
            return self.getToken(Cobol85Parser.IS, 0)

        def passwordClause(self):
            return self.getTypedRuleContext(Cobol85Parser.PasswordClauseContext,0)


        def DUPLICATES(self):
            return self.getToken(Cobol85Parser.DUPLICATES, 0)

        def WITH(self):
            return self.getToken(Cobol85Parser.WITH, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_alternateRecordKeyClause

        def enterRule(self, listener):
            if hasattr(listener, "enterAlternateRecordKeyClause"):
                listener.enterAlternateRecordKeyClause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitAlternateRecordKeyClause"):
                listener.exitAlternateRecordKeyClause(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitAlternateRecordKeyClause"):
                return visitor.visitAlternateRecordKeyClause(self)
            else:
                return visitor.visitChildren(self)




    def alternateRecordKeyClause(self):

        localctx = Cobol85Parser.AlternateRecordKeyClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_alternateRecordKeyClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1850
            self.match(Cobol85Parser.ALTERNATE)
            self.state = 1851
            self.match(Cobol85Parser.RECORD)
            self.state = 1853
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.KEY:
                self.state = 1852
                self.match(Cobol85Parser.KEY)


            self.state = 1856
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.IS:
                self.state = 1855
                self.match(Cobol85Parser.IS)


            self.state = 1858
            self.qualifiedDataName()
            self.state = 1860
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,143,self._ctx)
            if la_ == 1:
                self.state = 1859
                self.passwordClause()


            self.state = 1866
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.DUPLICATES or _la==Cobol85Parser.WITH:
                self.state = 1863
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Cobol85Parser.WITH:
                    self.state = 1862
                    self.match(Cobol85Parser.WITH)


                self.state = 1865
                self.match(Cobol85Parser.DUPLICATES)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PasswordClauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.PasswordClauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def PASSWORD(self):
            return self.getToken(Cobol85Parser.PASSWORD, 0)

        def dataName(self):
            return self.getTypedRuleContext(Cobol85Parser.DataNameContext,0)


        def IS(self):
            return self.getToken(Cobol85Parser.IS, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_passwordClause

        def enterRule(self, listener):
            if hasattr(listener, "enterPasswordClause"):
                listener.enterPasswordClause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitPasswordClause"):
                listener.exitPasswordClause(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitPasswordClause"):
                return visitor.visitPasswordClause(self)
            else:
                return visitor.visitChildren(self)




    def passwordClause(self):

        localctx = Cobol85Parser.PasswordClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_passwordClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1868
            self.match(Cobol85Parser.PASSWORD)
            self.state = 1870
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.IS:
                self.state = 1869
                self.match(Cobol85Parser.IS)


            self.state = 1872
            self.dataName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FileStatusClauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.FileStatusClauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def STATUS(self):
            return self.getToken(Cobol85Parser.STATUS, 0)

        def qualifiedDataName(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.QualifiedDataNameContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.QualifiedDataNameContext,i)


        def FILE(self):
            return self.getToken(Cobol85Parser.FILE, 0)

        def IS(self):
            return self.getToken(Cobol85Parser.IS, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_fileStatusClause

        def enterRule(self, listener):
            if hasattr(listener, "enterFileStatusClause"):
                listener.enterFileStatusClause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitFileStatusClause"):
                listener.exitFileStatusClause(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitFileStatusClause"):
                return visitor.visitFileStatusClause(self)
            else:
                return visitor.visitChildren(self)




    def fileStatusClause(self):

        localctx = Cobol85Parser.FileStatusClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_fileStatusClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1875
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.FILE:
                self.state = 1874
                self.match(Cobol85Parser.FILE)


            self.state = 1877
            self.match(Cobol85Parser.STATUS)
            self.state = 1879
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.IS:
                self.state = 1878
                self.match(Cobol85Parser.IS)


            self.state = 1881
            self.qualifiedDataName()
            self.state = 1883
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,149,self._ctx)
            if la_ == 1:
                self.state = 1882
                self.qualifiedDataName()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RelativeKeyClauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.RelativeKeyClauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def RELATIVE(self):
            return self.getToken(Cobol85Parser.RELATIVE, 0)

        def qualifiedDataName(self):
            return self.getTypedRuleContext(Cobol85Parser.QualifiedDataNameContext,0)


        def KEY(self):
            return self.getToken(Cobol85Parser.KEY, 0)

        def IS(self):
            return self.getToken(Cobol85Parser.IS, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_relativeKeyClause

        def enterRule(self, listener):
            if hasattr(listener, "enterRelativeKeyClause"):
                listener.enterRelativeKeyClause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitRelativeKeyClause"):
                listener.exitRelativeKeyClause(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitRelativeKeyClause"):
                return visitor.visitRelativeKeyClause(self)
            else:
                return visitor.visitChildren(self)




    def relativeKeyClause(self):

        localctx = Cobol85Parser.RelativeKeyClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_relativeKeyClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1885
            self.match(Cobol85Parser.RELATIVE)
            self.state = 1887
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.KEY:
                self.state = 1886
                self.match(Cobol85Parser.KEY)


            self.state = 1890
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.IS:
                self.state = 1889
                self.match(Cobol85Parser.IS)


            self.state = 1892
            self.qualifiedDataName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IoControlParagraphContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.IoControlParagraphContext, self).__init__(parent, invokingState)
            self.parser = parser

        def I_O_CONTROL(self):
            return self.getToken(Cobol85Parser.I_O_CONTROL, 0)

        def DOT_FS(self, i=None):
            if i is None:
                return self.getTokens(Cobol85Parser.DOT_FS)
            else:
                return self.getToken(Cobol85Parser.DOT_FS, i)

        def fileName(self):
            return self.getTypedRuleContext(Cobol85Parser.FileNameContext,0)


        def ioControlClause(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.IoControlClauseContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.IoControlClauseContext,i)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_ioControlParagraph

        def enterRule(self, listener):
            if hasattr(listener, "enterIoControlParagraph"):
                listener.enterIoControlParagraph(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitIoControlParagraph"):
                listener.exitIoControlParagraph(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitIoControlParagraph"):
                return visitor.visitIoControlParagraph(self)
            else:
                return visitor.visitChildren(self)




    def ioControlParagraph(self):

        localctx = Cobol85Parser.IoControlParagraphContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_ioControlParagraph)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1894
            self.match(Cobol85Parser.I_O_CONTROL)
            self.state = 1895
            self.match(Cobol85Parser.DOT_FS)
            self.state = 1899
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,152,self._ctx)
            if la_ == 1:
                self.state = 1896
                self.fileName()
                self.state = 1897
                self.match(Cobol85Parser.DOT_FS)


            self.state = 1908
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,154,self._ctx)
            if la_ == 1:
                self.state = 1904
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==Cobol85Parser.COMMITMENT or _la==Cobol85Parser.MULTIPLE or _la==Cobol85Parser.RERUN or _la==Cobol85Parser.SAME:
                    self.state = 1901
                    self.ioControlClause()
                    self.state = 1906
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1907
                self.match(Cobol85Parser.DOT_FS)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IoControlClauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.IoControlClauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def rerunClause(self):
            return self.getTypedRuleContext(Cobol85Parser.RerunClauseContext,0)


        def sameClause(self):
            return self.getTypedRuleContext(Cobol85Parser.SameClauseContext,0)


        def multipleFileClause(self):
            return self.getTypedRuleContext(Cobol85Parser.MultipleFileClauseContext,0)


        def commitmentControlClause(self):
            return self.getTypedRuleContext(Cobol85Parser.CommitmentControlClauseContext,0)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_ioControlClause

        def enterRule(self, listener):
            if hasattr(listener, "enterIoControlClause"):
                listener.enterIoControlClause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitIoControlClause"):
                listener.exitIoControlClause(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitIoControlClause"):
                return visitor.visitIoControlClause(self)
            else:
                return visitor.visitChildren(self)




    def ioControlClause(self):

        localctx = Cobol85Parser.IoControlClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_ioControlClause)
        try:
            self.state = 1914
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Cobol85Parser.RERUN]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1910
                self.rerunClause()
                pass
            elif token in [Cobol85Parser.SAME]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1911
                self.sameClause()
                pass
            elif token in [Cobol85Parser.MULTIPLE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1912
                self.multipleFileClause()
                pass
            elif token in [Cobol85Parser.COMMITMENT]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1913
                self.commitmentControlClause()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RerunClauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.RerunClauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def RERUN(self):
            return self.getToken(Cobol85Parser.RERUN, 0)

        def EVERY(self):
            return self.getToken(Cobol85Parser.EVERY, 0)

        def rerunEveryRecords(self):
            return self.getTypedRuleContext(Cobol85Parser.RerunEveryRecordsContext,0)


        def rerunEveryOf(self):
            return self.getTypedRuleContext(Cobol85Parser.RerunEveryOfContext,0)


        def rerunEveryClock(self):
            return self.getTypedRuleContext(Cobol85Parser.RerunEveryClockContext,0)


        def ON(self):
            return self.getToken(Cobol85Parser.ON, 0)

        def assignmentName(self):
            return self.getTypedRuleContext(Cobol85Parser.AssignmentNameContext,0)


        def fileName(self):
            return self.getTypedRuleContext(Cobol85Parser.FileNameContext,0)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_rerunClause

        def enterRule(self, listener):
            if hasattr(listener, "enterRerunClause"):
                listener.enterRerunClause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitRerunClause"):
                listener.exitRerunClause(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitRerunClause"):
                return visitor.visitRerunClause(self)
            else:
                return visitor.visitChildren(self)




    def rerunClause(self):

        localctx = Cobol85Parser.RerunClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_rerunClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1916
            self.match(Cobol85Parser.RERUN)
            self.state = 1922
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.ON:
                self.state = 1917
                self.match(Cobol85Parser.ON)
                self.state = 1920
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,156,self._ctx)
                if la_ == 1:
                    self.state = 1918
                    self.assignmentName()
                    pass

                elif la_ == 2:
                    self.state = 1919
                    self.fileName()
                    pass




            self.state = 1924
            self.match(Cobol85Parser.EVERY)
            self.state = 1928
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,158,self._ctx)
            if la_ == 1:
                self.state = 1925
                self.rerunEveryRecords()
                pass

            elif la_ == 2:
                self.state = 1926
                self.rerunEveryOf()
                pass

            elif la_ == 3:
                self.state = 1927
                self.rerunEveryClock()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RerunEveryRecordsContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.RerunEveryRecordsContext, self).__init__(parent, invokingState)
            self.parser = parser

        def integerLiteral(self):
            return self.getTypedRuleContext(Cobol85Parser.IntegerLiteralContext,0)


        def RECORDS(self):
            return self.getToken(Cobol85Parser.RECORDS, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_rerunEveryRecords

        def enterRule(self, listener):
            if hasattr(listener, "enterRerunEveryRecords"):
                listener.enterRerunEveryRecords(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitRerunEveryRecords"):
                listener.exitRerunEveryRecords(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitRerunEveryRecords"):
                return visitor.visitRerunEveryRecords(self)
            else:
                return visitor.visitChildren(self)




    def rerunEveryRecords(self):

        localctx = Cobol85Parser.RerunEveryRecordsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_rerunEveryRecords)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1930
            self.integerLiteral()
            self.state = 1931
            self.match(Cobol85Parser.RECORDS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RerunEveryOfContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.RerunEveryOfContext, self).__init__(parent, invokingState)
            self.parser = parser

        def OF(self, i=None):
            if i is None:
                return self.getTokens(Cobol85Parser.OF)
            else:
                return self.getToken(Cobol85Parser.OF, i)

        def fileName(self):
            return self.getTypedRuleContext(Cobol85Parser.FileNameContext,0)


        def REEL(self):
            return self.getToken(Cobol85Parser.REEL, 0)

        def UNIT(self):
            return self.getToken(Cobol85Parser.UNIT, 0)

        def END(self):
            return self.getToken(Cobol85Parser.END, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_rerunEveryOf

        def enterRule(self, listener):
            if hasattr(listener, "enterRerunEveryOf"):
                listener.enterRerunEveryOf(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitRerunEveryOf"):
                listener.exitRerunEveryOf(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitRerunEveryOf"):
                return visitor.visitRerunEveryOf(self)
            else:
                return visitor.visitChildren(self)




    def rerunEveryOf(self):

        localctx = Cobol85Parser.RerunEveryOfContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_rerunEveryOf)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1934
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.END:
                self.state = 1933
                self.match(Cobol85Parser.END)


            self.state = 1937
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.OF:
                self.state = 1936
                self.match(Cobol85Parser.OF)


            self.state = 1939
            _la = self._input.LA(1)
            if not(_la==Cobol85Parser.REEL or _la==Cobol85Parser.UNIT):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1940
            self.match(Cobol85Parser.OF)
            self.state = 1941
            self.fileName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RerunEveryClockContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.RerunEveryClockContext, self).__init__(parent, invokingState)
            self.parser = parser

        def integerLiteral(self):
            return self.getTypedRuleContext(Cobol85Parser.IntegerLiteralContext,0)


        def CLOCK_UNITS(self):
            return self.getToken(Cobol85Parser.CLOCK_UNITS, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_rerunEveryClock

        def enterRule(self, listener):
            if hasattr(listener, "enterRerunEveryClock"):
                listener.enterRerunEveryClock(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitRerunEveryClock"):
                listener.exitRerunEveryClock(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitRerunEveryClock"):
                return visitor.visitRerunEveryClock(self)
            else:
                return visitor.visitChildren(self)




    def rerunEveryClock(self):

        localctx = Cobol85Parser.RerunEveryClockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_rerunEveryClock)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1943
            self.integerLiteral()
            self.state = 1945
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.CLOCK_UNITS:
                self.state = 1944
                self.match(Cobol85Parser.CLOCK_UNITS)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SameClauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.SameClauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def SAME(self):
            return self.getToken(Cobol85Parser.SAME, 0)

        def AREA(self):
            return self.getToken(Cobol85Parser.AREA, 0)

        def FOR(self):
            return self.getToken(Cobol85Parser.FOR, 0)

        def fileName(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.FileNameContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.FileNameContext,i)


        def RECORD(self):
            return self.getToken(Cobol85Parser.RECORD, 0)

        def SORT(self):
            return self.getToken(Cobol85Parser.SORT, 0)

        def SORT_MERGE(self):
            return self.getToken(Cobol85Parser.SORT_MERGE, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_sameClause

        def enterRule(self, listener):
            if hasattr(listener, "enterSameClause"):
                listener.enterSameClause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSameClause"):
                listener.exitSameClause(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitSameClause"):
                return visitor.visitSameClause(self)
            else:
                return visitor.visitChildren(self)




    def sameClause(self):

        localctx = Cobol85Parser.SameClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_sameClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1947
            self.match(Cobol85Parser.SAME)
            self.state = 1949
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.RECORD or _la==Cobol85Parser.SORT or _la==Cobol85Parser.SORT_MERGE:
                self.state = 1948
                _la = self._input.LA(1)
                if not(_la==Cobol85Parser.RECORD or _la==Cobol85Parser.SORT or _la==Cobol85Parser.SORT_MERGE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 1952
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.AREA:
                self.state = 1951
                self.match(Cobol85Parser.AREA)


            self.state = 1955
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.FOR:
                self.state = 1954
                self.match(Cobol85Parser.FOR)


            self.state = 1958 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1957
                    self.fileName()

                else:
                    raise NoViableAltException(self)
                self.state = 1960 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,165,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MultipleFileClauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.MultipleFileClauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def MULTIPLE(self):
            return self.getToken(Cobol85Parser.MULTIPLE, 0)

        def FILE(self):
            return self.getToken(Cobol85Parser.FILE, 0)

        def TAPE(self):
            return self.getToken(Cobol85Parser.TAPE, 0)

        def CONTAINS(self):
            return self.getToken(Cobol85Parser.CONTAINS, 0)

        def multipleFilePosition(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.MultipleFilePositionContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.MultipleFilePositionContext,i)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_multipleFileClause

        def enterRule(self, listener):
            if hasattr(listener, "enterMultipleFileClause"):
                listener.enterMultipleFileClause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitMultipleFileClause"):
                listener.exitMultipleFileClause(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitMultipleFileClause"):
                return visitor.visitMultipleFileClause(self)
            else:
                return visitor.visitChildren(self)




    def multipleFileClause(self):

        localctx = Cobol85Parser.MultipleFileClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_multipleFileClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1962
            self.match(Cobol85Parser.MULTIPLE)
            self.state = 1963
            self.match(Cobol85Parser.FILE)
            self.state = 1965
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.TAPE:
                self.state = 1964
                self.match(Cobol85Parser.TAPE)


            self.state = 1968
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.CONTAINS:
                self.state = 1967
                self.match(Cobol85Parser.CONTAINS)


            self.state = 1971 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1970
                    self.multipleFilePosition()

                else:
                    raise NoViableAltException(self)
                self.state = 1973 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,168,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MultipleFilePositionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.MultipleFilePositionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def fileName(self):
            return self.getTypedRuleContext(Cobol85Parser.FileNameContext,0)


        def POSITION(self):
            return self.getToken(Cobol85Parser.POSITION, 0)

        def integerLiteral(self):
            return self.getTypedRuleContext(Cobol85Parser.IntegerLiteralContext,0)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_multipleFilePosition

        def enterRule(self, listener):
            if hasattr(listener, "enterMultipleFilePosition"):
                listener.enterMultipleFilePosition(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitMultipleFilePosition"):
                listener.exitMultipleFilePosition(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitMultipleFilePosition"):
                return visitor.visitMultipleFilePosition(self)
            else:
                return visitor.visitChildren(self)




    def multipleFilePosition(self):

        localctx = Cobol85Parser.MultipleFilePositionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_multipleFilePosition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1975
            self.fileName()
            self.state = 1978
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.POSITION:
                self.state = 1976
                self.match(Cobol85Parser.POSITION)
                self.state = 1977
                self.integerLiteral()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CommitmentControlClauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.CommitmentControlClauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def COMMITMENT(self):
            return self.getToken(Cobol85Parser.COMMITMENT, 0)

        def CONTROL(self):
            return self.getToken(Cobol85Parser.CONTROL, 0)

        def fileName(self):
            return self.getTypedRuleContext(Cobol85Parser.FileNameContext,0)


        def FOR(self):
            return self.getToken(Cobol85Parser.FOR, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_commitmentControlClause

        def enterRule(self, listener):
            if hasattr(listener, "enterCommitmentControlClause"):
                listener.enterCommitmentControlClause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitCommitmentControlClause"):
                listener.exitCommitmentControlClause(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitCommitmentControlClause"):
                return visitor.visitCommitmentControlClause(self)
            else:
                return visitor.visitChildren(self)




    def commitmentControlClause(self):

        localctx = Cobol85Parser.CommitmentControlClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_commitmentControlClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1980
            self.match(Cobol85Parser.COMMITMENT)
            self.state = 1981
            self.match(Cobol85Parser.CONTROL)
            self.state = 1983
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.FOR:
                self.state = 1982
                self.match(Cobol85Parser.FOR)


            self.state = 1985
            self.fileName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DataDivisionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.DataDivisionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def DATA(self):
            return self.getToken(Cobol85Parser.DATA, 0)

        def DIVISION(self):
            return self.getToken(Cobol85Parser.DIVISION, 0)

        def DOT_FS(self):
            return self.getToken(Cobol85Parser.DOT_FS, 0)

        def dataDivisionSection(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.DataDivisionSectionContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.DataDivisionSectionContext,i)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_dataDivision

        def enterRule(self, listener):
            if hasattr(listener, "enterDataDivision"):
                listener.enterDataDivision(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitDataDivision"):
                listener.exitDataDivision(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitDataDivision"):
                return visitor.visitDataDivision(self)
            else:
                return visitor.visitChildren(self)




    def dataDivision(self):

        localctx = Cobol85Parser.DataDivisionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_dataDivision)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1987
            self.match(Cobol85Parser.DATA)
            self.state = 1988
            self.match(Cobol85Parser.DIVISION)
            self.state = 1989
            self.match(Cobol85Parser.DOT_FS)
            self.state = 1993
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==Cobol85Parser.COMMUNICATION or _la==Cobol85Parser.DATA_BASE or _la==Cobol85Parser.FILE or _la==Cobol85Parser.LINKAGE or _la==Cobol85Parser.LOCAL_STORAGE or ((((_la - 367)) & ~0x3f) == 0 and ((1 << (_la - 367)) & ((1 << (Cobol85Parser.PROGRAM_LIBRARY - 367)) | (1 << (Cobol85Parser.REPORT - 367)) | (1 << (Cobol85Parser.SCREEN - 367)))) != 0) or _la==Cobol85Parser.WORKING_STORAGE:
                self.state = 1990
                self.dataDivisionSection()
                self.state = 1995
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DataDivisionSectionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.DataDivisionSectionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def fileSection(self):
            return self.getTypedRuleContext(Cobol85Parser.FileSectionContext,0)


        def dataBaseSection(self):
            return self.getTypedRuleContext(Cobol85Parser.DataBaseSectionContext,0)


        def workingStorageSection(self):
            return self.getTypedRuleContext(Cobol85Parser.WorkingStorageSectionContext,0)


        def linkageSection(self):
            return self.getTypedRuleContext(Cobol85Parser.LinkageSectionContext,0)


        def communicationSection(self):
            return self.getTypedRuleContext(Cobol85Parser.CommunicationSectionContext,0)


        def localStorageSection(self):
            return self.getTypedRuleContext(Cobol85Parser.LocalStorageSectionContext,0)


        def screenSection(self):
            return self.getTypedRuleContext(Cobol85Parser.ScreenSectionContext,0)


        def reportSection(self):
            return self.getTypedRuleContext(Cobol85Parser.ReportSectionContext,0)


        def programLibrarySection(self):
            return self.getTypedRuleContext(Cobol85Parser.ProgramLibrarySectionContext,0)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_dataDivisionSection

        def enterRule(self, listener):
            if hasattr(listener, "enterDataDivisionSection"):
                listener.enterDataDivisionSection(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitDataDivisionSection"):
                listener.exitDataDivisionSection(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitDataDivisionSection"):
                return visitor.visitDataDivisionSection(self)
            else:
                return visitor.visitChildren(self)




    def dataDivisionSection(self):

        localctx = Cobol85Parser.DataDivisionSectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_dataDivisionSection)
        try:
            self.state = 2005
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Cobol85Parser.FILE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1996
                self.fileSection()
                pass
            elif token in [Cobol85Parser.DATA_BASE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1997
                self.dataBaseSection()
                pass
            elif token in [Cobol85Parser.WORKING_STORAGE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1998
                self.workingStorageSection()
                pass
            elif token in [Cobol85Parser.LINKAGE]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1999
                self.linkageSection()
                pass
            elif token in [Cobol85Parser.COMMUNICATION]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2000
                self.communicationSection()
                pass
            elif token in [Cobol85Parser.LOCAL_STORAGE]:
                self.enterOuterAlt(localctx, 6)
                self.state = 2001
                self.localStorageSection()
                pass
            elif token in [Cobol85Parser.SCREEN]:
                self.enterOuterAlt(localctx, 7)
                self.state = 2002
                self.screenSection()
                pass
            elif token in [Cobol85Parser.REPORT]:
                self.enterOuterAlt(localctx, 8)
                self.state = 2003
                self.reportSection()
                pass
            elif token in [Cobol85Parser.PROGRAM_LIBRARY]:
                self.enterOuterAlt(localctx, 9)
                self.state = 2004
                self.programLibrarySection()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FileSectionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.FileSectionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def FILE(self):
            return self.getToken(Cobol85Parser.FILE, 0)

        def SECTION(self):
            return self.getToken(Cobol85Parser.SECTION, 0)

        def DOT_FS(self):
            return self.getToken(Cobol85Parser.DOT_FS, 0)

        def fileDescriptionEntry(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.FileDescriptionEntryContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.FileDescriptionEntryContext,i)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_fileSection

        def enterRule(self, listener):
            if hasattr(listener, "enterFileSection"):
                listener.enterFileSection(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitFileSection"):
                listener.exitFileSection(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitFileSection"):
                return visitor.visitFileSection(self)
            else:
                return visitor.visitChildren(self)




    def fileSection(self):

        localctx = Cobol85Parser.FileSectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_fileSection)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2007
            self.match(Cobol85Parser.FILE)
            self.state = 2008
            self.match(Cobol85Parser.SECTION)
            self.state = 2009
            self.match(Cobol85Parser.DOT_FS)
            self.state = 2013
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==Cobol85Parser.FD or _la==Cobol85Parser.SD:
                self.state = 2010
                self.fileDescriptionEntry()
                self.state = 2015
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FileDescriptionEntryContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.FileDescriptionEntryContext, self).__init__(parent, invokingState)
            self.parser = parser

        def fileName(self):
            return self.getTypedRuleContext(Cobol85Parser.FileNameContext,0)


        def DOT_FS(self, i=None):
            if i is None:
                return self.getTokens(Cobol85Parser.DOT_FS)
            else:
                return self.getToken(Cobol85Parser.DOT_FS, i)

        def FD(self):
            return self.getToken(Cobol85Parser.FD, 0)

        def SD(self):
            return self.getToken(Cobol85Parser.SD, 0)

        def fileDescriptionEntryClause(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.FileDescriptionEntryClauseContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.FileDescriptionEntryClauseContext,i)


        def dataDescriptionEntry(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.DataDescriptionEntryContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.DataDescriptionEntryContext,i)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_fileDescriptionEntry

        def enterRule(self, listener):
            if hasattr(listener, "enterFileDescriptionEntry"):
                listener.enterFileDescriptionEntry(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitFileDescriptionEntry"):
                listener.exitFileDescriptionEntry(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitFileDescriptionEntry"):
                return visitor.visitFileDescriptionEntry(self)
            else:
                return visitor.visitChildren(self)




    def fileDescriptionEntry(self):

        localctx = Cobol85Parser.FileDescriptionEntryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_fileDescriptionEntry)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2016
            _la = self._input.LA(1)
            if not(_la==Cobol85Parser.FD or _la==Cobol85Parser.SD):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2017
            self.fileName()
            self.state = 2024
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,175,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2019
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==Cobol85Parser.DOT_FS:
                        self.state = 2018
                        self.match(Cobol85Parser.DOT_FS)


                    self.state = 2021
                    self.fileDescriptionEntryClause() 
                self.state = 2026
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,175,self._ctx)

            self.state = 2027
            self.match(Cobol85Parser.DOT_FS)
            self.state = 2031
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 557)) & ~0x3f) == 0 and ((1 << (_la - 557)) & ((1 << (Cobol85Parser.LEVEL_NUMBER_66 - 557)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 557)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 557)) | (1 << (Cobol85Parser.INTEGERLITERAL - 557)) | (1 << (Cobol85Parser.EXECSQLLINE - 557)))) != 0):
                self.state = 2028
                self.dataDescriptionEntry()
                self.state = 2033
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FileDescriptionEntryClauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.FileDescriptionEntryClauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def externalClause(self):
            return self.getTypedRuleContext(Cobol85Parser.ExternalClauseContext,0)


        def globalClause(self):
            return self.getTypedRuleContext(Cobol85Parser.GlobalClauseContext,0)


        def blockContainsClause(self):
            return self.getTypedRuleContext(Cobol85Parser.BlockContainsClauseContext,0)


        def recordContainsClause(self):
            return self.getTypedRuleContext(Cobol85Parser.RecordContainsClauseContext,0)


        def labelRecordsClause(self):
            return self.getTypedRuleContext(Cobol85Parser.LabelRecordsClauseContext,0)


        def valueOfClause(self):
            return self.getTypedRuleContext(Cobol85Parser.ValueOfClauseContext,0)


        def dataRecordsClause(self):
            return self.getTypedRuleContext(Cobol85Parser.DataRecordsClauseContext,0)


        def linageClause(self):
            return self.getTypedRuleContext(Cobol85Parser.LinageClauseContext,0)


        def codeSetClause(self):
            return self.getTypedRuleContext(Cobol85Parser.CodeSetClauseContext,0)


        def reportClause(self):
            return self.getTypedRuleContext(Cobol85Parser.ReportClauseContext,0)


        def recordingModeClause(self):
            return self.getTypedRuleContext(Cobol85Parser.RecordingModeClauseContext,0)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_fileDescriptionEntryClause

        def enterRule(self, listener):
            if hasattr(listener, "enterFileDescriptionEntryClause"):
                listener.enterFileDescriptionEntryClause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitFileDescriptionEntryClause"):
                listener.exitFileDescriptionEntryClause(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitFileDescriptionEntryClause"):
                return visitor.visitFileDescriptionEntryClause(self)
            else:
                return visitor.visitChildren(self)




    def fileDescriptionEntryClause(self):

        localctx = Cobol85Parser.FileDescriptionEntryClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_fileDescriptionEntryClause)
        try:
            self.state = 2045
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,177,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2034
                self.externalClause()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2035
                self.globalClause()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2036
                self.blockContainsClause()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2037
                self.recordContainsClause()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2038
                self.labelRecordsClause()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2039
                self.valueOfClause()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 2040
                self.dataRecordsClause()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 2041
                self.linageClause()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 2042
                self.codeSetClause()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 2043
                self.reportClause()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 2044
                self.recordingModeClause()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExternalClauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.ExternalClauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def EXTERNAL(self):
            return self.getToken(Cobol85Parser.EXTERNAL, 0)

        def IS(self):
            return self.getToken(Cobol85Parser.IS, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_externalClause

        def enterRule(self, listener):
            if hasattr(listener, "enterExternalClause"):
                listener.enterExternalClause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitExternalClause"):
                listener.exitExternalClause(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitExternalClause"):
                return visitor.visitExternalClause(self)
            else:
                return visitor.visitChildren(self)




    def externalClause(self):

        localctx = Cobol85Parser.ExternalClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_externalClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2048
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.IS:
                self.state = 2047
                self.match(Cobol85Parser.IS)


            self.state = 2050
            self.match(Cobol85Parser.EXTERNAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GlobalClauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.GlobalClauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def GLOBAL(self):
            return self.getToken(Cobol85Parser.GLOBAL, 0)

        def IS(self):
            return self.getToken(Cobol85Parser.IS, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_globalClause

        def enterRule(self, listener):
            if hasattr(listener, "enterGlobalClause"):
                listener.enterGlobalClause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitGlobalClause"):
                listener.exitGlobalClause(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitGlobalClause"):
                return visitor.visitGlobalClause(self)
            else:
                return visitor.visitChildren(self)




    def globalClause(self):

        localctx = Cobol85Parser.GlobalClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_globalClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2053
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.IS:
                self.state = 2052
                self.match(Cobol85Parser.IS)


            self.state = 2055
            self.match(Cobol85Parser.GLOBAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BlockContainsClauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.BlockContainsClauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def BLOCK(self):
            return self.getToken(Cobol85Parser.BLOCK, 0)

        def integerLiteral(self):
            return self.getTypedRuleContext(Cobol85Parser.IntegerLiteralContext,0)


        def CONTAINS(self):
            return self.getToken(Cobol85Parser.CONTAINS, 0)

        def blockContainsTo(self):
            return self.getTypedRuleContext(Cobol85Parser.BlockContainsToContext,0)


        def RECORDS(self):
            return self.getToken(Cobol85Parser.RECORDS, 0)

        def CHARACTERS(self):
            return self.getToken(Cobol85Parser.CHARACTERS, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_blockContainsClause

        def enterRule(self, listener):
            if hasattr(listener, "enterBlockContainsClause"):
                listener.enterBlockContainsClause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitBlockContainsClause"):
                listener.exitBlockContainsClause(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitBlockContainsClause"):
                return visitor.visitBlockContainsClause(self)
            else:
                return visitor.visitChildren(self)




    def blockContainsClause(self):

        localctx = Cobol85Parser.BlockContainsClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_blockContainsClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2057
            self.match(Cobol85Parser.BLOCK)
            self.state = 2059
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.CONTAINS:
                self.state = 2058
                self.match(Cobol85Parser.CONTAINS)


            self.state = 2061
            self.integerLiteral()
            self.state = 2063
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.TO:
                self.state = 2062
                self.blockContainsTo()


            self.state = 2066
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.CHARACTERS or _la==Cobol85Parser.RECORDS:
                self.state = 2065
                _la = self._input.LA(1)
                if not(_la==Cobol85Parser.CHARACTERS or _la==Cobol85Parser.RECORDS):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BlockContainsToContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.BlockContainsToContext, self).__init__(parent, invokingState)
            self.parser = parser

        def TO(self):
            return self.getToken(Cobol85Parser.TO, 0)

        def integerLiteral(self):
            return self.getTypedRuleContext(Cobol85Parser.IntegerLiteralContext,0)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_blockContainsTo

        def enterRule(self, listener):
            if hasattr(listener, "enterBlockContainsTo"):
                listener.enterBlockContainsTo(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitBlockContainsTo"):
                listener.exitBlockContainsTo(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitBlockContainsTo"):
                return visitor.visitBlockContainsTo(self)
            else:
                return visitor.visitChildren(self)




    def blockContainsTo(self):

        localctx = Cobol85Parser.BlockContainsToContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_blockContainsTo)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2068
            self.match(Cobol85Parser.TO)
            self.state = 2069
            self.integerLiteral()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RecordContainsClauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.RecordContainsClauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def RECORD(self):
            return self.getToken(Cobol85Parser.RECORD, 0)

        def recordContainsClauseFormat1(self):
            return self.getTypedRuleContext(Cobol85Parser.RecordContainsClauseFormat1Context,0)


        def recordContainsClauseFormat2(self):
            return self.getTypedRuleContext(Cobol85Parser.RecordContainsClauseFormat2Context,0)


        def recordContainsClauseFormat3(self):
            return self.getTypedRuleContext(Cobol85Parser.RecordContainsClauseFormat3Context,0)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_recordContainsClause

        def enterRule(self, listener):
            if hasattr(listener, "enterRecordContainsClause"):
                listener.enterRecordContainsClause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitRecordContainsClause"):
                listener.exitRecordContainsClause(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitRecordContainsClause"):
                return visitor.visitRecordContainsClause(self)
            else:
                return visitor.visitChildren(self)




    def recordContainsClause(self):

        localctx = Cobol85Parser.RecordContainsClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_recordContainsClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2071
            self.match(Cobol85Parser.RECORD)
            self.state = 2075
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,183,self._ctx)
            if la_ == 1:
                self.state = 2072
                self.recordContainsClauseFormat1()
                pass

            elif la_ == 2:
                self.state = 2073
                self.recordContainsClauseFormat2()
                pass

            elif la_ == 3:
                self.state = 2074
                self.recordContainsClauseFormat3()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RecordContainsClauseFormat1Context(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.RecordContainsClauseFormat1Context, self).__init__(parent, invokingState)
            self.parser = parser

        def integerLiteral(self):
            return self.getTypedRuleContext(Cobol85Parser.IntegerLiteralContext,0)


        def CONTAINS(self):
            return self.getToken(Cobol85Parser.CONTAINS, 0)

        def CHARACTERS(self):
            return self.getToken(Cobol85Parser.CHARACTERS, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_recordContainsClauseFormat1

        def enterRule(self, listener):
            if hasattr(listener, "enterRecordContainsClauseFormat1"):
                listener.enterRecordContainsClauseFormat1(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitRecordContainsClauseFormat1"):
                listener.exitRecordContainsClauseFormat1(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitRecordContainsClauseFormat1"):
                return visitor.visitRecordContainsClauseFormat1(self)
            else:
                return visitor.visitChildren(self)




    def recordContainsClauseFormat1(self):

        localctx = Cobol85Parser.RecordContainsClauseFormat1Context(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_recordContainsClauseFormat1)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2078
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.CONTAINS:
                self.state = 2077
                self.match(Cobol85Parser.CONTAINS)


            self.state = 2080
            self.integerLiteral()
            self.state = 2082
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.CHARACTERS:
                self.state = 2081
                self.match(Cobol85Parser.CHARACTERS)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RecordContainsClauseFormat2Context(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.RecordContainsClauseFormat2Context, self).__init__(parent, invokingState)
            self.parser = parser

        def VARYING(self):
            return self.getToken(Cobol85Parser.VARYING, 0)

        def IS(self):
            return self.getToken(Cobol85Parser.IS, 0)

        def IN(self):
            return self.getToken(Cobol85Parser.IN, 0)

        def SIZE(self):
            return self.getToken(Cobol85Parser.SIZE, 0)

        def integerLiteral(self):
            return self.getTypedRuleContext(Cobol85Parser.IntegerLiteralContext,0)


        def DEPENDING(self):
            return self.getToken(Cobol85Parser.DEPENDING, 0)

        def qualifiedDataName(self):
            return self.getTypedRuleContext(Cobol85Parser.QualifiedDataNameContext,0)


        def FROM(self):
            return self.getToken(Cobol85Parser.FROM, 0)

        def recordContainsTo(self):
            return self.getTypedRuleContext(Cobol85Parser.RecordContainsToContext,0)


        def CHARACTERS(self):
            return self.getToken(Cobol85Parser.CHARACTERS, 0)

        def ON(self):
            return self.getToken(Cobol85Parser.ON, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_recordContainsClauseFormat2

        def enterRule(self, listener):
            if hasattr(listener, "enterRecordContainsClauseFormat2"):
                listener.enterRecordContainsClauseFormat2(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitRecordContainsClauseFormat2"):
                listener.exitRecordContainsClauseFormat2(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitRecordContainsClauseFormat2"):
                return visitor.visitRecordContainsClauseFormat2(self)
            else:
                return visitor.visitChildren(self)




    def recordContainsClauseFormat2(self):

        localctx = Cobol85Parser.RecordContainsClauseFormat2Context(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_recordContainsClauseFormat2)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2085
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.IS:
                self.state = 2084
                self.match(Cobol85Parser.IS)


            self.state = 2087
            self.match(Cobol85Parser.VARYING)
            self.state = 2089
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.IN:
                self.state = 2088
                self.match(Cobol85Parser.IN)


            self.state = 2092
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.SIZE:
                self.state = 2091
                self.match(Cobol85Parser.SIZE)


            self.state = 2104
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.FROM or ((((_la - 557)) & ~0x3f) == 0 and ((1 << (_la - 557)) & ((1 << (Cobol85Parser.LEVEL_NUMBER_66 - 557)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 557)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 557)) | (1 << (Cobol85Parser.INTEGERLITERAL - 557)))) != 0):
                self.state = 2095
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Cobol85Parser.FROM:
                    self.state = 2094
                    self.match(Cobol85Parser.FROM)


                self.state = 2097
                self.integerLiteral()
                self.state = 2099
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Cobol85Parser.TO:
                    self.state = 2098
                    self.recordContainsTo()


                self.state = 2102
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Cobol85Parser.CHARACTERS:
                    self.state = 2101
                    self.match(Cobol85Parser.CHARACTERS)




            self.state = 2111
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.DEPENDING:
                self.state = 2106
                self.match(Cobol85Parser.DEPENDING)
                self.state = 2108
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Cobol85Parser.ON:
                    self.state = 2107
                    self.match(Cobol85Parser.ON)


                self.state = 2110
                self.qualifiedDataName()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RecordContainsClauseFormat3Context(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.RecordContainsClauseFormat3Context, self).__init__(parent, invokingState)
            self.parser = parser

        def integerLiteral(self):
            return self.getTypedRuleContext(Cobol85Parser.IntegerLiteralContext,0)


        def recordContainsTo(self):
            return self.getTypedRuleContext(Cobol85Parser.RecordContainsToContext,0)


        def CONTAINS(self):
            return self.getToken(Cobol85Parser.CONTAINS, 0)

        def CHARACTERS(self):
            return self.getToken(Cobol85Parser.CHARACTERS, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_recordContainsClauseFormat3

        def enterRule(self, listener):
            if hasattr(listener, "enterRecordContainsClauseFormat3"):
                listener.enterRecordContainsClauseFormat3(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitRecordContainsClauseFormat3"):
                listener.exitRecordContainsClauseFormat3(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitRecordContainsClauseFormat3"):
                return visitor.visitRecordContainsClauseFormat3(self)
            else:
                return visitor.visitChildren(self)




    def recordContainsClauseFormat3(self):

        localctx = Cobol85Parser.RecordContainsClauseFormat3Context(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_recordContainsClauseFormat3)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2114
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.CONTAINS:
                self.state = 2113
                self.match(Cobol85Parser.CONTAINS)


            self.state = 2116
            self.integerLiteral()
            self.state = 2117
            self.recordContainsTo()
            self.state = 2119
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.CHARACTERS:
                self.state = 2118
                self.match(Cobol85Parser.CHARACTERS)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RecordContainsToContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.RecordContainsToContext, self).__init__(parent, invokingState)
            self.parser = parser

        def TO(self):
            return self.getToken(Cobol85Parser.TO, 0)

        def integerLiteral(self):
            return self.getTypedRuleContext(Cobol85Parser.IntegerLiteralContext,0)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_recordContainsTo

        def enterRule(self, listener):
            if hasattr(listener, "enterRecordContainsTo"):
                listener.enterRecordContainsTo(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitRecordContainsTo"):
                listener.exitRecordContainsTo(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitRecordContainsTo"):
                return visitor.visitRecordContainsTo(self)
            else:
                return visitor.visitChildren(self)




    def recordContainsTo(self):

        localctx = Cobol85Parser.RecordContainsToContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_recordContainsTo)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2121
            self.match(Cobol85Parser.TO)
            self.state = 2122
            self.integerLiteral()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LabelRecordsClauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.LabelRecordsClauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def LABEL(self):
            return self.getToken(Cobol85Parser.LABEL, 0)

        def RECORD(self):
            return self.getToken(Cobol85Parser.RECORD, 0)

        def RECORDS(self):
            return self.getToken(Cobol85Parser.RECORDS, 0)

        def OMITTED(self):
            return self.getToken(Cobol85Parser.OMITTED, 0)

        def STANDARD(self):
            return self.getToken(Cobol85Parser.STANDARD, 0)

        def IS(self):
            return self.getToken(Cobol85Parser.IS, 0)

        def ARE(self):
            return self.getToken(Cobol85Parser.ARE, 0)

        def dataName(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.DataNameContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.DataNameContext,i)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_labelRecordsClause

        def enterRule(self, listener):
            if hasattr(listener, "enterLabelRecordsClause"):
                listener.enterLabelRecordsClause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitLabelRecordsClause"):
                listener.exitLabelRecordsClause(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitLabelRecordsClause"):
                return visitor.visitLabelRecordsClause(self)
            else:
                return visitor.visitChildren(self)




    def labelRecordsClause(self):

        localctx = Cobol85Parser.LabelRecordsClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_labelRecordsClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2124
            self.match(Cobol85Parser.LABEL)
            self.state = 2133
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Cobol85Parser.RECORD]:
                self.state = 2125
                self.match(Cobol85Parser.RECORD)
                self.state = 2127
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Cobol85Parser.IS:
                    self.state = 2126
                    self.match(Cobol85Parser.IS)


                pass
            elif token in [Cobol85Parser.RECORDS]:
                self.state = 2129
                self.match(Cobol85Parser.RECORDS)
                self.state = 2131
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Cobol85Parser.ARE:
                    self.state = 2130
                    self.match(Cobol85Parser.ARE)


                pass
            else:
                raise NoViableAltException(self)

            self.state = 2142
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Cobol85Parser.OMITTED]:
                self.state = 2135
                self.match(Cobol85Parser.OMITTED)
                pass
            elif token in [Cobol85Parser.STANDARD]:
                self.state = 2136
                self.match(Cobol85Parser.STANDARD)
                pass
            elif token in [Cobol85Parser.ABORT, Cobol85Parser.AS, Cobol85Parser.ASCII, Cobol85Parser.ASSOCIATED_DATA, Cobol85Parser.ASSOCIATED_DATA_LENGTH, Cobol85Parser.ATTRIBUTE, Cobol85Parser.AUTO, Cobol85Parser.AUTO_SKIP, Cobol85Parser.BACKGROUND_COLOR, Cobol85Parser.BACKGROUND_COLOUR, Cobol85Parser.BEEP, Cobol85Parser.BELL, Cobol85Parser.BINARY, Cobol85Parser.BIT, Cobol85Parser.BLINK, Cobol85Parser.BLOB, Cobol85Parser.BOUNDS, Cobol85Parser.CAPABLE, Cobol85Parser.CCSVERSION, Cobol85Parser.CHANGED, Cobol85Parser.CHANNEL, Cobol85Parser.CLOB, Cobol85Parser.CLOSE_DISPOSITION, Cobol85Parser.COBOL, Cobol85Parser.COMMITMENT, Cobol85Parser.CONTROL_POINT, Cobol85Parser.CONVENTION, Cobol85Parser.CRUNCH, Cobol85Parser.CURSOR, Cobol85Parser.DBCLOB, Cobol85Parser.DEFAULT, Cobol85Parser.DEFAULT_DISPLAY, Cobol85Parser.DEFINITION, Cobol85Parser.DFHRESP, Cobol85Parser.DFHVALUE, Cobol85Parser.DISK, Cobol85Parser.DONTCARE, Cobol85Parser.DOUBLE, Cobol85Parser.EBCDIC, Cobol85Parser.EMPTY_CHECK, Cobol85Parser.ENTER, Cobol85Parser.ENTRY_PROCEDURE, Cobol85Parser.ERASE, Cobol85Parser.EOL, Cobol85Parser.EOS, Cobol85Parser.ESCAPE, Cobol85Parser.EVENT, Cobol85Parser.EXCLUSIVE, Cobol85Parser.EXPORT, Cobol85Parser.EXTENDED, Cobol85Parser.FOREGROUND_COLOR, Cobol85Parser.FOREGROUND_COLOUR, Cobol85Parser.FULL, Cobol85Parser.FUNCTIONNAME, Cobol85Parser.FUNCTION_POINTER, Cobol85Parser.GRID, Cobol85Parser.HIGHLIGHT, Cobol85Parser.IMPLICIT, Cobol85Parser.IMPORT, Cobol85Parser.INTEGER, Cobol85Parser.KEPT, Cobol85Parser.KEYBOARD, Cobol85Parser.LANGUAGE, Cobol85Parser.LB, Cobol85Parser.LD, Cobol85Parser.LEFTLINE, Cobol85Parser.LENGTH_CHECK, Cobol85Parser.LIBACCESS, Cobol85Parser.LIBPARAMETER, Cobol85Parser.LIBRARY, Cobol85Parser.LIST, Cobol85Parser.LOCAL, Cobol85Parser.LONG_DATE, Cobol85Parser.LONG_TIME, Cobol85Parser.LOWER, Cobol85Parser.LOWLIGHT, Cobol85Parser.MMDDYYYY, Cobol85Parser.NAMED, Cobol85Parser.NATIONAL, Cobol85Parser.NATIONAL_EDITED, Cobol85Parser.NETWORK, Cobol85Parser.NO_ECHO, Cobol85Parser.NUMERIC_DATE, Cobol85Parser.NUMERIC_TIME, Cobol85Parser.ODT, Cobol85Parser.ORDERLY, Cobol85Parser.OVERLINE, Cobol85Parser.OWN, Cobol85Parser.PASSWORD, Cobol85Parser.PORT, Cobol85Parser.PRINTER, Cobol85Parser.PRIVATE, Cobol85Parser.PROCESS, Cobol85Parser.PROGRAM, Cobol85Parser.PROMPT, Cobol85Parser.READER, Cobol85Parser.REMOTE, Cobol85Parser.REAL, Cobol85Parser.RECEIVED, Cobol85Parser.RECURSIVE, Cobol85Parser.REF, Cobol85Parser.REMOVE, Cobol85Parser.REQUIRED, Cobol85Parser.REVERSE_VIDEO, Cobol85Parser.SAVE, Cobol85Parser.SECURE, Cobol85Parser.SHARED, Cobol85Parser.SHAREDBYALL, Cobol85Parser.SHAREDBYRUNUNIT, Cobol85Parser.SHARING, Cobol85Parser.SHORT_DATE, Cobol85Parser.SQL, Cobol85Parser.SYMBOL, Cobol85Parser.TASK, Cobol85Parser.THREAD, Cobol85Parser.THREAD_LOCAL, Cobol85Parser.TIMER, Cobol85Parser.TODAYS_DATE, Cobol85Parser.TODAYS_NAME, Cobol85Parser.TRUNCATED, Cobol85Parser.TYPEDEF, Cobol85Parser.UNDERLINE, Cobol85Parser.VIRTUAL, Cobol85Parser.WAIT, Cobol85Parser.YEAR, Cobol85Parser.YYYYMMDD, Cobol85Parser.YYYYDDD, Cobol85Parser.ZERO_FILL, Cobol85Parser.IDENTIFIER]:
                self.state = 2138 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 2137
                    self.dataName()
                    self.state = 2140 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE) | (1 << Cobol85Parser.AUTO) | (1 << Cobol85Parser.AUTO_SKIP) | (1 << Cobol85Parser.BACKGROUND_COLOR) | (1 << Cobol85Parser.BACKGROUND_COLOUR) | (1 << Cobol85Parser.BEEP) | (1 << Cobol85Parser.BELL) | (1 << Cobol85Parser.BINARY) | (1 << Cobol85Parser.BIT) | (1 << Cobol85Parser.BLINK) | (1 << Cobol85Parser.BLOB) | (1 << Cobol85Parser.BOUNDS) | (1 << Cobol85Parser.CAPABLE) | (1 << Cobol85Parser.CCSVERSION) | (1 << Cobol85Parser.CHANGED) | (1 << Cobol85Parser.CHANNEL))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (Cobol85Parser.CLOB - 67)) | (1 << (Cobol85Parser.CLOSE_DISPOSITION - 67)) | (1 << (Cobol85Parser.COBOL - 67)) | (1 << (Cobol85Parser.COMMITMENT - 67)) | (1 << (Cobol85Parser.CONTROL_POINT - 67)) | (1 << (Cobol85Parser.CONVENTION - 67)) | (1 << (Cobol85Parser.CRUNCH - 67)) | (1 << (Cobol85Parser.CURSOR - 67)) | (1 << (Cobol85Parser.DBCLOB - 67)))) != 0) or ((((_la - 131)) & ~0x3f) == 0 and ((1 << (_la - 131)) & ((1 << (Cobol85Parser.DEFAULT - 131)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 131)) | (1 << (Cobol85Parser.DEFINITION - 131)) | (1 << (Cobol85Parser.DFHRESP - 131)) | (1 << (Cobol85Parser.DFHVALUE - 131)) | (1 << (Cobol85Parser.DISK - 131)) | (1 << (Cobol85Parser.DONTCARE - 131)) | (1 << (Cobol85Parser.DOUBLE - 131)) | (1 << (Cobol85Parser.EBCDIC - 131)) | (1 << (Cobol85Parser.EMPTY_CHECK - 131)) | (1 << (Cobol85Parser.ENTER - 131)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 131)) | (1 << (Cobol85Parser.ERASE - 131)) | (1 << (Cobol85Parser.EOL - 131)) | (1 << (Cobol85Parser.EOS - 131)))) != 0) or ((((_la - 195)) & ~0x3f) == 0 and ((1 << (_la - 195)) & ((1 << (Cobol85Parser.ESCAPE - 195)) | (1 << (Cobol85Parser.EVENT - 195)) | (1 << (Cobol85Parser.EXCLUSIVE - 195)) | (1 << (Cobol85Parser.EXPORT - 195)) | (1 << (Cobol85Parser.EXTENDED - 195)) | (1 << (Cobol85Parser.FOREGROUND_COLOR - 195)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 195)) | (1 << (Cobol85Parser.FULL - 195)) | (1 << (Cobol85Parser.FUNCTIONNAME - 195)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 195)) | (1 << (Cobol85Parser.GRID - 195)) | (1 << (Cobol85Parser.HIGHLIGHT - 195)) | (1 << (Cobol85Parser.IMPLICIT - 195)) | (1 << (Cobol85Parser.IMPORT - 195)) | (1 << (Cobol85Parser.INTEGER - 195)))) != 0) or ((((_la - 262)) & ~0x3f) == 0 and ((1 << (_la - 262)) & ((1 << (Cobol85Parser.KEPT - 262)) | (1 << (Cobol85Parser.KEYBOARD - 262)) | (1 << (Cobol85Parser.LANGUAGE - 262)) | (1 << (Cobol85Parser.LB - 262)) | (1 << (Cobol85Parser.LD - 262)) | (1 << (Cobol85Parser.LEFTLINE - 262)) | (1 << (Cobol85Parser.LENGTH_CHECK - 262)) | (1 << (Cobol85Parser.LIBACCESS - 262)) | (1 << (Cobol85Parser.LIBPARAMETER - 262)) | (1 << (Cobol85Parser.LIBRARY - 262)) | (1 << (Cobol85Parser.LIST - 262)) | (1 << (Cobol85Parser.LOCAL - 262)) | (1 << (Cobol85Parser.LONG_DATE - 262)) | (1 << (Cobol85Parser.LONG_TIME - 262)) | (1 << (Cobol85Parser.LOWER - 262)) | (1 << (Cobol85Parser.LOWLIGHT - 262)) | (1 << (Cobol85Parser.MMDDYYYY - 262)) | (1 << (Cobol85Parser.NAMED - 262)) | (1 << (Cobol85Parser.NATIONAL - 262)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 262)) | (1 << (Cobol85Parser.NETWORK - 262)) | (1 << (Cobol85Parser.NO_ECHO - 262)) | (1 << (Cobol85Parser.NUMERIC_DATE - 262)) | (1 << (Cobol85Parser.NUMERIC_TIME - 262)))) != 0) or ((((_la - 326)) & ~0x3f) == 0 and ((1 << (_la - 326)) & ((1 << (Cobol85Parser.ODT - 326)) | (1 << (Cobol85Parser.ORDERLY - 326)) | (1 << (Cobol85Parser.OVERLINE - 326)) | (1 << (Cobol85Parser.OWN - 326)) | (1 << (Cobol85Parser.PASSWORD - 326)) | (1 << (Cobol85Parser.PORT - 326)) | (1 << (Cobol85Parser.PRINTER - 326)) | (1 << (Cobol85Parser.PRIVATE - 326)) | (1 << (Cobol85Parser.PROCESS - 326)) | (1 << (Cobol85Parser.PROGRAM - 326)) | (1 << (Cobol85Parser.PROMPT - 326)) | (1 << (Cobol85Parser.READER - 326)) | (1 << (Cobol85Parser.REMOTE - 326)) | (1 << (Cobol85Parser.REAL - 326)) | (1 << (Cobol85Parser.RECEIVED - 326)) | (1 << (Cobol85Parser.RECURSIVE - 326)) | (1 << (Cobol85Parser.REF - 326)))) != 0) or ((((_la - 395)) & ~0x3f) == 0 and ((1 << (_la - 395)) & ((1 << (Cobol85Parser.REMOVE - 395)) | (1 << (Cobol85Parser.REQUIRED - 395)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 395)) | (1 << (Cobol85Parser.SAVE - 395)) | (1 << (Cobol85Parser.SECURE - 395)) | (1 << (Cobol85Parser.SHARED - 395)) | (1 << (Cobol85Parser.SHAREDBYALL - 395)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 395)) | (1 << (Cobol85Parser.SHARING - 395)) | (1 << (Cobol85Parser.SHORT_DATE - 395)) | (1 << (Cobol85Parser.SQL - 395)))) != 0) or ((((_la - 471)) & ~0x3f) == 0 and ((1 << (_la - 471)) & ((1 << (Cobol85Parser.SYMBOL - 471)) | (1 << (Cobol85Parser.TASK - 471)) | (1 << (Cobol85Parser.THREAD - 471)) | (1 << (Cobol85Parser.THREAD_LOCAL - 471)) | (1 << (Cobol85Parser.TIMER - 471)) | (1 << (Cobol85Parser.TODAYS_DATE - 471)) | (1 << (Cobol85Parser.TODAYS_NAME - 471)) | (1 << (Cobol85Parser.TRUNCATED - 471)) | (1 << (Cobol85Parser.TYPEDEF - 471)) | (1 << (Cobol85Parser.UNDERLINE - 471)) | (1 << (Cobol85Parser.VIRTUAL - 471)) | (1 << (Cobol85Parser.WAIT - 471)) | (1 << (Cobol85Parser.YEAR - 471)) | (1 << (Cobol85Parser.YYYYMMDD - 471)) | (1 << (Cobol85Parser.YYYYDDD - 471)) | (1 << (Cobol85Parser.ZERO_FILL - 471)))) != 0) or _la==Cobol85Parser.IDENTIFIER):
                        break

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ValueOfClauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.ValueOfClauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def VALUE(self):
            return self.getToken(Cobol85Parser.VALUE, 0)

        def OF(self):
            return self.getToken(Cobol85Parser.OF, 0)

        def valuePair(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.ValuePairContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.ValuePairContext,i)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_valueOfClause

        def enterRule(self, listener):
            if hasattr(listener, "enterValueOfClause"):
                listener.enterValueOfClause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitValueOfClause"):
                listener.exitValueOfClause(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitValueOfClause"):
                return visitor.visitValueOfClause(self)
            else:
                return visitor.visitChildren(self)




    def valueOfClause(self):

        localctx = Cobol85Parser.ValueOfClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_valueOfClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2144
            self.match(Cobol85Parser.VALUE)
            self.state = 2145
            self.match(Cobol85Parser.OF)
            self.state = 2147 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 2146
                self.valuePair()
                self.state = 2149 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE) | (1 << Cobol85Parser.AUTO) | (1 << Cobol85Parser.AUTO_SKIP) | (1 << Cobol85Parser.BACKGROUND_COLOR) | (1 << Cobol85Parser.BACKGROUND_COLOUR) | (1 << Cobol85Parser.BEEP) | (1 << Cobol85Parser.BELL) | (1 << Cobol85Parser.BINARY) | (1 << Cobol85Parser.BIT) | (1 << Cobol85Parser.BLINK) | (1 << Cobol85Parser.BLOB) | (1 << Cobol85Parser.BOUNDS) | (1 << Cobol85Parser.CAPABLE) | (1 << Cobol85Parser.CCSVERSION) | (1 << Cobol85Parser.CHANGED) | (1 << Cobol85Parser.CHANNEL))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (Cobol85Parser.CLOB - 67)) | (1 << (Cobol85Parser.CLOSE_DISPOSITION - 67)) | (1 << (Cobol85Parser.COBOL - 67)) | (1 << (Cobol85Parser.COMMITMENT - 67)) | (1 << (Cobol85Parser.CONTROL_POINT - 67)) | (1 << (Cobol85Parser.CONVENTION - 67)) | (1 << (Cobol85Parser.CRUNCH - 67)) | (1 << (Cobol85Parser.CURSOR - 67)) | (1 << (Cobol85Parser.DBCLOB - 67)))) != 0) or ((((_la - 131)) & ~0x3f) == 0 and ((1 << (_la - 131)) & ((1 << (Cobol85Parser.DEFAULT - 131)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 131)) | (1 << (Cobol85Parser.DEFINITION - 131)) | (1 << (Cobol85Parser.DFHRESP - 131)) | (1 << (Cobol85Parser.DFHVALUE - 131)) | (1 << (Cobol85Parser.DISK - 131)) | (1 << (Cobol85Parser.DONTCARE - 131)) | (1 << (Cobol85Parser.DOUBLE - 131)) | (1 << (Cobol85Parser.EBCDIC - 131)) | (1 << (Cobol85Parser.EMPTY_CHECK - 131)) | (1 << (Cobol85Parser.ENTER - 131)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 131)) | (1 << (Cobol85Parser.ERASE - 131)) | (1 << (Cobol85Parser.EOL - 131)) | (1 << (Cobol85Parser.EOS - 131)))) != 0) or ((((_la - 195)) & ~0x3f) == 0 and ((1 << (_la - 195)) & ((1 << (Cobol85Parser.ESCAPE - 195)) | (1 << (Cobol85Parser.EVENT - 195)) | (1 << (Cobol85Parser.EXCLUSIVE - 195)) | (1 << (Cobol85Parser.EXPORT - 195)) | (1 << (Cobol85Parser.EXTENDED - 195)) | (1 << (Cobol85Parser.FOREGROUND_COLOR - 195)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 195)) | (1 << (Cobol85Parser.FULL - 195)) | (1 << (Cobol85Parser.FUNCTIONNAME - 195)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 195)) | (1 << (Cobol85Parser.GRID - 195)) | (1 << (Cobol85Parser.HIGHLIGHT - 195)) | (1 << (Cobol85Parser.IMPLICIT - 195)) | (1 << (Cobol85Parser.IMPORT - 195)) | (1 << (Cobol85Parser.INTEGER - 195)))) != 0) or ((((_la - 262)) & ~0x3f) == 0 and ((1 << (_la - 262)) & ((1 << (Cobol85Parser.KEPT - 262)) | (1 << (Cobol85Parser.KEYBOARD - 262)) | (1 << (Cobol85Parser.LANGUAGE - 262)) | (1 << (Cobol85Parser.LB - 262)) | (1 << (Cobol85Parser.LD - 262)) | (1 << (Cobol85Parser.LEFTLINE - 262)) | (1 << (Cobol85Parser.LENGTH_CHECK - 262)) | (1 << (Cobol85Parser.LIBACCESS - 262)) | (1 << (Cobol85Parser.LIBPARAMETER - 262)) | (1 << (Cobol85Parser.LIBRARY - 262)) | (1 << (Cobol85Parser.LIST - 262)) | (1 << (Cobol85Parser.LOCAL - 262)) | (1 << (Cobol85Parser.LONG_DATE - 262)) | (1 << (Cobol85Parser.LONG_TIME - 262)) | (1 << (Cobol85Parser.LOWER - 262)) | (1 << (Cobol85Parser.LOWLIGHT - 262)) | (1 << (Cobol85Parser.MMDDYYYY - 262)) | (1 << (Cobol85Parser.NAMED - 262)) | (1 << (Cobol85Parser.NATIONAL - 262)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 262)) | (1 << (Cobol85Parser.NETWORK - 262)) | (1 << (Cobol85Parser.NO_ECHO - 262)) | (1 << (Cobol85Parser.NUMERIC_DATE - 262)) | (1 << (Cobol85Parser.NUMERIC_TIME - 262)))) != 0) or ((((_la - 326)) & ~0x3f) == 0 and ((1 << (_la - 326)) & ((1 << (Cobol85Parser.ODT - 326)) | (1 << (Cobol85Parser.ORDERLY - 326)) | (1 << (Cobol85Parser.OVERLINE - 326)) | (1 << (Cobol85Parser.OWN - 326)) | (1 << (Cobol85Parser.PASSWORD - 326)) | (1 << (Cobol85Parser.PORT - 326)) | (1 << (Cobol85Parser.PRINTER - 326)) | (1 << (Cobol85Parser.PRIVATE - 326)) | (1 << (Cobol85Parser.PROCESS - 326)) | (1 << (Cobol85Parser.PROGRAM - 326)) | (1 << (Cobol85Parser.PROMPT - 326)) | (1 << (Cobol85Parser.READER - 326)) | (1 << (Cobol85Parser.REMOTE - 326)) | (1 << (Cobol85Parser.REAL - 326)) | (1 << (Cobol85Parser.RECEIVED - 326)) | (1 << (Cobol85Parser.RECURSIVE - 326)) | (1 << (Cobol85Parser.REF - 326)))) != 0) or ((((_la - 395)) & ~0x3f) == 0 and ((1 << (_la - 395)) & ((1 << (Cobol85Parser.REMOVE - 395)) | (1 << (Cobol85Parser.REQUIRED - 395)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 395)) | (1 << (Cobol85Parser.SAVE - 395)) | (1 << (Cobol85Parser.SECURE - 395)) | (1 << (Cobol85Parser.SHARED - 395)) | (1 << (Cobol85Parser.SHAREDBYALL - 395)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 395)) | (1 << (Cobol85Parser.SHARING - 395)) | (1 << (Cobol85Parser.SHORT_DATE - 395)) | (1 << (Cobol85Parser.SQL - 395)))) != 0) or ((((_la - 471)) & ~0x3f) == 0 and ((1 << (_la - 471)) & ((1 << (Cobol85Parser.SYMBOL - 471)) | (1 << (Cobol85Parser.TASK - 471)) | (1 << (Cobol85Parser.THREAD - 471)) | (1 << (Cobol85Parser.THREAD_LOCAL - 471)) | (1 << (Cobol85Parser.TIMER - 471)) | (1 << (Cobol85Parser.TODAYS_DATE - 471)) | (1 << (Cobol85Parser.TODAYS_NAME - 471)) | (1 << (Cobol85Parser.TRUNCATED - 471)) | (1 << (Cobol85Parser.TYPEDEF - 471)) | (1 << (Cobol85Parser.UNDERLINE - 471)) | (1 << (Cobol85Parser.VIRTUAL - 471)) | (1 << (Cobol85Parser.WAIT - 471)) | (1 << (Cobol85Parser.YEAR - 471)) | (1 << (Cobol85Parser.YYYYMMDD - 471)) | (1 << (Cobol85Parser.YYYYDDD - 471)) | (1 << (Cobol85Parser.ZERO_FILL - 471)))) != 0) or _la==Cobol85Parser.IDENTIFIER):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ValuePairContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.ValuePairContext, self).__init__(parent, invokingState)
            self.parser = parser

        def systemName(self):
            return self.getTypedRuleContext(Cobol85Parser.SystemNameContext,0)


        def qualifiedDataName(self):
            return self.getTypedRuleContext(Cobol85Parser.QualifiedDataNameContext,0)


        def literal(self):
            return self.getTypedRuleContext(Cobol85Parser.LiteralContext,0)


        def IS(self):
            return self.getToken(Cobol85Parser.IS, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_valuePair

        def enterRule(self, listener):
            if hasattr(listener, "enterValuePair"):
                listener.enterValuePair(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitValuePair"):
                listener.exitValuePair(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitValuePair"):
                return visitor.visitValuePair(self)
            else:
                return visitor.visitChildren(self)




    def valuePair(self):

        localctx = Cobol85Parser.ValuePairContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_valuePair)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2151
            self.systemName()
            self.state = 2153
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.IS:
                self.state = 2152
                self.match(Cobol85Parser.IS)


            self.state = 2157
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,204,self._ctx)
            if la_ == 1:
                self.state = 2155
                self.qualifiedDataName()
                pass

            elif la_ == 2:
                self.state = 2156
                self.literal()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DataRecordsClauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.DataRecordsClauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def DATA(self):
            return self.getToken(Cobol85Parser.DATA, 0)

        def RECORD(self):
            return self.getToken(Cobol85Parser.RECORD, 0)

        def RECORDS(self):
            return self.getToken(Cobol85Parser.RECORDS, 0)

        def dataName(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.DataNameContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.DataNameContext,i)


        def IS(self):
            return self.getToken(Cobol85Parser.IS, 0)

        def ARE(self):
            return self.getToken(Cobol85Parser.ARE, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_dataRecordsClause

        def enterRule(self, listener):
            if hasattr(listener, "enterDataRecordsClause"):
                listener.enterDataRecordsClause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitDataRecordsClause"):
                listener.exitDataRecordsClause(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitDataRecordsClause"):
                return visitor.visitDataRecordsClause(self)
            else:
                return visitor.visitChildren(self)




    def dataRecordsClause(self):

        localctx = Cobol85Parser.DataRecordsClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_dataRecordsClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2159
            self.match(Cobol85Parser.DATA)
            self.state = 2168
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Cobol85Parser.RECORD]:
                self.state = 2160
                self.match(Cobol85Parser.RECORD)
                self.state = 2162
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Cobol85Parser.IS:
                    self.state = 2161
                    self.match(Cobol85Parser.IS)


                pass
            elif token in [Cobol85Parser.RECORDS]:
                self.state = 2164
                self.match(Cobol85Parser.RECORDS)
                self.state = 2166
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Cobol85Parser.ARE:
                    self.state = 2165
                    self.match(Cobol85Parser.ARE)


                pass
            else:
                raise NoViableAltException(self)

            self.state = 2171 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 2170
                self.dataName()
                self.state = 2173 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE) | (1 << Cobol85Parser.AUTO) | (1 << Cobol85Parser.AUTO_SKIP) | (1 << Cobol85Parser.BACKGROUND_COLOR) | (1 << Cobol85Parser.BACKGROUND_COLOUR) | (1 << Cobol85Parser.BEEP) | (1 << Cobol85Parser.BELL) | (1 << Cobol85Parser.BINARY) | (1 << Cobol85Parser.BIT) | (1 << Cobol85Parser.BLINK) | (1 << Cobol85Parser.BLOB) | (1 << Cobol85Parser.BOUNDS) | (1 << Cobol85Parser.CAPABLE) | (1 << Cobol85Parser.CCSVERSION) | (1 << Cobol85Parser.CHANGED) | (1 << Cobol85Parser.CHANNEL))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (Cobol85Parser.CLOB - 67)) | (1 << (Cobol85Parser.CLOSE_DISPOSITION - 67)) | (1 << (Cobol85Parser.COBOL - 67)) | (1 << (Cobol85Parser.COMMITMENT - 67)) | (1 << (Cobol85Parser.CONTROL_POINT - 67)) | (1 << (Cobol85Parser.CONVENTION - 67)) | (1 << (Cobol85Parser.CRUNCH - 67)) | (1 << (Cobol85Parser.CURSOR - 67)) | (1 << (Cobol85Parser.DBCLOB - 67)))) != 0) or ((((_la - 131)) & ~0x3f) == 0 and ((1 << (_la - 131)) & ((1 << (Cobol85Parser.DEFAULT - 131)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 131)) | (1 << (Cobol85Parser.DEFINITION - 131)) | (1 << (Cobol85Parser.DFHRESP - 131)) | (1 << (Cobol85Parser.DFHVALUE - 131)) | (1 << (Cobol85Parser.DISK - 131)) | (1 << (Cobol85Parser.DONTCARE - 131)) | (1 << (Cobol85Parser.DOUBLE - 131)) | (1 << (Cobol85Parser.EBCDIC - 131)) | (1 << (Cobol85Parser.EMPTY_CHECK - 131)) | (1 << (Cobol85Parser.ENTER - 131)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 131)) | (1 << (Cobol85Parser.ERASE - 131)) | (1 << (Cobol85Parser.EOL - 131)) | (1 << (Cobol85Parser.EOS - 131)))) != 0) or ((((_la - 195)) & ~0x3f) == 0 and ((1 << (_la - 195)) & ((1 << (Cobol85Parser.ESCAPE - 195)) | (1 << (Cobol85Parser.EVENT - 195)) | (1 << (Cobol85Parser.EXCLUSIVE - 195)) | (1 << (Cobol85Parser.EXPORT - 195)) | (1 << (Cobol85Parser.EXTENDED - 195)) | (1 << (Cobol85Parser.FOREGROUND_COLOR - 195)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 195)) | (1 << (Cobol85Parser.FULL - 195)) | (1 << (Cobol85Parser.FUNCTIONNAME - 195)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 195)) | (1 << (Cobol85Parser.GRID - 195)) | (1 << (Cobol85Parser.HIGHLIGHT - 195)) | (1 << (Cobol85Parser.IMPLICIT - 195)) | (1 << (Cobol85Parser.IMPORT - 195)) | (1 << (Cobol85Parser.INTEGER - 195)))) != 0) or ((((_la - 262)) & ~0x3f) == 0 and ((1 << (_la - 262)) & ((1 << (Cobol85Parser.KEPT - 262)) | (1 << (Cobol85Parser.KEYBOARD - 262)) | (1 << (Cobol85Parser.LANGUAGE - 262)) | (1 << (Cobol85Parser.LB - 262)) | (1 << (Cobol85Parser.LD - 262)) | (1 << (Cobol85Parser.LEFTLINE - 262)) | (1 << (Cobol85Parser.LENGTH_CHECK - 262)) | (1 << (Cobol85Parser.LIBACCESS - 262)) | (1 << (Cobol85Parser.LIBPARAMETER - 262)) | (1 << (Cobol85Parser.LIBRARY - 262)) | (1 << (Cobol85Parser.LIST - 262)) | (1 << (Cobol85Parser.LOCAL - 262)) | (1 << (Cobol85Parser.LONG_DATE - 262)) | (1 << (Cobol85Parser.LONG_TIME - 262)) | (1 << (Cobol85Parser.LOWER - 262)) | (1 << (Cobol85Parser.LOWLIGHT - 262)) | (1 << (Cobol85Parser.MMDDYYYY - 262)) | (1 << (Cobol85Parser.NAMED - 262)) | (1 << (Cobol85Parser.NATIONAL - 262)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 262)) | (1 << (Cobol85Parser.NETWORK - 262)) | (1 << (Cobol85Parser.NO_ECHO - 262)) | (1 << (Cobol85Parser.NUMERIC_DATE - 262)) | (1 << (Cobol85Parser.NUMERIC_TIME - 262)))) != 0) or ((((_la - 326)) & ~0x3f) == 0 and ((1 << (_la - 326)) & ((1 << (Cobol85Parser.ODT - 326)) | (1 << (Cobol85Parser.ORDERLY - 326)) | (1 << (Cobol85Parser.OVERLINE - 326)) | (1 << (Cobol85Parser.OWN - 326)) | (1 << (Cobol85Parser.PASSWORD - 326)) | (1 << (Cobol85Parser.PORT - 326)) | (1 << (Cobol85Parser.PRINTER - 326)) | (1 << (Cobol85Parser.PRIVATE - 326)) | (1 << (Cobol85Parser.PROCESS - 326)) | (1 << (Cobol85Parser.PROGRAM - 326)) | (1 << (Cobol85Parser.PROMPT - 326)) | (1 << (Cobol85Parser.READER - 326)) | (1 << (Cobol85Parser.REMOTE - 326)) | (1 << (Cobol85Parser.REAL - 326)) | (1 << (Cobol85Parser.RECEIVED - 326)) | (1 << (Cobol85Parser.RECURSIVE - 326)) | (1 << (Cobol85Parser.REF - 326)))) != 0) or ((((_la - 395)) & ~0x3f) == 0 and ((1 << (_la - 395)) & ((1 << (Cobol85Parser.REMOVE - 395)) | (1 << (Cobol85Parser.REQUIRED - 395)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 395)) | (1 << (Cobol85Parser.SAVE - 395)) | (1 << (Cobol85Parser.SECURE - 395)) | (1 << (Cobol85Parser.SHARED - 395)) | (1 << (Cobol85Parser.SHAREDBYALL - 395)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 395)) | (1 << (Cobol85Parser.SHARING - 395)) | (1 << (Cobol85Parser.SHORT_DATE - 395)) | (1 << (Cobol85Parser.SQL - 395)))) != 0) or ((((_la - 471)) & ~0x3f) == 0 and ((1 << (_la - 471)) & ((1 << (Cobol85Parser.SYMBOL - 471)) | (1 << (Cobol85Parser.TASK - 471)) | (1 << (Cobol85Parser.THREAD - 471)) | (1 << (Cobol85Parser.THREAD_LOCAL - 471)) | (1 << (Cobol85Parser.TIMER - 471)) | (1 << (Cobol85Parser.TODAYS_DATE - 471)) | (1 << (Cobol85Parser.TODAYS_NAME - 471)) | (1 << (Cobol85Parser.TRUNCATED - 471)) | (1 << (Cobol85Parser.TYPEDEF - 471)) | (1 << (Cobol85Parser.UNDERLINE - 471)) | (1 << (Cobol85Parser.VIRTUAL - 471)) | (1 << (Cobol85Parser.WAIT - 471)) | (1 << (Cobol85Parser.YEAR - 471)) | (1 << (Cobol85Parser.YYYYMMDD - 471)) | (1 << (Cobol85Parser.YYYYDDD - 471)) | (1 << (Cobol85Parser.ZERO_FILL - 471)))) != 0) or _la==Cobol85Parser.IDENTIFIER):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LinageClauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.LinageClauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def LINAGE(self):
            return self.getToken(Cobol85Parser.LINAGE, 0)

        def dataName(self):
            return self.getTypedRuleContext(Cobol85Parser.DataNameContext,0)


        def integerLiteral(self):
            return self.getTypedRuleContext(Cobol85Parser.IntegerLiteralContext,0)


        def IS(self):
            return self.getToken(Cobol85Parser.IS, 0)

        def LINES(self):
            return self.getToken(Cobol85Parser.LINES, 0)

        def linageAt(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.LinageAtContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.LinageAtContext,i)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_linageClause

        def enterRule(self, listener):
            if hasattr(listener, "enterLinageClause"):
                listener.enterLinageClause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitLinageClause"):
                listener.exitLinageClause(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitLinageClause"):
                return visitor.visitLinageClause(self)
            else:
                return visitor.visitChildren(self)




    def linageClause(self):

        localctx = Cobol85Parser.LinageClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_linageClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2175
            self.match(Cobol85Parser.LINAGE)
            self.state = 2177
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.IS:
                self.state = 2176
                self.match(Cobol85Parser.IS)


            self.state = 2181
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Cobol85Parser.ABORT, Cobol85Parser.AS, Cobol85Parser.ASCII, Cobol85Parser.ASSOCIATED_DATA, Cobol85Parser.ASSOCIATED_DATA_LENGTH, Cobol85Parser.ATTRIBUTE, Cobol85Parser.AUTO, Cobol85Parser.AUTO_SKIP, Cobol85Parser.BACKGROUND_COLOR, Cobol85Parser.BACKGROUND_COLOUR, Cobol85Parser.BEEP, Cobol85Parser.BELL, Cobol85Parser.BINARY, Cobol85Parser.BIT, Cobol85Parser.BLINK, Cobol85Parser.BLOB, Cobol85Parser.BOUNDS, Cobol85Parser.CAPABLE, Cobol85Parser.CCSVERSION, Cobol85Parser.CHANGED, Cobol85Parser.CHANNEL, Cobol85Parser.CLOB, Cobol85Parser.CLOSE_DISPOSITION, Cobol85Parser.COBOL, Cobol85Parser.COMMITMENT, Cobol85Parser.CONTROL_POINT, Cobol85Parser.CONVENTION, Cobol85Parser.CRUNCH, Cobol85Parser.CURSOR, Cobol85Parser.DBCLOB, Cobol85Parser.DEFAULT, Cobol85Parser.DEFAULT_DISPLAY, Cobol85Parser.DEFINITION, Cobol85Parser.DFHRESP, Cobol85Parser.DFHVALUE, Cobol85Parser.DISK, Cobol85Parser.DONTCARE, Cobol85Parser.DOUBLE, Cobol85Parser.EBCDIC, Cobol85Parser.EMPTY_CHECK, Cobol85Parser.ENTER, Cobol85Parser.ENTRY_PROCEDURE, Cobol85Parser.ERASE, Cobol85Parser.EOL, Cobol85Parser.EOS, Cobol85Parser.ESCAPE, Cobol85Parser.EVENT, Cobol85Parser.EXCLUSIVE, Cobol85Parser.EXPORT, Cobol85Parser.EXTENDED, Cobol85Parser.FOREGROUND_COLOR, Cobol85Parser.FOREGROUND_COLOUR, Cobol85Parser.FULL, Cobol85Parser.FUNCTIONNAME, Cobol85Parser.FUNCTION_POINTER, Cobol85Parser.GRID, Cobol85Parser.HIGHLIGHT, Cobol85Parser.IMPLICIT, Cobol85Parser.IMPORT, Cobol85Parser.INTEGER, Cobol85Parser.KEPT, Cobol85Parser.KEYBOARD, Cobol85Parser.LANGUAGE, Cobol85Parser.LB, Cobol85Parser.LD, Cobol85Parser.LEFTLINE, Cobol85Parser.LENGTH_CHECK, Cobol85Parser.LIBACCESS, Cobol85Parser.LIBPARAMETER, Cobol85Parser.LIBRARY, Cobol85Parser.LIST, Cobol85Parser.LOCAL, Cobol85Parser.LONG_DATE, Cobol85Parser.LONG_TIME, Cobol85Parser.LOWER, Cobol85Parser.LOWLIGHT, Cobol85Parser.MMDDYYYY, Cobol85Parser.NAMED, Cobol85Parser.NATIONAL, Cobol85Parser.NATIONAL_EDITED, Cobol85Parser.NETWORK, Cobol85Parser.NO_ECHO, Cobol85Parser.NUMERIC_DATE, Cobol85Parser.NUMERIC_TIME, Cobol85Parser.ODT, Cobol85Parser.ORDERLY, Cobol85Parser.OVERLINE, Cobol85Parser.OWN, Cobol85Parser.PASSWORD, Cobol85Parser.PORT, Cobol85Parser.PRINTER, Cobol85Parser.PRIVATE, Cobol85Parser.PROCESS, Cobol85Parser.PROGRAM, Cobol85Parser.PROMPT, Cobol85Parser.READER, Cobol85Parser.REMOTE, Cobol85Parser.REAL, Cobol85Parser.RECEIVED, Cobol85Parser.RECURSIVE, Cobol85Parser.REF, Cobol85Parser.REMOVE, Cobol85Parser.REQUIRED, Cobol85Parser.REVERSE_VIDEO, Cobol85Parser.SAVE, Cobol85Parser.SECURE, Cobol85Parser.SHARED, Cobol85Parser.SHAREDBYALL, Cobol85Parser.SHAREDBYRUNUNIT, Cobol85Parser.SHARING, Cobol85Parser.SHORT_DATE, Cobol85Parser.SQL, Cobol85Parser.SYMBOL, Cobol85Parser.TASK, Cobol85Parser.THREAD, Cobol85Parser.THREAD_LOCAL, Cobol85Parser.TIMER, Cobol85Parser.TODAYS_DATE, Cobol85Parser.TODAYS_NAME, Cobol85Parser.TRUNCATED, Cobol85Parser.TYPEDEF, Cobol85Parser.UNDERLINE, Cobol85Parser.VIRTUAL, Cobol85Parser.WAIT, Cobol85Parser.YEAR, Cobol85Parser.YYYYMMDD, Cobol85Parser.YYYYDDD, Cobol85Parser.ZERO_FILL, Cobol85Parser.IDENTIFIER]:
                self.state = 2179
                self.dataName()
                pass
            elif token in [Cobol85Parser.LEVEL_NUMBER_66, Cobol85Parser.LEVEL_NUMBER_77, Cobol85Parser.LEVEL_NUMBER_88, Cobol85Parser.INTEGERLITERAL]:
                self.state = 2180
                self.integerLiteral()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 2184
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,211,self._ctx)
            if la_ == 1:
                self.state = 2183
                self.match(Cobol85Parser.LINES)


            self.state = 2189
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==Cobol85Parser.AT or _la==Cobol85Parser.BOTTOM or _la==Cobol85Parser.FOOTING or _la==Cobol85Parser.LINES or _la==Cobol85Parser.TOP or _la==Cobol85Parser.WITH:
                self.state = 2186
                self.linageAt()
                self.state = 2191
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LinageAtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.LinageAtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def linageFootingAt(self):
            return self.getTypedRuleContext(Cobol85Parser.LinageFootingAtContext,0)


        def linageLinesAtTop(self):
            return self.getTypedRuleContext(Cobol85Parser.LinageLinesAtTopContext,0)


        def linageLinesAtBottom(self):
            return self.getTypedRuleContext(Cobol85Parser.LinageLinesAtBottomContext,0)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_linageAt

        def enterRule(self, listener):
            if hasattr(listener, "enterLinageAt"):
                listener.enterLinageAt(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitLinageAt"):
                listener.exitLinageAt(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitLinageAt"):
                return visitor.visitLinageAt(self)
            else:
                return visitor.visitChildren(self)




    def linageAt(self):

        localctx = Cobol85Parser.LinageAtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_linageAt)
        try:
            self.state = 2195
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,213,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2192
                self.linageFootingAt()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2193
                self.linageLinesAtTop()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2194
                self.linageLinesAtBottom()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LinageFootingAtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.LinageFootingAtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def FOOTING(self):
            return self.getToken(Cobol85Parser.FOOTING, 0)

        def dataName(self):
            return self.getTypedRuleContext(Cobol85Parser.DataNameContext,0)


        def integerLiteral(self):
            return self.getTypedRuleContext(Cobol85Parser.IntegerLiteralContext,0)


        def WITH(self):
            return self.getToken(Cobol85Parser.WITH, 0)

        def AT(self):
            return self.getToken(Cobol85Parser.AT, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_linageFootingAt

        def enterRule(self, listener):
            if hasattr(listener, "enterLinageFootingAt"):
                listener.enterLinageFootingAt(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitLinageFootingAt"):
                listener.exitLinageFootingAt(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitLinageFootingAt"):
                return visitor.visitLinageFootingAt(self)
            else:
                return visitor.visitChildren(self)




    def linageFootingAt(self):

        localctx = Cobol85Parser.LinageFootingAtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_linageFootingAt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2198
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.WITH:
                self.state = 2197
                self.match(Cobol85Parser.WITH)


            self.state = 2200
            self.match(Cobol85Parser.FOOTING)
            self.state = 2202
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.AT:
                self.state = 2201
                self.match(Cobol85Parser.AT)


            self.state = 2206
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Cobol85Parser.ABORT, Cobol85Parser.AS, Cobol85Parser.ASCII, Cobol85Parser.ASSOCIATED_DATA, Cobol85Parser.ASSOCIATED_DATA_LENGTH, Cobol85Parser.ATTRIBUTE, Cobol85Parser.AUTO, Cobol85Parser.AUTO_SKIP, Cobol85Parser.BACKGROUND_COLOR, Cobol85Parser.BACKGROUND_COLOUR, Cobol85Parser.BEEP, Cobol85Parser.BELL, Cobol85Parser.BINARY, Cobol85Parser.BIT, Cobol85Parser.BLINK, Cobol85Parser.BLOB, Cobol85Parser.BOUNDS, Cobol85Parser.CAPABLE, Cobol85Parser.CCSVERSION, Cobol85Parser.CHANGED, Cobol85Parser.CHANNEL, Cobol85Parser.CLOB, Cobol85Parser.CLOSE_DISPOSITION, Cobol85Parser.COBOL, Cobol85Parser.COMMITMENT, Cobol85Parser.CONTROL_POINT, Cobol85Parser.CONVENTION, Cobol85Parser.CRUNCH, Cobol85Parser.CURSOR, Cobol85Parser.DBCLOB, Cobol85Parser.DEFAULT, Cobol85Parser.DEFAULT_DISPLAY, Cobol85Parser.DEFINITION, Cobol85Parser.DFHRESP, Cobol85Parser.DFHVALUE, Cobol85Parser.DISK, Cobol85Parser.DONTCARE, Cobol85Parser.DOUBLE, Cobol85Parser.EBCDIC, Cobol85Parser.EMPTY_CHECK, Cobol85Parser.ENTER, Cobol85Parser.ENTRY_PROCEDURE, Cobol85Parser.ERASE, Cobol85Parser.EOL, Cobol85Parser.EOS, Cobol85Parser.ESCAPE, Cobol85Parser.EVENT, Cobol85Parser.EXCLUSIVE, Cobol85Parser.EXPORT, Cobol85Parser.EXTENDED, Cobol85Parser.FOREGROUND_COLOR, Cobol85Parser.FOREGROUND_COLOUR, Cobol85Parser.FULL, Cobol85Parser.FUNCTIONNAME, Cobol85Parser.FUNCTION_POINTER, Cobol85Parser.GRID, Cobol85Parser.HIGHLIGHT, Cobol85Parser.IMPLICIT, Cobol85Parser.IMPORT, Cobol85Parser.INTEGER, Cobol85Parser.KEPT, Cobol85Parser.KEYBOARD, Cobol85Parser.LANGUAGE, Cobol85Parser.LB, Cobol85Parser.LD, Cobol85Parser.LEFTLINE, Cobol85Parser.LENGTH_CHECK, Cobol85Parser.LIBACCESS, Cobol85Parser.LIBPARAMETER, Cobol85Parser.LIBRARY, Cobol85Parser.LIST, Cobol85Parser.LOCAL, Cobol85Parser.LONG_DATE, Cobol85Parser.LONG_TIME, Cobol85Parser.LOWER, Cobol85Parser.LOWLIGHT, Cobol85Parser.MMDDYYYY, Cobol85Parser.NAMED, Cobol85Parser.NATIONAL, Cobol85Parser.NATIONAL_EDITED, Cobol85Parser.NETWORK, Cobol85Parser.NO_ECHO, Cobol85Parser.NUMERIC_DATE, Cobol85Parser.NUMERIC_TIME, Cobol85Parser.ODT, Cobol85Parser.ORDERLY, Cobol85Parser.OVERLINE, Cobol85Parser.OWN, Cobol85Parser.PASSWORD, Cobol85Parser.PORT, Cobol85Parser.PRINTER, Cobol85Parser.PRIVATE, Cobol85Parser.PROCESS, Cobol85Parser.PROGRAM, Cobol85Parser.PROMPT, Cobol85Parser.READER, Cobol85Parser.REMOTE, Cobol85Parser.REAL, Cobol85Parser.RECEIVED, Cobol85Parser.RECURSIVE, Cobol85Parser.REF, Cobol85Parser.REMOVE, Cobol85Parser.REQUIRED, Cobol85Parser.REVERSE_VIDEO, Cobol85Parser.SAVE, Cobol85Parser.SECURE, Cobol85Parser.SHARED, Cobol85Parser.SHAREDBYALL, Cobol85Parser.SHAREDBYRUNUNIT, Cobol85Parser.SHARING, Cobol85Parser.SHORT_DATE, Cobol85Parser.SQL, Cobol85Parser.SYMBOL, Cobol85Parser.TASK, Cobol85Parser.THREAD, Cobol85Parser.THREAD_LOCAL, Cobol85Parser.TIMER, Cobol85Parser.TODAYS_DATE, Cobol85Parser.TODAYS_NAME, Cobol85Parser.TRUNCATED, Cobol85Parser.TYPEDEF, Cobol85Parser.UNDERLINE, Cobol85Parser.VIRTUAL, Cobol85Parser.WAIT, Cobol85Parser.YEAR, Cobol85Parser.YYYYMMDD, Cobol85Parser.YYYYDDD, Cobol85Parser.ZERO_FILL, Cobol85Parser.IDENTIFIER]:
                self.state = 2204
                self.dataName()
                pass
            elif token in [Cobol85Parser.LEVEL_NUMBER_66, Cobol85Parser.LEVEL_NUMBER_77, Cobol85Parser.LEVEL_NUMBER_88, Cobol85Parser.INTEGERLITERAL]:
                self.state = 2205
                self.integerLiteral()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LinageLinesAtTopContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.LinageLinesAtTopContext, self).__init__(parent, invokingState)
            self.parser = parser

        def TOP(self):
            return self.getToken(Cobol85Parser.TOP, 0)

        def dataName(self):
            return self.getTypedRuleContext(Cobol85Parser.DataNameContext,0)


        def integerLiteral(self):
            return self.getTypedRuleContext(Cobol85Parser.IntegerLiteralContext,0)


        def LINES(self):
            return self.getToken(Cobol85Parser.LINES, 0)

        def AT(self):
            return self.getToken(Cobol85Parser.AT, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_linageLinesAtTop

        def enterRule(self, listener):
            if hasattr(listener, "enterLinageLinesAtTop"):
                listener.enterLinageLinesAtTop(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitLinageLinesAtTop"):
                listener.exitLinageLinesAtTop(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitLinageLinesAtTop"):
                return visitor.visitLinageLinesAtTop(self)
            else:
                return visitor.visitChildren(self)




    def linageLinesAtTop(self):

        localctx = Cobol85Parser.LinageLinesAtTopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_linageLinesAtTop)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2209
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.LINES:
                self.state = 2208
                self.match(Cobol85Parser.LINES)


            self.state = 2212
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.AT:
                self.state = 2211
                self.match(Cobol85Parser.AT)


            self.state = 2214
            self.match(Cobol85Parser.TOP)
            self.state = 2217
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Cobol85Parser.ABORT, Cobol85Parser.AS, Cobol85Parser.ASCII, Cobol85Parser.ASSOCIATED_DATA, Cobol85Parser.ASSOCIATED_DATA_LENGTH, Cobol85Parser.ATTRIBUTE, Cobol85Parser.AUTO, Cobol85Parser.AUTO_SKIP, Cobol85Parser.BACKGROUND_COLOR, Cobol85Parser.BACKGROUND_COLOUR, Cobol85Parser.BEEP, Cobol85Parser.BELL, Cobol85Parser.BINARY, Cobol85Parser.BIT, Cobol85Parser.BLINK, Cobol85Parser.BLOB, Cobol85Parser.BOUNDS, Cobol85Parser.CAPABLE, Cobol85Parser.CCSVERSION, Cobol85Parser.CHANGED, Cobol85Parser.CHANNEL, Cobol85Parser.CLOB, Cobol85Parser.CLOSE_DISPOSITION, Cobol85Parser.COBOL, Cobol85Parser.COMMITMENT, Cobol85Parser.CONTROL_POINT, Cobol85Parser.CONVENTION, Cobol85Parser.CRUNCH, Cobol85Parser.CURSOR, Cobol85Parser.DBCLOB, Cobol85Parser.DEFAULT, Cobol85Parser.DEFAULT_DISPLAY, Cobol85Parser.DEFINITION, Cobol85Parser.DFHRESP, Cobol85Parser.DFHVALUE, Cobol85Parser.DISK, Cobol85Parser.DONTCARE, Cobol85Parser.DOUBLE, Cobol85Parser.EBCDIC, Cobol85Parser.EMPTY_CHECK, Cobol85Parser.ENTER, Cobol85Parser.ENTRY_PROCEDURE, Cobol85Parser.ERASE, Cobol85Parser.EOL, Cobol85Parser.EOS, Cobol85Parser.ESCAPE, Cobol85Parser.EVENT, Cobol85Parser.EXCLUSIVE, Cobol85Parser.EXPORT, Cobol85Parser.EXTENDED, Cobol85Parser.FOREGROUND_COLOR, Cobol85Parser.FOREGROUND_COLOUR, Cobol85Parser.FULL, Cobol85Parser.FUNCTIONNAME, Cobol85Parser.FUNCTION_POINTER, Cobol85Parser.GRID, Cobol85Parser.HIGHLIGHT, Cobol85Parser.IMPLICIT, Cobol85Parser.IMPORT, Cobol85Parser.INTEGER, Cobol85Parser.KEPT, Cobol85Parser.KEYBOARD, Cobol85Parser.LANGUAGE, Cobol85Parser.LB, Cobol85Parser.LD, Cobol85Parser.LEFTLINE, Cobol85Parser.LENGTH_CHECK, Cobol85Parser.LIBACCESS, Cobol85Parser.LIBPARAMETER, Cobol85Parser.LIBRARY, Cobol85Parser.LIST, Cobol85Parser.LOCAL, Cobol85Parser.LONG_DATE, Cobol85Parser.LONG_TIME, Cobol85Parser.LOWER, Cobol85Parser.LOWLIGHT, Cobol85Parser.MMDDYYYY, Cobol85Parser.NAMED, Cobol85Parser.NATIONAL, Cobol85Parser.NATIONAL_EDITED, Cobol85Parser.NETWORK, Cobol85Parser.NO_ECHO, Cobol85Parser.NUMERIC_DATE, Cobol85Parser.NUMERIC_TIME, Cobol85Parser.ODT, Cobol85Parser.ORDERLY, Cobol85Parser.OVERLINE, Cobol85Parser.OWN, Cobol85Parser.PASSWORD, Cobol85Parser.PORT, Cobol85Parser.PRINTER, Cobol85Parser.PRIVATE, Cobol85Parser.PROCESS, Cobol85Parser.PROGRAM, Cobol85Parser.PROMPT, Cobol85Parser.READER, Cobol85Parser.REMOTE, Cobol85Parser.REAL, Cobol85Parser.RECEIVED, Cobol85Parser.RECURSIVE, Cobol85Parser.REF, Cobol85Parser.REMOVE, Cobol85Parser.REQUIRED, Cobol85Parser.REVERSE_VIDEO, Cobol85Parser.SAVE, Cobol85Parser.SECURE, Cobol85Parser.SHARED, Cobol85Parser.SHAREDBYALL, Cobol85Parser.SHAREDBYRUNUNIT, Cobol85Parser.SHARING, Cobol85Parser.SHORT_DATE, Cobol85Parser.SQL, Cobol85Parser.SYMBOL, Cobol85Parser.TASK, Cobol85Parser.THREAD, Cobol85Parser.THREAD_LOCAL, Cobol85Parser.TIMER, Cobol85Parser.TODAYS_DATE, Cobol85Parser.TODAYS_NAME, Cobol85Parser.TRUNCATED, Cobol85Parser.TYPEDEF, Cobol85Parser.UNDERLINE, Cobol85Parser.VIRTUAL, Cobol85Parser.WAIT, Cobol85Parser.YEAR, Cobol85Parser.YYYYMMDD, Cobol85Parser.YYYYDDD, Cobol85Parser.ZERO_FILL, Cobol85Parser.IDENTIFIER]:
                self.state = 2215
                self.dataName()
                pass
            elif token in [Cobol85Parser.LEVEL_NUMBER_66, Cobol85Parser.LEVEL_NUMBER_77, Cobol85Parser.LEVEL_NUMBER_88, Cobol85Parser.INTEGERLITERAL]:
                self.state = 2216
                self.integerLiteral()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LinageLinesAtBottomContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.LinageLinesAtBottomContext, self).__init__(parent, invokingState)
            self.parser = parser

        def BOTTOM(self):
            return self.getToken(Cobol85Parser.BOTTOM, 0)

        def dataName(self):
            return self.getTypedRuleContext(Cobol85Parser.DataNameContext,0)


        def integerLiteral(self):
            return self.getTypedRuleContext(Cobol85Parser.IntegerLiteralContext,0)


        def LINES(self):
            return self.getToken(Cobol85Parser.LINES, 0)

        def AT(self):
            return self.getToken(Cobol85Parser.AT, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_linageLinesAtBottom

        def enterRule(self, listener):
            if hasattr(listener, "enterLinageLinesAtBottom"):
                listener.enterLinageLinesAtBottom(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitLinageLinesAtBottom"):
                listener.exitLinageLinesAtBottom(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitLinageLinesAtBottom"):
                return visitor.visitLinageLinesAtBottom(self)
            else:
                return visitor.visitChildren(self)




    def linageLinesAtBottom(self):

        localctx = Cobol85Parser.LinageLinesAtBottomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_linageLinesAtBottom)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2220
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.LINES:
                self.state = 2219
                self.match(Cobol85Parser.LINES)


            self.state = 2223
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.AT:
                self.state = 2222
                self.match(Cobol85Parser.AT)


            self.state = 2225
            self.match(Cobol85Parser.BOTTOM)
            self.state = 2228
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Cobol85Parser.ABORT, Cobol85Parser.AS, Cobol85Parser.ASCII, Cobol85Parser.ASSOCIATED_DATA, Cobol85Parser.ASSOCIATED_DATA_LENGTH, Cobol85Parser.ATTRIBUTE, Cobol85Parser.AUTO, Cobol85Parser.AUTO_SKIP, Cobol85Parser.BACKGROUND_COLOR, Cobol85Parser.BACKGROUND_COLOUR, Cobol85Parser.BEEP, Cobol85Parser.BELL, Cobol85Parser.BINARY, Cobol85Parser.BIT, Cobol85Parser.BLINK, Cobol85Parser.BLOB, Cobol85Parser.BOUNDS, Cobol85Parser.CAPABLE, Cobol85Parser.CCSVERSION, Cobol85Parser.CHANGED, Cobol85Parser.CHANNEL, Cobol85Parser.CLOB, Cobol85Parser.CLOSE_DISPOSITION, Cobol85Parser.COBOL, Cobol85Parser.COMMITMENT, Cobol85Parser.CONTROL_POINT, Cobol85Parser.CONVENTION, Cobol85Parser.CRUNCH, Cobol85Parser.CURSOR, Cobol85Parser.DBCLOB, Cobol85Parser.DEFAULT, Cobol85Parser.DEFAULT_DISPLAY, Cobol85Parser.DEFINITION, Cobol85Parser.DFHRESP, Cobol85Parser.DFHVALUE, Cobol85Parser.DISK, Cobol85Parser.DONTCARE, Cobol85Parser.DOUBLE, Cobol85Parser.EBCDIC, Cobol85Parser.EMPTY_CHECK, Cobol85Parser.ENTER, Cobol85Parser.ENTRY_PROCEDURE, Cobol85Parser.ERASE, Cobol85Parser.EOL, Cobol85Parser.EOS, Cobol85Parser.ESCAPE, Cobol85Parser.EVENT, Cobol85Parser.EXCLUSIVE, Cobol85Parser.EXPORT, Cobol85Parser.EXTENDED, Cobol85Parser.FOREGROUND_COLOR, Cobol85Parser.FOREGROUND_COLOUR, Cobol85Parser.FULL, Cobol85Parser.FUNCTIONNAME, Cobol85Parser.FUNCTION_POINTER, Cobol85Parser.GRID, Cobol85Parser.HIGHLIGHT, Cobol85Parser.IMPLICIT, Cobol85Parser.IMPORT, Cobol85Parser.INTEGER, Cobol85Parser.KEPT, Cobol85Parser.KEYBOARD, Cobol85Parser.LANGUAGE, Cobol85Parser.LB, Cobol85Parser.LD, Cobol85Parser.LEFTLINE, Cobol85Parser.LENGTH_CHECK, Cobol85Parser.LIBACCESS, Cobol85Parser.LIBPARAMETER, Cobol85Parser.LIBRARY, Cobol85Parser.LIST, Cobol85Parser.LOCAL, Cobol85Parser.LONG_DATE, Cobol85Parser.LONG_TIME, Cobol85Parser.LOWER, Cobol85Parser.LOWLIGHT, Cobol85Parser.MMDDYYYY, Cobol85Parser.NAMED, Cobol85Parser.NATIONAL, Cobol85Parser.NATIONAL_EDITED, Cobol85Parser.NETWORK, Cobol85Parser.NO_ECHO, Cobol85Parser.NUMERIC_DATE, Cobol85Parser.NUMERIC_TIME, Cobol85Parser.ODT, Cobol85Parser.ORDERLY, Cobol85Parser.OVERLINE, Cobol85Parser.OWN, Cobol85Parser.PASSWORD, Cobol85Parser.PORT, Cobol85Parser.PRINTER, Cobol85Parser.PRIVATE, Cobol85Parser.PROCESS, Cobol85Parser.PROGRAM, Cobol85Parser.PROMPT, Cobol85Parser.READER, Cobol85Parser.REMOTE, Cobol85Parser.REAL, Cobol85Parser.RECEIVED, Cobol85Parser.RECURSIVE, Cobol85Parser.REF, Cobol85Parser.REMOVE, Cobol85Parser.REQUIRED, Cobol85Parser.REVERSE_VIDEO, Cobol85Parser.SAVE, Cobol85Parser.SECURE, Cobol85Parser.SHARED, Cobol85Parser.SHAREDBYALL, Cobol85Parser.SHAREDBYRUNUNIT, Cobol85Parser.SHARING, Cobol85Parser.SHORT_DATE, Cobol85Parser.SQL, Cobol85Parser.SYMBOL, Cobol85Parser.TASK, Cobol85Parser.THREAD, Cobol85Parser.THREAD_LOCAL, Cobol85Parser.TIMER, Cobol85Parser.TODAYS_DATE, Cobol85Parser.TODAYS_NAME, Cobol85Parser.TRUNCATED, Cobol85Parser.TYPEDEF, Cobol85Parser.UNDERLINE, Cobol85Parser.VIRTUAL, Cobol85Parser.WAIT, Cobol85Parser.YEAR, Cobol85Parser.YYYYMMDD, Cobol85Parser.YYYYDDD, Cobol85Parser.ZERO_FILL, Cobol85Parser.IDENTIFIER]:
                self.state = 2226
                self.dataName()
                pass
            elif token in [Cobol85Parser.LEVEL_NUMBER_66, Cobol85Parser.LEVEL_NUMBER_77, Cobol85Parser.LEVEL_NUMBER_88, Cobol85Parser.INTEGERLITERAL]:
                self.state = 2227
                self.integerLiteral()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RecordingModeClauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.RecordingModeClauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def RECORDING(self):
            return self.getToken(Cobol85Parser.RECORDING, 0)

        def modeStatement(self):
            return self.getTypedRuleContext(Cobol85Parser.ModeStatementContext,0)


        def MODE(self):
            return self.getToken(Cobol85Parser.MODE, 0)

        def IS(self):
            return self.getToken(Cobol85Parser.IS, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_recordingModeClause

        def enterRule(self, listener):
            if hasattr(listener, "enterRecordingModeClause"):
                listener.enterRecordingModeClause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitRecordingModeClause"):
                listener.exitRecordingModeClause(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitRecordingModeClause"):
                return visitor.visitRecordingModeClause(self)
            else:
                return visitor.visitChildren(self)




    def recordingModeClause(self):

        localctx = Cobol85Parser.RecordingModeClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_recordingModeClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2230
            self.match(Cobol85Parser.RECORDING)
            self.state = 2232
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.MODE:
                self.state = 2231
                self.match(Cobol85Parser.MODE)


            self.state = 2235
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.IS:
                self.state = 2234
                self.match(Cobol85Parser.IS)


            self.state = 2237
            self.modeStatement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ModeStatementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.ModeStatementContext, self).__init__(parent, invokingState)
            self.parser = parser

        def cobolWord(self):
            return self.getTypedRuleContext(Cobol85Parser.CobolWordContext,0)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_modeStatement

        def enterRule(self, listener):
            if hasattr(listener, "enterModeStatement"):
                listener.enterModeStatement(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitModeStatement"):
                listener.exitModeStatement(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitModeStatement"):
                return visitor.visitModeStatement(self)
            else:
                return visitor.visitChildren(self)




    def modeStatement(self):

        localctx = Cobol85Parser.ModeStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_modeStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2239
            self.cobolWord()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CodeSetClauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.CodeSetClauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def CODE_SET(self):
            return self.getToken(Cobol85Parser.CODE_SET, 0)

        def alphabetName(self):
            return self.getTypedRuleContext(Cobol85Parser.AlphabetNameContext,0)


        def IS(self):
            return self.getToken(Cobol85Parser.IS, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_codeSetClause

        def enterRule(self, listener):
            if hasattr(listener, "enterCodeSetClause"):
                listener.enterCodeSetClause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitCodeSetClause"):
                listener.exitCodeSetClause(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitCodeSetClause"):
                return visitor.visitCodeSetClause(self)
            else:
                return visitor.visitChildren(self)




    def codeSetClause(self):

        localctx = Cobol85Parser.CodeSetClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_codeSetClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2241
            self.match(Cobol85Parser.CODE_SET)
            self.state = 2243
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.IS:
                self.state = 2242
                self.match(Cobol85Parser.IS)


            self.state = 2245
            self.alphabetName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ReportClauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.ReportClauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def REPORT(self):
            return self.getToken(Cobol85Parser.REPORT, 0)

        def REPORTS(self):
            return self.getToken(Cobol85Parser.REPORTS, 0)

        def reportName(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.ReportNameContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.ReportNameContext,i)


        def IS(self):
            return self.getToken(Cobol85Parser.IS, 0)

        def ARE(self):
            return self.getToken(Cobol85Parser.ARE, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_reportClause

        def enterRule(self, listener):
            if hasattr(listener, "enterReportClause"):
                listener.enterReportClause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitReportClause"):
                listener.exitReportClause(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitReportClause"):
                return visitor.visitReportClause(self)
            else:
                return visitor.visitChildren(self)




    def reportClause(self):

        localctx = Cobol85Parser.ReportClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_reportClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2255
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Cobol85Parser.REPORT]:
                self.state = 2247
                self.match(Cobol85Parser.REPORT)
                self.state = 2249
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Cobol85Parser.IS:
                    self.state = 2248
                    self.match(Cobol85Parser.IS)


                pass
            elif token in [Cobol85Parser.REPORTS]:
                self.state = 2251
                self.match(Cobol85Parser.REPORTS)
                self.state = 2253
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Cobol85Parser.ARE:
                    self.state = 2252
                    self.match(Cobol85Parser.ARE)


                pass
            else:
                raise NoViableAltException(self)

            self.state = 2258 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 2257
                self.reportName()
                self.state = 2260 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE) | (1 << Cobol85Parser.AUTO) | (1 << Cobol85Parser.AUTO_SKIP) | (1 << Cobol85Parser.BACKGROUND_COLOR) | (1 << Cobol85Parser.BACKGROUND_COLOUR) | (1 << Cobol85Parser.BEEP) | (1 << Cobol85Parser.BELL) | (1 << Cobol85Parser.BINARY) | (1 << Cobol85Parser.BIT) | (1 << Cobol85Parser.BLINK) | (1 << Cobol85Parser.BLOB) | (1 << Cobol85Parser.BOUNDS) | (1 << Cobol85Parser.CAPABLE) | (1 << Cobol85Parser.CCSVERSION) | (1 << Cobol85Parser.CHANGED) | (1 << Cobol85Parser.CHANNEL))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (Cobol85Parser.CLOB - 67)) | (1 << (Cobol85Parser.CLOSE_DISPOSITION - 67)) | (1 << (Cobol85Parser.COBOL - 67)) | (1 << (Cobol85Parser.COMMITMENT - 67)) | (1 << (Cobol85Parser.CONTROL_POINT - 67)) | (1 << (Cobol85Parser.CONVENTION - 67)) | (1 << (Cobol85Parser.CRUNCH - 67)) | (1 << (Cobol85Parser.CURSOR - 67)) | (1 << (Cobol85Parser.DBCLOB - 67)))) != 0) or ((((_la - 131)) & ~0x3f) == 0 and ((1 << (_la - 131)) & ((1 << (Cobol85Parser.DEFAULT - 131)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 131)) | (1 << (Cobol85Parser.DEFINITION - 131)) | (1 << (Cobol85Parser.DFHRESP - 131)) | (1 << (Cobol85Parser.DFHVALUE - 131)) | (1 << (Cobol85Parser.DISK - 131)) | (1 << (Cobol85Parser.DONTCARE - 131)) | (1 << (Cobol85Parser.DOUBLE - 131)) | (1 << (Cobol85Parser.EBCDIC - 131)) | (1 << (Cobol85Parser.EMPTY_CHECK - 131)) | (1 << (Cobol85Parser.ENTER - 131)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 131)) | (1 << (Cobol85Parser.ERASE - 131)) | (1 << (Cobol85Parser.EOL - 131)) | (1 << (Cobol85Parser.EOS - 131)))) != 0) or ((((_la - 195)) & ~0x3f) == 0 and ((1 << (_la - 195)) & ((1 << (Cobol85Parser.ESCAPE - 195)) | (1 << (Cobol85Parser.EVENT - 195)) | (1 << (Cobol85Parser.EXCLUSIVE - 195)) | (1 << (Cobol85Parser.EXPORT - 195)) | (1 << (Cobol85Parser.EXTENDED - 195)) | (1 << (Cobol85Parser.FOREGROUND_COLOR - 195)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 195)) | (1 << (Cobol85Parser.FULL - 195)) | (1 << (Cobol85Parser.FUNCTIONNAME - 195)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 195)) | (1 << (Cobol85Parser.GRID - 195)) | (1 << (Cobol85Parser.HIGHLIGHT - 195)) | (1 << (Cobol85Parser.IMPLICIT - 195)) | (1 << (Cobol85Parser.IMPORT - 195)) | (1 << (Cobol85Parser.INTEGER - 195)))) != 0) or ((((_la - 262)) & ~0x3f) == 0 and ((1 << (_la - 262)) & ((1 << (Cobol85Parser.KEPT - 262)) | (1 << (Cobol85Parser.KEYBOARD - 262)) | (1 << (Cobol85Parser.LANGUAGE - 262)) | (1 << (Cobol85Parser.LB - 262)) | (1 << (Cobol85Parser.LD - 262)) | (1 << (Cobol85Parser.LEFTLINE - 262)) | (1 << (Cobol85Parser.LENGTH_CHECK - 262)) | (1 << (Cobol85Parser.LIBACCESS - 262)) | (1 << (Cobol85Parser.LIBPARAMETER - 262)) | (1 << (Cobol85Parser.LIBRARY - 262)) | (1 << (Cobol85Parser.LINAGE_COUNTER - 262)) | (1 << (Cobol85Parser.LIST - 262)) | (1 << (Cobol85Parser.LOCAL - 262)) | (1 << (Cobol85Parser.LONG_DATE - 262)) | (1 << (Cobol85Parser.LONG_TIME - 262)) | (1 << (Cobol85Parser.LOWER - 262)) | (1 << (Cobol85Parser.LOWLIGHT - 262)) | (1 << (Cobol85Parser.MMDDYYYY - 262)) | (1 << (Cobol85Parser.NAMED - 262)) | (1 << (Cobol85Parser.NATIONAL - 262)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 262)) | (1 << (Cobol85Parser.NETWORK - 262)) | (1 << (Cobol85Parser.NO_ECHO - 262)) | (1 << (Cobol85Parser.NUMERIC_DATE - 262)) | (1 << (Cobol85Parser.NUMERIC_TIME - 262)))) != 0) or ((((_la - 326)) & ~0x3f) == 0 and ((1 << (_la - 326)) & ((1 << (Cobol85Parser.ODT - 326)) | (1 << (Cobol85Parser.ORDERLY - 326)) | (1 << (Cobol85Parser.OVERLINE - 326)) | (1 << (Cobol85Parser.OWN - 326)) | (1 << (Cobol85Parser.PASSWORD - 326)) | (1 << (Cobol85Parser.PORT - 326)) | (1 << (Cobol85Parser.PRINTER - 326)) | (1 << (Cobol85Parser.PRIVATE - 326)) | (1 << (Cobol85Parser.PROCESS - 326)) | (1 << (Cobol85Parser.PROGRAM - 326)) | (1 << (Cobol85Parser.PROMPT - 326)) | (1 << (Cobol85Parser.READER - 326)) | (1 << (Cobol85Parser.REMOTE - 326)) | (1 << (Cobol85Parser.REAL - 326)) | (1 << (Cobol85Parser.RECEIVED - 326)) | (1 << (Cobol85Parser.RECURSIVE - 326)) | (1 << (Cobol85Parser.REF - 326)))) != 0) or ((((_la - 395)) & ~0x3f) == 0 and ((1 << (_la - 395)) & ((1 << (Cobol85Parser.REMOVE - 395)) | (1 << (Cobol85Parser.REQUIRED - 395)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 395)) | (1 << (Cobol85Parser.SAVE - 395)) | (1 << (Cobol85Parser.SECURE - 395)) | (1 << (Cobol85Parser.SHARED - 395)) | (1 << (Cobol85Parser.SHAREDBYALL - 395)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 395)) | (1 << (Cobol85Parser.SHARING - 395)) | (1 << (Cobol85Parser.SHORT_DATE - 395)) | (1 << (Cobol85Parser.SQL - 395)))) != 0) or ((((_la - 471)) & ~0x3f) == 0 and ((1 << (_la - 471)) & ((1 << (Cobol85Parser.SYMBOL - 471)) | (1 << (Cobol85Parser.TASK - 471)) | (1 << (Cobol85Parser.THREAD - 471)) | (1 << (Cobol85Parser.THREAD_LOCAL - 471)) | (1 << (Cobol85Parser.TIMER - 471)) | (1 << (Cobol85Parser.TODAYS_DATE - 471)) | (1 << (Cobol85Parser.TODAYS_NAME - 471)) | (1 << (Cobol85Parser.TRUNCATED - 471)) | (1 << (Cobol85Parser.TYPEDEF - 471)) | (1 << (Cobol85Parser.UNDERLINE - 471)) | (1 << (Cobol85Parser.VIRTUAL - 471)) | (1 << (Cobol85Parser.WAIT - 471)) | (1 << (Cobol85Parser.YEAR - 471)) | (1 << (Cobol85Parser.YYYYMMDD - 471)) | (1 << (Cobol85Parser.YYYYDDD - 471)) | (1 << (Cobol85Parser.ZERO_FILL - 471)))) != 0) or ((((_la - 557)) & ~0x3f) == 0 and ((1 << (_la - 557)) & ((1 << (Cobol85Parser.LEVEL_NUMBER_66 - 557)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 557)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 557)) | (1 << (Cobol85Parser.INTEGERLITERAL - 557)) | (1 << (Cobol85Parser.IDENTIFIER - 557)))) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DataBaseSectionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.DataBaseSectionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def DATA_BASE(self):
            return self.getToken(Cobol85Parser.DATA_BASE, 0)

        def SECTION(self):
            return self.getToken(Cobol85Parser.SECTION, 0)

        def DOT_FS(self):
            return self.getToken(Cobol85Parser.DOT_FS, 0)

        def dataBaseSectionEntry(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.DataBaseSectionEntryContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.DataBaseSectionEntryContext,i)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_dataBaseSection

        def enterRule(self, listener):
            if hasattr(listener, "enterDataBaseSection"):
                listener.enterDataBaseSection(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitDataBaseSection"):
                listener.exitDataBaseSection(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitDataBaseSection"):
                return visitor.visitDataBaseSection(self)
            else:
                return visitor.visitChildren(self)




    def dataBaseSection(self):

        localctx = Cobol85Parser.DataBaseSectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_dataBaseSection)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2262
            self.match(Cobol85Parser.DATA_BASE)
            self.state = 2263
            self.match(Cobol85Parser.SECTION)
            self.state = 2264
            self.match(Cobol85Parser.DOT_FS)
            self.state = 2268
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 557)) & ~0x3f) == 0 and ((1 << (_la - 557)) & ((1 << (Cobol85Parser.LEVEL_NUMBER_66 - 557)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 557)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 557)) | (1 << (Cobol85Parser.INTEGERLITERAL - 557)))) != 0):
                self.state = 2265
                self.dataBaseSectionEntry()
                self.state = 2270
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DataBaseSectionEntryContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.DataBaseSectionEntryContext, self).__init__(parent, invokingState)
            self.parser = parser

        def integerLiteral(self):
            return self.getTypedRuleContext(Cobol85Parser.IntegerLiteralContext,0)


        def literal(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.LiteralContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.LiteralContext,i)


        def INVOKE(self):
            return self.getToken(Cobol85Parser.INVOKE, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_dataBaseSectionEntry

        def enterRule(self, listener):
            if hasattr(listener, "enterDataBaseSectionEntry"):
                listener.enterDataBaseSectionEntry(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitDataBaseSectionEntry"):
                listener.exitDataBaseSectionEntry(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitDataBaseSectionEntry"):
                return visitor.visitDataBaseSectionEntry(self)
            else:
                return visitor.visitChildren(self)




    def dataBaseSectionEntry(self):

        localctx = Cobol85Parser.DataBaseSectionEntryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_dataBaseSectionEntry)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2271
            self.integerLiteral()
            self.state = 2272
            self.literal()
            self.state = 2273
            self.match(Cobol85Parser.INVOKE)
            self.state = 2274
            self.literal()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class WorkingStorageSectionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.WorkingStorageSectionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def WORKING_STORAGE(self):
            return self.getToken(Cobol85Parser.WORKING_STORAGE, 0)

        def SECTION(self):
            return self.getToken(Cobol85Parser.SECTION, 0)

        def DOT_FS(self):
            return self.getToken(Cobol85Parser.DOT_FS, 0)

        def dataDescriptionEntry(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.DataDescriptionEntryContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.DataDescriptionEntryContext,i)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_workingStorageSection

        def enterRule(self, listener):
            if hasattr(listener, "enterWorkingStorageSection"):
                listener.enterWorkingStorageSection(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitWorkingStorageSection"):
                listener.exitWorkingStorageSection(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitWorkingStorageSection"):
                return visitor.visitWorkingStorageSection(self)
            else:
                return visitor.visitChildren(self)




    def workingStorageSection(self):

        localctx = Cobol85Parser.WorkingStorageSectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_workingStorageSection)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2276
            self.match(Cobol85Parser.WORKING_STORAGE)
            self.state = 2277
            self.match(Cobol85Parser.SECTION)
            self.state = 2278
            self.match(Cobol85Parser.DOT_FS)
            self.state = 2282
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 557)) & ~0x3f) == 0 and ((1 << (_la - 557)) & ((1 << (Cobol85Parser.LEVEL_NUMBER_66 - 557)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 557)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 557)) | (1 << (Cobol85Parser.INTEGERLITERAL - 557)) | (1 << (Cobol85Parser.EXECSQLLINE - 557)))) != 0):
                self.state = 2279
                self.dataDescriptionEntry()
                self.state = 2284
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LinkageSectionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.LinkageSectionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def LINKAGE(self):
            return self.getToken(Cobol85Parser.LINKAGE, 0)

        def SECTION(self):
            return self.getToken(Cobol85Parser.SECTION, 0)

        def DOT_FS(self):
            return self.getToken(Cobol85Parser.DOT_FS, 0)

        def dataDescriptionEntry(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.DataDescriptionEntryContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.DataDescriptionEntryContext,i)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_linkageSection

        def enterRule(self, listener):
            if hasattr(listener, "enterLinkageSection"):
                listener.enterLinkageSection(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitLinkageSection"):
                listener.exitLinkageSection(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitLinkageSection"):
                return visitor.visitLinkageSection(self)
            else:
                return visitor.visitChildren(self)




    def linkageSection(self):

        localctx = Cobol85Parser.LinkageSectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_linkageSection)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2285
            self.match(Cobol85Parser.LINKAGE)
            self.state = 2286
            self.match(Cobol85Parser.SECTION)
            self.state = 2287
            self.match(Cobol85Parser.DOT_FS)
            self.state = 2291
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 557)) & ~0x3f) == 0 and ((1 << (_la - 557)) & ((1 << (Cobol85Parser.LEVEL_NUMBER_66 - 557)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 557)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 557)) | (1 << (Cobol85Parser.INTEGERLITERAL - 557)) | (1 << (Cobol85Parser.EXECSQLLINE - 557)))) != 0):
                self.state = 2288
                self.dataDescriptionEntry()
                self.state = 2293
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CommunicationSectionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.CommunicationSectionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def COMMUNICATION(self):
            return self.getToken(Cobol85Parser.COMMUNICATION, 0)

        def SECTION(self):
            return self.getToken(Cobol85Parser.SECTION, 0)

        def DOT_FS(self):
            return self.getToken(Cobol85Parser.DOT_FS, 0)

        def communicationDescriptionEntry(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.CommunicationDescriptionEntryContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.CommunicationDescriptionEntryContext,i)


        def dataDescriptionEntry(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.DataDescriptionEntryContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.DataDescriptionEntryContext,i)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_communicationSection

        def enterRule(self, listener):
            if hasattr(listener, "enterCommunicationSection"):
                listener.enterCommunicationSection(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitCommunicationSection"):
                listener.exitCommunicationSection(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitCommunicationSection"):
                return visitor.visitCommunicationSection(self)
            else:
                return visitor.visitChildren(self)




    def communicationSection(self):

        localctx = Cobol85Parser.CommunicationSectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_communicationSection)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2294
            self.match(Cobol85Parser.COMMUNICATION)
            self.state = 2295
            self.match(Cobol85Parser.SECTION)
            self.state = 2296
            self.match(Cobol85Parser.DOT_FS)
            self.state = 2301
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==Cobol85Parser.CD or ((((_la - 557)) & ~0x3f) == 0 and ((1 << (_la - 557)) & ((1 << (Cobol85Parser.LEVEL_NUMBER_66 - 557)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 557)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 557)) | (1 << (Cobol85Parser.INTEGERLITERAL - 557)) | (1 << (Cobol85Parser.EXECSQLLINE - 557)))) != 0):
                self.state = 2299
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [Cobol85Parser.CD]:
                    self.state = 2297
                    self.communicationDescriptionEntry()
                    pass
                elif token in [Cobol85Parser.LEVEL_NUMBER_66, Cobol85Parser.LEVEL_NUMBER_77, Cobol85Parser.LEVEL_NUMBER_88, Cobol85Parser.INTEGERLITERAL, Cobol85Parser.EXECSQLLINE]:
                    self.state = 2298
                    self.dataDescriptionEntry()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2303
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CommunicationDescriptionEntryContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.CommunicationDescriptionEntryContext, self).__init__(parent, invokingState)
            self.parser = parser

        def communicationDescriptionEntryFormat1(self):
            return self.getTypedRuleContext(Cobol85Parser.CommunicationDescriptionEntryFormat1Context,0)


        def communicationDescriptionEntryFormat2(self):
            return self.getTypedRuleContext(Cobol85Parser.CommunicationDescriptionEntryFormat2Context,0)


        def communicationDescriptionEntryFormat3(self):
            return self.getTypedRuleContext(Cobol85Parser.CommunicationDescriptionEntryFormat3Context,0)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_communicationDescriptionEntry

        def enterRule(self, listener):
            if hasattr(listener, "enterCommunicationDescriptionEntry"):
                listener.enterCommunicationDescriptionEntry(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitCommunicationDescriptionEntry"):
                listener.exitCommunicationDescriptionEntry(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitCommunicationDescriptionEntry"):
                return visitor.visitCommunicationDescriptionEntry(self)
            else:
                return visitor.visitChildren(self)




    def communicationDescriptionEntry(self):

        localctx = Cobol85Parser.CommunicationDescriptionEntryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_communicationDescriptionEntry)
        try:
            self.state = 2307
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,235,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2304
                self.communicationDescriptionEntryFormat1()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2305
                self.communicationDescriptionEntryFormat2()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2306
                self.communicationDescriptionEntryFormat3()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CommunicationDescriptionEntryFormat1Context(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.CommunicationDescriptionEntryFormat1Context, self).__init__(parent, invokingState)
            self.parser = parser

        def CD(self):
            return self.getToken(Cobol85Parser.CD, 0)

        def cdName(self):
            return self.getTypedRuleContext(Cobol85Parser.CdNameContext,0)


        def INPUT(self):
            return self.getToken(Cobol85Parser.INPUT, 0)

        def DOT_FS(self):
            return self.getToken(Cobol85Parser.DOT_FS, 0)

        def FOR(self):
            return self.getToken(Cobol85Parser.FOR, 0)

        def INITIAL(self):
            return self.getToken(Cobol85Parser.INITIAL, 0)

        def dataDescName(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.DataDescNameContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.DataDescNameContext,i)


        def symbolicQueueClause(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.SymbolicQueueClauseContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.SymbolicQueueClauseContext,i)


        def symbolicSubQueueClause(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.SymbolicSubQueueClauseContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.SymbolicSubQueueClauseContext,i)


        def messageDateClause(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.MessageDateClauseContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.MessageDateClauseContext,i)


        def messageTimeClause(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.MessageTimeClauseContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.MessageTimeClauseContext,i)


        def symbolicSourceClause(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.SymbolicSourceClauseContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.SymbolicSourceClauseContext,i)


        def textLengthClause(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.TextLengthClauseContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.TextLengthClauseContext,i)


        def endKeyClause(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.EndKeyClauseContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.EndKeyClauseContext,i)


        def statusKeyClause(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.StatusKeyClauseContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.StatusKeyClauseContext,i)


        def messageCountClause(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.MessageCountClauseContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.MessageCountClauseContext,i)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_communicationDescriptionEntryFormat1

        def enterRule(self, listener):
            if hasattr(listener, "enterCommunicationDescriptionEntryFormat1"):
                listener.enterCommunicationDescriptionEntryFormat1(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitCommunicationDescriptionEntryFormat1"):
                listener.exitCommunicationDescriptionEntryFormat1(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitCommunicationDescriptionEntryFormat1"):
                return visitor.visitCommunicationDescriptionEntryFormat1(self)
            else:
                return visitor.visitChildren(self)




    def communicationDescriptionEntryFormat1(self):

        localctx = Cobol85Parser.CommunicationDescriptionEntryFormat1Context(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_communicationDescriptionEntryFormat1)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2309
            self.match(Cobol85Parser.CD)
            self.state = 2310
            self.cdName()
            self.state = 2312
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.FOR:
                self.state = 2311
                self.match(Cobol85Parser.FOR)


            self.state = 2315
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.INITIAL:
                self.state = 2314
                self.match(Cobol85Parser.INITIAL)


            self.state = 2317
            self.match(Cobol85Parser.INPUT)
            self.state = 2332
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE) | (1 << Cobol85Parser.AUTO) | (1 << Cobol85Parser.AUTO_SKIP) | (1 << Cobol85Parser.BACKGROUND_COLOR) | (1 << Cobol85Parser.BACKGROUND_COLOUR) | (1 << Cobol85Parser.BEEP) | (1 << Cobol85Parser.BELL) | (1 << Cobol85Parser.BINARY) | (1 << Cobol85Parser.BIT) | (1 << Cobol85Parser.BLINK) | (1 << Cobol85Parser.BLOB) | (1 << Cobol85Parser.BOUNDS) | (1 << Cobol85Parser.CAPABLE) | (1 << Cobol85Parser.CCSVERSION) | (1 << Cobol85Parser.CHANGED) | (1 << Cobol85Parser.CHANNEL))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (Cobol85Parser.CLOB - 67)) | (1 << (Cobol85Parser.CLOSE_DISPOSITION - 67)) | (1 << (Cobol85Parser.COBOL - 67)) | (1 << (Cobol85Parser.COMMITMENT - 67)) | (1 << (Cobol85Parser.CONTROL_POINT - 67)) | (1 << (Cobol85Parser.CONVENTION - 67)) | (1 << (Cobol85Parser.COUNT - 67)) | (1 << (Cobol85Parser.CRUNCH - 67)) | (1 << (Cobol85Parser.CURSOR - 67)) | (1 << (Cobol85Parser.DBCLOB - 67)))) != 0) or ((((_la - 131)) & ~0x3f) == 0 and ((1 << (_la - 131)) & ((1 << (Cobol85Parser.DEFAULT - 131)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 131)) | (1 << (Cobol85Parser.DEFINITION - 131)) | (1 << (Cobol85Parser.DFHRESP - 131)) | (1 << (Cobol85Parser.DFHVALUE - 131)) | (1 << (Cobol85Parser.DISK - 131)) | (1 << (Cobol85Parser.DONTCARE - 131)) | (1 << (Cobol85Parser.DOUBLE - 131)) | (1 << (Cobol85Parser.EBCDIC - 131)) | (1 << (Cobol85Parser.EMPTY_CHECK - 131)) | (1 << (Cobol85Parser.END - 131)) | (1 << (Cobol85Parser.ENTER - 131)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 131)) | (1 << (Cobol85Parser.ERASE - 131)) | (1 << (Cobol85Parser.EOL - 131)) | (1 << (Cobol85Parser.EOS - 131)))) != 0) or ((((_la - 195)) & ~0x3f) == 0 and ((1 << (_la - 195)) & ((1 << (Cobol85Parser.ESCAPE - 195)) | (1 << (Cobol85Parser.EVENT - 195)) | (1 << (Cobol85Parser.EXCLUSIVE - 195)) | (1 << (Cobol85Parser.EXPORT - 195)) | (1 << (Cobol85Parser.EXTENDED - 195)) | (1 << (Cobol85Parser.FILLER - 195)) | (1 << (Cobol85Parser.FOREGROUND_COLOR - 195)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 195)) | (1 << (Cobol85Parser.FULL - 195)) | (1 << (Cobol85Parser.FUNCTIONNAME - 195)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 195)) | (1 << (Cobol85Parser.GRID - 195)) | (1 << (Cobol85Parser.HIGHLIGHT - 195)) | (1 << (Cobol85Parser.IMPLICIT - 195)) | (1 << (Cobol85Parser.IMPORT - 195)) | (1 << (Cobol85Parser.INTEGER - 195)))) != 0) or ((((_la - 262)) & ~0x3f) == 0 and ((1 << (_la - 262)) & ((1 << (Cobol85Parser.KEPT - 262)) | (1 << (Cobol85Parser.KEYBOARD - 262)) | (1 << (Cobol85Parser.LANGUAGE - 262)) | (1 << (Cobol85Parser.LB - 262)) | (1 << (Cobol85Parser.LD - 262)) | (1 << (Cobol85Parser.LEFTLINE - 262)) | (1 << (Cobol85Parser.LENGTH_CHECK - 262)) | (1 << (Cobol85Parser.LIBACCESS - 262)) | (1 << (Cobol85Parser.LIBPARAMETER - 262)) | (1 << (Cobol85Parser.LIBRARY - 262)) | (1 << (Cobol85Parser.LIST - 262)) | (1 << (Cobol85Parser.LOCAL - 262)) | (1 << (Cobol85Parser.LONG_DATE - 262)) | (1 << (Cobol85Parser.LONG_TIME - 262)) | (1 << (Cobol85Parser.LOWER - 262)) | (1 << (Cobol85Parser.LOWLIGHT - 262)) | (1 << (Cobol85Parser.MESSAGE - 262)) | (1 << (Cobol85Parser.MMDDYYYY - 262)) | (1 << (Cobol85Parser.NAMED - 262)) | (1 << (Cobol85Parser.NATIONAL - 262)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 262)) | (1 << (Cobol85Parser.NETWORK - 262)) | (1 << (Cobol85Parser.NO_ECHO - 262)) | (1 << (Cobol85Parser.NUMERIC_DATE - 262)) | (1 << (Cobol85Parser.NUMERIC_TIME - 262)))) != 0) or ((((_la - 326)) & ~0x3f) == 0 and ((1 << (_la - 326)) & ((1 << (Cobol85Parser.ODT - 326)) | (1 << (Cobol85Parser.ORDERLY - 326)) | (1 << (Cobol85Parser.OVERLINE - 326)) | (1 << (Cobol85Parser.OWN - 326)) | (1 << (Cobol85Parser.PASSWORD - 326)) | (1 << (Cobol85Parser.PORT - 326)) | (1 << (Cobol85Parser.PRINTER - 326)) | (1 << (Cobol85Parser.PRIVATE - 326)) | (1 << (Cobol85Parser.PROCESS - 326)) | (1 << (Cobol85Parser.PROGRAM - 326)) | (1 << (Cobol85Parser.PROMPT - 326)) | (1 << (Cobol85Parser.QUEUE - 326)) | (1 << (Cobol85Parser.READER - 326)) | (1 << (Cobol85Parser.REMOTE - 326)) | (1 << (Cobol85Parser.REAL - 326)) | (1 << (Cobol85Parser.RECEIVED - 326)) | (1 << (Cobol85Parser.RECURSIVE - 326)) | (1 << (Cobol85Parser.REF - 326)))) != 0) or ((((_la - 395)) & ~0x3f) == 0 and ((1 << (_la - 395)) & ((1 << (Cobol85Parser.REMOVE - 395)) | (1 << (Cobol85Parser.REQUIRED - 395)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 395)) | (1 << (Cobol85Parser.SAVE - 395)) | (1 << (Cobol85Parser.SECURE - 395)) | (1 << (Cobol85Parser.SHARED - 395)) | (1 << (Cobol85Parser.SHAREDBYALL - 395)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 395)) | (1 << (Cobol85Parser.SHARING - 395)) | (1 << (Cobol85Parser.SHORT_DATE - 395)) | (1 << (Cobol85Parser.SOURCE - 395)) | (1 << (Cobol85Parser.SQL - 395)))) != 0) or ((((_la - 462)) & ~0x3f) == 0 and ((1 << (_la - 462)) & ((1 << (Cobol85Parser.STATUS - 462)) | (1 << (Cobol85Parser.SUB_QUEUE_1 - 462)) | (1 << (Cobol85Parser.SUB_QUEUE_2 - 462)) | (1 << (Cobol85Parser.SUB_QUEUE_3 - 462)) | (1 << (Cobol85Parser.SYMBOL - 462)) | (1 << (Cobol85Parser.SYMBOLIC - 462)) | (1 << (Cobol85Parser.TASK - 462)) | (1 << (Cobol85Parser.TEXT - 462)) | (1 << (Cobol85Parser.THREAD - 462)) | (1 << (Cobol85Parser.THREAD_LOCAL - 462)) | (1 << (Cobol85Parser.TIMER - 462)) | (1 << (Cobol85Parser.TODAYS_DATE - 462)) | (1 << (Cobol85Parser.TODAYS_NAME - 462)) | (1 << (Cobol85Parser.TRUNCATED - 462)) | (1 << (Cobol85Parser.TYPEDEF - 462)) | (1 << (Cobol85Parser.UNDERLINE - 462)) | (1 << (Cobol85Parser.VIRTUAL - 462)) | (1 << (Cobol85Parser.WAIT - 462)) | (1 << (Cobol85Parser.YEAR - 462)) | (1 << (Cobol85Parser.YYYYMMDD - 462)) | (1 << (Cobol85Parser.YYYYDDD - 462)))) != 0) or _la==Cobol85Parser.ZERO_FILL or _la==Cobol85Parser.IDENTIFIER:
                self.state = 2330
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [Cobol85Parser.COUNT, Cobol85Parser.END, Cobol85Parser.MESSAGE, Cobol85Parser.QUEUE, Cobol85Parser.SOURCE, Cobol85Parser.STATUS, Cobol85Parser.SUB_QUEUE_1, Cobol85Parser.SUB_QUEUE_2, Cobol85Parser.SUB_QUEUE_3, Cobol85Parser.SYMBOLIC, Cobol85Parser.TEXT]:
                    self.state = 2327
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,238,self._ctx)
                    if la_ == 1:
                        self.state = 2318
                        self.symbolicQueueClause()
                        pass

                    elif la_ == 2:
                        self.state = 2319
                        self.symbolicSubQueueClause()
                        pass

                    elif la_ == 3:
                        self.state = 2320
                        self.messageDateClause()
                        pass

                    elif la_ == 4:
                        self.state = 2321
                        self.messageTimeClause()
                        pass

                    elif la_ == 5:
                        self.state = 2322
                        self.symbolicSourceClause()
                        pass

                    elif la_ == 6:
                        self.state = 2323
                        self.textLengthClause()
                        pass

                    elif la_ == 7:
                        self.state = 2324
                        self.endKeyClause()
                        pass

                    elif la_ == 8:
                        self.state = 2325
                        self.statusKeyClause()
                        pass

                    elif la_ == 9:
                        self.state = 2326
                        self.messageCountClause()
                        pass


                    pass
                elif token in [Cobol85Parser.ABORT, Cobol85Parser.AS, Cobol85Parser.ASCII, Cobol85Parser.ASSOCIATED_DATA, Cobol85Parser.ASSOCIATED_DATA_LENGTH, Cobol85Parser.ATTRIBUTE, Cobol85Parser.AUTO, Cobol85Parser.AUTO_SKIP, Cobol85Parser.BACKGROUND_COLOR, Cobol85Parser.BACKGROUND_COLOUR, Cobol85Parser.BEEP, Cobol85Parser.BELL, Cobol85Parser.BINARY, Cobol85Parser.BIT, Cobol85Parser.BLINK, Cobol85Parser.BLOB, Cobol85Parser.BOUNDS, Cobol85Parser.CAPABLE, Cobol85Parser.CCSVERSION, Cobol85Parser.CHANGED, Cobol85Parser.CHANNEL, Cobol85Parser.CLOB, Cobol85Parser.CLOSE_DISPOSITION, Cobol85Parser.COBOL, Cobol85Parser.COMMITMENT, Cobol85Parser.CONTROL_POINT, Cobol85Parser.CONVENTION, Cobol85Parser.CRUNCH, Cobol85Parser.CURSOR, Cobol85Parser.DBCLOB, Cobol85Parser.DEFAULT, Cobol85Parser.DEFAULT_DISPLAY, Cobol85Parser.DEFINITION, Cobol85Parser.DFHRESP, Cobol85Parser.DFHVALUE, Cobol85Parser.DISK, Cobol85Parser.DONTCARE, Cobol85Parser.DOUBLE, Cobol85Parser.EBCDIC, Cobol85Parser.EMPTY_CHECK, Cobol85Parser.ENTER, Cobol85Parser.ENTRY_PROCEDURE, Cobol85Parser.ERASE, Cobol85Parser.EOL, Cobol85Parser.EOS, Cobol85Parser.ESCAPE, Cobol85Parser.EVENT, Cobol85Parser.EXCLUSIVE, Cobol85Parser.EXPORT, Cobol85Parser.EXTENDED, Cobol85Parser.FILLER, Cobol85Parser.FOREGROUND_COLOR, Cobol85Parser.FOREGROUND_COLOUR, Cobol85Parser.FULL, Cobol85Parser.FUNCTIONNAME, Cobol85Parser.FUNCTION_POINTER, Cobol85Parser.GRID, Cobol85Parser.HIGHLIGHT, Cobol85Parser.IMPLICIT, Cobol85Parser.IMPORT, Cobol85Parser.INTEGER, Cobol85Parser.KEPT, Cobol85Parser.KEYBOARD, Cobol85Parser.LANGUAGE, Cobol85Parser.LB, Cobol85Parser.LD, Cobol85Parser.LEFTLINE, Cobol85Parser.LENGTH_CHECK, Cobol85Parser.LIBACCESS, Cobol85Parser.LIBPARAMETER, Cobol85Parser.LIBRARY, Cobol85Parser.LIST, Cobol85Parser.LOCAL, Cobol85Parser.LONG_DATE, Cobol85Parser.LONG_TIME, Cobol85Parser.LOWER, Cobol85Parser.LOWLIGHT, Cobol85Parser.MMDDYYYY, Cobol85Parser.NAMED, Cobol85Parser.NATIONAL, Cobol85Parser.NATIONAL_EDITED, Cobol85Parser.NETWORK, Cobol85Parser.NO_ECHO, Cobol85Parser.NUMERIC_DATE, Cobol85Parser.NUMERIC_TIME, Cobol85Parser.ODT, Cobol85Parser.ORDERLY, Cobol85Parser.OVERLINE, Cobol85Parser.OWN, Cobol85Parser.PASSWORD, Cobol85Parser.PORT, Cobol85Parser.PRINTER, Cobol85Parser.PRIVATE, Cobol85Parser.PROCESS, Cobol85Parser.PROGRAM, Cobol85Parser.PROMPT, Cobol85Parser.READER, Cobol85Parser.REMOTE, Cobol85Parser.REAL, Cobol85Parser.RECEIVED, Cobol85Parser.RECURSIVE, Cobol85Parser.REF, Cobol85Parser.REMOVE, Cobol85Parser.REQUIRED, Cobol85Parser.REVERSE_VIDEO, Cobol85Parser.SAVE, Cobol85Parser.SECURE, Cobol85Parser.SHARED, Cobol85Parser.SHAREDBYALL, Cobol85Parser.SHAREDBYRUNUNIT, Cobol85Parser.SHARING, Cobol85Parser.SHORT_DATE, Cobol85Parser.SQL, Cobol85Parser.SYMBOL, Cobol85Parser.TASK, Cobol85Parser.THREAD, Cobol85Parser.THREAD_LOCAL, Cobol85Parser.TIMER, Cobol85Parser.TODAYS_DATE, Cobol85Parser.TODAYS_NAME, Cobol85Parser.TRUNCATED, Cobol85Parser.TYPEDEF, Cobol85Parser.UNDERLINE, Cobol85Parser.VIRTUAL, Cobol85Parser.WAIT, Cobol85Parser.YEAR, Cobol85Parser.YYYYMMDD, Cobol85Parser.YYYYDDD, Cobol85Parser.ZERO_FILL, Cobol85Parser.IDENTIFIER]:
                    self.state = 2329
                    self.dataDescName()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2334
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2335
            self.match(Cobol85Parser.DOT_FS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CommunicationDescriptionEntryFormat2Context(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.CommunicationDescriptionEntryFormat2Context, self).__init__(parent, invokingState)
            self.parser = parser

        def CD(self):
            return self.getToken(Cobol85Parser.CD, 0)

        def cdName(self):
            return self.getTypedRuleContext(Cobol85Parser.CdNameContext,0)


        def OUTPUT(self):
            return self.getToken(Cobol85Parser.OUTPUT, 0)

        def DOT_FS(self):
            return self.getToken(Cobol85Parser.DOT_FS, 0)

        def FOR(self):
            return self.getToken(Cobol85Parser.FOR, 0)

        def destinationCountClause(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.DestinationCountClauseContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.DestinationCountClauseContext,i)


        def textLengthClause(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.TextLengthClauseContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.TextLengthClauseContext,i)


        def statusKeyClause(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.StatusKeyClauseContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.StatusKeyClauseContext,i)


        def destinationTableClause(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.DestinationTableClauseContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.DestinationTableClauseContext,i)


        def errorKeyClause(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.ErrorKeyClauseContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.ErrorKeyClauseContext,i)


        def symbolicDestinationClause(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.SymbolicDestinationClauseContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.SymbolicDestinationClauseContext,i)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_communicationDescriptionEntryFormat2

        def enterRule(self, listener):
            if hasattr(listener, "enterCommunicationDescriptionEntryFormat2"):
                listener.enterCommunicationDescriptionEntryFormat2(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitCommunicationDescriptionEntryFormat2"):
                listener.exitCommunicationDescriptionEntryFormat2(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitCommunicationDescriptionEntryFormat2"):
                return visitor.visitCommunicationDescriptionEntryFormat2(self)
            else:
                return visitor.visitChildren(self)




    def communicationDescriptionEntryFormat2(self):

        localctx = Cobol85Parser.CommunicationDescriptionEntryFormat2Context(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_communicationDescriptionEntryFormat2)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2337
            self.match(Cobol85Parser.CD)
            self.state = 2338
            self.cdName()
            self.state = 2340
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.FOR:
                self.state = 2339
                self.match(Cobol85Parser.FOR)


            self.state = 2342
            self.match(Cobol85Parser.OUTPUT)
            self.state = 2351
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==Cobol85Parser.DESTINATION or _la==Cobol85Parser.ERROR or ((((_la - 462)) & ~0x3f) == 0 and ((1 << (_la - 462)) & ((1 << (Cobol85Parser.STATUS - 462)) | (1 << (Cobol85Parser.SYMBOLIC - 462)) | (1 << (Cobol85Parser.TEXT - 462)))) != 0):
                self.state = 2349
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,242,self._ctx)
                if la_ == 1:
                    self.state = 2343
                    self.destinationCountClause()
                    pass

                elif la_ == 2:
                    self.state = 2344
                    self.textLengthClause()
                    pass

                elif la_ == 3:
                    self.state = 2345
                    self.statusKeyClause()
                    pass

                elif la_ == 4:
                    self.state = 2346
                    self.destinationTableClause()
                    pass

                elif la_ == 5:
                    self.state = 2347
                    self.errorKeyClause()
                    pass

                elif la_ == 6:
                    self.state = 2348
                    self.symbolicDestinationClause()
                    pass


                self.state = 2353
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2354
            self.match(Cobol85Parser.DOT_FS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CommunicationDescriptionEntryFormat3Context(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.CommunicationDescriptionEntryFormat3Context, self).__init__(parent, invokingState)
            self.parser = parser

        def CD(self):
            return self.getToken(Cobol85Parser.CD, 0)

        def cdName(self):
            return self.getTypedRuleContext(Cobol85Parser.CdNameContext,0)


        def INITIAL(self):
            return self.getToken(Cobol85Parser.INITIAL, 0)

        def I_O(self):
            return self.getToken(Cobol85Parser.I_O, 0)

        def DOT_FS(self):
            return self.getToken(Cobol85Parser.DOT_FS, 0)

        def FOR(self):
            return self.getToken(Cobol85Parser.FOR, 0)

        def dataDescName(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.DataDescNameContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.DataDescNameContext,i)


        def messageDateClause(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.MessageDateClauseContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.MessageDateClauseContext,i)


        def messageTimeClause(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.MessageTimeClauseContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.MessageTimeClauseContext,i)


        def symbolicTerminalClause(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.SymbolicTerminalClauseContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.SymbolicTerminalClauseContext,i)


        def textLengthClause(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.TextLengthClauseContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.TextLengthClauseContext,i)


        def endKeyClause(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.EndKeyClauseContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.EndKeyClauseContext,i)


        def statusKeyClause(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.StatusKeyClauseContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.StatusKeyClauseContext,i)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_communicationDescriptionEntryFormat3

        def enterRule(self, listener):
            if hasattr(listener, "enterCommunicationDescriptionEntryFormat3"):
                listener.enterCommunicationDescriptionEntryFormat3(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitCommunicationDescriptionEntryFormat3"):
                listener.exitCommunicationDescriptionEntryFormat3(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitCommunicationDescriptionEntryFormat3"):
                return visitor.visitCommunicationDescriptionEntryFormat3(self)
            else:
                return visitor.visitChildren(self)




    def communicationDescriptionEntryFormat3(self):

        localctx = Cobol85Parser.CommunicationDescriptionEntryFormat3Context(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_communicationDescriptionEntryFormat3)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2356
            self.match(Cobol85Parser.CD)
            self.state = 2357
            self.cdName()
            self.state = 2359
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.FOR:
                self.state = 2358
                self.match(Cobol85Parser.FOR)


            self.state = 2361
            self.match(Cobol85Parser.INITIAL)
            self.state = 2362
            self.match(Cobol85Parser.I_O)
            self.state = 2374
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE) | (1 << Cobol85Parser.AUTO) | (1 << Cobol85Parser.AUTO_SKIP) | (1 << Cobol85Parser.BACKGROUND_COLOR) | (1 << Cobol85Parser.BACKGROUND_COLOUR) | (1 << Cobol85Parser.BEEP) | (1 << Cobol85Parser.BELL) | (1 << Cobol85Parser.BINARY) | (1 << Cobol85Parser.BIT) | (1 << Cobol85Parser.BLINK) | (1 << Cobol85Parser.BLOB) | (1 << Cobol85Parser.BOUNDS) | (1 << Cobol85Parser.CAPABLE) | (1 << Cobol85Parser.CCSVERSION) | (1 << Cobol85Parser.CHANGED) | (1 << Cobol85Parser.CHANNEL))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (Cobol85Parser.CLOB - 67)) | (1 << (Cobol85Parser.CLOSE_DISPOSITION - 67)) | (1 << (Cobol85Parser.COBOL - 67)) | (1 << (Cobol85Parser.COMMITMENT - 67)) | (1 << (Cobol85Parser.CONTROL_POINT - 67)) | (1 << (Cobol85Parser.CONVENTION - 67)) | (1 << (Cobol85Parser.CRUNCH - 67)) | (1 << (Cobol85Parser.CURSOR - 67)) | (1 << (Cobol85Parser.DBCLOB - 67)))) != 0) or ((((_la - 131)) & ~0x3f) == 0 and ((1 << (_la - 131)) & ((1 << (Cobol85Parser.DEFAULT - 131)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 131)) | (1 << (Cobol85Parser.DEFINITION - 131)) | (1 << (Cobol85Parser.DFHRESP - 131)) | (1 << (Cobol85Parser.DFHVALUE - 131)) | (1 << (Cobol85Parser.DISK - 131)) | (1 << (Cobol85Parser.DONTCARE - 131)) | (1 << (Cobol85Parser.DOUBLE - 131)) | (1 << (Cobol85Parser.EBCDIC - 131)) | (1 << (Cobol85Parser.EMPTY_CHECK - 131)) | (1 << (Cobol85Parser.END - 131)) | (1 << (Cobol85Parser.ENTER - 131)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 131)) | (1 << (Cobol85Parser.ERASE - 131)) | (1 << (Cobol85Parser.EOL - 131)) | (1 << (Cobol85Parser.EOS - 131)))) != 0) or ((((_la - 195)) & ~0x3f) == 0 and ((1 << (_la - 195)) & ((1 << (Cobol85Parser.ESCAPE - 195)) | (1 << (Cobol85Parser.EVENT - 195)) | (1 << (Cobol85Parser.EXCLUSIVE - 195)) | (1 << (Cobol85Parser.EXPORT - 195)) | (1 << (Cobol85Parser.EXTENDED - 195)) | (1 << (Cobol85Parser.FILLER - 195)) | (1 << (Cobol85Parser.FOREGROUND_COLOR - 195)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 195)) | (1 << (Cobol85Parser.FULL - 195)) | (1 << (Cobol85Parser.FUNCTIONNAME - 195)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 195)) | (1 << (Cobol85Parser.GRID - 195)) | (1 << (Cobol85Parser.HIGHLIGHT - 195)) | (1 << (Cobol85Parser.IMPLICIT - 195)) | (1 << (Cobol85Parser.IMPORT - 195)) | (1 << (Cobol85Parser.INTEGER - 195)))) != 0) or ((((_la - 262)) & ~0x3f) == 0 and ((1 << (_la - 262)) & ((1 << (Cobol85Parser.KEPT - 262)) | (1 << (Cobol85Parser.KEYBOARD - 262)) | (1 << (Cobol85Parser.LANGUAGE - 262)) | (1 << (Cobol85Parser.LB - 262)) | (1 << (Cobol85Parser.LD - 262)) | (1 << (Cobol85Parser.LEFTLINE - 262)) | (1 << (Cobol85Parser.LENGTH_CHECK - 262)) | (1 << (Cobol85Parser.LIBACCESS - 262)) | (1 << (Cobol85Parser.LIBPARAMETER - 262)) | (1 << (Cobol85Parser.LIBRARY - 262)) | (1 << (Cobol85Parser.LIST - 262)) | (1 << (Cobol85Parser.LOCAL - 262)) | (1 << (Cobol85Parser.LONG_DATE - 262)) | (1 << (Cobol85Parser.LONG_TIME - 262)) | (1 << (Cobol85Parser.LOWER - 262)) | (1 << (Cobol85Parser.LOWLIGHT - 262)) | (1 << (Cobol85Parser.MESSAGE - 262)) | (1 << (Cobol85Parser.MMDDYYYY - 262)) | (1 << (Cobol85Parser.NAMED - 262)) | (1 << (Cobol85Parser.NATIONAL - 262)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 262)) | (1 << (Cobol85Parser.NETWORK - 262)) | (1 << (Cobol85Parser.NO_ECHO - 262)) | (1 << (Cobol85Parser.NUMERIC_DATE - 262)) | (1 << (Cobol85Parser.NUMERIC_TIME - 262)))) != 0) or ((((_la - 326)) & ~0x3f) == 0 and ((1 << (_la - 326)) & ((1 << (Cobol85Parser.ODT - 326)) | (1 << (Cobol85Parser.ORDERLY - 326)) | (1 << (Cobol85Parser.OVERLINE - 326)) | (1 << (Cobol85Parser.OWN - 326)) | (1 << (Cobol85Parser.PASSWORD - 326)) | (1 << (Cobol85Parser.PORT - 326)) | (1 << (Cobol85Parser.PRINTER - 326)) | (1 << (Cobol85Parser.PRIVATE - 326)) | (1 << (Cobol85Parser.PROCESS - 326)) | (1 << (Cobol85Parser.PROGRAM - 326)) | (1 << (Cobol85Parser.PROMPT - 326)) | (1 << (Cobol85Parser.READER - 326)) | (1 << (Cobol85Parser.REMOTE - 326)) | (1 << (Cobol85Parser.REAL - 326)) | (1 << (Cobol85Parser.RECEIVED - 326)) | (1 << (Cobol85Parser.RECURSIVE - 326)) | (1 << (Cobol85Parser.REF - 326)))) != 0) or ((((_la - 395)) & ~0x3f) == 0 and ((1 << (_la - 395)) & ((1 << (Cobol85Parser.REMOVE - 395)) | (1 << (Cobol85Parser.REQUIRED - 395)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 395)) | (1 << (Cobol85Parser.SAVE - 395)) | (1 << (Cobol85Parser.SECURE - 395)) | (1 << (Cobol85Parser.SHARED - 395)) | (1 << (Cobol85Parser.SHAREDBYALL - 395)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 395)) | (1 << (Cobol85Parser.SHARING - 395)) | (1 << (Cobol85Parser.SHORT_DATE - 395)) | (1 << (Cobol85Parser.SQL - 395)))) != 0) or ((((_la - 462)) & ~0x3f) == 0 and ((1 << (_la - 462)) & ((1 << (Cobol85Parser.STATUS - 462)) | (1 << (Cobol85Parser.SYMBOL - 462)) | (1 << (Cobol85Parser.SYMBOLIC - 462)) | (1 << (Cobol85Parser.TASK - 462)) | (1 << (Cobol85Parser.TERMINAL - 462)) | (1 << (Cobol85Parser.TEXT - 462)) | (1 << (Cobol85Parser.THREAD - 462)) | (1 << (Cobol85Parser.THREAD_LOCAL - 462)) | (1 << (Cobol85Parser.TIMER - 462)) | (1 << (Cobol85Parser.TODAYS_DATE - 462)) | (1 << (Cobol85Parser.TODAYS_NAME - 462)) | (1 << (Cobol85Parser.TRUNCATED - 462)) | (1 << (Cobol85Parser.TYPEDEF - 462)) | (1 << (Cobol85Parser.UNDERLINE - 462)) | (1 << (Cobol85Parser.VIRTUAL - 462)) | (1 << (Cobol85Parser.WAIT - 462)) | (1 << (Cobol85Parser.YEAR - 462)) | (1 << (Cobol85Parser.YYYYMMDD - 462)) | (1 << (Cobol85Parser.YYYYDDD - 462)))) != 0) or _la==Cobol85Parser.ZERO_FILL or _la==Cobol85Parser.IDENTIFIER:
                self.state = 2372
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [Cobol85Parser.END, Cobol85Parser.MESSAGE, Cobol85Parser.STATUS, Cobol85Parser.SYMBOLIC, Cobol85Parser.TERMINAL, Cobol85Parser.TEXT]:
                    self.state = 2369
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,245,self._ctx)
                    if la_ == 1:
                        self.state = 2363
                        self.messageDateClause()
                        pass

                    elif la_ == 2:
                        self.state = 2364
                        self.messageTimeClause()
                        pass

                    elif la_ == 3:
                        self.state = 2365
                        self.symbolicTerminalClause()
                        pass

                    elif la_ == 4:
                        self.state = 2366
                        self.textLengthClause()
                        pass

                    elif la_ == 5:
                        self.state = 2367
                        self.endKeyClause()
                        pass

                    elif la_ == 6:
                        self.state = 2368
                        self.statusKeyClause()
                        pass


                    pass
                elif token in [Cobol85Parser.ABORT, Cobol85Parser.AS, Cobol85Parser.ASCII, Cobol85Parser.ASSOCIATED_DATA, Cobol85Parser.ASSOCIATED_DATA_LENGTH, Cobol85Parser.ATTRIBUTE, Cobol85Parser.AUTO, Cobol85Parser.AUTO_SKIP, Cobol85Parser.BACKGROUND_COLOR, Cobol85Parser.BACKGROUND_COLOUR, Cobol85Parser.BEEP, Cobol85Parser.BELL, Cobol85Parser.BINARY, Cobol85Parser.BIT, Cobol85Parser.BLINK, Cobol85Parser.BLOB, Cobol85Parser.BOUNDS, Cobol85Parser.CAPABLE, Cobol85Parser.CCSVERSION, Cobol85Parser.CHANGED, Cobol85Parser.CHANNEL, Cobol85Parser.CLOB, Cobol85Parser.CLOSE_DISPOSITION, Cobol85Parser.COBOL, Cobol85Parser.COMMITMENT, Cobol85Parser.CONTROL_POINT, Cobol85Parser.CONVENTION, Cobol85Parser.CRUNCH, Cobol85Parser.CURSOR, Cobol85Parser.DBCLOB, Cobol85Parser.DEFAULT, Cobol85Parser.DEFAULT_DISPLAY, Cobol85Parser.DEFINITION, Cobol85Parser.DFHRESP, Cobol85Parser.DFHVALUE, Cobol85Parser.DISK, Cobol85Parser.DONTCARE, Cobol85Parser.DOUBLE, Cobol85Parser.EBCDIC, Cobol85Parser.EMPTY_CHECK, Cobol85Parser.ENTER, Cobol85Parser.ENTRY_PROCEDURE, Cobol85Parser.ERASE, Cobol85Parser.EOL, Cobol85Parser.EOS, Cobol85Parser.ESCAPE, Cobol85Parser.EVENT, Cobol85Parser.EXCLUSIVE, Cobol85Parser.EXPORT, Cobol85Parser.EXTENDED, Cobol85Parser.FILLER, Cobol85Parser.FOREGROUND_COLOR, Cobol85Parser.FOREGROUND_COLOUR, Cobol85Parser.FULL, Cobol85Parser.FUNCTIONNAME, Cobol85Parser.FUNCTION_POINTER, Cobol85Parser.GRID, Cobol85Parser.HIGHLIGHT, Cobol85Parser.IMPLICIT, Cobol85Parser.IMPORT, Cobol85Parser.INTEGER, Cobol85Parser.KEPT, Cobol85Parser.KEYBOARD, Cobol85Parser.LANGUAGE, Cobol85Parser.LB, Cobol85Parser.LD, Cobol85Parser.LEFTLINE, Cobol85Parser.LENGTH_CHECK, Cobol85Parser.LIBACCESS, Cobol85Parser.LIBPARAMETER, Cobol85Parser.LIBRARY, Cobol85Parser.LIST, Cobol85Parser.LOCAL, Cobol85Parser.LONG_DATE, Cobol85Parser.LONG_TIME, Cobol85Parser.LOWER, Cobol85Parser.LOWLIGHT, Cobol85Parser.MMDDYYYY, Cobol85Parser.NAMED, Cobol85Parser.NATIONAL, Cobol85Parser.NATIONAL_EDITED, Cobol85Parser.NETWORK, Cobol85Parser.NO_ECHO, Cobol85Parser.NUMERIC_DATE, Cobol85Parser.NUMERIC_TIME, Cobol85Parser.ODT, Cobol85Parser.ORDERLY, Cobol85Parser.OVERLINE, Cobol85Parser.OWN, Cobol85Parser.PASSWORD, Cobol85Parser.PORT, Cobol85Parser.PRINTER, Cobol85Parser.PRIVATE, Cobol85Parser.PROCESS, Cobol85Parser.PROGRAM, Cobol85Parser.PROMPT, Cobol85Parser.READER, Cobol85Parser.REMOTE, Cobol85Parser.REAL, Cobol85Parser.RECEIVED, Cobol85Parser.RECURSIVE, Cobol85Parser.REF, Cobol85Parser.REMOVE, Cobol85Parser.REQUIRED, Cobol85Parser.REVERSE_VIDEO, Cobol85Parser.SAVE, Cobol85Parser.SECURE, Cobol85Parser.SHARED, Cobol85Parser.SHAREDBYALL, Cobol85Parser.SHAREDBYRUNUNIT, Cobol85Parser.SHARING, Cobol85Parser.SHORT_DATE, Cobol85Parser.SQL, Cobol85Parser.SYMBOL, Cobol85Parser.TASK, Cobol85Parser.THREAD, Cobol85Parser.THREAD_LOCAL, Cobol85Parser.TIMER, Cobol85Parser.TODAYS_DATE, Cobol85Parser.TODAYS_NAME, Cobol85Parser.TRUNCATED, Cobol85Parser.TYPEDEF, Cobol85Parser.UNDERLINE, Cobol85Parser.VIRTUAL, Cobol85Parser.WAIT, Cobol85Parser.YEAR, Cobol85Parser.YYYYMMDD, Cobol85Parser.YYYYDDD, Cobol85Parser.ZERO_FILL, Cobol85Parser.IDENTIFIER]:
                    self.state = 2371
                    self.dataDescName()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2376
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2377
            self.match(Cobol85Parser.DOT_FS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DestinationCountClauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.DestinationCountClauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def DESTINATION(self):
            return self.getToken(Cobol85Parser.DESTINATION, 0)

        def COUNT(self):
            return self.getToken(Cobol85Parser.COUNT, 0)

        def dataDescName(self):
            return self.getTypedRuleContext(Cobol85Parser.DataDescNameContext,0)


        def IS(self):
            return self.getToken(Cobol85Parser.IS, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_destinationCountClause

        def enterRule(self, listener):
            if hasattr(listener, "enterDestinationCountClause"):
                listener.enterDestinationCountClause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitDestinationCountClause"):
                listener.exitDestinationCountClause(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitDestinationCountClause"):
                return visitor.visitDestinationCountClause(self)
            else:
                return visitor.visitChildren(self)




    def destinationCountClause(self):

        localctx = Cobol85Parser.DestinationCountClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_destinationCountClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2379
            self.match(Cobol85Parser.DESTINATION)
            self.state = 2380
            self.match(Cobol85Parser.COUNT)
            self.state = 2382
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.IS:
                self.state = 2381
                self.match(Cobol85Parser.IS)


            self.state = 2384
            self.dataDescName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DestinationTableClauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.DestinationTableClauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def DESTINATION(self):
            return self.getToken(Cobol85Parser.DESTINATION, 0)

        def TABLE(self):
            return self.getToken(Cobol85Parser.TABLE, 0)

        def OCCURS(self):
            return self.getToken(Cobol85Parser.OCCURS, 0)

        def integerLiteral(self):
            return self.getTypedRuleContext(Cobol85Parser.IntegerLiteralContext,0)


        def TIMES(self):
            return self.getToken(Cobol85Parser.TIMES, 0)

        def INDEXED(self):
            return self.getToken(Cobol85Parser.INDEXED, 0)

        def BY(self):
            return self.getToken(Cobol85Parser.BY, 0)

        def indexName(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.IndexNameContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.IndexNameContext,i)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_destinationTableClause

        def enterRule(self, listener):
            if hasattr(listener, "enterDestinationTableClause"):
                listener.enterDestinationTableClause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitDestinationTableClause"):
                listener.exitDestinationTableClause(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitDestinationTableClause"):
                return visitor.visitDestinationTableClause(self)
            else:
                return visitor.visitChildren(self)




    def destinationTableClause(self):

        localctx = Cobol85Parser.DestinationTableClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_destinationTableClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2386
            self.match(Cobol85Parser.DESTINATION)
            self.state = 2387
            self.match(Cobol85Parser.TABLE)
            self.state = 2388
            self.match(Cobol85Parser.OCCURS)
            self.state = 2389
            self.integerLiteral()
            self.state = 2390
            self.match(Cobol85Parser.TIMES)
            self.state = 2398
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.INDEXED:
                self.state = 2391
                self.match(Cobol85Parser.INDEXED)
                self.state = 2392
                self.match(Cobol85Parser.BY)
                self.state = 2394 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 2393
                    self.indexName()
                    self.state = 2396 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE) | (1 << Cobol85Parser.AUTO) | (1 << Cobol85Parser.AUTO_SKIP) | (1 << Cobol85Parser.BACKGROUND_COLOR) | (1 << Cobol85Parser.BACKGROUND_COLOUR) | (1 << Cobol85Parser.BEEP) | (1 << Cobol85Parser.BELL) | (1 << Cobol85Parser.BINARY) | (1 << Cobol85Parser.BIT) | (1 << Cobol85Parser.BLINK) | (1 << Cobol85Parser.BLOB) | (1 << Cobol85Parser.BOUNDS) | (1 << Cobol85Parser.CAPABLE) | (1 << Cobol85Parser.CCSVERSION) | (1 << Cobol85Parser.CHANGED) | (1 << Cobol85Parser.CHANNEL))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (Cobol85Parser.CLOB - 67)) | (1 << (Cobol85Parser.CLOSE_DISPOSITION - 67)) | (1 << (Cobol85Parser.COBOL - 67)) | (1 << (Cobol85Parser.COMMITMENT - 67)) | (1 << (Cobol85Parser.CONTROL_POINT - 67)) | (1 << (Cobol85Parser.CONVENTION - 67)) | (1 << (Cobol85Parser.CRUNCH - 67)) | (1 << (Cobol85Parser.CURSOR - 67)) | (1 << (Cobol85Parser.DBCLOB - 67)))) != 0) or ((((_la - 131)) & ~0x3f) == 0 and ((1 << (_la - 131)) & ((1 << (Cobol85Parser.DEFAULT - 131)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 131)) | (1 << (Cobol85Parser.DEFINITION - 131)) | (1 << (Cobol85Parser.DFHRESP - 131)) | (1 << (Cobol85Parser.DFHVALUE - 131)) | (1 << (Cobol85Parser.DISK - 131)) | (1 << (Cobol85Parser.DONTCARE - 131)) | (1 << (Cobol85Parser.DOUBLE - 131)) | (1 << (Cobol85Parser.EBCDIC - 131)) | (1 << (Cobol85Parser.EMPTY_CHECK - 131)) | (1 << (Cobol85Parser.ENTER - 131)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 131)) | (1 << (Cobol85Parser.ERASE - 131)) | (1 << (Cobol85Parser.EOL - 131)) | (1 << (Cobol85Parser.EOS - 131)))) != 0) or ((((_la - 195)) & ~0x3f) == 0 and ((1 << (_la - 195)) & ((1 << (Cobol85Parser.ESCAPE - 195)) | (1 << (Cobol85Parser.EVENT - 195)) | (1 << (Cobol85Parser.EXCLUSIVE - 195)) | (1 << (Cobol85Parser.EXPORT - 195)) | (1 << (Cobol85Parser.EXTENDED - 195)) | (1 << (Cobol85Parser.FOREGROUND_COLOR - 195)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 195)) | (1 << (Cobol85Parser.FULL - 195)) | (1 << (Cobol85Parser.FUNCTIONNAME - 195)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 195)) | (1 << (Cobol85Parser.GRID - 195)) | (1 << (Cobol85Parser.HIGHLIGHT - 195)) | (1 << (Cobol85Parser.IMPLICIT - 195)) | (1 << (Cobol85Parser.IMPORT - 195)) | (1 << (Cobol85Parser.INTEGER - 195)))) != 0) or ((((_la - 262)) & ~0x3f) == 0 and ((1 << (_la - 262)) & ((1 << (Cobol85Parser.KEPT - 262)) | (1 << (Cobol85Parser.KEYBOARD - 262)) | (1 << (Cobol85Parser.LANGUAGE - 262)) | (1 << (Cobol85Parser.LB - 262)) | (1 << (Cobol85Parser.LD - 262)) | (1 << (Cobol85Parser.LEFTLINE - 262)) | (1 << (Cobol85Parser.LENGTH_CHECK - 262)) | (1 << (Cobol85Parser.LIBACCESS - 262)) | (1 << (Cobol85Parser.LIBPARAMETER - 262)) | (1 << (Cobol85Parser.LIBRARY - 262)) | (1 << (Cobol85Parser.LIST - 262)) | (1 << (Cobol85Parser.LOCAL - 262)) | (1 << (Cobol85Parser.LONG_DATE - 262)) | (1 << (Cobol85Parser.LONG_TIME - 262)) | (1 << (Cobol85Parser.LOWER - 262)) | (1 << (Cobol85Parser.LOWLIGHT - 262)) | (1 << (Cobol85Parser.MMDDYYYY - 262)) | (1 << (Cobol85Parser.NAMED - 262)) | (1 << (Cobol85Parser.NATIONAL - 262)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 262)) | (1 << (Cobol85Parser.NETWORK - 262)) | (1 << (Cobol85Parser.NO_ECHO - 262)) | (1 << (Cobol85Parser.NUMERIC_DATE - 262)) | (1 << (Cobol85Parser.NUMERIC_TIME - 262)))) != 0) or ((((_la - 326)) & ~0x3f) == 0 and ((1 << (_la - 326)) & ((1 << (Cobol85Parser.ODT - 326)) | (1 << (Cobol85Parser.ORDERLY - 326)) | (1 << (Cobol85Parser.OVERLINE - 326)) | (1 << (Cobol85Parser.OWN - 326)) | (1 << (Cobol85Parser.PASSWORD - 326)) | (1 << (Cobol85Parser.PORT - 326)) | (1 << (Cobol85Parser.PRINTER - 326)) | (1 << (Cobol85Parser.PRIVATE - 326)) | (1 << (Cobol85Parser.PROCESS - 326)) | (1 << (Cobol85Parser.PROGRAM - 326)) | (1 << (Cobol85Parser.PROMPT - 326)) | (1 << (Cobol85Parser.READER - 326)) | (1 << (Cobol85Parser.REMOTE - 326)) | (1 << (Cobol85Parser.REAL - 326)) | (1 << (Cobol85Parser.RECEIVED - 326)) | (1 << (Cobol85Parser.RECURSIVE - 326)) | (1 << (Cobol85Parser.REF - 326)))) != 0) or ((((_la - 395)) & ~0x3f) == 0 and ((1 << (_la - 395)) & ((1 << (Cobol85Parser.REMOVE - 395)) | (1 << (Cobol85Parser.REQUIRED - 395)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 395)) | (1 << (Cobol85Parser.SAVE - 395)) | (1 << (Cobol85Parser.SECURE - 395)) | (1 << (Cobol85Parser.SHARED - 395)) | (1 << (Cobol85Parser.SHAREDBYALL - 395)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 395)) | (1 << (Cobol85Parser.SHARING - 395)) | (1 << (Cobol85Parser.SHORT_DATE - 395)) | (1 << (Cobol85Parser.SQL - 395)))) != 0) or ((((_la - 471)) & ~0x3f) == 0 and ((1 << (_la - 471)) & ((1 << (Cobol85Parser.SYMBOL - 471)) | (1 << (Cobol85Parser.TASK - 471)) | (1 << (Cobol85Parser.THREAD - 471)) | (1 << (Cobol85Parser.THREAD_LOCAL - 471)) | (1 << (Cobol85Parser.TIMER - 471)) | (1 << (Cobol85Parser.TODAYS_DATE - 471)) | (1 << (Cobol85Parser.TODAYS_NAME - 471)) | (1 << (Cobol85Parser.TRUNCATED - 471)) | (1 << (Cobol85Parser.TYPEDEF - 471)) | (1 << (Cobol85Parser.UNDERLINE - 471)) | (1 << (Cobol85Parser.VIRTUAL - 471)) | (1 << (Cobol85Parser.WAIT - 471)) | (1 << (Cobol85Parser.YEAR - 471)) | (1 << (Cobol85Parser.YYYYMMDD - 471)) | (1 << (Cobol85Parser.YYYYDDD - 471)) | (1 << (Cobol85Parser.ZERO_FILL - 471)))) != 0) or _la==Cobol85Parser.IDENTIFIER):
                        break



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EndKeyClauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.EndKeyClauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def END(self):
            return self.getToken(Cobol85Parser.END, 0)

        def KEY(self):
            return self.getToken(Cobol85Parser.KEY, 0)

        def dataDescName(self):
            return self.getTypedRuleContext(Cobol85Parser.DataDescNameContext,0)


        def IS(self):
            return self.getToken(Cobol85Parser.IS, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_endKeyClause

        def enterRule(self, listener):
            if hasattr(listener, "enterEndKeyClause"):
                listener.enterEndKeyClause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitEndKeyClause"):
                listener.exitEndKeyClause(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitEndKeyClause"):
                return visitor.visitEndKeyClause(self)
            else:
                return visitor.visitChildren(self)




    def endKeyClause(self):

        localctx = Cobol85Parser.EndKeyClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_endKeyClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2400
            self.match(Cobol85Parser.END)
            self.state = 2401
            self.match(Cobol85Parser.KEY)
            self.state = 2403
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.IS:
                self.state = 2402
                self.match(Cobol85Parser.IS)


            self.state = 2405
            self.dataDescName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ErrorKeyClauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.ErrorKeyClauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ERROR(self):
            return self.getToken(Cobol85Parser.ERROR, 0)

        def KEY(self):
            return self.getToken(Cobol85Parser.KEY, 0)

        def dataDescName(self):
            return self.getTypedRuleContext(Cobol85Parser.DataDescNameContext,0)


        def IS(self):
            return self.getToken(Cobol85Parser.IS, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_errorKeyClause

        def enterRule(self, listener):
            if hasattr(listener, "enterErrorKeyClause"):
                listener.enterErrorKeyClause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitErrorKeyClause"):
                listener.exitErrorKeyClause(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitErrorKeyClause"):
                return visitor.visitErrorKeyClause(self)
            else:
                return visitor.visitChildren(self)




    def errorKeyClause(self):

        localctx = Cobol85Parser.ErrorKeyClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_errorKeyClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2407
            self.match(Cobol85Parser.ERROR)
            self.state = 2408
            self.match(Cobol85Parser.KEY)
            self.state = 2410
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.IS:
                self.state = 2409
                self.match(Cobol85Parser.IS)


            self.state = 2412
            self.dataDescName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MessageCountClauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.MessageCountClauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def COUNT(self):
            return self.getToken(Cobol85Parser.COUNT, 0)

        def dataDescName(self):
            return self.getTypedRuleContext(Cobol85Parser.DataDescNameContext,0)


        def MESSAGE(self):
            return self.getToken(Cobol85Parser.MESSAGE, 0)

        def IS(self):
            return self.getToken(Cobol85Parser.IS, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_messageCountClause

        def enterRule(self, listener):
            if hasattr(listener, "enterMessageCountClause"):
                listener.enterMessageCountClause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitMessageCountClause"):
                listener.exitMessageCountClause(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitMessageCountClause"):
                return visitor.visitMessageCountClause(self)
            else:
                return visitor.visitChildren(self)




    def messageCountClause(self):

        localctx = Cobol85Parser.MessageCountClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_messageCountClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2415
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.MESSAGE:
                self.state = 2414
                self.match(Cobol85Parser.MESSAGE)


            self.state = 2417
            self.match(Cobol85Parser.COUNT)
            self.state = 2419
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.IS:
                self.state = 2418
                self.match(Cobol85Parser.IS)


            self.state = 2421
            self.dataDescName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MessageDateClauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.MessageDateClauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def MESSAGE(self):
            return self.getToken(Cobol85Parser.MESSAGE, 0)

        def DATE(self):
            return self.getToken(Cobol85Parser.DATE, 0)

        def dataDescName(self):
            return self.getTypedRuleContext(Cobol85Parser.DataDescNameContext,0)


        def IS(self):
            return self.getToken(Cobol85Parser.IS, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_messageDateClause

        def enterRule(self, listener):
            if hasattr(listener, "enterMessageDateClause"):
                listener.enterMessageDateClause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitMessageDateClause"):
                listener.exitMessageDateClause(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitMessageDateClause"):
                return visitor.visitMessageDateClause(self)
            else:
                return visitor.visitChildren(self)




    def messageDateClause(self):

        localctx = Cobol85Parser.MessageDateClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_messageDateClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2423
            self.match(Cobol85Parser.MESSAGE)
            self.state = 2424
            self.match(Cobol85Parser.DATE)
            self.state = 2426
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.IS:
                self.state = 2425
                self.match(Cobol85Parser.IS)


            self.state = 2428
            self.dataDescName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MessageTimeClauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.MessageTimeClauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def MESSAGE(self):
            return self.getToken(Cobol85Parser.MESSAGE, 0)

        def TIME(self):
            return self.getToken(Cobol85Parser.TIME, 0)

        def dataDescName(self):
            return self.getTypedRuleContext(Cobol85Parser.DataDescNameContext,0)


        def IS(self):
            return self.getToken(Cobol85Parser.IS, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_messageTimeClause

        def enterRule(self, listener):
            if hasattr(listener, "enterMessageTimeClause"):
                listener.enterMessageTimeClause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitMessageTimeClause"):
                listener.exitMessageTimeClause(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitMessageTimeClause"):
                return visitor.visitMessageTimeClause(self)
            else:
                return visitor.visitChildren(self)




    def messageTimeClause(self):

        localctx = Cobol85Parser.MessageTimeClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_messageTimeClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2430
            self.match(Cobol85Parser.MESSAGE)
            self.state = 2431
            self.match(Cobol85Parser.TIME)
            self.state = 2433
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.IS:
                self.state = 2432
                self.match(Cobol85Parser.IS)


            self.state = 2435
            self.dataDescName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StatusKeyClauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.StatusKeyClauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def STATUS(self):
            return self.getToken(Cobol85Parser.STATUS, 0)

        def KEY(self):
            return self.getToken(Cobol85Parser.KEY, 0)

        def dataDescName(self):
            return self.getTypedRuleContext(Cobol85Parser.DataDescNameContext,0)


        def IS(self):
            return self.getToken(Cobol85Parser.IS, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_statusKeyClause

        def enterRule(self, listener):
            if hasattr(listener, "enterStatusKeyClause"):
                listener.enterStatusKeyClause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitStatusKeyClause"):
                listener.exitStatusKeyClause(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitStatusKeyClause"):
                return visitor.visitStatusKeyClause(self)
            else:
                return visitor.visitChildren(self)




    def statusKeyClause(self):

        localctx = Cobol85Parser.StatusKeyClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_statusKeyClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2437
            self.match(Cobol85Parser.STATUS)
            self.state = 2438
            self.match(Cobol85Parser.KEY)
            self.state = 2440
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.IS:
                self.state = 2439
                self.match(Cobol85Parser.IS)


            self.state = 2442
            self.dataDescName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SymbolicDestinationClauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.SymbolicDestinationClauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def DESTINATION(self):
            return self.getToken(Cobol85Parser.DESTINATION, 0)

        def dataDescName(self):
            return self.getTypedRuleContext(Cobol85Parser.DataDescNameContext,0)


        def SYMBOLIC(self):
            return self.getToken(Cobol85Parser.SYMBOLIC, 0)

        def IS(self):
            return self.getToken(Cobol85Parser.IS, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_symbolicDestinationClause

        def enterRule(self, listener):
            if hasattr(listener, "enterSymbolicDestinationClause"):
                listener.enterSymbolicDestinationClause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSymbolicDestinationClause"):
                listener.exitSymbolicDestinationClause(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitSymbolicDestinationClause"):
                return visitor.visitSymbolicDestinationClause(self)
            else:
                return visitor.visitChildren(self)




    def symbolicDestinationClause(self):

        localctx = Cobol85Parser.SymbolicDestinationClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_symbolicDestinationClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2445
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.SYMBOLIC:
                self.state = 2444
                self.match(Cobol85Parser.SYMBOLIC)


            self.state = 2447
            self.match(Cobol85Parser.DESTINATION)
            self.state = 2449
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.IS:
                self.state = 2448
                self.match(Cobol85Parser.IS)


            self.state = 2451
            self.dataDescName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SymbolicQueueClauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.SymbolicQueueClauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def QUEUE(self):
            return self.getToken(Cobol85Parser.QUEUE, 0)

        def dataDescName(self):
            return self.getTypedRuleContext(Cobol85Parser.DataDescNameContext,0)


        def SYMBOLIC(self):
            return self.getToken(Cobol85Parser.SYMBOLIC, 0)

        def IS(self):
            return self.getToken(Cobol85Parser.IS, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_symbolicQueueClause

        def enterRule(self, listener):
            if hasattr(listener, "enterSymbolicQueueClause"):
                listener.enterSymbolicQueueClause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSymbolicQueueClause"):
                listener.exitSymbolicQueueClause(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitSymbolicQueueClause"):
                return visitor.visitSymbolicQueueClause(self)
            else:
                return visitor.visitChildren(self)




    def symbolicQueueClause(self):

        localctx = Cobol85Parser.SymbolicQueueClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_symbolicQueueClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2454
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.SYMBOLIC:
                self.state = 2453
                self.match(Cobol85Parser.SYMBOLIC)


            self.state = 2456
            self.match(Cobol85Parser.QUEUE)
            self.state = 2458
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.IS:
                self.state = 2457
                self.match(Cobol85Parser.IS)


            self.state = 2460
            self.dataDescName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SymbolicSourceClauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.SymbolicSourceClauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def SOURCE(self):
            return self.getToken(Cobol85Parser.SOURCE, 0)

        def dataDescName(self):
            return self.getTypedRuleContext(Cobol85Parser.DataDescNameContext,0)


        def SYMBOLIC(self):
            return self.getToken(Cobol85Parser.SYMBOLIC, 0)

        def IS(self):
            return self.getToken(Cobol85Parser.IS, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_symbolicSourceClause

        def enterRule(self, listener):
            if hasattr(listener, "enterSymbolicSourceClause"):
                listener.enterSymbolicSourceClause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSymbolicSourceClause"):
                listener.exitSymbolicSourceClause(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitSymbolicSourceClause"):
                return visitor.visitSymbolicSourceClause(self)
            else:
                return visitor.visitChildren(self)




    def symbolicSourceClause(self):

        localctx = Cobol85Parser.SymbolicSourceClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_symbolicSourceClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2463
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.SYMBOLIC:
                self.state = 2462
                self.match(Cobol85Parser.SYMBOLIC)


            self.state = 2465
            self.match(Cobol85Parser.SOURCE)
            self.state = 2467
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.IS:
                self.state = 2466
                self.match(Cobol85Parser.IS)


            self.state = 2469
            self.dataDescName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SymbolicTerminalClauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.SymbolicTerminalClauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def TERMINAL(self):
            return self.getToken(Cobol85Parser.TERMINAL, 0)

        def dataDescName(self):
            return self.getTypedRuleContext(Cobol85Parser.DataDescNameContext,0)


        def SYMBOLIC(self):
            return self.getToken(Cobol85Parser.SYMBOLIC, 0)

        def IS(self):
            return self.getToken(Cobol85Parser.IS, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_symbolicTerminalClause

        def enterRule(self, listener):
            if hasattr(listener, "enterSymbolicTerminalClause"):
                listener.enterSymbolicTerminalClause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSymbolicTerminalClause"):
                listener.exitSymbolicTerminalClause(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitSymbolicTerminalClause"):
                return visitor.visitSymbolicTerminalClause(self)
            else:
                return visitor.visitChildren(self)




    def symbolicTerminalClause(self):

        localctx = Cobol85Parser.SymbolicTerminalClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 248, self.RULE_symbolicTerminalClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2472
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.SYMBOLIC:
                self.state = 2471
                self.match(Cobol85Parser.SYMBOLIC)


            self.state = 2474
            self.match(Cobol85Parser.TERMINAL)
            self.state = 2476
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.IS:
                self.state = 2475
                self.match(Cobol85Parser.IS)


            self.state = 2478
            self.dataDescName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SymbolicSubQueueClauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.SymbolicSubQueueClauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def dataDescName(self):
            return self.getTypedRuleContext(Cobol85Parser.DataDescNameContext,0)


        def SUB_QUEUE_1(self):
            return self.getToken(Cobol85Parser.SUB_QUEUE_1, 0)

        def SUB_QUEUE_2(self):
            return self.getToken(Cobol85Parser.SUB_QUEUE_2, 0)

        def SUB_QUEUE_3(self):
            return self.getToken(Cobol85Parser.SUB_QUEUE_3, 0)

        def SYMBOLIC(self):
            return self.getToken(Cobol85Parser.SYMBOLIC, 0)

        def IS(self):
            return self.getToken(Cobol85Parser.IS, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_symbolicSubQueueClause

        def enterRule(self, listener):
            if hasattr(listener, "enterSymbolicSubQueueClause"):
                listener.enterSymbolicSubQueueClause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSymbolicSubQueueClause"):
                listener.exitSymbolicSubQueueClause(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitSymbolicSubQueueClause"):
                return visitor.visitSymbolicSubQueueClause(self)
            else:
                return visitor.visitChildren(self)




    def symbolicSubQueueClause(self):

        localctx = Cobol85Parser.SymbolicSubQueueClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 250, self.RULE_symbolicSubQueueClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2481
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.SYMBOLIC:
                self.state = 2480
                self.match(Cobol85Parser.SYMBOLIC)


            self.state = 2483
            _la = self._input.LA(1)
            if not(((((_la - 465)) & ~0x3f) == 0 and ((1 << (_la - 465)) & ((1 << (Cobol85Parser.SUB_QUEUE_1 - 465)) | (1 << (Cobol85Parser.SUB_QUEUE_2 - 465)) | (1 << (Cobol85Parser.SUB_QUEUE_3 - 465)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2485
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.IS:
                self.state = 2484
                self.match(Cobol85Parser.IS)


            self.state = 2487
            self.dataDescName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TextLengthClauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.TextLengthClauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def TEXT(self):
            return self.getToken(Cobol85Parser.TEXT, 0)

        def LENGTH(self):
            return self.getToken(Cobol85Parser.LENGTH, 0)

        def dataDescName(self):
            return self.getTypedRuleContext(Cobol85Parser.DataDescNameContext,0)


        def IS(self):
            return self.getToken(Cobol85Parser.IS, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_textLengthClause

        def enterRule(self, listener):
            if hasattr(listener, "enterTextLengthClause"):
                listener.enterTextLengthClause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitTextLengthClause"):
                listener.exitTextLengthClause(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitTextLengthClause"):
                return visitor.visitTextLengthClause(self)
            else:
                return visitor.visitChildren(self)




    def textLengthClause(self):

        localctx = Cobol85Parser.TextLengthClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 252, self.RULE_textLengthClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2489
            self.match(Cobol85Parser.TEXT)
            self.state = 2490
            self.match(Cobol85Parser.LENGTH)
            self.state = 2492
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.IS:
                self.state = 2491
                self.match(Cobol85Parser.IS)


            self.state = 2494
            self.dataDescName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LocalStorageSectionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.LocalStorageSectionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def LOCAL_STORAGE(self):
            return self.getToken(Cobol85Parser.LOCAL_STORAGE, 0)

        def SECTION(self):
            return self.getToken(Cobol85Parser.SECTION, 0)

        def DOT_FS(self, i=None):
            if i is None:
                return self.getTokens(Cobol85Parser.DOT_FS)
            else:
                return self.getToken(Cobol85Parser.DOT_FS, i)

        def LD(self):
            return self.getToken(Cobol85Parser.LD, 0)

        def localName(self):
            return self.getTypedRuleContext(Cobol85Parser.LocalNameContext,0)


        def dataDescriptionEntry(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.DataDescriptionEntryContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.DataDescriptionEntryContext,i)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_localStorageSection

        def enterRule(self, listener):
            if hasattr(listener, "enterLocalStorageSection"):
                listener.enterLocalStorageSection(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitLocalStorageSection"):
                listener.exitLocalStorageSection(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitLocalStorageSection"):
                return visitor.visitLocalStorageSection(self)
            else:
                return visitor.visitChildren(self)




    def localStorageSection(self):

        localctx = Cobol85Parser.LocalStorageSectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 254, self.RULE_localStorageSection)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2496
            self.match(Cobol85Parser.LOCAL_STORAGE)
            self.state = 2497
            self.match(Cobol85Parser.SECTION)
            self.state = 2498
            self.match(Cobol85Parser.DOT_FS)
            self.state = 2503
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.LD:
                self.state = 2499
                self.match(Cobol85Parser.LD)
                self.state = 2500
                self.localName()
                self.state = 2501
                self.match(Cobol85Parser.DOT_FS)


            self.state = 2508
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 557)) & ~0x3f) == 0 and ((1 << (_la - 557)) & ((1 << (Cobol85Parser.LEVEL_NUMBER_66 - 557)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 557)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 557)) | (1 << (Cobol85Parser.INTEGERLITERAL - 557)) | (1 << (Cobol85Parser.EXECSQLLINE - 557)))) != 0):
                self.state = 2505
                self.dataDescriptionEntry()
                self.state = 2510
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ScreenSectionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.ScreenSectionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def SCREEN(self):
            return self.getToken(Cobol85Parser.SCREEN, 0)

        def SECTION(self):
            return self.getToken(Cobol85Parser.SECTION, 0)

        def DOT_FS(self):
            return self.getToken(Cobol85Parser.DOT_FS, 0)

        def screenDescriptionEntry(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.ScreenDescriptionEntryContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.ScreenDescriptionEntryContext,i)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_screenSection

        def enterRule(self, listener):
            if hasattr(listener, "enterScreenSection"):
                listener.enterScreenSection(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitScreenSection"):
                listener.exitScreenSection(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitScreenSection"):
                return visitor.visitScreenSection(self)
            else:
                return visitor.visitChildren(self)




    def screenSection(self):

        localctx = Cobol85Parser.ScreenSectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 256, self.RULE_screenSection)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2511
            self.match(Cobol85Parser.SCREEN)
            self.state = 2512
            self.match(Cobol85Parser.SECTION)
            self.state = 2513
            self.match(Cobol85Parser.DOT_FS)
            self.state = 2517
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==Cobol85Parser.INTEGERLITERAL:
                self.state = 2514
                self.screenDescriptionEntry()
                self.state = 2519
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ScreenDescriptionEntryContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.ScreenDescriptionEntryContext, self).__init__(parent, invokingState)
            self.parser = parser

        def INTEGERLITERAL(self):
            return self.getToken(Cobol85Parser.INTEGERLITERAL, 0)

        def DOT_FS(self):
            return self.getToken(Cobol85Parser.DOT_FS, 0)

        def FILLER(self):
            return self.getToken(Cobol85Parser.FILLER, 0)

        def screenName(self):
            return self.getTypedRuleContext(Cobol85Parser.ScreenNameContext,0)


        def screenDescriptionBlankClause(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.ScreenDescriptionBlankClauseContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.ScreenDescriptionBlankClauseContext,i)


        def screenDescriptionBellClause(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.ScreenDescriptionBellClauseContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.ScreenDescriptionBellClauseContext,i)


        def screenDescriptionBlinkClause(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.ScreenDescriptionBlinkClauseContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.ScreenDescriptionBlinkClauseContext,i)


        def screenDescriptionEraseClause(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.ScreenDescriptionEraseClauseContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.ScreenDescriptionEraseClauseContext,i)


        def screenDescriptionLightClause(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.ScreenDescriptionLightClauseContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.ScreenDescriptionLightClauseContext,i)


        def screenDescriptionGridClause(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.ScreenDescriptionGridClauseContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.ScreenDescriptionGridClauseContext,i)


        def screenDescriptionReverseVideoClause(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.ScreenDescriptionReverseVideoClauseContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.ScreenDescriptionReverseVideoClauseContext,i)


        def screenDescriptionUnderlineClause(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.ScreenDescriptionUnderlineClauseContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.ScreenDescriptionUnderlineClauseContext,i)


        def screenDescriptionSizeClause(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.ScreenDescriptionSizeClauseContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.ScreenDescriptionSizeClauseContext,i)


        def screenDescriptionLineClause(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.ScreenDescriptionLineClauseContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.ScreenDescriptionLineClauseContext,i)


        def screenDescriptionColumnClause(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.ScreenDescriptionColumnClauseContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.ScreenDescriptionColumnClauseContext,i)


        def screenDescriptionForegroundColorClause(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.ScreenDescriptionForegroundColorClauseContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.ScreenDescriptionForegroundColorClauseContext,i)


        def screenDescriptionBackgroundColorClause(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.ScreenDescriptionBackgroundColorClauseContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.ScreenDescriptionBackgroundColorClauseContext,i)


        def screenDescriptionControlClause(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.ScreenDescriptionControlClauseContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.ScreenDescriptionControlClauseContext,i)


        def screenDescriptionValueClause(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.ScreenDescriptionValueClauseContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.ScreenDescriptionValueClauseContext,i)


        def screenDescriptionPictureClause(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.ScreenDescriptionPictureClauseContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.ScreenDescriptionPictureClauseContext,i)


        def screenDescriptionUsageClause(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.ScreenDescriptionUsageClauseContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.ScreenDescriptionUsageClauseContext,i)


        def screenDescriptionBlankWhenZeroClause(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.ScreenDescriptionBlankWhenZeroClauseContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.ScreenDescriptionBlankWhenZeroClauseContext,i)


        def screenDescriptionJustifiedClause(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.ScreenDescriptionJustifiedClauseContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.ScreenDescriptionJustifiedClauseContext,i)


        def screenDescriptionSignClause(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.ScreenDescriptionSignClauseContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.ScreenDescriptionSignClauseContext,i)


        def screenDescriptionAutoClause(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.ScreenDescriptionAutoClauseContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.ScreenDescriptionAutoClauseContext,i)


        def screenDescriptionSecureClause(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.ScreenDescriptionSecureClauseContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.ScreenDescriptionSecureClauseContext,i)


        def screenDescriptionRequiredClause(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.ScreenDescriptionRequiredClauseContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.ScreenDescriptionRequiredClauseContext,i)


        def screenDescriptionPromptClause(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.ScreenDescriptionPromptClauseContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.ScreenDescriptionPromptClauseContext,i)


        def screenDescriptionFullClause(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.ScreenDescriptionFullClauseContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.ScreenDescriptionFullClauseContext,i)


        def screenDescriptionZeroFillClause(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.ScreenDescriptionZeroFillClauseContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.ScreenDescriptionZeroFillClauseContext,i)


        def screenDescriptionFromClause(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.ScreenDescriptionFromClauseContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.ScreenDescriptionFromClauseContext,i)


        def screenDescriptionUsingClause(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.ScreenDescriptionUsingClauseContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.ScreenDescriptionUsingClauseContext,i)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_screenDescriptionEntry

        def enterRule(self, listener):
            if hasattr(listener, "enterScreenDescriptionEntry"):
                listener.enterScreenDescriptionEntry(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitScreenDescriptionEntry"):
                listener.exitScreenDescriptionEntry(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitScreenDescriptionEntry"):
                return visitor.visitScreenDescriptionEntry(self)
            else:
                return visitor.visitChildren(self)




    def screenDescriptionEntry(self):

        localctx = Cobol85Parser.ScreenDescriptionEntryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 258, self.RULE_screenDescriptionEntry)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2520
            self.match(Cobol85Parser.INTEGERLITERAL)
            self.state = 2523
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,272,self._ctx)
            if la_ == 1:
                self.state = 2521
                self.match(Cobol85Parser.FILLER)

            elif la_ == 2:
                self.state = 2522
                self.screenName()


            self.state = 2557
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 33)) & ~0x3f) == 0 and ((1 << (_la - 33)) & ((1 << (Cobol85Parser.AUTO - 33)) | (1 << (Cobol85Parser.AUTO_SKIP - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOR - 33)) | (1 << (Cobol85Parser.BACKGROUND_COLOUR - 33)) | (1 << (Cobol85Parser.BEEP - 33)) | (1 << (Cobol85Parser.BELL - 33)) | (1 << (Cobol85Parser.BLANK - 33)) | (1 << (Cobol85Parser.BLINK - 33)) | (1 << (Cobol85Parser.COL - 33)) | (1 << (Cobol85Parser.COLUMN - 33)))) != 0) or _la==Cobol85Parser.CONTROL or _la==Cobol85Parser.EMPTY_CHECK or ((((_la - 191)) & ~0x3f) == 0 and ((1 << (_la - 191)) & ((1 << (Cobol85Parser.ERASE - 191)) | (1 << (Cobol85Parser.FOREGROUND_COLOR - 191)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 191)) | (1 << (Cobol85Parser.FROM - 191)) | (1 << (Cobol85Parser.FULL - 191)) | (1 << (Cobol85Parser.GRID - 191)) | (1 << (Cobol85Parser.HIGHLIGHT - 191)))) != 0) or ((((_la - 259)) & ~0x3f) == 0 and ((1 << (_la - 259)) & ((1 << (Cobol85Parser.JUST - 259)) | (1 << (Cobol85Parser.JUSTIFIED - 259)) | (1 << (Cobol85Parser.LEADING - 259)) | (1 << (Cobol85Parser.LEFTLINE - 259)) | (1 << (Cobol85Parser.LENGTH_CHECK - 259)) | (1 << (Cobol85Parser.LINE - 259)) | (1 << (Cobol85Parser.LOWLIGHT - 259)) | (1 << (Cobol85Parser.NO_ECHO - 259)))) != 0) or ((((_la - 340)) & ~0x3f) == 0 and ((1 << (_la - 340)) & ((1 << (Cobol85Parser.OVERLINE - 340)) | (1 << (Cobol85Parser.PIC - 340)) | (1 << (Cobol85Parser.PICTURE - 340)) | (1 << (Cobol85Parser.PROMPT - 340)) | (1 << (Cobol85Parser.REQUIRED - 340)))) != 0) or ((((_la - 405)) & ~0x3f) == 0 and ((1 << (_la - 405)) & ((1 << (Cobol85Parser.REVERSE_VIDEO - 405)) | (1 << (Cobol85Parser.SECURE - 405)) | (1 << (Cobol85Parser.SIGN - 405)) | (1 << (Cobol85Parser.SIZE - 405)))) != 0) or ((((_la - 498)) & ~0x3f) == 0 and ((1 << (_la - 498)) & ((1 << (Cobol85Parser.TRAILING - 498)) | (1 << (Cobol85Parser.UNDERLINE - 498)) | (1 << (Cobol85Parser.USAGE - 498)) | (1 << (Cobol85Parser.USING - 498)) | (1 << (Cobol85Parser.VALUE - 498)) | (1 << (Cobol85Parser.ZERO_FILL - 498)))) != 0):
                self.state = 2555
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,274,self._ctx)
                if la_ == 1:
                    self.state = 2525
                    self.screenDescriptionBlankClause()
                    pass

                elif la_ == 2:
                    self.state = 2526
                    self.screenDescriptionBellClause()
                    pass

                elif la_ == 3:
                    self.state = 2527
                    self.screenDescriptionBlinkClause()
                    pass

                elif la_ == 4:
                    self.state = 2528
                    self.screenDescriptionEraseClause()
                    pass

                elif la_ == 5:
                    self.state = 2529
                    self.screenDescriptionLightClause()
                    pass

                elif la_ == 6:
                    self.state = 2530
                    self.screenDescriptionGridClause()
                    pass

                elif la_ == 7:
                    self.state = 2531
                    self.screenDescriptionReverseVideoClause()
                    pass

                elif la_ == 8:
                    self.state = 2532
                    self.screenDescriptionUnderlineClause()
                    pass

                elif la_ == 9:
                    self.state = 2533
                    self.screenDescriptionSizeClause()
                    pass

                elif la_ == 10:
                    self.state = 2534
                    self.screenDescriptionLineClause()
                    pass

                elif la_ == 11:
                    self.state = 2535
                    self.screenDescriptionColumnClause()
                    pass

                elif la_ == 12:
                    self.state = 2536
                    self.screenDescriptionForegroundColorClause()
                    pass

                elif la_ == 13:
                    self.state = 2537
                    self.screenDescriptionBackgroundColorClause()
                    pass

                elif la_ == 14:
                    self.state = 2538
                    self.screenDescriptionControlClause()
                    pass

                elif la_ == 15:
                    self.state = 2539
                    self.screenDescriptionValueClause()
                    pass

                elif la_ == 16:
                    self.state = 2540
                    self.screenDescriptionPictureClause()
                    pass

                elif la_ == 17:
                    self.state = 2543
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [Cobol85Parser.FROM]:
                        self.state = 2541
                        self.screenDescriptionFromClause()
                        pass
                    elif token in [Cobol85Parser.USING]:
                        self.state = 2542
                        self.screenDescriptionUsingClause()
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass

                elif la_ == 18:
                    self.state = 2545
                    self.screenDescriptionUsageClause()
                    pass

                elif la_ == 19:
                    self.state = 2546
                    self.screenDescriptionBlankWhenZeroClause()
                    pass

                elif la_ == 20:
                    self.state = 2547
                    self.screenDescriptionJustifiedClause()
                    pass

                elif la_ == 21:
                    self.state = 2548
                    self.screenDescriptionSignClause()
                    pass

                elif la_ == 22:
                    self.state = 2549
                    self.screenDescriptionAutoClause()
                    pass

                elif la_ == 23:
                    self.state = 2550
                    self.screenDescriptionSecureClause()
                    pass

                elif la_ == 24:
                    self.state = 2551
                    self.screenDescriptionRequiredClause()
                    pass

                elif la_ == 25:
                    self.state = 2552
                    self.screenDescriptionPromptClause()
                    pass

                elif la_ == 26:
                    self.state = 2553
                    self.screenDescriptionFullClause()
                    pass

                elif la_ == 27:
                    self.state = 2554
                    self.screenDescriptionZeroFillClause()
                    pass


                self.state = 2559
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2560
            self.match(Cobol85Parser.DOT_FS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ScreenDescriptionBlankClauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.ScreenDescriptionBlankClauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def BLANK(self):
            return self.getToken(Cobol85Parser.BLANK, 0)

        def SCREEN(self):
            return self.getToken(Cobol85Parser.SCREEN, 0)

        def LINE(self):
            return self.getToken(Cobol85Parser.LINE, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_screenDescriptionBlankClause

        def enterRule(self, listener):
            if hasattr(listener, "enterScreenDescriptionBlankClause"):
                listener.enterScreenDescriptionBlankClause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitScreenDescriptionBlankClause"):
                listener.exitScreenDescriptionBlankClause(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitScreenDescriptionBlankClause"):
                return visitor.visitScreenDescriptionBlankClause(self)
            else:
                return visitor.visitChildren(self)




    def screenDescriptionBlankClause(self):

        localctx = Cobol85Parser.ScreenDescriptionBlankClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 260, self.RULE_screenDescriptionBlankClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2562
            self.match(Cobol85Parser.BLANK)
            self.state = 2563
            _la = self._input.LA(1)
            if not(_la==Cobol85Parser.LINE or _la==Cobol85Parser.SCREEN):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ScreenDescriptionBellClauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.ScreenDescriptionBellClauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def BELL(self):
            return self.getToken(Cobol85Parser.BELL, 0)

        def BEEP(self):
            return self.getToken(Cobol85Parser.BEEP, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_screenDescriptionBellClause

        def enterRule(self, listener):
            if hasattr(listener, "enterScreenDescriptionBellClause"):
                listener.enterScreenDescriptionBellClause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitScreenDescriptionBellClause"):
                listener.exitScreenDescriptionBellClause(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitScreenDescriptionBellClause"):
                return visitor.visitScreenDescriptionBellClause(self)
            else:
                return visitor.visitChildren(self)




    def screenDescriptionBellClause(self):

        localctx = Cobol85Parser.ScreenDescriptionBellClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 262, self.RULE_screenDescriptionBellClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2565
            _la = self._input.LA(1)
            if not(_la==Cobol85Parser.BEEP or _la==Cobol85Parser.BELL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ScreenDescriptionBlinkClauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.ScreenDescriptionBlinkClauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def BLINK(self):
            return self.getToken(Cobol85Parser.BLINK, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_screenDescriptionBlinkClause

        def enterRule(self, listener):
            if hasattr(listener, "enterScreenDescriptionBlinkClause"):
                listener.enterScreenDescriptionBlinkClause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitScreenDescriptionBlinkClause"):
                listener.exitScreenDescriptionBlinkClause(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitScreenDescriptionBlinkClause"):
                return visitor.visitScreenDescriptionBlinkClause(self)
            else:
                return visitor.visitChildren(self)




    def screenDescriptionBlinkClause(self):

        localctx = Cobol85Parser.ScreenDescriptionBlinkClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 264, self.RULE_screenDescriptionBlinkClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2567
            self.match(Cobol85Parser.BLINK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ScreenDescriptionEraseClauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.ScreenDescriptionEraseClauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ERASE(self):
            return self.getToken(Cobol85Parser.ERASE, 0)

        def EOL(self):
            return self.getToken(Cobol85Parser.EOL, 0)

        def EOS(self):
            return self.getToken(Cobol85Parser.EOS, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_screenDescriptionEraseClause

        def enterRule(self, listener):
            if hasattr(listener, "enterScreenDescriptionEraseClause"):
                listener.enterScreenDescriptionEraseClause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitScreenDescriptionEraseClause"):
                listener.exitScreenDescriptionEraseClause(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitScreenDescriptionEraseClause"):
                return visitor.visitScreenDescriptionEraseClause(self)
            else:
                return visitor.visitChildren(self)




    def screenDescriptionEraseClause(self):

        localctx = Cobol85Parser.ScreenDescriptionEraseClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 266, self.RULE_screenDescriptionEraseClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2569
            self.match(Cobol85Parser.ERASE)
            self.state = 2570
            _la = self._input.LA(1)
            if not(_la==Cobol85Parser.EOL or _la==Cobol85Parser.EOS):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ScreenDescriptionLightClauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.ScreenDescriptionLightClauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def HIGHLIGHT(self):
            return self.getToken(Cobol85Parser.HIGHLIGHT, 0)

        def LOWLIGHT(self):
            return self.getToken(Cobol85Parser.LOWLIGHT, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_screenDescriptionLightClause

        def enterRule(self, listener):
            if hasattr(listener, "enterScreenDescriptionLightClause"):
                listener.enterScreenDescriptionLightClause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitScreenDescriptionLightClause"):
                listener.exitScreenDescriptionLightClause(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitScreenDescriptionLightClause"):
                return visitor.visitScreenDescriptionLightClause(self)
            else:
                return visitor.visitChildren(self)




    def screenDescriptionLightClause(self):

        localctx = Cobol85Parser.ScreenDescriptionLightClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 268, self.RULE_screenDescriptionLightClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2572
            _la = self._input.LA(1)
            if not(_la==Cobol85Parser.HIGHLIGHT or _la==Cobol85Parser.LOWLIGHT):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ScreenDescriptionGridClauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.ScreenDescriptionGridClauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def GRID(self):
            return self.getToken(Cobol85Parser.GRID, 0)

        def LEFTLINE(self):
            return self.getToken(Cobol85Parser.LEFTLINE, 0)

        def OVERLINE(self):
            return self.getToken(Cobol85Parser.OVERLINE, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_screenDescriptionGridClause

        def enterRule(self, listener):
            if hasattr(listener, "enterScreenDescriptionGridClause"):
                listener.enterScreenDescriptionGridClause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitScreenDescriptionGridClause"):
                listener.exitScreenDescriptionGridClause(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitScreenDescriptionGridClause"):
                return visitor.visitScreenDescriptionGridClause(self)
            else:
                return visitor.visitChildren(self)




    def screenDescriptionGridClause(self):

        localctx = Cobol85Parser.ScreenDescriptionGridClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 270, self.RULE_screenDescriptionGridClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2574
            _la = self._input.LA(1)
            if not(_la==Cobol85Parser.GRID or _la==Cobol85Parser.LEFTLINE or _la==Cobol85Parser.OVERLINE):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ScreenDescriptionReverseVideoClauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.ScreenDescriptionReverseVideoClauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def REVERSE_VIDEO(self):
            return self.getToken(Cobol85Parser.REVERSE_VIDEO, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_screenDescriptionReverseVideoClause

        def enterRule(self, listener):
            if hasattr(listener, "enterScreenDescriptionReverseVideoClause"):
                listener.enterScreenDescriptionReverseVideoClause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitScreenDescriptionReverseVideoClause"):
                listener.exitScreenDescriptionReverseVideoClause(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitScreenDescriptionReverseVideoClause"):
                return visitor.visitScreenDescriptionReverseVideoClause(self)
            else:
                return visitor.visitChildren(self)




    def screenDescriptionReverseVideoClause(self):

        localctx = Cobol85Parser.ScreenDescriptionReverseVideoClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 272, self.RULE_screenDescriptionReverseVideoClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2576
            self.match(Cobol85Parser.REVERSE_VIDEO)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ScreenDescriptionUnderlineClauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.ScreenDescriptionUnderlineClauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def UNDERLINE(self):
            return self.getToken(Cobol85Parser.UNDERLINE, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_screenDescriptionUnderlineClause

        def enterRule(self, listener):
            if hasattr(listener, "enterScreenDescriptionUnderlineClause"):
                listener.enterScreenDescriptionUnderlineClause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitScreenDescriptionUnderlineClause"):
                listener.exitScreenDescriptionUnderlineClause(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitScreenDescriptionUnderlineClause"):
                return visitor.visitScreenDescriptionUnderlineClause(self)
            else:
                return visitor.visitChildren(self)




    def screenDescriptionUnderlineClause(self):

        localctx = Cobol85Parser.ScreenDescriptionUnderlineClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 274, self.RULE_screenDescriptionUnderlineClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2578
            self.match(Cobol85Parser.UNDERLINE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ScreenDescriptionSizeClauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.ScreenDescriptionSizeClauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def SIZE(self):
            return self.getToken(Cobol85Parser.SIZE, 0)

        def identifier(self):
            return self.getTypedRuleContext(Cobol85Parser.IdentifierContext,0)


        def integerLiteral(self):
            return self.getTypedRuleContext(Cobol85Parser.IntegerLiteralContext,0)


        def IS(self):
            return self.getToken(Cobol85Parser.IS, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_screenDescriptionSizeClause

        def enterRule(self, listener):
            if hasattr(listener, "enterScreenDescriptionSizeClause"):
                listener.enterScreenDescriptionSizeClause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitScreenDescriptionSizeClause"):
                listener.exitScreenDescriptionSizeClause(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitScreenDescriptionSizeClause"):
                return visitor.visitScreenDescriptionSizeClause(self)
            else:
                return visitor.visitChildren(self)




    def screenDescriptionSizeClause(self):

        localctx = Cobol85Parser.ScreenDescriptionSizeClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 276, self.RULE_screenDescriptionSizeClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2580
            self.match(Cobol85Parser.SIZE)
            self.state = 2582
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.IS:
                self.state = 2581
                self.match(Cobol85Parser.IS)


            self.state = 2586
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,277,self._ctx)
            if la_ == 1:
                self.state = 2584
                self.identifier()
                pass

            elif la_ == 2:
                self.state = 2585
                self.integerLiteral()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ScreenDescriptionLineClauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.ScreenDescriptionLineClauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def LINE(self):
            return self.getToken(Cobol85Parser.LINE, 0)

        def identifier(self):
            return self.getTypedRuleContext(Cobol85Parser.IdentifierContext,0)


        def integerLiteral(self):
            return self.getTypedRuleContext(Cobol85Parser.IntegerLiteralContext,0)


        def PLUS(self):
            return self.getToken(Cobol85Parser.PLUS, 0)

        def PLUSCHAR(self):
            return self.getToken(Cobol85Parser.PLUSCHAR, 0)

        def MINUSCHAR(self):
            return self.getToken(Cobol85Parser.MINUSCHAR, 0)

        def NUMBER(self):
            return self.getToken(Cobol85Parser.NUMBER, 0)

        def IS(self):
            return self.getToken(Cobol85Parser.IS, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_screenDescriptionLineClause

        def enterRule(self, listener):
            if hasattr(listener, "enterScreenDescriptionLineClause"):
                listener.enterScreenDescriptionLineClause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitScreenDescriptionLineClause"):
                listener.exitScreenDescriptionLineClause(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitScreenDescriptionLineClause"):
                return visitor.visitScreenDescriptionLineClause(self)
            else:
                return visitor.visitChildren(self)




    def screenDescriptionLineClause(self):

        localctx = Cobol85Parser.ScreenDescriptionLineClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 278, self.RULE_screenDescriptionLineClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2588
            self.match(Cobol85Parser.LINE)
            self.state = 2596
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.IS or _la==Cobol85Parser.NUMBER or _la==Cobol85Parser.PLUS or _la==Cobol85Parser.MINUSCHAR or _la==Cobol85Parser.PLUSCHAR:
                self.state = 2590
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Cobol85Parser.NUMBER:
                    self.state = 2589
                    self.match(Cobol85Parser.NUMBER)


                self.state = 2593
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Cobol85Parser.IS:
                    self.state = 2592
                    self.match(Cobol85Parser.IS)


                self.state = 2595
                _la = self._input.LA(1)
                if not(_la==Cobol85Parser.PLUS or _la==Cobol85Parser.MINUSCHAR or _la==Cobol85Parser.PLUSCHAR):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 2600
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,281,self._ctx)
            if la_ == 1:
                self.state = 2598
                self.identifier()
                pass

            elif la_ == 2:
                self.state = 2599
                self.integerLiteral()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ScreenDescriptionColumnClauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.ScreenDescriptionColumnClauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def COLUMN(self):
            return self.getToken(Cobol85Parser.COLUMN, 0)

        def COL(self):
            return self.getToken(Cobol85Parser.COL, 0)

        def identifier(self):
            return self.getTypedRuleContext(Cobol85Parser.IdentifierContext,0)


        def integerLiteral(self):
            return self.getTypedRuleContext(Cobol85Parser.IntegerLiteralContext,0)


        def PLUS(self):
            return self.getToken(Cobol85Parser.PLUS, 0)

        def PLUSCHAR(self):
            return self.getToken(Cobol85Parser.PLUSCHAR, 0)

        def MINUSCHAR(self):
            return self.getToken(Cobol85Parser.MINUSCHAR, 0)

        def NUMBER(self):
            return self.getToken(Cobol85Parser.NUMBER, 0)

        def IS(self):
            return self.getToken(Cobol85Parser.IS, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_screenDescriptionColumnClause

        def enterRule(self, listener):
            if hasattr(listener, "enterScreenDescriptionColumnClause"):
                listener.enterScreenDescriptionColumnClause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitScreenDescriptionColumnClause"):
                listener.exitScreenDescriptionColumnClause(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitScreenDescriptionColumnClause"):
                return visitor.visitScreenDescriptionColumnClause(self)
            else:
                return visitor.visitChildren(self)




    def screenDescriptionColumnClause(self):

        localctx = Cobol85Parser.ScreenDescriptionColumnClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 280, self.RULE_screenDescriptionColumnClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2602
            _la = self._input.LA(1)
            if not(_la==Cobol85Parser.COL or _la==Cobol85Parser.COLUMN):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2610
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.IS or _la==Cobol85Parser.NUMBER or _la==Cobol85Parser.PLUS or _la==Cobol85Parser.MINUSCHAR or _la==Cobol85Parser.PLUSCHAR:
                self.state = 2604
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Cobol85Parser.NUMBER:
                    self.state = 2603
                    self.match(Cobol85Parser.NUMBER)


                self.state = 2607
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Cobol85Parser.IS:
                    self.state = 2606
                    self.match(Cobol85Parser.IS)


                self.state = 2609
                _la = self._input.LA(1)
                if not(_la==Cobol85Parser.PLUS or _la==Cobol85Parser.MINUSCHAR or _la==Cobol85Parser.PLUSCHAR):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 2614
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,285,self._ctx)
            if la_ == 1:
                self.state = 2612
                self.identifier()
                pass

            elif la_ == 2:
                self.state = 2613
                self.integerLiteral()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ScreenDescriptionForegroundColorClauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.ScreenDescriptionForegroundColorClauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def FOREGROUND_COLOR(self):
            return self.getToken(Cobol85Parser.FOREGROUND_COLOR, 0)

        def FOREGROUND_COLOUR(self):
            return self.getToken(Cobol85Parser.FOREGROUND_COLOUR, 0)

        def identifier(self):
            return self.getTypedRuleContext(Cobol85Parser.IdentifierContext,0)


        def integerLiteral(self):
            return self.getTypedRuleContext(Cobol85Parser.IntegerLiteralContext,0)


        def IS(self):
            return self.getToken(Cobol85Parser.IS, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_screenDescriptionForegroundColorClause

        def enterRule(self, listener):
            if hasattr(listener, "enterScreenDescriptionForegroundColorClause"):
                listener.enterScreenDescriptionForegroundColorClause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitScreenDescriptionForegroundColorClause"):
                listener.exitScreenDescriptionForegroundColorClause(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitScreenDescriptionForegroundColorClause"):
                return visitor.visitScreenDescriptionForegroundColorClause(self)
            else:
                return visitor.visitChildren(self)




    def screenDescriptionForegroundColorClause(self):

        localctx = Cobol85Parser.ScreenDescriptionForegroundColorClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 282, self.RULE_screenDescriptionForegroundColorClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2616
            _la = self._input.LA(1)
            if not(_la==Cobol85Parser.FOREGROUND_COLOR or _la==Cobol85Parser.FOREGROUND_COLOUR):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2618
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.IS:
                self.state = 2617
                self.match(Cobol85Parser.IS)


            self.state = 2622
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,287,self._ctx)
            if la_ == 1:
                self.state = 2620
                self.identifier()
                pass

            elif la_ == 2:
                self.state = 2621
                self.integerLiteral()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ScreenDescriptionBackgroundColorClauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.ScreenDescriptionBackgroundColorClauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def BACKGROUND_COLOR(self):
            return self.getToken(Cobol85Parser.BACKGROUND_COLOR, 0)

        def BACKGROUND_COLOUR(self):
            return self.getToken(Cobol85Parser.BACKGROUND_COLOUR, 0)

        def identifier(self):
            return self.getTypedRuleContext(Cobol85Parser.IdentifierContext,0)


        def integerLiteral(self):
            return self.getTypedRuleContext(Cobol85Parser.IntegerLiteralContext,0)


        def IS(self):
            return self.getToken(Cobol85Parser.IS, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_screenDescriptionBackgroundColorClause

        def enterRule(self, listener):
            if hasattr(listener, "enterScreenDescriptionBackgroundColorClause"):
                listener.enterScreenDescriptionBackgroundColorClause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitScreenDescriptionBackgroundColorClause"):
                listener.exitScreenDescriptionBackgroundColorClause(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitScreenDescriptionBackgroundColorClause"):
                return visitor.visitScreenDescriptionBackgroundColorClause(self)
            else:
                return visitor.visitChildren(self)




    def screenDescriptionBackgroundColorClause(self):

        localctx = Cobol85Parser.ScreenDescriptionBackgroundColorClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 284, self.RULE_screenDescriptionBackgroundColorClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2624
            _la = self._input.LA(1)
            if not(_la==Cobol85Parser.BACKGROUND_COLOR or _la==Cobol85Parser.BACKGROUND_COLOUR):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2626
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.IS:
                self.state = 2625
                self.match(Cobol85Parser.IS)


            self.state = 2630
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,289,self._ctx)
            if la_ == 1:
                self.state = 2628
                self.identifier()
                pass

            elif la_ == 2:
                self.state = 2629
                self.integerLiteral()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ScreenDescriptionControlClauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.ScreenDescriptionControlClauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def CONTROL(self):
            return self.getToken(Cobol85Parser.CONTROL, 0)

        def identifier(self):
            return self.getTypedRuleContext(Cobol85Parser.IdentifierContext,0)


        def IS(self):
            return self.getToken(Cobol85Parser.IS, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_screenDescriptionControlClause

        def enterRule(self, listener):
            if hasattr(listener, "enterScreenDescriptionControlClause"):
                listener.enterScreenDescriptionControlClause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitScreenDescriptionControlClause"):
                listener.exitScreenDescriptionControlClause(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitScreenDescriptionControlClause"):
                return visitor.visitScreenDescriptionControlClause(self)
            else:
                return visitor.visitChildren(self)




    def screenDescriptionControlClause(self):

        localctx = Cobol85Parser.ScreenDescriptionControlClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 286, self.RULE_screenDescriptionControlClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2632
            self.match(Cobol85Parser.CONTROL)
            self.state = 2634
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.IS:
                self.state = 2633
                self.match(Cobol85Parser.IS)


            self.state = 2636
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ScreenDescriptionValueClauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.ScreenDescriptionValueClauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def literal(self):
            return self.getTypedRuleContext(Cobol85Parser.LiteralContext,0)


        def VALUE(self):
            return self.getToken(Cobol85Parser.VALUE, 0)

        def IS(self):
            return self.getToken(Cobol85Parser.IS, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_screenDescriptionValueClause

        def enterRule(self, listener):
            if hasattr(listener, "enterScreenDescriptionValueClause"):
                listener.enterScreenDescriptionValueClause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitScreenDescriptionValueClause"):
                listener.exitScreenDescriptionValueClause(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitScreenDescriptionValueClause"):
                return visitor.visitScreenDescriptionValueClause(self)
            else:
                return visitor.visitChildren(self)




    def screenDescriptionValueClause(self):

        localctx = Cobol85Parser.ScreenDescriptionValueClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 288, self.RULE_screenDescriptionValueClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2638
            self.match(Cobol85Parser.VALUE)
            self.state = 2640
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.IS:
                self.state = 2639
                self.match(Cobol85Parser.IS)


            self.state = 2642
            self.literal()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ScreenDescriptionPictureClauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.ScreenDescriptionPictureClauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def pictureString(self):
            return self.getTypedRuleContext(Cobol85Parser.PictureStringContext,0)


        def PICTURE(self):
            return self.getToken(Cobol85Parser.PICTURE, 0)

        def PIC(self):
            return self.getToken(Cobol85Parser.PIC, 0)

        def IS(self):
            return self.getToken(Cobol85Parser.IS, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_screenDescriptionPictureClause

        def enterRule(self, listener):
            if hasattr(listener, "enterScreenDescriptionPictureClause"):
                listener.enterScreenDescriptionPictureClause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitScreenDescriptionPictureClause"):
                listener.exitScreenDescriptionPictureClause(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitScreenDescriptionPictureClause"):
                return visitor.visitScreenDescriptionPictureClause(self)
            else:
                return visitor.visitChildren(self)




    def screenDescriptionPictureClause(self):

        localctx = Cobol85Parser.ScreenDescriptionPictureClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 290, self.RULE_screenDescriptionPictureClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2644
            _la = self._input.LA(1)
            if not(_la==Cobol85Parser.PIC or _la==Cobol85Parser.PICTURE):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2646
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.IS:
                self.state = 2645
                self.match(Cobol85Parser.IS)


            self.state = 2648
            self.pictureString()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ScreenDescriptionFromClauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.ScreenDescriptionFromClauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def FROM(self):
            return self.getToken(Cobol85Parser.FROM, 0)

        def identifier(self):
            return self.getTypedRuleContext(Cobol85Parser.IdentifierContext,0)


        def literal(self):
            return self.getTypedRuleContext(Cobol85Parser.LiteralContext,0)


        def screenDescriptionToClause(self):
            return self.getTypedRuleContext(Cobol85Parser.ScreenDescriptionToClauseContext,0)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_screenDescriptionFromClause

        def enterRule(self, listener):
            if hasattr(listener, "enterScreenDescriptionFromClause"):
                listener.enterScreenDescriptionFromClause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitScreenDescriptionFromClause"):
                listener.exitScreenDescriptionFromClause(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitScreenDescriptionFromClause"):
                return visitor.visitScreenDescriptionFromClause(self)
            else:
                return visitor.visitChildren(self)




    def screenDescriptionFromClause(self):

        localctx = Cobol85Parser.ScreenDescriptionFromClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 292, self.RULE_screenDescriptionFromClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2650
            self.match(Cobol85Parser.FROM)
            self.state = 2653
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,293,self._ctx)
            if la_ == 1:
                self.state = 2651
                self.identifier()
                pass

            elif la_ == 2:
                self.state = 2652
                self.literal()
                pass


            self.state = 2656
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.TO:
                self.state = 2655
                self.screenDescriptionToClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ScreenDescriptionToClauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.ScreenDescriptionToClauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def TO(self):
            return self.getToken(Cobol85Parser.TO, 0)

        def identifier(self):
            return self.getTypedRuleContext(Cobol85Parser.IdentifierContext,0)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_screenDescriptionToClause

        def enterRule(self, listener):
            if hasattr(listener, "enterScreenDescriptionToClause"):
                listener.enterScreenDescriptionToClause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitScreenDescriptionToClause"):
                listener.exitScreenDescriptionToClause(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitScreenDescriptionToClause"):
                return visitor.visitScreenDescriptionToClause(self)
            else:
                return visitor.visitChildren(self)




    def screenDescriptionToClause(self):

        localctx = Cobol85Parser.ScreenDescriptionToClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 294, self.RULE_screenDescriptionToClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2658
            self.match(Cobol85Parser.TO)
            self.state = 2659
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ScreenDescriptionUsingClauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.ScreenDescriptionUsingClauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def USING(self):
            return self.getToken(Cobol85Parser.USING, 0)

        def identifier(self):
            return self.getTypedRuleContext(Cobol85Parser.IdentifierContext,0)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_screenDescriptionUsingClause

        def enterRule(self, listener):
            if hasattr(listener, "enterScreenDescriptionUsingClause"):
                listener.enterScreenDescriptionUsingClause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitScreenDescriptionUsingClause"):
                listener.exitScreenDescriptionUsingClause(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitScreenDescriptionUsingClause"):
                return visitor.visitScreenDescriptionUsingClause(self)
            else:
                return visitor.visitChildren(self)




    def screenDescriptionUsingClause(self):

        localctx = Cobol85Parser.ScreenDescriptionUsingClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 296, self.RULE_screenDescriptionUsingClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2661
            self.match(Cobol85Parser.USING)
            self.state = 2662
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ScreenDescriptionUsageClauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.ScreenDescriptionUsageClauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def DISPLAY(self):
            return self.getToken(Cobol85Parser.DISPLAY, 0)

        def DISPLAY_1(self):
            return self.getToken(Cobol85Parser.DISPLAY_1, 0)

        def USAGE(self):
            return self.getToken(Cobol85Parser.USAGE, 0)

        def IS(self):
            return self.getToken(Cobol85Parser.IS, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_screenDescriptionUsageClause

        def enterRule(self, listener):
            if hasattr(listener, "enterScreenDescriptionUsageClause"):
                listener.enterScreenDescriptionUsageClause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitScreenDescriptionUsageClause"):
                listener.exitScreenDescriptionUsageClause(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitScreenDescriptionUsageClause"):
                return visitor.visitScreenDescriptionUsageClause(self)
            else:
                return visitor.visitChildren(self)




    def screenDescriptionUsageClause(self):

        localctx = Cobol85Parser.ScreenDescriptionUsageClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 298, self.RULE_screenDescriptionUsageClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2664
            self.match(Cobol85Parser.USAGE)
            self.state = 2666
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.IS:
                self.state = 2665
                self.match(Cobol85Parser.IS)


            self.state = 2668
            _la = self._input.LA(1)
            if not(_la==Cobol85Parser.DISPLAY or _la==Cobol85Parser.DISPLAY_1):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ScreenDescriptionBlankWhenZeroClauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.ScreenDescriptionBlankWhenZeroClauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def BLANK(self):
            return self.getToken(Cobol85Parser.BLANK, 0)

        def ZERO(self):
            return self.getToken(Cobol85Parser.ZERO, 0)

        def WHEN(self):
            return self.getToken(Cobol85Parser.WHEN, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_screenDescriptionBlankWhenZeroClause

        def enterRule(self, listener):
            if hasattr(listener, "enterScreenDescriptionBlankWhenZeroClause"):
                listener.enterScreenDescriptionBlankWhenZeroClause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitScreenDescriptionBlankWhenZeroClause"):
                listener.exitScreenDescriptionBlankWhenZeroClause(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitScreenDescriptionBlankWhenZeroClause"):
                return visitor.visitScreenDescriptionBlankWhenZeroClause(self)
            else:
                return visitor.visitChildren(self)




    def screenDescriptionBlankWhenZeroClause(self):

        localctx = Cobol85Parser.ScreenDescriptionBlankWhenZeroClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 300, self.RULE_screenDescriptionBlankWhenZeroClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2670
            self.match(Cobol85Parser.BLANK)
            self.state = 2672
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.WHEN:
                self.state = 2671
                self.match(Cobol85Parser.WHEN)


            self.state = 2674
            self.match(Cobol85Parser.ZERO)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ScreenDescriptionJustifiedClauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.ScreenDescriptionJustifiedClauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def JUSTIFIED(self):
            return self.getToken(Cobol85Parser.JUSTIFIED, 0)

        def JUST(self):
            return self.getToken(Cobol85Parser.JUST, 0)

        def RIGHT(self):
            return self.getToken(Cobol85Parser.RIGHT, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_screenDescriptionJustifiedClause

        def enterRule(self, listener):
            if hasattr(listener, "enterScreenDescriptionJustifiedClause"):
                listener.enterScreenDescriptionJustifiedClause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitScreenDescriptionJustifiedClause"):
                listener.exitScreenDescriptionJustifiedClause(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitScreenDescriptionJustifiedClause"):
                return visitor.visitScreenDescriptionJustifiedClause(self)
            else:
                return visitor.visitChildren(self)




    def screenDescriptionJustifiedClause(self):

        localctx = Cobol85Parser.ScreenDescriptionJustifiedClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 302, self.RULE_screenDescriptionJustifiedClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2676
            _la = self._input.LA(1)
            if not(_la==Cobol85Parser.JUST or _la==Cobol85Parser.JUSTIFIED):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2678
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.RIGHT:
                self.state = 2677
                self.match(Cobol85Parser.RIGHT)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ScreenDescriptionSignClauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.ScreenDescriptionSignClauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def LEADING(self):
            return self.getToken(Cobol85Parser.LEADING, 0)

        def TRAILING(self):
            return self.getToken(Cobol85Parser.TRAILING, 0)

        def SIGN(self):
            return self.getToken(Cobol85Parser.SIGN, 0)

        def SEPARATE(self):
            return self.getToken(Cobol85Parser.SEPARATE, 0)

        def IS(self):
            return self.getToken(Cobol85Parser.IS, 0)

        def CHARACTER(self):
            return self.getToken(Cobol85Parser.CHARACTER, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_screenDescriptionSignClause

        def enterRule(self, listener):
            if hasattr(listener, "enterScreenDescriptionSignClause"):
                listener.enterScreenDescriptionSignClause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitScreenDescriptionSignClause"):
                listener.exitScreenDescriptionSignClause(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitScreenDescriptionSignClause"):
                return visitor.visitScreenDescriptionSignClause(self)
            else:
                return visitor.visitChildren(self)




    def screenDescriptionSignClause(self):

        localctx = Cobol85Parser.ScreenDescriptionSignClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 304, self.RULE_screenDescriptionSignClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2684
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.SIGN:
                self.state = 2680
                self.match(Cobol85Parser.SIGN)
                self.state = 2682
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Cobol85Parser.IS:
                    self.state = 2681
                    self.match(Cobol85Parser.IS)




            self.state = 2686
            _la = self._input.LA(1)
            if not(_la==Cobol85Parser.LEADING or _la==Cobol85Parser.TRAILING):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2691
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.SEPARATE:
                self.state = 2687
                self.match(Cobol85Parser.SEPARATE)
                self.state = 2689
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Cobol85Parser.CHARACTER:
                    self.state = 2688
                    self.match(Cobol85Parser.CHARACTER)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ScreenDescriptionAutoClauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.ScreenDescriptionAutoClauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def AUTO(self):
            return self.getToken(Cobol85Parser.AUTO, 0)

        def AUTO_SKIP(self):
            return self.getToken(Cobol85Parser.AUTO_SKIP, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_screenDescriptionAutoClause

        def enterRule(self, listener):
            if hasattr(listener, "enterScreenDescriptionAutoClause"):
                listener.enterScreenDescriptionAutoClause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitScreenDescriptionAutoClause"):
                listener.exitScreenDescriptionAutoClause(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitScreenDescriptionAutoClause"):
                return visitor.visitScreenDescriptionAutoClause(self)
            else:
                return visitor.visitChildren(self)




    def screenDescriptionAutoClause(self):

        localctx = Cobol85Parser.ScreenDescriptionAutoClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 306, self.RULE_screenDescriptionAutoClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2693
            _la = self._input.LA(1)
            if not(_la==Cobol85Parser.AUTO or _la==Cobol85Parser.AUTO_SKIP):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ScreenDescriptionSecureClauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.ScreenDescriptionSecureClauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def SECURE(self):
            return self.getToken(Cobol85Parser.SECURE, 0)

        def NO_ECHO(self):
            return self.getToken(Cobol85Parser.NO_ECHO, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_screenDescriptionSecureClause

        def enterRule(self, listener):
            if hasattr(listener, "enterScreenDescriptionSecureClause"):
                listener.enterScreenDescriptionSecureClause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitScreenDescriptionSecureClause"):
                listener.exitScreenDescriptionSecureClause(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitScreenDescriptionSecureClause"):
                return visitor.visitScreenDescriptionSecureClause(self)
            else:
                return visitor.visitChildren(self)




    def screenDescriptionSecureClause(self):

        localctx = Cobol85Parser.ScreenDescriptionSecureClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 308, self.RULE_screenDescriptionSecureClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2695
            _la = self._input.LA(1)
            if not(_la==Cobol85Parser.NO_ECHO or _la==Cobol85Parser.SECURE):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ScreenDescriptionRequiredClauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.ScreenDescriptionRequiredClauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def REQUIRED(self):
            return self.getToken(Cobol85Parser.REQUIRED, 0)

        def EMPTY_CHECK(self):
            return self.getToken(Cobol85Parser.EMPTY_CHECK, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_screenDescriptionRequiredClause

        def enterRule(self, listener):
            if hasattr(listener, "enterScreenDescriptionRequiredClause"):
                listener.enterScreenDescriptionRequiredClause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitScreenDescriptionRequiredClause"):
                listener.exitScreenDescriptionRequiredClause(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitScreenDescriptionRequiredClause"):
                return visitor.visitScreenDescriptionRequiredClause(self)
            else:
                return visitor.visitChildren(self)




    def screenDescriptionRequiredClause(self):

        localctx = Cobol85Parser.ScreenDescriptionRequiredClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 310, self.RULE_screenDescriptionRequiredClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2697
            _la = self._input.LA(1)
            if not(_la==Cobol85Parser.EMPTY_CHECK or _la==Cobol85Parser.REQUIRED):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ScreenDescriptionPromptClauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.ScreenDescriptionPromptClauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def PROMPT(self):
            return self.getToken(Cobol85Parser.PROMPT, 0)

        def identifier(self):
            return self.getTypedRuleContext(Cobol85Parser.IdentifierContext,0)


        def literal(self):
            return self.getTypedRuleContext(Cobol85Parser.LiteralContext,0)


        def CHARACTER(self):
            return self.getToken(Cobol85Parser.CHARACTER, 0)

        def IS(self):
            return self.getToken(Cobol85Parser.IS, 0)

        def screenDescriptionPromptOccursClause(self):
            return self.getTypedRuleContext(Cobol85Parser.ScreenDescriptionPromptOccursClauseContext,0)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_screenDescriptionPromptClause

        def enterRule(self, listener):
            if hasattr(listener, "enterScreenDescriptionPromptClause"):
                listener.enterScreenDescriptionPromptClause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitScreenDescriptionPromptClause"):
                listener.exitScreenDescriptionPromptClause(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitScreenDescriptionPromptClause"):
                return visitor.visitScreenDescriptionPromptClause(self)
            else:
                return visitor.visitChildren(self)




    def screenDescriptionPromptClause(self):

        localctx = Cobol85Parser.ScreenDescriptionPromptClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 312, self.RULE_screenDescriptionPromptClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2699
            self.match(Cobol85Parser.PROMPT)
            self.state = 2701
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.CHARACTER:
                self.state = 2700
                self.match(Cobol85Parser.CHARACTER)


            self.state = 2704
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.IS:
                self.state = 2703
                self.match(Cobol85Parser.IS)


            self.state = 2708
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,304,self._ctx)
            if la_ == 1:
                self.state = 2706
                self.identifier()
                pass

            elif la_ == 2:
                self.state = 2707
                self.literal()
                pass


            self.state = 2711
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.OCCURS:
                self.state = 2710
                self.screenDescriptionPromptOccursClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ScreenDescriptionPromptOccursClauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.ScreenDescriptionPromptOccursClauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def OCCURS(self):
            return self.getToken(Cobol85Parser.OCCURS, 0)

        def integerLiteral(self):
            return self.getTypedRuleContext(Cobol85Parser.IntegerLiteralContext,0)


        def TIMES(self):
            return self.getToken(Cobol85Parser.TIMES, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_screenDescriptionPromptOccursClause

        def enterRule(self, listener):
            if hasattr(listener, "enterScreenDescriptionPromptOccursClause"):
                listener.enterScreenDescriptionPromptOccursClause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitScreenDescriptionPromptOccursClause"):
                listener.exitScreenDescriptionPromptOccursClause(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitScreenDescriptionPromptOccursClause"):
                return visitor.visitScreenDescriptionPromptOccursClause(self)
            else:
                return visitor.visitChildren(self)




    def screenDescriptionPromptOccursClause(self):

        localctx = Cobol85Parser.ScreenDescriptionPromptOccursClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 314, self.RULE_screenDescriptionPromptOccursClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2713
            self.match(Cobol85Parser.OCCURS)
            self.state = 2714
            self.integerLiteral()
            self.state = 2716
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.TIMES:
                self.state = 2715
                self.match(Cobol85Parser.TIMES)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ScreenDescriptionFullClauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.ScreenDescriptionFullClauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def FULL(self):
            return self.getToken(Cobol85Parser.FULL, 0)

        def LENGTH_CHECK(self):
            return self.getToken(Cobol85Parser.LENGTH_CHECK, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_screenDescriptionFullClause

        def enterRule(self, listener):
            if hasattr(listener, "enterScreenDescriptionFullClause"):
                listener.enterScreenDescriptionFullClause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitScreenDescriptionFullClause"):
                listener.exitScreenDescriptionFullClause(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitScreenDescriptionFullClause"):
                return visitor.visitScreenDescriptionFullClause(self)
            else:
                return visitor.visitChildren(self)




    def screenDescriptionFullClause(self):

        localctx = Cobol85Parser.ScreenDescriptionFullClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 316, self.RULE_screenDescriptionFullClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2718
            _la = self._input.LA(1)
            if not(_la==Cobol85Parser.FULL or _la==Cobol85Parser.LENGTH_CHECK):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ScreenDescriptionZeroFillClauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.ScreenDescriptionZeroFillClauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ZERO_FILL(self):
            return self.getToken(Cobol85Parser.ZERO_FILL, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_screenDescriptionZeroFillClause

        def enterRule(self, listener):
            if hasattr(listener, "enterScreenDescriptionZeroFillClause"):
                listener.enterScreenDescriptionZeroFillClause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitScreenDescriptionZeroFillClause"):
                listener.exitScreenDescriptionZeroFillClause(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitScreenDescriptionZeroFillClause"):
                return visitor.visitScreenDescriptionZeroFillClause(self)
            else:
                return visitor.visitChildren(self)




    def screenDescriptionZeroFillClause(self):

        localctx = Cobol85Parser.ScreenDescriptionZeroFillClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 318, self.RULE_screenDescriptionZeroFillClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2720
            self.match(Cobol85Parser.ZERO_FILL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ReportSectionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.ReportSectionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def REPORT(self):
            return self.getToken(Cobol85Parser.REPORT, 0)

        def SECTION(self):
            return self.getToken(Cobol85Parser.SECTION, 0)

        def DOT_FS(self):
            return self.getToken(Cobol85Parser.DOT_FS, 0)

        def reportDescription(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.ReportDescriptionContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.ReportDescriptionContext,i)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_reportSection

        def enterRule(self, listener):
            if hasattr(listener, "enterReportSection"):
                listener.enterReportSection(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitReportSection"):
                listener.exitReportSection(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitReportSection"):
                return visitor.visitReportSection(self)
            else:
                return visitor.visitChildren(self)




    def reportSection(self):

        localctx = Cobol85Parser.ReportSectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 320, self.RULE_reportSection)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2722
            self.match(Cobol85Parser.REPORT)
            self.state = 2723
            self.match(Cobol85Parser.SECTION)
            self.state = 2724
            self.match(Cobol85Parser.DOT_FS)
            self.state = 2728
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==Cobol85Parser.RD:
                self.state = 2725
                self.reportDescription()
                self.state = 2730
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ReportDescriptionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.ReportDescriptionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def reportDescriptionEntry(self):
            return self.getTypedRuleContext(Cobol85Parser.ReportDescriptionEntryContext,0)


        def reportGroupDescriptionEntry(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.ReportGroupDescriptionEntryContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.ReportGroupDescriptionEntryContext,i)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_reportDescription

        def enterRule(self, listener):
            if hasattr(listener, "enterReportDescription"):
                listener.enterReportDescription(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitReportDescription"):
                listener.exitReportDescription(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitReportDescription"):
                return visitor.visitReportDescription(self)
            else:
                return visitor.visitChildren(self)




    def reportDescription(self):

        localctx = Cobol85Parser.ReportDescriptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 322, self.RULE_reportDescription)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2731
            self.reportDescriptionEntry()
            self.state = 2733 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 2732
                self.reportGroupDescriptionEntry()
                self.state = 2735 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 557)) & ~0x3f) == 0 and ((1 << (_la - 557)) & ((1 << (Cobol85Parser.LEVEL_NUMBER_66 - 557)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 557)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 557)) | (1 << (Cobol85Parser.INTEGERLITERAL - 557)))) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ReportDescriptionEntryContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.ReportDescriptionEntryContext, self).__init__(parent, invokingState)
            self.parser = parser

        def RD(self):
            return self.getToken(Cobol85Parser.RD, 0)

        def reportName(self):
            return self.getTypedRuleContext(Cobol85Parser.ReportNameContext,0)


        def DOT_FS(self):
            return self.getToken(Cobol85Parser.DOT_FS, 0)

        def reportDescriptionGlobalClause(self):
            return self.getTypedRuleContext(Cobol85Parser.ReportDescriptionGlobalClauseContext,0)


        def reportDescriptionPageLimitClause(self):
            return self.getTypedRuleContext(Cobol85Parser.ReportDescriptionPageLimitClauseContext,0)


        def reportDescriptionHeadingClause(self):
            return self.getTypedRuleContext(Cobol85Parser.ReportDescriptionHeadingClauseContext,0)


        def reportDescriptionFirstDetailClause(self):
            return self.getTypedRuleContext(Cobol85Parser.ReportDescriptionFirstDetailClauseContext,0)


        def reportDescriptionLastDetailClause(self):
            return self.getTypedRuleContext(Cobol85Parser.ReportDescriptionLastDetailClauseContext,0)


        def reportDescriptionFootingClause(self):
            return self.getTypedRuleContext(Cobol85Parser.ReportDescriptionFootingClauseContext,0)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_reportDescriptionEntry

        def enterRule(self, listener):
            if hasattr(listener, "enterReportDescriptionEntry"):
                listener.enterReportDescriptionEntry(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitReportDescriptionEntry"):
                listener.exitReportDescriptionEntry(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitReportDescriptionEntry"):
                return visitor.visitReportDescriptionEntry(self)
            else:
                return visitor.visitChildren(self)




    def reportDescriptionEntry(self):

        localctx = Cobol85Parser.ReportDescriptionEntryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 324, self.RULE_reportDescriptionEntry)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2737
            self.match(Cobol85Parser.RD)
            self.state = 2738
            self.reportName()
            self.state = 2740
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.GLOBAL or _la==Cobol85Parser.IS:
                self.state = 2739
                self.reportDescriptionGlobalClause()


            self.state = 2755
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.PAGE:
                self.state = 2742
                self.reportDescriptionPageLimitClause()
                self.state = 2744
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Cobol85Parser.HEADING:
                    self.state = 2743
                    self.reportDescriptionHeadingClause()


                self.state = 2747
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Cobol85Parser.FIRST:
                    self.state = 2746
                    self.reportDescriptionFirstDetailClause()


                self.state = 2750
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Cobol85Parser.LAST:
                    self.state = 2749
                    self.reportDescriptionLastDetailClause()


                self.state = 2753
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Cobol85Parser.FOOTING:
                    self.state = 2752
                    self.reportDescriptionFootingClause()




            self.state = 2757
            self.match(Cobol85Parser.DOT_FS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ReportDescriptionGlobalClauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.ReportDescriptionGlobalClauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def GLOBAL(self):
            return self.getToken(Cobol85Parser.GLOBAL, 0)

        def IS(self):
            return self.getToken(Cobol85Parser.IS, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_reportDescriptionGlobalClause

        def enterRule(self, listener):
            if hasattr(listener, "enterReportDescriptionGlobalClause"):
                listener.enterReportDescriptionGlobalClause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitReportDescriptionGlobalClause"):
                listener.exitReportDescriptionGlobalClause(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitReportDescriptionGlobalClause"):
                return visitor.visitReportDescriptionGlobalClause(self)
            else:
                return visitor.visitChildren(self)




    def reportDescriptionGlobalClause(self):

        localctx = Cobol85Parser.ReportDescriptionGlobalClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 326, self.RULE_reportDescriptionGlobalClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2760
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.IS:
                self.state = 2759
                self.match(Cobol85Parser.IS)


            self.state = 2762
            self.match(Cobol85Parser.GLOBAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ReportDescriptionPageLimitClauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.ReportDescriptionPageLimitClauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def PAGE(self):
            return self.getToken(Cobol85Parser.PAGE, 0)

        def integerLiteral(self):
            return self.getTypedRuleContext(Cobol85Parser.IntegerLiteralContext,0)


        def LIMIT(self):
            return self.getToken(Cobol85Parser.LIMIT, 0)

        def LIMITS(self):
            return self.getToken(Cobol85Parser.LIMITS, 0)

        def LINE(self):
            return self.getToken(Cobol85Parser.LINE, 0)

        def LINES(self):
            return self.getToken(Cobol85Parser.LINES, 0)

        def IS(self):
            return self.getToken(Cobol85Parser.IS, 0)

        def ARE(self):
            return self.getToken(Cobol85Parser.ARE, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_reportDescriptionPageLimitClause

        def enterRule(self, listener):
            if hasattr(listener, "enterReportDescriptionPageLimitClause"):
                listener.enterReportDescriptionPageLimitClause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitReportDescriptionPageLimitClause"):
                listener.exitReportDescriptionPageLimitClause(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitReportDescriptionPageLimitClause"):
                return visitor.visitReportDescriptionPageLimitClause(self)
            else:
                return visitor.visitChildren(self)




    def reportDescriptionPageLimitClause(self):

        localctx = Cobol85Parser.ReportDescriptionPageLimitClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 328, self.RULE_reportDescriptionPageLimitClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2764
            self.match(Cobol85Parser.PAGE)
            self.state = 2773
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Cobol85Parser.LIMIT]:
                self.state = 2765
                self.match(Cobol85Parser.LIMIT)
                self.state = 2767
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Cobol85Parser.IS:
                    self.state = 2766
                    self.match(Cobol85Parser.IS)


                pass
            elif token in [Cobol85Parser.LIMITS]:
                self.state = 2769
                self.match(Cobol85Parser.LIMITS)
                self.state = 2771
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Cobol85Parser.ARE:
                    self.state = 2770
                    self.match(Cobol85Parser.ARE)


                pass
            elif token in [Cobol85Parser.LEVEL_NUMBER_66, Cobol85Parser.LEVEL_NUMBER_77, Cobol85Parser.LEVEL_NUMBER_88, Cobol85Parser.INTEGERLITERAL]:
                pass
            else:
                pass
            self.state = 2775
            self.integerLiteral()
            self.state = 2777
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.LINE or _la==Cobol85Parser.LINES:
                self.state = 2776
                _la = self._input.LA(1)
                if not(_la==Cobol85Parser.LINE or _la==Cobol85Parser.LINES):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ReportDescriptionHeadingClauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.ReportDescriptionHeadingClauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def HEADING(self):
            return self.getToken(Cobol85Parser.HEADING, 0)

        def integerLiteral(self):
            return self.getTypedRuleContext(Cobol85Parser.IntegerLiteralContext,0)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_reportDescriptionHeadingClause

        def enterRule(self, listener):
            if hasattr(listener, "enterReportDescriptionHeadingClause"):
                listener.enterReportDescriptionHeadingClause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitReportDescriptionHeadingClause"):
                listener.exitReportDescriptionHeadingClause(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitReportDescriptionHeadingClause"):
                return visitor.visitReportDescriptionHeadingClause(self)
            else:
                return visitor.visitChildren(self)




    def reportDescriptionHeadingClause(self):

        localctx = Cobol85Parser.ReportDescriptionHeadingClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 330, self.RULE_reportDescriptionHeadingClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2779
            self.match(Cobol85Parser.HEADING)
            self.state = 2780
            self.integerLiteral()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ReportDescriptionFirstDetailClauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.ReportDescriptionFirstDetailClauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def FIRST(self):
            return self.getToken(Cobol85Parser.FIRST, 0)

        def DETAIL(self):
            return self.getToken(Cobol85Parser.DETAIL, 0)

        def integerLiteral(self):
            return self.getTypedRuleContext(Cobol85Parser.IntegerLiteralContext,0)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_reportDescriptionFirstDetailClause

        def enterRule(self, listener):
            if hasattr(listener, "enterReportDescriptionFirstDetailClause"):
                listener.enterReportDescriptionFirstDetailClause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitReportDescriptionFirstDetailClause"):
                listener.exitReportDescriptionFirstDetailClause(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitReportDescriptionFirstDetailClause"):
                return visitor.visitReportDescriptionFirstDetailClause(self)
            else:
                return visitor.visitChildren(self)




    def reportDescriptionFirstDetailClause(self):

        localctx = Cobol85Parser.ReportDescriptionFirstDetailClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 332, self.RULE_reportDescriptionFirstDetailClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2782
            self.match(Cobol85Parser.FIRST)
            self.state = 2783
            self.match(Cobol85Parser.DETAIL)
            self.state = 2784
            self.integerLiteral()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ReportDescriptionLastDetailClauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.ReportDescriptionLastDetailClauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def LAST(self):
            return self.getToken(Cobol85Parser.LAST, 0)

        def DETAIL(self):
            return self.getToken(Cobol85Parser.DETAIL, 0)

        def integerLiteral(self):
            return self.getTypedRuleContext(Cobol85Parser.IntegerLiteralContext,0)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_reportDescriptionLastDetailClause

        def enterRule(self, listener):
            if hasattr(listener, "enterReportDescriptionLastDetailClause"):
                listener.enterReportDescriptionLastDetailClause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitReportDescriptionLastDetailClause"):
                listener.exitReportDescriptionLastDetailClause(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitReportDescriptionLastDetailClause"):
                return visitor.visitReportDescriptionLastDetailClause(self)
            else:
                return visitor.visitChildren(self)




    def reportDescriptionLastDetailClause(self):

        localctx = Cobol85Parser.ReportDescriptionLastDetailClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 334, self.RULE_reportDescriptionLastDetailClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2786
            self.match(Cobol85Parser.LAST)
            self.state = 2787
            self.match(Cobol85Parser.DETAIL)
            self.state = 2788
            self.integerLiteral()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ReportDescriptionFootingClauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.ReportDescriptionFootingClauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def FOOTING(self):
            return self.getToken(Cobol85Parser.FOOTING, 0)

        def integerLiteral(self):
            return self.getTypedRuleContext(Cobol85Parser.IntegerLiteralContext,0)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_reportDescriptionFootingClause

        def enterRule(self, listener):
            if hasattr(listener, "enterReportDescriptionFootingClause"):
                listener.enterReportDescriptionFootingClause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitReportDescriptionFootingClause"):
                listener.exitReportDescriptionFootingClause(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitReportDescriptionFootingClause"):
                return visitor.visitReportDescriptionFootingClause(self)
            else:
                return visitor.visitChildren(self)




    def reportDescriptionFootingClause(self):

        localctx = Cobol85Parser.ReportDescriptionFootingClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 336, self.RULE_reportDescriptionFootingClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2790
            self.match(Cobol85Parser.FOOTING)
            self.state = 2791
            self.integerLiteral()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ReportGroupDescriptionEntryContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.ReportGroupDescriptionEntryContext, self).__init__(parent, invokingState)
            self.parser = parser

        def reportGroupDescriptionEntryFormat1(self):
            return self.getTypedRuleContext(Cobol85Parser.ReportGroupDescriptionEntryFormat1Context,0)


        def reportGroupDescriptionEntryFormat2(self):
            return self.getTypedRuleContext(Cobol85Parser.ReportGroupDescriptionEntryFormat2Context,0)


        def reportGroupDescriptionEntryFormat3(self):
            return self.getTypedRuleContext(Cobol85Parser.ReportGroupDescriptionEntryFormat3Context,0)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_reportGroupDescriptionEntry

        def enterRule(self, listener):
            if hasattr(listener, "enterReportGroupDescriptionEntry"):
                listener.enterReportGroupDescriptionEntry(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitReportGroupDescriptionEntry"):
                listener.exitReportGroupDescriptionEntry(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitReportGroupDescriptionEntry"):
                return visitor.visitReportGroupDescriptionEntry(self)
            else:
                return visitor.visitChildren(self)




    def reportGroupDescriptionEntry(self):

        localctx = Cobol85Parser.ReportGroupDescriptionEntryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 338, self.RULE_reportGroupDescriptionEntry)
        try:
            self.state = 2796
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,320,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2793
                self.reportGroupDescriptionEntryFormat1()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2794
                self.reportGroupDescriptionEntryFormat2()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2795
                self.reportGroupDescriptionEntryFormat3()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ReportGroupDescriptionEntryFormat1Context(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.ReportGroupDescriptionEntryFormat1Context, self).__init__(parent, invokingState)
            self.parser = parser

        def integerLiteral(self):
            return self.getTypedRuleContext(Cobol85Parser.IntegerLiteralContext,0)


        def dataName(self):
            return self.getTypedRuleContext(Cobol85Parser.DataNameContext,0)


        def reportGroupTypeClause(self):
            return self.getTypedRuleContext(Cobol85Parser.ReportGroupTypeClauseContext,0)


        def DOT_FS(self):
            return self.getToken(Cobol85Parser.DOT_FS, 0)

        def reportGroupLineNumberClause(self):
            return self.getTypedRuleContext(Cobol85Parser.ReportGroupLineNumberClauseContext,0)


        def reportGroupNextGroupClause(self):
            return self.getTypedRuleContext(Cobol85Parser.ReportGroupNextGroupClauseContext,0)


        def reportGroupUsageClause(self):
            return self.getTypedRuleContext(Cobol85Parser.ReportGroupUsageClauseContext,0)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_reportGroupDescriptionEntryFormat1

        def enterRule(self, listener):
            if hasattr(listener, "enterReportGroupDescriptionEntryFormat1"):
                listener.enterReportGroupDescriptionEntryFormat1(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitReportGroupDescriptionEntryFormat1"):
                listener.exitReportGroupDescriptionEntryFormat1(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitReportGroupDescriptionEntryFormat1"):
                return visitor.visitReportGroupDescriptionEntryFormat1(self)
            else:
                return visitor.visitChildren(self)




    def reportGroupDescriptionEntryFormat1(self):

        localctx = Cobol85Parser.ReportGroupDescriptionEntryFormat1Context(self, self._ctx, self.state)
        self.enterRule(localctx, 340, self.RULE_reportGroupDescriptionEntryFormat1)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2798
            self.integerLiteral()
            self.state = 2799
            self.dataName()
            self.state = 2801
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 258)) & ~0x3f) == 0 and ((1 << (_la - 258)) & ((1 << (Cobol85Parser.IS - 258)) | (1 << (Cobol85Parser.LINE - 258)) | (1 << (Cobol85Parser.NUMBER - 258)))) != 0) or _la==Cobol85Parser.PLUS or ((((_la - 557)) & ~0x3f) == 0 and ((1 << (_la - 557)) & ((1 << (Cobol85Parser.LEVEL_NUMBER_66 - 557)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 557)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 557)) | (1 << (Cobol85Parser.INTEGERLITERAL - 557)))) != 0):
                self.state = 2800
                self.reportGroupLineNumberClause()


            self.state = 2804
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.NEXT:
                self.state = 2803
                self.reportGroupNextGroupClause()


            self.state = 2806
            self.reportGroupTypeClause()
            self.state = 2808
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.DISPLAY or _la==Cobol85Parser.DISPLAY_1 or _la==Cobol85Parser.USAGE:
                self.state = 2807
                self.reportGroupUsageClause()


            self.state = 2810
            self.match(Cobol85Parser.DOT_FS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ReportGroupDescriptionEntryFormat2Context(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.ReportGroupDescriptionEntryFormat2Context, self).__init__(parent, invokingState)
            self.parser = parser

        def integerLiteral(self):
            return self.getTypedRuleContext(Cobol85Parser.IntegerLiteralContext,0)


        def reportGroupUsageClause(self):
            return self.getTypedRuleContext(Cobol85Parser.ReportGroupUsageClauseContext,0)


        def DOT_FS(self):
            return self.getToken(Cobol85Parser.DOT_FS, 0)

        def dataName(self):
            return self.getTypedRuleContext(Cobol85Parser.DataNameContext,0)


        def reportGroupLineNumberClause(self):
            return self.getTypedRuleContext(Cobol85Parser.ReportGroupLineNumberClauseContext,0)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_reportGroupDescriptionEntryFormat2

        def enterRule(self, listener):
            if hasattr(listener, "enterReportGroupDescriptionEntryFormat2"):
                listener.enterReportGroupDescriptionEntryFormat2(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitReportGroupDescriptionEntryFormat2"):
                listener.exitReportGroupDescriptionEntryFormat2(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitReportGroupDescriptionEntryFormat2"):
                return visitor.visitReportGroupDescriptionEntryFormat2(self)
            else:
                return visitor.visitChildren(self)




    def reportGroupDescriptionEntryFormat2(self):

        localctx = Cobol85Parser.ReportGroupDescriptionEntryFormat2Context(self, self._ctx, self.state)
        self.enterRule(localctx, 342, self.RULE_reportGroupDescriptionEntryFormat2)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2812
            self.integerLiteral()
            self.state = 2814
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE) | (1 << Cobol85Parser.AUTO) | (1 << Cobol85Parser.AUTO_SKIP) | (1 << Cobol85Parser.BACKGROUND_COLOR) | (1 << Cobol85Parser.BACKGROUND_COLOUR) | (1 << Cobol85Parser.BEEP) | (1 << Cobol85Parser.BELL) | (1 << Cobol85Parser.BINARY) | (1 << Cobol85Parser.BIT) | (1 << Cobol85Parser.BLINK) | (1 << Cobol85Parser.BLOB) | (1 << Cobol85Parser.BOUNDS) | (1 << Cobol85Parser.CAPABLE) | (1 << Cobol85Parser.CCSVERSION) | (1 << Cobol85Parser.CHANGED) | (1 << Cobol85Parser.CHANNEL))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (Cobol85Parser.CLOB - 67)) | (1 << (Cobol85Parser.CLOSE_DISPOSITION - 67)) | (1 << (Cobol85Parser.COBOL - 67)) | (1 << (Cobol85Parser.COMMITMENT - 67)) | (1 << (Cobol85Parser.CONTROL_POINT - 67)) | (1 << (Cobol85Parser.CONVENTION - 67)) | (1 << (Cobol85Parser.CRUNCH - 67)) | (1 << (Cobol85Parser.CURSOR - 67)) | (1 << (Cobol85Parser.DBCLOB - 67)))) != 0) or ((((_la - 131)) & ~0x3f) == 0 and ((1 << (_la - 131)) & ((1 << (Cobol85Parser.DEFAULT - 131)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 131)) | (1 << (Cobol85Parser.DEFINITION - 131)) | (1 << (Cobol85Parser.DFHRESP - 131)) | (1 << (Cobol85Parser.DFHVALUE - 131)) | (1 << (Cobol85Parser.DISK - 131)) | (1 << (Cobol85Parser.DONTCARE - 131)) | (1 << (Cobol85Parser.DOUBLE - 131)) | (1 << (Cobol85Parser.EBCDIC - 131)) | (1 << (Cobol85Parser.EMPTY_CHECK - 131)) | (1 << (Cobol85Parser.ENTER - 131)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 131)) | (1 << (Cobol85Parser.ERASE - 131)) | (1 << (Cobol85Parser.EOL - 131)) | (1 << (Cobol85Parser.EOS - 131)))) != 0) or ((((_la - 195)) & ~0x3f) == 0 and ((1 << (_la - 195)) & ((1 << (Cobol85Parser.ESCAPE - 195)) | (1 << (Cobol85Parser.EVENT - 195)) | (1 << (Cobol85Parser.EXCLUSIVE - 195)) | (1 << (Cobol85Parser.EXPORT - 195)) | (1 << (Cobol85Parser.EXTENDED - 195)) | (1 << (Cobol85Parser.FOREGROUND_COLOR - 195)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 195)) | (1 << (Cobol85Parser.FULL - 195)) | (1 << (Cobol85Parser.FUNCTIONNAME - 195)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 195)) | (1 << (Cobol85Parser.GRID - 195)) | (1 << (Cobol85Parser.HIGHLIGHT - 195)) | (1 << (Cobol85Parser.IMPLICIT - 195)) | (1 << (Cobol85Parser.IMPORT - 195)) | (1 << (Cobol85Parser.INTEGER - 195)))) != 0) or ((((_la - 262)) & ~0x3f) == 0 and ((1 << (_la - 262)) & ((1 << (Cobol85Parser.KEPT - 262)) | (1 << (Cobol85Parser.KEYBOARD - 262)) | (1 << (Cobol85Parser.LANGUAGE - 262)) | (1 << (Cobol85Parser.LB - 262)) | (1 << (Cobol85Parser.LD - 262)) | (1 << (Cobol85Parser.LEFTLINE - 262)) | (1 << (Cobol85Parser.LENGTH_CHECK - 262)) | (1 << (Cobol85Parser.LIBACCESS - 262)) | (1 << (Cobol85Parser.LIBPARAMETER - 262)) | (1 << (Cobol85Parser.LIBRARY - 262)) | (1 << (Cobol85Parser.LIST - 262)) | (1 << (Cobol85Parser.LOCAL - 262)) | (1 << (Cobol85Parser.LONG_DATE - 262)) | (1 << (Cobol85Parser.LONG_TIME - 262)) | (1 << (Cobol85Parser.LOWER - 262)) | (1 << (Cobol85Parser.LOWLIGHT - 262)) | (1 << (Cobol85Parser.MMDDYYYY - 262)) | (1 << (Cobol85Parser.NAMED - 262)) | (1 << (Cobol85Parser.NATIONAL - 262)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 262)) | (1 << (Cobol85Parser.NETWORK - 262)) | (1 << (Cobol85Parser.NO_ECHO - 262)) | (1 << (Cobol85Parser.NUMERIC_DATE - 262)) | (1 << (Cobol85Parser.NUMERIC_TIME - 262)))) != 0) or ((((_la - 326)) & ~0x3f) == 0 and ((1 << (_la - 326)) & ((1 << (Cobol85Parser.ODT - 326)) | (1 << (Cobol85Parser.ORDERLY - 326)) | (1 << (Cobol85Parser.OVERLINE - 326)) | (1 << (Cobol85Parser.OWN - 326)) | (1 << (Cobol85Parser.PASSWORD - 326)) | (1 << (Cobol85Parser.PORT - 326)) | (1 << (Cobol85Parser.PRINTER - 326)) | (1 << (Cobol85Parser.PRIVATE - 326)) | (1 << (Cobol85Parser.PROCESS - 326)) | (1 << (Cobol85Parser.PROGRAM - 326)) | (1 << (Cobol85Parser.PROMPT - 326)) | (1 << (Cobol85Parser.READER - 326)) | (1 << (Cobol85Parser.REMOTE - 326)) | (1 << (Cobol85Parser.REAL - 326)) | (1 << (Cobol85Parser.RECEIVED - 326)) | (1 << (Cobol85Parser.RECURSIVE - 326)) | (1 << (Cobol85Parser.REF - 326)))) != 0) or ((((_la - 395)) & ~0x3f) == 0 and ((1 << (_la - 395)) & ((1 << (Cobol85Parser.REMOVE - 395)) | (1 << (Cobol85Parser.REQUIRED - 395)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 395)) | (1 << (Cobol85Parser.SAVE - 395)) | (1 << (Cobol85Parser.SECURE - 395)) | (1 << (Cobol85Parser.SHARED - 395)) | (1 << (Cobol85Parser.SHAREDBYALL - 395)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 395)) | (1 << (Cobol85Parser.SHARING - 395)) | (1 << (Cobol85Parser.SHORT_DATE - 395)) | (1 << (Cobol85Parser.SQL - 395)))) != 0) or ((((_la - 471)) & ~0x3f) == 0 and ((1 << (_la - 471)) & ((1 << (Cobol85Parser.SYMBOL - 471)) | (1 << (Cobol85Parser.TASK - 471)) | (1 << (Cobol85Parser.THREAD - 471)) | (1 << (Cobol85Parser.THREAD_LOCAL - 471)) | (1 << (Cobol85Parser.TIMER - 471)) | (1 << (Cobol85Parser.TODAYS_DATE - 471)) | (1 << (Cobol85Parser.TODAYS_NAME - 471)) | (1 << (Cobol85Parser.TRUNCATED - 471)) | (1 << (Cobol85Parser.TYPEDEF - 471)) | (1 << (Cobol85Parser.UNDERLINE - 471)) | (1 << (Cobol85Parser.VIRTUAL - 471)) | (1 << (Cobol85Parser.WAIT - 471)) | (1 << (Cobol85Parser.YEAR - 471)) | (1 << (Cobol85Parser.YYYYMMDD - 471)) | (1 << (Cobol85Parser.YYYYDDD - 471)) | (1 << (Cobol85Parser.ZERO_FILL - 471)))) != 0) or _la==Cobol85Parser.IDENTIFIER:
                self.state = 2813
                self.dataName()


            self.state = 2817
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 258)) & ~0x3f) == 0 and ((1 << (_la - 258)) & ((1 << (Cobol85Parser.IS - 258)) | (1 << (Cobol85Parser.LINE - 258)) | (1 << (Cobol85Parser.NUMBER - 258)))) != 0) or _la==Cobol85Parser.PLUS or ((((_la - 557)) & ~0x3f) == 0 and ((1 << (_la - 557)) & ((1 << (Cobol85Parser.LEVEL_NUMBER_66 - 557)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 557)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 557)) | (1 << (Cobol85Parser.INTEGERLITERAL - 557)))) != 0):
                self.state = 2816
                self.reportGroupLineNumberClause()


            self.state = 2819
            self.reportGroupUsageClause()
            self.state = 2820
            self.match(Cobol85Parser.DOT_FS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ReportGroupDescriptionEntryFormat3Context(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.ReportGroupDescriptionEntryFormat3Context, self).__init__(parent, invokingState)
            self.parser = parser

        def integerLiteral(self):
            return self.getTypedRuleContext(Cobol85Parser.IntegerLiteralContext,0)


        def DOT_FS(self):
            return self.getToken(Cobol85Parser.DOT_FS, 0)

        def dataName(self):
            return self.getTypedRuleContext(Cobol85Parser.DataNameContext,0)


        def reportGroupPictureClause(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.ReportGroupPictureClauseContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.ReportGroupPictureClauseContext,i)


        def reportGroupUsageClause(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.ReportGroupUsageClauseContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.ReportGroupUsageClauseContext,i)


        def reportGroupSignClause(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.ReportGroupSignClauseContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.ReportGroupSignClauseContext,i)


        def reportGroupJustifiedClause(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.ReportGroupJustifiedClauseContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.ReportGroupJustifiedClauseContext,i)


        def reportGroupBlankWhenZeroClause(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.ReportGroupBlankWhenZeroClauseContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.ReportGroupBlankWhenZeroClauseContext,i)


        def reportGroupLineNumberClause(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.ReportGroupLineNumberClauseContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.ReportGroupLineNumberClauseContext,i)


        def reportGroupColumnNumberClause(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.ReportGroupColumnNumberClauseContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.ReportGroupColumnNumberClauseContext,i)


        def reportGroupIndicateClause(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.ReportGroupIndicateClauseContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.ReportGroupIndicateClauseContext,i)


        def reportGroupSourceClause(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.ReportGroupSourceClauseContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.ReportGroupSourceClauseContext,i)


        def reportGroupValueClause(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.ReportGroupValueClauseContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.ReportGroupValueClauseContext,i)


        def reportGroupSumClause(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.ReportGroupSumClauseContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.ReportGroupSumClauseContext,i)


        def reportGroupResetClause(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.ReportGroupResetClauseContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.ReportGroupResetClauseContext,i)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_reportGroupDescriptionEntryFormat3

        def enterRule(self, listener):
            if hasattr(listener, "enterReportGroupDescriptionEntryFormat3"):
                listener.enterReportGroupDescriptionEntryFormat3(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitReportGroupDescriptionEntryFormat3"):
                listener.exitReportGroupDescriptionEntryFormat3(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitReportGroupDescriptionEntryFormat3"):
                return visitor.visitReportGroupDescriptionEntryFormat3(self)
            else:
                return visitor.visitChildren(self)




    def reportGroupDescriptionEntryFormat3(self):

        localctx = Cobol85Parser.ReportGroupDescriptionEntryFormat3Context(self, self._ctx, self.state)
        self.enterRule(localctx, 344, self.RULE_reportGroupDescriptionEntryFormat3)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2822
            self.integerLiteral()
            self.state = 2824
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE) | (1 << Cobol85Parser.AUTO) | (1 << Cobol85Parser.AUTO_SKIP) | (1 << Cobol85Parser.BACKGROUND_COLOR) | (1 << Cobol85Parser.BACKGROUND_COLOUR) | (1 << Cobol85Parser.BEEP) | (1 << Cobol85Parser.BELL) | (1 << Cobol85Parser.BINARY) | (1 << Cobol85Parser.BIT) | (1 << Cobol85Parser.BLINK) | (1 << Cobol85Parser.BLOB) | (1 << Cobol85Parser.BOUNDS) | (1 << Cobol85Parser.CAPABLE) | (1 << Cobol85Parser.CCSVERSION) | (1 << Cobol85Parser.CHANGED) | (1 << Cobol85Parser.CHANNEL))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (Cobol85Parser.CLOB - 67)) | (1 << (Cobol85Parser.CLOSE_DISPOSITION - 67)) | (1 << (Cobol85Parser.COBOL - 67)) | (1 << (Cobol85Parser.COMMITMENT - 67)) | (1 << (Cobol85Parser.CONTROL_POINT - 67)) | (1 << (Cobol85Parser.CONVENTION - 67)) | (1 << (Cobol85Parser.CRUNCH - 67)) | (1 << (Cobol85Parser.CURSOR - 67)) | (1 << (Cobol85Parser.DBCLOB - 67)))) != 0) or ((((_la - 131)) & ~0x3f) == 0 and ((1 << (_la - 131)) & ((1 << (Cobol85Parser.DEFAULT - 131)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 131)) | (1 << (Cobol85Parser.DEFINITION - 131)) | (1 << (Cobol85Parser.DFHRESP - 131)) | (1 << (Cobol85Parser.DFHVALUE - 131)) | (1 << (Cobol85Parser.DISK - 131)) | (1 << (Cobol85Parser.DONTCARE - 131)) | (1 << (Cobol85Parser.DOUBLE - 131)) | (1 << (Cobol85Parser.EBCDIC - 131)) | (1 << (Cobol85Parser.EMPTY_CHECK - 131)) | (1 << (Cobol85Parser.ENTER - 131)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 131)) | (1 << (Cobol85Parser.ERASE - 131)) | (1 << (Cobol85Parser.EOL - 131)) | (1 << (Cobol85Parser.EOS - 131)))) != 0) or ((((_la - 195)) & ~0x3f) == 0 and ((1 << (_la - 195)) & ((1 << (Cobol85Parser.ESCAPE - 195)) | (1 << (Cobol85Parser.EVENT - 195)) | (1 << (Cobol85Parser.EXCLUSIVE - 195)) | (1 << (Cobol85Parser.EXPORT - 195)) | (1 << (Cobol85Parser.EXTENDED - 195)) | (1 << (Cobol85Parser.FOREGROUND_COLOR - 195)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 195)) | (1 << (Cobol85Parser.FULL - 195)) | (1 << (Cobol85Parser.FUNCTIONNAME - 195)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 195)) | (1 << (Cobol85Parser.GRID - 195)) | (1 << (Cobol85Parser.HIGHLIGHT - 195)) | (1 << (Cobol85Parser.IMPLICIT - 195)) | (1 << (Cobol85Parser.IMPORT - 195)) | (1 << (Cobol85Parser.INTEGER - 195)))) != 0) or ((((_la - 262)) & ~0x3f) == 0 and ((1 << (_la - 262)) & ((1 << (Cobol85Parser.KEPT - 262)) | (1 << (Cobol85Parser.KEYBOARD - 262)) | (1 << (Cobol85Parser.LANGUAGE - 262)) | (1 << (Cobol85Parser.LB - 262)) | (1 << (Cobol85Parser.LD - 262)) | (1 << (Cobol85Parser.LEFTLINE - 262)) | (1 << (Cobol85Parser.LENGTH_CHECK - 262)) | (1 << (Cobol85Parser.LIBACCESS - 262)) | (1 << (Cobol85Parser.LIBPARAMETER - 262)) | (1 << (Cobol85Parser.LIBRARY - 262)) | (1 << (Cobol85Parser.LIST - 262)) | (1 << (Cobol85Parser.LOCAL - 262)) | (1 << (Cobol85Parser.LONG_DATE - 262)) | (1 << (Cobol85Parser.LONG_TIME - 262)) | (1 << (Cobol85Parser.LOWER - 262)) | (1 << (Cobol85Parser.LOWLIGHT - 262)) | (1 << (Cobol85Parser.MMDDYYYY - 262)) | (1 << (Cobol85Parser.NAMED - 262)) | (1 << (Cobol85Parser.NATIONAL - 262)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 262)) | (1 << (Cobol85Parser.NETWORK - 262)) | (1 << (Cobol85Parser.NO_ECHO - 262)) | (1 << (Cobol85Parser.NUMERIC_DATE - 262)) | (1 << (Cobol85Parser.NUMERIC_TIME - 262)))) != 0) or ((((_la - 326)) & ~0x3f) == 0 and ((1 << (_la - 326)) & ((1 << (Cobol85Parser.ODT - 326)) | (1 << (Cobol85Parser.ORDERLY - 326)) | (1 << (Cobol85Parser.OVERLINE - 326)) | (1 << (Cobol85Parser.OWN - 326)) | (1 << (Cobol85Parser.PASSWORD - 326)) | (1 << (Cobol85Parser.PORT - 326)) | (1 << (Cobol85Parser.PRINTER - 326)) | (1 << (Cobol85Parser.PRIVATE - 326)) | (1 << (Cobol85Parser.PROCESS - 326)) | (1 << (Cobol85Parser.PROGRAM - 326)) | (1 << (Cobol85Parser.PROMPT - 326)) | (1 << (Cobol85Parser.READER - 326)) | (1 << (Cobol85Parser.REMOTE - 326)) | (1 << (Cobol85Parser.REAL - 326)) | (1 << (Cobol85Parser.RECEIVED - 326)) | (1 << (Cobol85Parser.RECURSIVE - 326)) | (1 << (Cobol85Parser.REF - 326)))) != 0) or ((((_la - 395)) & ~0x3f) == 0 and ((1 << (_la - 395)) & ((1 << (Cobol85Parser.REMOVE - 395)) | (1 << (Cobol85Parser.REQUIRED - 395)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 395)) | (1 << (Cobol85Parser.SAVE - 395)) | (1 << (Cobol85Parser.SECURE - 395)) | (1 << (Cobol85Parser.SHARED - 395)) | (1 << (Cobol85Parser.SHAREDBYALL - 395)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 395)) | (1 << (Cobol85Parser.SHARING - 395)) | (1 << (Cobol85Parser.SHORT_DATE - 395)) | (1 << (Cobol85Parser.SQL - 395)))) != 0) or ((((_la - 471)) & ~0x3f) == 0 and ((1 << (_la - 471)) & ((1 << (Cobol85Parser.SYMBOL - 471)) | (1 << (Cobol85Parser.TASK - 471)) | (1 << (Cobol85Parser.THREAD - 471)) | (1 << (Cobol85Parser.THREAD_LOCAL - 471)) | (1 << (Cobol85Parser.TIMER - 471)) | (1 << (Cobol85Parser.TODAYS_DATE - 471)) | (1 << (Cobol85Parser.TODAYS_NAME - 471)) | (1 << (Cobol85Parser.TRUNCATED - 471)) | (1 << (Cobol85Parser.TYPEDEF - 471)) | (1 << (Cobol85Parser.UNDERLINE - 471)) | (1 << (Cobol85Parser.VIRTUAL - 471)) | (1 << (Cobol85Parser.WAIT - 471)) | (1 << (Cobol85Parser.YEAR - 471)) | (1 << (Cobol85Parser.YYYYMMDD - 471)) | (1 << (Cobol85Parser.YYYYDDD - 471)) | (1 << (Cobol85Parser.ZERO_FILL - 471)))) != 0) or _la==Cobol85Parser.IDENTIFIER:
                self.state = 2823
                self.dataName()


            self.state = 2842
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==Cobol85Parser.BLANK or _la==Cobol85Parser.COLUMN or _la==Cobol85Parser.DISPLAY or _la==Cobol85Parser.DISPLAY_1 or ((((_la - 231)) & ~0x3f) == 0 and ((1 << (_la - 231)) & ((1 << (Cobol85Parser.GROUP - 231)) | (1 << (Cobol85Parser.IS - 231)) | (1 << (Cobol85Parser.JUST - 231)) | (1 << (Cobol85Parser.JUSTIFIED - 231)) | (1 << (Cobol85Parser.LINE - 231)))) != 0) or ((((_la - 319)) & ~0x3f) == 0 and ((1 << (_la - 319)) & ((1 << (Cobol85Parser.NUMBER - 319)) | (1 << (Cobol85Parser.PIC - 319)) | (1 << (Cobol85Parser.PICTURE - 319)) | (1 << (Cobol85Parser.PLUS - 319)))) != 0) or ((((_la - 406)) & ~0x3f) == 0 and ((1 << (_la - 406)) & ((1 << (Cobol85Parser.RESET - 406)) | (1 << (Cobol85Parser.SIGN - 406)) | (1 << (Cobol85Parser.SOURCE - 406)) | (1 << (Cobol85Parser.SUM - 406)))) != 0) or ((((_la - 509)) & ~0x3f) == 0 and ((1 << (_la - 509)) & ((1 << (Cobol85Parser.USAGE - 509)) | (1 << (Cobol85Parser.VALUE - 509)) | (1 << (Cobol85Parser.LEVEL_NUMBER_66 - 509)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 509)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 509)) | (1 << (Cobol85Parser.INTEGERLITERAL - 509)))) != 0):
                self.state = 2840
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [Cobol85Parser.PIC, Cobol85Parser.PICTURE]:
                    self.state = 2826
                    self.reportGroupPictureClause()
                    pass
                elif token in [Cobol85Parser.DISPLAY, Cobol85Parser.DISPLAY_1, Cobol85Parser.USAGE]:
                    self.state = 2827
                    self.reportGroupUsageClause()
                    pass
                elif token in [Cobol85Parser.SIGN]:
                    self.state = 2828
                    self.reportGroupSignClause()
                    pass
                elif token in [Cobol85Parser.JUST, Cobol85Parser.JUSTIFIED]:
                    self.state = 2829
                    self.reportGroupJustifiedClause()
                    pass
                elif token in [Cobol85Parser.BLANK]:
                    self.state = 2830
                    self.reportGroupBlankWhenZeroClause()
                    pass
                elif token in [Cobol85Parser.IS, Cobol85Parser.LINE, Cobol85Parser.NUMBER, Cobol85Parser.PLUS, Cobol85Parser.LEVEL_NUMBER_66, Cobol85Parser.LEVEL_NUMBER_77, Cobol85Parser.LEVEL_NUMBER_88, Cobol85Parser.INTEGERLITERAL]:
                    self.state = 2831
                    self.reportGroupLineNumberClause()
                    pass
                elif token in [Cobol85Parser.COLUMN]:
                    self.state = 2832
                    self.reportGroupColumnNumberClause()
                    pass
                elif token in [Cobol85Parser.RESET, Cobol85Parser.SOURCE, Cobol85Parser.SUM, Cobol85Parser.VALUE]:
                    self.state = 2837
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [Cobol85Parser.SOURCE]:
                        self.state = 2833
                        self.reportGroupSourceClause()
                        pass
                    elif token in [Cobol85Parser.VALUE]:
                        self.state = 2834
                        self.reportGroupValueClause()
                        pass
                    elif token in [Cobol85Parser.SUM]:
                        self.state = 2835
                        self.reportGroupSumClause()
                        pass
                    elif token in [Cobol85Parser.RESET]:
                        self.state = 2836
                        self.reportGroupResetClause()
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass
                elif token in [Cobol85Parser.GROUP]:
                    self.state = 2839
                    self.reportGroupIndicateClause()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2844
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2845
            self.match(Cobol85Parser.DOT_FS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ReportGroupBlankWhenZeroClauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.ReportGroupBlankWhenZeroClauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def BLANK(self):
            return self.getToken(Cobol85Parser.BLANK, 0)

        def ZERO(self):
            return self.getToken(Cobol85Parser.ZERO, 0)

        def WHEN(self):
            return self.getToken(Cobol85Parser.WHEN, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_reportGroupBlankWhenZeroClause

        def enterRule(self, listener):
            if hasattr(listener, "enterReportGroupBlankWhenZeroClause"):
                listener.enterReportGroupBlankWhenZeroClause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitReportGroupBlankWhenZeroClause"):
                listener.exitReportGroupBlankWhenZeroClause(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitReportGroupBlankWhenZeroClause"):
                return visitor.visitReportGroupBlankWhenZeroClause(self)
            else:
                return visitor.visitChildren(self)




    def reportGroupBlankWhenZeroClause(self):

        localctx = Cobol85Parser.ReportGroupBlankWhenZeroClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 346, self.RULE_reportGroupBlankWhenZeroClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2847
            self.match(Cobol85Parser.BLANK)
            self.state = 2849
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.WHEN:
                self.state = 2848
                self.match(Cobol85Parser.WHEN)


            self.state = 2851
            self.match(Cobol85Parser.ZERO)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ReportGroupColumnNumberClauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.ReportGroupColumnNumberClauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def COLUMN(self):
            return self.getToken(Cobol85Parser.COLUMN, 0)

        def integerLiteral(self):
            return self.getTypedRuleContext(Cobol85Parser.IntegerLiteralContext,0)


        def NUMBER(self):
            return self.getToken(Cobol85Parser.NUMBER, 0)

        def IS(self):
            return self.getToken(Cobol85Parser.IS, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_reportGroupColumnNumberClause

        def enterRule(self, listener):
            if hasattr(listener, "enterReportGroupColumnNumberClause"):
                listener.enterReportGroupColumnNumberClause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitReportGroupColumnNumberClause"):
                listener.exitReportGroupColumnNumberClause(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitReportGroupColumnNumberClause"):
                return visitor.visitReportGroupColumnNumberClause(self)
            else:
                return visitor.visitChildren(self)




    def reportGroupColumnNumberClause(self):

        localctx = Cobol85Parser.ReportGroupColumnNumberClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 348, self.RULE_reportGroupColumnNumberClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2853
            self.match(Cobol85Parser.COLUMN)
            self.state = 2855
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.NUMBER:
                self.state = 2854
                self.match(Cobol85Parser.NUMBER)


            self.state = 2858
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.IS:
                self.state = 2857
                self.match(Cobol85Parser.IS)


            self.state = 2860
            self.integerLiteral()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ReportGroupIndicateClauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.ReportGroupIndicateClauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def GROUP(self):
            return self.getToken(Cobol85Parser.GROUP, 0)

        def INDICATE(self):
            return self.getToken(Cobol85Parser.INDICATE, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_reportGroupIndicateClause

        def enterRule(self, listener):
            if hasattr(listener, "enterReportGroupIndicateClause"):
                listener.enterReportGroupIndicateClause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitReportGroupIndicateClause"):
                listener.exitReportGroupIndicateClause(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitReportGroupIndicateClause"):
                return visitor.visitReportGroupIndicateClause(self)
            else:
                return visitor.visitChildren(self)




    def reportGroupIndicateClause(self):

        localctx = Cobol85Parser.ReportGroupIndicateClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 350, self.RULE_reportGroupIndicateClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2862
            self.match(Cobol85Parser.GROUP)
            self.state = 2864
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.INDICATE:
                self.state = 2863
                self.match(Cobol85Parser.INDICATE)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ReportGroupJustifiedClauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.ReportGroupJustifiedClauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def JUSTIFIED(self):
            return self.getToken(Cobol85Parser.JUSTIFIED, 0)

        def JUST(self):
            return self.getToken(Cobol85Parser.JUST, 0)

        def RIGHT(self):
            return self.getToken(Cobol85Parser.RIGHT, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_reportGroupJustifiedClause

        def enterRule(self, listener):
            if hasattr(listener, "enterReportGroupJustifiedClause"):
                listener.enterReportGroupJustifiedClause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitReportGroupJustifiedClause"):
                listener.exitReportGroupJustifiedClause(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitReportGroupJustifiedClause"):
                return visitor.visitReportGroupJustifiedClause(self)
            else:
                return visitor.visitChildren(self)




    def reportGroupJustifiedClause(self):

        localctx = Cobol85Parser.ReportGroupJustifiedClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 352, self.RULE_reportGroupJustifiedClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2866
            _la = self._input.LA(1)
            if not(_la==Cobol85Parser.JUST or _la==Cobol85Parser.JUSTIFIED):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2868
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.RIGHT:
                self.state = 2867
                self.match(Cobol85Parser.RIGHT)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ReportGroupLineNumberClauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.ReportGroupLineNumberClauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def reportGroupLineNumberNextPage(self):
            return self.getTypedRuleContext(Cobol85Parser.ReportGroupLineNumberNextPageContext,0)


        def reportGroupLineNumberPlus(self):
            return self.getTypedRuleContext(Cobol85Parser.ReportGroupLineNumberPlusContext,0)


        def LINE(self):
            return self.getToken(Cobol85Parser.LINE, 0)

        def NUMBER(self):
            return self.getToken(Cobol85Parser.NUMBER, 0)

        def IS(self):
            return self.getToken(Cobol85Parser.IS, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_reportGroupLineNumberClause

        def enterRule(self, listener):
            if hasattr(listener, "enterReportGroupLineNumberClause"):
                listener.enterReportGroupLineNumberClause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitReportGroupLineNumberClause"):
                listener.exitReportGroupLineNumberClause(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitReportGroupLineNumberClause"):
                return visitor.visitReportGroupLineNumberClause(self)
            else:
                return visitor.visitChildren(self)




    def reportGroupLineNumberClause(self):

        localctx = Cobol85Parser.ReportGroupLineNumberClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 354, self.RULE_reportGroupLineNumberClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2871
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.LINE:
                self.state = 2870
                self.match(Cobol85Parser.LINE)


            self.state = 2874
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.NUMBER:
                self.state = 2873
                self.match(Cobol85Parser.NUMBER)


            self.state = 2877
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.IS:
                self.state = 2876
                self.match(Cobol85Parser.IS)


            self.state = 2881
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Cobol85Parser.LEVEL_NUMBER_66, Cobol85Parser.LEVEL_NUMBER_77, Cobol85Parser.LEVEL_NUMBER_88, Cobol85Parser.INTEGERLITERAL]:
                self.state = 2879
                self.reportGroupLineNumberNextPage()
                pass
            elif token in [Cobol85Parser.PLUS]:
                self.state = 2880
                self.reportGroupLineNumberPlus()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ReportGroupLineNumberNextPageContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.ReportGroupLineNumberNextPageContext, self).__init__(parent, invokingState)
            self.parser = parser

        def integerLiteral(self):
            return self.getTypedRuleContext(Cobol85Parser.IntegerLiteralContext,0)


        def NEXT(self):
            return self.getToken(Cobol85Parser.NEXT, 0)

        def PAGE(self):
            return self.getToken(Cobol85Parser.PAGE, 0)

        def ON(self):
            return self.getToken(Cobol85Parser.ON, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_reportGroupLineNumberNextPage

        def enterRule(self, listener):
            if hasattr(listener, "enterReportGroupLineNumberNextPage"):
                listener.enterReportGroupLineNumberNextPage(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitReportGroupLineNumberNextPage"):
                listener.exitReportGroupLineNumberNextPage(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitReportGroupLineNumberNextPage"):
                return visitor.visitReportGroupLineNumberNextPage(self)
            else:
                return visitor.visitChildren(self)




    def reportGroupLineNumberNextPage(self):

        localctx = Cobol85Parser.ReportGroupLineNumberNextPageContext(self, self._ctx, self.state)
        self.enterRule(localctx, 356, self.RULE_reportGroupLineNumberNextPage)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2883
            self.integerLiteral()
            self.state = 2889
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,340,self._ctx)
            if la_ == 1:
                self.state = 2885
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Cobol85Parser.ON:
                    self.state = 2884
                    self.match(Cobol85Parser.ON)


                self.state = 2887
                self.match(Cobol85Parser.NEXT)
                self.state = 2888
                self.match(Cobol85Parser.PAGE)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ReportGroupLineNumberPlusContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.ReportGroupLineNumberPlusContext, self).__init__(parent, invokingState)
            self.parser = parser

        def PLUS(self):
            return self.getToken(Cobol85Parser.PLUS, 0)

        def integerLiteral(self):
            return self.getTypedRuleContext(Cobol85Parser.IntegerLiteralContext,0)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_reportGroupLineNumberPlus

        def enterRule(self, listener):
            if hasattr(listener, "enterReportGroupLineNumberPlus"):
                listener.enterReportGroupLineNumberPlus(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitReportGroupLineNumberPlus"):
                listener.exitReportGroupLineNumberPlus(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitReportGroupLineNumberPlus"):
                return visitor.visitReportGroupLineNumberPlus(self)
            else:
                return visitor.visitChildren(self)




    def reportGroupLineNumberPlus(self):

        localctx = Cobol85Parser.ReportGroupLineNumberPlusContext(self, self._ctx, self.state)
        self.enterRule(localctx, 358, self.RULE_reportGroupLineNumberPlus)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2891
            self.match(Cobol85Parser.PLUS)
            self.state = 2892
            self.integerLiteral()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ReportGroupNextGroupClauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.ReportGroupNextGroupClauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def NEXT(self):
            return self.getToken(Cobol85Parser.NEXT, 0)

        def GROUP(self):
            return self.getToken(Cobol85Parser.GROUP, 0)

        def integerLiteral(self):
            return self.getTypedRuleContext(Cobol85Parser.IntegerLiteralContext,0)


        def reportGroupNextGroupNextPage(self):
            return self.getTypedRuleContext(Cobol85Parser.ReportGroupNextGroupNextPageContext,0)


        def reportGroupNextGroupPlus(self):
            return self.getTypedRuleContext(Cobol85Parser.ReportGroupNextGroupPlusContext,0)


        def IS(self):
            return self.getToken(Cobol85Parser.IS, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_reportGroupNextGroupClause

        def enterRule(self, listener):
            if hasattr(listener, "enterReportGroupNextGroupClause"):
                listener.enterReportGroupNextGroupClause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitReportGroupNextGroupClause"):
                listener.exitReportGroupNextGroupClause(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitReportGroupNextGroupClause"):
                return visitor.visitReportGroupNextGroupClause(self)
            else:
                return visitor.visitChildren(self)




    def reportGroupNextGroupClause(self):

        localctx = Cobol85Parser.ReportGroupNextGroupClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 360, self.RULE_reportGroupNextGroupClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2894
            self.match(Cobol85Parser.NEXT)
            self.state = 2895
            self.match(Cobol85Parser.GROUP)
            self.state = 2897
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.IS:
                self.state = 2896
                self.match(Cobol85Parser.IS)


            self.state = 2902
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Cobol85Parser.LEVEL_NUMBER_66, Cobol85Parser.LEVEL_NUMBER_77, Cobol85Parser.LEVEL_NUMBER_88, Cobol85Parser.INTEGERLITERAL]:
                self.state = 2899
                self.integerLiteral()
                pass
            elif token in [Cobol85Parser.NEXT]:
                self.state = 2900
                self.reportGroupNextGroupNextPage()
                pass
            elif token in [Cobol85Parser.PLUS]:
                self.state = 2901
                self.reportGroupNextGroupPlus()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ReportGroupNextGroupPlusContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.ReportGroupNextGroupPlusContext, self).__init__(parent, invokingState)
            self.parser = parser

        def PLUS(self):
            return self.getToken(Cobol85Parser.PLUS, 0)

        def integerLiteral(self):
            return self.getTypedRuleContext(Cobol85Parser.IntegerLiteralContext,0)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_reportGroupNextGroupPlus

        def enterRule(self, listener):
            if hasattr(listener, "enterReportGroupNextGroupPlus"):
                listener.enterReportGroupNextGroupPlus(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitReportGroupNextGroupPlus"):
                listener.exitReportGroupNextGroupPlus(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitReportGroupNextGroupPlus"):
                return visitor.visitReportGroupNextGroupPlus(self)
            else:
                return visitor.visitChildren(self)




    def reportGroupNextGroupPlus(self):

        localctx = Cobol85Parser.ReportGroupNextGroupPlusContext(self, self._ctx, self.state)
        self.enterRule(localctx, 362, self.RULE_reportGroupNextGroupPlus)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2904
            self.match(Cobol85Parser.PLUS)
            self.state = 2905
            self.integerLiteral()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ReportGroupNextGroupNextPageContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.ReportGroupNextGroupNextPageContext, self).__init__(parent, invokingState)
            self.parser = parser

        def NEXT(self):
            return self.getToken(Cobol85Parser.NEXT, 0)

        def PAGE(self):
            return self.getToken(Cobol85Parser.PAGE, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_reportGroupNextGroupNextPage

        def enterRule(self, listener):
            if hasattr(listener, "enterReportGroupNextGroupNextPage"):
                listener.enterReportGroupNextGroupNextPage(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitReportGroupNextGroupNextPage"):
                listener.exitReportGroupNextGroupNextPage(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitReportGroupNextGroupNextPage"):
                return visitor.visitReportGroupNextGroupNextPage(self)
            else:
                return visitor.visitChildren(self)




    def reportGroupNextGroupNextPage(self):

        localctx = Cobol85Parser.ReportGroupNextGroupNextPageContext(self, self._ctx, self.state)
        self.enterRule(localctx, 364, self.RULE_reportGroupNextGroupNextPage)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2907
            self.match(Cobol85Parser.NEXT)
            self.state = 2908
            self.match(Cobol85Parser.PAGE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ReportGroupPictureClauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.ReportGroupPictureClauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def pictureString(self):
            return self.getTypedRuleContext(Cobol85Parser.PictureStringContext,0)


        def PICTURE(self):
            return self.getToken(Cobol85Parser.PICTURE, 0)

        def PIC(self):
            return self.getToken(Cobol85Parser.PIC, 0)

        def IS(self):
            return self.getToken(Cobol85Parser.IS, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_reportGroupPictureClause

        def enterRule(self, listener):
            if hasattr(listener, "enterReportGroupPictureClause"):
                listener.enterReportGroupPictureClause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitReportGroupPictureClause"):
                listener.exitReportGroupPictureClause(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitReportGroupPictureClause"):
                return visitor.visitReportGroupPictureClause(self)
            else:
                return visitor.visitChildren(self)




    def reportGroupPictureClause(self):

        localctx = Cobol85Parser.ReportGroupPictureClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 366, self.RULE_reportGroupPictureClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2910
            _la = self._input.LA(1)
            if not(_la==Cobol85Parser.PIC or _la==Cobol85Parser.PICTURE):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2912
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.IS:
                self.state = 2911
                self.match(Cobol85Parser.IS)


            self.state = 2914
            self.pictureString()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ReportGroupResetClauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.ReportGroupResetClauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def RESET(self):
            return self.getToken(Cobol85Parser.RESET, 0)

        def FINAL(self):
            return self.getToken(Cobol85Parser.FINAL, 0)

        def dataName(self):
            return self.getTypedRuleContext(Cobol85Parser.DataNameContext,0)


        def ON(self):
            return self.getToken(Cobol85Parser.ON, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_reportGroupResetClause

        def enterRule(self, listener):
            if hasattr(listener, "enterReportGroupResetClause"):
                listener.enterReportGroupResetClause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitReportGroupResetClause"):
                listener.exitReportGroupResetClause(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitReportGroupResetClause"):
                return visitor.visitReportGroupResetClause(self)
            else:
                return visitor.visitChildren(self)




    def reportGroupResetClause(self):

        localctx = Cobol85Parser.ReportGroupResetClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 368, self.RULE_reportGroupResetClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2916
            self.match(Cobol85Parser.RESET)
            self.state = 2918
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.ON:
                self.state = 2917
                self.match(Cobol85Parser.ON)


            self.state = 2922
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Cobol85Parser.FINAL]:
                self.state = 2920
                self.match(Cobol85Parser.FINAL)
                pass
            elif token in [Cobol85Parser.ABORT, Cobol85Parser.AS, Cobol85Parser.ASCII, Cobol85Parser.ASSOCIATED_DATA, Cobol85Parser.ASSOCIATED_DATA_LENGTH, Cobol85Parser.ATTRIBUTE, Cobol85Parser.AUTO, Cobol85Parser.AUTO_SKIP, Cobol85Parser.BACKGROUND_COLOR, Cobol85Parser.BACKGROUND_COLOUR, Cobol85Parser.BEEP, Cobol85Parser.BELL, Cobol85Parser.BINARY, Cobol85Parser.BIT, Cobol85Parser.BLINK, Cobol85Parser.BLOB, Cobol85Parser.BOUNDS, Cobol85Parser.CAPABLE, Cobol85Parser.CCSVERSION, Cobol85Parser.CHANGED, Cobol85Parser.CHANNEL, Cobol85Parser.CLOB, Cobol85Parser.CLOSE_DISPOSITION, Cobol85Parser.COBOL, Cobol85Parser.COMMITMENT, Cobol85Parser.CONTROL_POINT, Cobol85Parser.CONVENTION, Cobol85Parser.CRUNCH, Cobol85Parser.CURSOR, Cobol85Parser.DBCLOB, Cobol85Parser.DEFAULT, Cobol85Parser.DEFAULT_DISPLAY, Cobol85Parser.DEFINITION, Cobol85Parser.DFHRESP, Cobol85Parser.DFHVALUE, Cobol85Parser.DISK, Cobol85Parser.DONTCARE, Cobol85Parser.DOUBLE, Cobol85Parser.EBCDIC, Cobol85Parser.EMPTY_CHECK, Cobol85Parser.ENTER, Cobol85Parser.ENTRY_PROCEDURE, Cobol85Parser.ERASE, Cobol85Parser.EOL, Cobol85Parser.EOS, Cobol85Parser.ESCAPE, Cobol85Parser.EVENT, Cobol85Parser.EXCLUSIVE, Cobol85Parser.EXPORT, Cobol85Parser.EXTENDED, Cobol85Parser.FOREGROUND_COLOR, Cobol85Parser.FOREGROUND_COLOUR, Cobol85Parser.FULL, Cobol85Parser.FUNCTIONNAME, Cobol85Parser.FUNCTION_POINTER, Cobol85Parser.GRID, Cobol85Parser.HIGHLIGHT, Cobol85Parser.IMPLICIT, Cobol85Parser.IMPORT, Cobol85Parser.INTEGER, Cobol85Parser.KEPT, Cobol85Parser.KEYBOARD, Cobol85Parser.LANGUAGE, Cobol85Parser.LB, Cobol85Parser.LD, Cobol85Parser.LEFTLINE, Cobol85Parser.LENGTH_CHECK, Cobol85Parser.LIBACCESS, Cobol85Parser.LIBPARAMETER, Cobol85Parser.LIBRARY, Cobol85Parser.LIST, Cobol85Parser.LOCAL, Cobol85Parser.LONG_DATE, Cobol85Parser.LONG_TIME, Cobol85Parser.LOWER, Cobol85Parser.LOWLIGHT, Cobol85Parser.MMDDYYYY, Cobol85Parser.NAMED, Cobol85Parser.NATIONAL, Cobol85Parser.NATIONAL_EDITED, Cobol85Parser.NETWORK, Cobol85Parser.NO_ECHO, Cobol85Parser.NUMERIC_DATE, Cobol85Parser.NUMERIC_TIME, Cobol85Parser.ODT, Cobol85Parser.ORDERLY, Cobol85Parser.OVERLINE, Cobol85Parser.OWN, Cobol85Parser.PASSWORD, Cobol85Parser.PORT, Cobol85Parser.PRINTER, Cobol85Parser.PRIVATE, Cobol85Parser.PROCESS, Cobol85Parser.PROGRAM, Cobol85Parser.PROMPT, Cobol85Parser.READER, Cobol85Parser.REMOTE, Cobol85Parser.REAL, Cobol85Parser.RECEIVED, Cobol85Parser.RECURSIVE, Cobol85Parser.REF, Cobol85Parser.REMOVE, Cobol85Parser.REQUIRED, Cobol85Parser.REVERSE_VIDEO, Cobol85Parser.SAVE, Cobol85Parser.SECURE, Cobol85Parser.SHARED, Cobol85Parser.SHAREDBYALL, Cobol85Parser.SHAREDBYRUNUNIT, Cobol85Parser.SHARING, Cobol85Parser.SHORT_DATE, Cobol85Parser.SQL, Cobol85Parser.SYMBOL, Cobol85Parser.TASK, Cobol85Parser.THREAD, Cobol85Parser.THREAD_LOCAL, Cobol85Parser.TIMER, Cobol85Parser.TODAYS_DATE, Cobol85Parser.TODAYS_NAME, Cobol85Parser.TRUNCATED, Cobol85Parser.TYPEDEF, Cobol85Parser.UNDERLINE, Cobol85Parser.VIRTUAL, Cobol85Parser.WAIT, Cobol85Parser.YEAR, Cobol85Parser.YYYYMMDD, Cobol85Parser.YYYYDDD, Cobol85Parser.ZERO_FILL, Cobol85Parser.IDENTIFIER]:
                self.state = 2921
                self.dataName()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ReportGroupSignClauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.ReportGroupSignClauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def SIGN(self):
            return self.getToken(Cobol85Parser.SIGN, 0)

        def SEPARATE(self):
            return self.getToken(Cobol85Parser.SEPARATE, 0)

        def LEADING(self):
            return self.getToken(Cobol85Parser.LEADING, 0)

        def TRAILING(self):
            return self.getToken(Cobol85Parser.TRAILING, 0)

        def IS(self):
            return self.getToken(Cobol85Parser.IS, 0)

        def CHARACTER(self):
            return self.getToken(Cobol85Parser.CHARACTER, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_reportGroupSignClause

        def enterRule(self, listener):
            if hasattr(listener, "enterReportGroupSignClause"):
                listener.enterReportGroupSignClause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitReportGroupSignClause"):
                listener.exitReportGroupSignClause(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitReportGroupSignClause"):
                return visitor.visitReportGroupSignClause(self)
            else:
                return visitor.visitChildren(self)




    def reportGroupSignClause(self):

        localctx = Cobol85Parser.ReportGroupSignClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 370, self.RULE_reportGroupSignClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2924
            self.match(Cobol85Parser.SIGN)
            self.state = 2926
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.IS:
                self.state = 2925
                self.match(Cobol85Parser.IS)


            self.state = 2928
            _la = self._input.LA(1)
            if not(_la==Cobol85Parser.LEADING or _la==Cobol85Parser.TRAILING):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2929
            self.match(Cobol85Parser.SEPARATE)
            self.state = 2931
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.CHARACTER:
                self.state = 2930
                self.match(Cobol85Parser.CHARACTER)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ReportGroupSourceClauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.ReportGroupSourceClauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def SOURCE(self):
            return self.getToken(Cobol85Parser.SOURCE, 0)

        def identifier(self):
            return self.getTypedRuleContext(Cobol85Parser.IdentifierContext,0)


        def IS(self):
            return self.getToken(Cobol85Parser.IS, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_reportGroupSourceClause

        def enterRule(self, listener):
            if hasattr(listener, "enterReportGroupSourceClause"):
                listener.enterReportGroupSourceClause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitReportGroupSourceClause"):
                listener.exitReportGroupSourceClause(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitReportGroupSourceClause"):
                return visitor.visitReportGroupSourceClause(self)
            else:
                return visitor.visitChildren(self)




    def reportGroupSourceClause(self):

        localctx = Cobol85Parser.ReportGroupSourceClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 372, self.RULE_reportGroupSourceClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2933
            self.match(Cobol85Parser.SOURCE)
            self.state = 2935
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.IS:
                self.state = 2934
                self.match(Cobol85Parser.IS)


            self.state = 2937
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ReportGroupSumClauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.ReportGroupSumClauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def SUM(self):
            return self.getToken(Cobol85Parser.SUM, 0)

        def identifier(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.IdentifierContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.IdentifierContext,i)


        def UPON(self):
            return self.getToken(Cobol85Parser.UPON, 0)

        def dataName(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.DataNameContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.DataNameContext,i)


        def COMMACHAR(self, i=None):
            if i is None:
                return self.getTokens(Cobol85Parser.COMMACHAR)
            else:
                return self.getToken(Cobol85Parser.COMMACHAR, i)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_reportGroupSumClause

        def enterRule(self, listener):
            if hasattr(listener, "enterReportGroupSumClause"):
                listener.enterReportGroupSumClause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitReportGroupSumClause"):
                listener.exitReportGroupSumClause(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitReportGroupSumClause"):
                return visitor.visitReportGroupSumClause(self)
            else:
                return visitor.visitChildren(self)




    def reportGroupSumClause(self):

        localctx = Cobol85Parser.ReportGroupSumClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 374, self.RULE_reportGroupSumClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2939
            self.match(Cobol85Parser.SUM)
            self.state = 2940
            self.identifier()
            self.state = 2947
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,350,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2942
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==Cobol85Parser.COMMACHAR:
                        self.state = 2941
                        self.match(Cobol85Parser.COMMACHAR)


                    self.state = 2944
                    self.identifier() 
                self.state = 2949
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,350,self._ctx)

            self.state = 2961
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.UPON:
                self.state = 2950
                self.match(Cobol85Parser.UPON)
                self.state = 2951
                self.dataName()
                self.state = 2958
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE) | (1 << Cobol85Parser.AUTO) | (1 << Cobol85Parser.AUTO_SKIP) | (1 << Cobol85Parser.BACKGROUND_COLOR) | (1 << Cobol85Parser.BACKGROUND_COLOUR) | (1 << Cobol85Parser.BEEP) | (1 << Cobol85Parser.BELL) | (1 << Cobol85Parser.BINARY) | (1 << Cobol85Parser.BIT) | (1 << Cobol85Parser.BLINK) | (1 << Cobol85Parser.BLOB) | (1 << Cobol85Parser.BOUNDS) | (1 << Cobol85Parser.CAPABLE) | (1 << Cobol85Parser.CCSVERSION) | (1 << Cobol85Parser.CHANGED) | (1 << Cobol85Parser.CHANNEL))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (Cobol85Parser.CLOB - 67)) | (1 << (Cobol85Parser.CLOSE_DISPOSITION - 67)) | (1 << (Cobol85Parser.COBOL - 67)) | (1 << (Cobol85Parser.COMMITMENT - 67)) | (1 << (Cobol85Parser.CONTROL_POINT - 67)) | (1 << (Cobol85Parser.CONVENTION - 67)) | (1 << (Cobol85Parser.CRUNCH - 67)) | (1 << (Cobol85Parser.CURSOR - 67)) | (1 << (Cobol85Parser.DBCLOB - 67)))) != 0) or ((((_la - 131)) & ~0x3f) == 0 and ((1 << (_la - 131)) & ((1 << (Cobol85Parser.DEFAULT - 131)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 131)) | (1 << (Cobol85Parser.DEFINITION - 131)) | (1 << (Cobol85Parser.DFHRESP - 131)) | (1 << (Cobol85Parser.DFHVALUE - 131)) | (1 << (Cobol85Parser.DISK - 131)) | (1 << (Cobol85Parser.DONTCARE - 131)) | (1 << (Cobol85Parser.DOUBLE - 131)) | (1 << (Cobol85Parser.EBCDIC - 131)) | (1 << (Cobol85Parser.EMPTY_CHECK - 131)) | (1 << (Cobol85Parser.ENTER - 131)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 131)) | (1 << (Cobol85Parser.ERASE - 131)) | (1 << (Cobol85Parser.EOL - 131)) | (1 << (Cobol85Parser.EOS - 131)))) != 0) or ((((_la - 195)) & ~0x3f) == 0 and ((1 << (_la - 195)) & ((1 << (Cobol85Parser.ESCAPE - 195)) | (1 << (Cobol85Parser.EVENT - 195)) | (1 << (Cobol85Parser.EXCLUSIVE - 195)) | (1 << (Cobol85Parser.EXPORT - 195)) | (1 << (Cobol85Parser.EXTENDED - 195)) | (1 << (Cobol85Parser.FOREGROUND_COLOR - 195)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 195)) | (1 << (Cobol85Parser.FULL - 195)) | (1 << (Cobol85Parser.FUNCTIONNAME - 195)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 195)) | (1 << (Cobol85Parser.GRID - 195)) | (1 << (Cobol85Parser.HIGHLIGHT - 195)) | (1 << (Cobol85Parser.IMPLICIT - 195)) | (1 << (Cobol85Parser.IMPORT - 195)) | (1 << (Cobol85Parser.INTEGER - 195)))) != 0) or ((((_la - 262)) & ~0x3f) == 0 and ((1 << (_la - 262)) & ((1 << (Cobol85Parser.KEPT - 262)) | (1 << (Cobol85Parser.KEYBOARD - 262)) | (1 << (Cobol85Parser.LANGUAGE - 262)) | (1 << (Cobol85Parser.LB - 262)) | (1 << (Cobol85Parser.LD - 262)) | (1 << (Cobol85Parser.LEFTLINE - 262)) | (1 << (Cobol85Parser.LENGTH_CHECK - 262)) | (1 << (Cobol85Parser.LIBACCESS - 262)) | (1 << (Cobol85Parser.LIBPARAMETER - 262)) | (1 << (Cobol85Parser.LIBRARY - 262)) | (1 << (Cobol85Parser.LIST - 262)) | (1 << (Cobol85Parser.LOCAL - 262)) | (1 << (Cobol85Parser.LONG_DATE - 262)) | (1 << (Cobol85Parser.LONG_TIME - 262)) | (1 << (Cobol85Parser.LOWER - 262)) | (1 << (Cobol85Parser.LOWLIGHT - 262)) | (1 << (Cobol85Parser.MMDDYYYY - 262)) | (1 << (Cobol85Parser.NAMED - 262)) | (1 << (Cobol85Parser.NATIONAL - 262)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 262)) | (1 << (Cobol85Parser.NETWORK - 262)) | (1 << (Cobol85Parser.NO_ECHO - 262)) | (1 << (Cobol85Parser.NUMERIC_DATE - 262)) | (1 << (Cobol85Parser.NUMERIC_TIME - 262)))) != 0) or ((((_la - 326)) & ~0x3f) == 0 and ((1 << (_la - 326)) & ((1 << (Cobol85Parser.ODT - 326)) | (1 << (Cobol85Parser.ORDERLY - 326)) | (1 << (Cobol85Parser.OVERLINE - 326)) | (1 << (Cobol85Parser.OWN - 326)) | (1 << (Cobol85Parser.PASSWORD - 326)) | (1 << (Cobol85Parser.PORT - 326)) | (1 << (Cobol85Parser.PRINTER - 326)) | (1 << (Cobol85Parser.PRIVATE - 326)) | (1 << (Cobol85Parser.PROCESS - 326)) | (1 << (Cobol85Parser.PROGRAM - 326)) | (1 << (Cobol85Parser.PROMPT - 326)) | (1 << (Cobol85Parser.READER - 326)) | (1 << (Cobol85Parser.REMOTE - 326)) | (1 << (Cobol85Parser.REAL - 326)) | (1 << (Cobol85Parser.RECEIVED - 326)) | (1 << (Cobol85Parser.RECURSIVE - 326)) | (1 << (Cobol85Parser.REF - 326)))) != 0) or ((((_la - 395)) & ~0x3f) == 0 and ((1 << (_la - 395)) & ((1 << (Cobol85Parser.REMOVE - 395)) | (1 << (Cobol85Parser.REQUIRED - 395)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 395)) | (1 << (Cobol85Parser.SAVE - 395)) | (1 << (Cobol85Parser.SECURE - 395)) | (1 << (Cobol85Parser.SHARED - 395)) | (1 << (Cobol85Parser.SHAREDBYALL - 395)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 395)) | (1 << (Cobol85Parser.SHARING - 395)) | (1 << (Cobol85Parser.SHORT_DATE - 395)) | (1 << (Cobol85Parser.SQL - 395)))) != 0) or ((((_la - 471)) & ~0x3f) == 0 and ((1 << (_la - 471)) & ((1 << (Cobol85Parser.SYMBOL - 471)) | (1 << (Cobol85Parser.TASK - 471)) | (1 << (Cobol85Parser.THREAD - 471)) | (1 << (Cobol85Parser.THREAD_LOCAL - 471)) | (1 << (Cobol85Parser.TIMER - 471)) | (1 << (Cobol85Parser.TODAYS_DATE - 471)) | (1 << (Cobol85Parser.TODAYS_NAME - 471)) | (1 << (Cobol85Parser.TRUNCATED - 471)) | (1 << (Cobol85Parser.TYPEDEF - 471)) | (1 << (Cobol85Parser.UNDERLINE - 471)) | (1 << (Cobol85Parser.VIRTUAL - 471)) | (1 << (Cobol85Parser.WAIT - 471)) | (1 << (Cobol85Parser.YEAR - 471)) | (1 << (Cobol85Parser.YYYYMMDD - 471)) | (1 << (Cobol85Parser.YYYYDDD - 471)) | (1 << (Cobol85Parser.ZERO_FILL - 471)) | (1 << (Cobol85Parser.COMMACHAR - 471)))) != 0) or _la==Cobol85Parser.IDENTIFIER:
                    self.state = 2953
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==Cobol85Parser.COMMACHAR:
                        self.state = 2952
                        self.match(Cobol85Parser.COMMACHAR)


                    self.state = 2955
                    self.dataName()
                    self.state = 2960
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ReportGroupTypeClauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.ReportGroupTypeClauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def TYPE(self):
            return self.getToken(Cobol85Parser.TYPE, 0)

        def reportGroupTypeReportHeading(self):
            return self.getTypedRuleContext(Cobol85Parser.ReportGroupTypeReportHeadingContext,0)


        def reportGroupTypePageHeading(self):
            return self.getTypedRuleContext(Cobol85Parser.ReportGroupTypePageHeadingContext,0)


        def reportGroupTypeControlHeading(self):
            return self.getTypedRuleContext(Cobol85Parser.ReportGroupTypeControlHeadingContext,0)


        def reportGroupTypeDetail(self):
            return self.getTypedRuleContext(Cobol85Parser.ReportGroupTypeDetailContext,0)


        def reportGroupTypeControlFooting(self):
            return self.getTypedRuleContext(Cobol85Parser.ReportGroupTypeControlFootingContext,0)


        def reportGroupTypePageFooting(self):
            return self.getTypedRuleContext(Cobol85Parser.ReportGroupTypePageFootingContext,0)


        def reportGroupTypeReportFooting(self):
            return self.getTypedRuleContext(Cobol85Parser.ReportGroupTypeReportFootingContext,0)


        def IS(self):
            return self.getToken(Cobol85Parser.IS, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_reportGroupTypeClause

        def enterRule(self, listener):
            if hasattr(listener, "enterReportGroupTypeClause"):
                listener.enterReportGroupTypeClause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitReportGroupTypeClause"):
                listener.exitReportGroupTypeClause(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitReportGroupTypeClause"):
                return visitor.visitReportGroupTypeClause(self)
            else:
                return visitor.visitChildren(self)




    def reportGroupTypeClause(self):

        localctx = Cobol85Parser.ReportGroupTypeClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 376, self.RULE_reportGroupTypeClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2963
            self.match(Cobol85Parser.TYPE)
            self.state = 2965
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.IS:
                self.state = 2964
                self.match(Cobol85Parser.IS)


            self.state = 2974
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,355,self._ctx)
            if la_ == 1:
                self.state = 2967
                self.reportGroupTypeReportHeading()
                pass

            elif la_ == 2:
                self.state = 2968
                self.reportGroupTypePageHeading()
                pass

            elif la_ == 3:
                self.state = 2969
                self.reportGroupTypeControlHeading()
                pass

            elif la_ == 4:
                self.state = 2970
                self.reportGroupTypeDetail()
                pass

            elif la_ == 5:
                self.state = 2971
                self.reportGroupTypeControlFooting()
                pass

            elif la_ == 6:
                self.state = 2972
                self.reportGroupTypePageFooting()
                pass

            elif la_ == 7:
                self.state = 2973
                self.reportGroupTypeReportFooting()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ReportGroupTypeReportHeadingContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.ReportGroupTypeReportHeadingContext, self).__init__(parent, invokingState)
            self.parser = parser

        def REPORT(self):
            return self.getToken(Cobol85Parser.REPORT, 0)

        def HEADING(self):
            return self.getToken(Cobol85Parser.HEADING, 0)

        def RH(self):
            return self.getToken(Cobol85Parser.RH, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_reportGroupTypeReportHeading

        def enterRule(self, listener):
            if hasattr(listener, "enterReportGroupTypeReportHeading"):
                listener.enterReportGroupTypeReportHeading(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitReportGroupTypeReportHeading"):
                listener.exitReportGroupTypeReportHeading(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitReportGroupTypeReportHeading"):
                return visitor.visitReportGroupTypeReportHeading(self)
            else:
                return visitor.visitChildren(self)




    def reportGroupTypeReportHeading(self):

        localctx = Cobol85Parser.ReportGroupTypeReportHeadingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 378, self.RULE_reportGroupTypeReportHeading)
        try:
            self.state = 2979
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Cobol85Parser.REPORT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2976
                self.match(Cobol85Parser.REPORT)
                self.state = 2977
                self.match(Cobol85Parser.HEADING)
                pass
            elif token in [Cobol85Parser.RH]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2978
                self.match(Cobol85Parser.RH)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ReportGroupTypePageHeadingContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.ReportGroupTypePageHeadingContext, self).__init__(parent, invokingState)
            self.parser = parser

        def PAGE(self):
            return self.getToken(Cobol85Parser.PAGE, 0)

        def HEADING(self):
            return self.getToken(Cobol85Parser.HEADING, 0)

        def PH(self):
            return self.getToken(Cobol85Parser.PH, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_reportGroupTypePageHeading

        def enterRule(self, listener):
            if hasattr(listener, "enterReportGroupTypePageHeading"):
                listener.enterReportGroupTypePageHeading(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitReportGroupTypePageHeading"):
                listener.exitReportGroupTypePageHeading(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitReportGroupTypePageHeading"):
                return visitor.visitReportGroupTypePageHeading(self)
            else:
                return visitor.visitChildren(self)




    def reportGroupTypePageHeading(self):

        localctx = Cobol85Parser.ReportGroupTypePageHeadingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 380, self.RULE_reportGroupTypePageHeading)
        try:
            self.state = 2984
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Cobol85Parser.PAGE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2981
                self.match(Cobol85Parser.PAGE)
                self.state = 2982
                self.match(Cobol85Parser.HEADING)
                pass
            elif token in [Cobol85Parser.PH]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2983
                self.match(Cobol85Parser.PH)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ReportGroupTypeControlHeadingContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.ReportGroupTypeControlHeadingContext, self).__init__(parent, invokingState)
            self.parser = parser

        def CONTROL(self):
            return self.getToken(Cobol85Parser.CONTROL, 0)

        def HEADING(self):
            return self.getToken(Cobol85Parser.HEADING, 0)

        def CH(self):
            return self.getToken(Cobol85Parser.CH, 0)

        def FINAL(self):
            return self.getToken(Cobol85Parser.FINAL, 0)

        def dataName(self):
            return self.getTypedRuleContext(Cobol85Parser.DataNameContext,0)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_reportGroupTypeControlHeading

        def enterRule(self, listener):
            if hasattr(listener, "enterReportGroupTypeControlHeading"):
                listener.enterReportGroupTypeControlHeading(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitReportGroupTypeControlHeading"):
                listener.exitReportGroupTypeControlHeading(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitReportGroupTypeControlHeading"):
                return visitor.visitReportGroupTypeControlHeading(self)
            else:
                return visitor.visitChildren(self)




    def reportGroupTypeControlHeading(self):

        localctx = Cobol85Parser.ReportGroupTypeControlHeadingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 382, self.RULE_reportGroupTypeControlHeading)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2989
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Cobol85Parser.CONTROL]:
                self.state = 2986
                self.match(Cobol85Parser.CONTROL)
                self.state = 2987
                self.match(Cobol85Parser.HEADING)
                pass
            elif token in [Cobol85Parser.CH]:
                self.state = 2988
                self.match(Cobol85Parser.CH)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 2993
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Cobol85Parser.FINAL]:
                self.state = 2991
                self.match(Cobol85Parser.FINAL)
                pass
            elif token in [Cobol85Parser.ABORT, Cobol85Parser.AS, Cobol85Parser.ASCII, Cobol85Parser.ASSOCIATED_DATA, Cobol85Parser.ASSOCIATED_DATA_LENGTH, Cobol85Parser.ATTRIBUTE, Cobol85Parser.AUTO, Cobol85Parser.AUTO_SKIP, Cobol85Parser.BACKGROUND_COLOR, Cobol85Parser.BACKGROUND_COLOUR, Cobol85Parser.BEEP, Cobol85Parser.BELL, Cobol85Parser.BINARY, Cobol85Parser.BIT, Cobol85Parser.BLINK, Cobol85Parser.BLOB, Cobol85Parser.BOUNDS, Cobol85Parser.CAPABLE, Cobol85Parser.CCSVERSION, Cobol85Parser.CHANGED, Cobol85Parser.CHANNEL, Cobol85Parser.CLOB, Cobol85Parser.CLOSE_DISPOSITION, Cobol85Parser.COBOL, Cobol85Parser.COMMITMENT, Cobol85Parser.CONTROL_POINT, Cobol85Parser.CONVENTION, Cobol85Parser.CRUNCH, Cobol85Parser.CURSOR, Cobol85Parser.DBCLOB, Cobol85Parser.DEFAULT, Cobol85Parser.DEFAULT_DISPLAY, Cobol85Parser.DEFINITION, Cobol85Parser.DFHRESP, Cobol85Parser.DFHVALUE, Cobol85Parser.DISK, Cobol85Parser.DONTCARE, Cobol85Parser.DOUBLE, Cobol85Parser.EBCDIC, Cobol85Parser.EMPTY_CHECK, Cobol85Parser.ENTER, Cobol85Parser.ENTRY_PROCEDURE, Cobol85Parser.ERASE, Cobol85Parser.EOL, Cobol85Parser.EOS, Cobol85Parser.ESCAPE, Cobol85Parser.EVENT, Cobol85Parser.EXCLUSIVE, Cobol85Parser.EXPORT, Cobol85Parser.EXTENDED, Cobol85Parser.FOREGROUND_COLOR, Cobol85Parser.FOREGROUND_COLOUR, Cobol85Parser.FULL, Cobol85Parser.FUNCTIONNAME, Cobol85Parser.FUNCTION_POINTER, Cobol85Parser.GRID, Cobol85Parser.HIGHLIGHT, Cobol85Parser.IMPLICIT, Cobol85Parser.IMPORT, Cobol85Parser.INTEGER, Cobol85Parser.KEPT, Cobol85Parser.KEYBOARD, Cobol85Parser.LANGUAGE, Cobol85Parser.LB, Cobol85Parser.LD, Cobol85Parser.LEFTLINE, Cobol85Parser.LENGTH_CHECK, Cobol85Parser.LIBACCESS, Cobol85Parser.LIBPARAMETER, Cobol85Parser.LIBRARY, Cobol85Parser.LIST, Cobol85Parser.LOCAL, Cobol85Parser.LONG_DATE, Cobol85Parser.LONG_TIME, Cobol85Parser.LOWER, Cobol85Parser.LOWLIGHT, Cobol85Parser.MMDDYYYY, Cobol85Parser.NAMED, Cobol85Parser.NATIONAL, Cobol85Parser.NATIONAL_EDITED, Cobol85Parser.NETWORK, Cobol85Parser.NO_ECHO, Cobol85Parser.NUMERIC_DATE, Cobol85Parser.NUMERIC_TIME, Cobol85Parser.ODT, Cobol85Parser.ORDERLY, Cobol85Parser.OVERLINE, Cobol85Parser.OWN, Cobol85Parser.PASSWORD, Cobol85Parser.PORT, Cobol85Parser.PRINTER, Cobol85Parser.PRIVATE, Cobol85Parser.PROCESS, Cobol85Parser.PROGRAM, Cobol85Parser.PROMPT, Cobol85Parser.READER, Cobol85Parser.REMOTE, Cobol85Parser.REAL, Cobol85Parser.RECEIVED, Cobol85Parser.RECURSIVE, Cobol85Parser.REF, Cobol85Parser.REMOVE, Cobol85Parser.REQUIRED, Cobol85Parser.REVERSE_VIDEO, Cobol85Parser.SAVE, Cobol85Parser.SECURE, Cobol85Parser.SHARED, Cobol85Parser.SHAREDBYALL, Cobol85Parser.SHAREDBYRUNUNIT, Cobol85Parser.SHARING, Cobol85Parser.SHORT_DATE, Cobol85Parser.SQL, Cobol85Parser.SYMBOL, Cobol85Parser.TASK, Cobol85Parser.THREAD, Cobol85Parser.THREAD_LOCAL, Cobol85Parser.TIMER, Cobol85Parser.TODAYS_DATE, Cobol85Parser.TODAYS_NAME, Cobol85Parser.TRUNCATED, Cobol85Parser.TYPEDEF, Cobol85Parser.UNDERLINE, Cobol85Parser.VIRTUAL, Cobol85Parser.WAIT, Cobol85Parser.YEAR, Cobol85Parser.YYYYMMDD, Cobol85Parser.YYYYDDD, Cobol85Parser.ZERO_FILL, Cobol85Parser.IDENTIFIER]:
                self.state = 2992
                self.dataName()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ReportGroupTypeDetailContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.ReportGroupTypeDetailContext, self).__init__(parent, invokingState)
            self.parser = parser

        def DETAIL(self):
            return self.getToken(Cobol85Parser.DETAIL, 0)

        def DE(self):
            return self.getToken(Cobol85Parser.DE, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_reportGroupTypeDetail

        def enterRule(self, listener):
            if hasattr(listener, "enterReportGroupTypeDetail"):
                listener.enterReportGroupTypeDetail(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitReportGroupTypeDetail"):
                listener.exitReportGroupTypeDetail(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitReportGroupTypeDetail"):
                return visitor.visitReportGroupTypeDetail(self)
            else:
                return visitor.visitChildren(self)




    def reportGroupTypeDetail(self):

        localctx = Cobol85Parser.ReportGroupTypeDetailContext(self, self._ctx, self.state)
        self.enterRule(localctx, 384, self.RULE_reportGroupTypeDetail)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2995
            _la = self._input.LA(1)
            if not(_la==Cobol85Parser.DE or _la==Cobol85Parser.DETAIL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ReportGroupTypeControlFootingContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.ReportGroupTypeControlFootingContext, self).__init__(parent, invokingState)
            self.parser = parser

        def CONTROL(self):
            return self.getToken(Cobol85Parser.CONTROL, 0)

        def FOOTING(self):
            return self.getToken(Cobol85Parser.FOOTING, 0)

        def CF(self):
            return self.getToken(Cobol85Parser.CF, 0)

        def FINAL(self):
            return self.getToken(Cobol85Parser.FINAL, 0)

        def dataName(self):
            return self.getTypedRuleContext(Cobol85Parser.DataNameContext,0)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_reportGroupTypeControlFooting

        def enterRule(self, listener):
            if hasattr(listener, "enterReportGroupTypeControlFooting"):
                listener.enterReportGroupTypeControlFooting(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitReportGroupTypeControlFooting"):
                listener.exitReportGroupTypeControlFooting(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitReportGroupTypeControlFooting"):
                return visitor.visitReportGroupTypeControlFooting(self)
            else:
                return visitor.visitChildren(self)




    def reportGroupTypeControlFooting(self):

        localctx = Cobol85Parser.ReportGroupTypeControlFootingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 386, self.RULE_reportGroupTypeControlFooting)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3000
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Cobol85Parser.CONTROL]:
                self.state = 2997
                self.match(Cobol85Parser.CONTROL)
                self.state = 2998
                self.match(Cobol85Parser.FOOTING)
                pass
            elif token in [Cobol85Parser.CF]:
                self.state = 2999
                self.match(Cobol85Parser.CF)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 3004
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Cobol85Parser.FINAL]:
                self.state = 3002
                self.match(Cobol85Parser.FINAL)
                pass
            elif token in [Cobol85Parser.ABORT, Cobol85Parser.AS, Cobol85Parser.ASCII, Cobol85Parser.ASSOCIATED_DATA, Cobol85Parser.ASSOCIATED_DATA_LENGTH, Cobol85Parser.ATTRIBUTE, Cobol85Parser.AUTO, Cobol85Parser.AUTO_SKIP, Cobol85Parser.BACKGROUND_COLOR, Cobol85Parser.BACKGROUND_COLOUR, Cobol85Parser.BEEP, Cobol85Parser.BELL, Cobol85Parser.BINARY, Cobol85Parser.BIT, Cobol85Parser.BLINK, Cobol85Parser.BLOB, Cobol85Parser.BOUNDS, Cobol85Parser.CAPABLE, Cobol85Parser.CCSVERSION, Cobol85Parser.CHANGED, Cobol85Parser.CHANNEL, Cobol85Parser.CLOB, Cobol85Parser.CLOSE_DISPOSITION, Cobol85Parser.COBOL, Cobol85Parser.COMMITMENT, Cobol85Parser.CONTROL_POINT, Cobol85Parser.CONVENTION, Cobol85Parser.CRUNCH, Cobol85Parser.CURSOR, Cobol85Parser.DBCLOB, Cobol85Parser.DEFAULT, Cobol85Parser.DEFAULT_DISPLAY, Cobol85Parser.DEFINITION, Cobol85Parser.DFHRESP, Cobol85Parser.DFHVALUE, Cobol85Parser.DISK, Cobol85Parser.DONTCARE, Cobol85Parser.DOUBLE, Cobol85Parser.EBCDIC, Cobol85Parser.EMPTY_CHECK, Cobol85Parser.ENTER, Cobol85Parser.ENTRY_PROCEDURE, Cobol85Parser.ERASE, Cobol85Parser.EOL, Cobol85Parser.EOS, Cobol85Parser.ESCAPE, Cobol85Parser.EVENT, Cobol85Parser.EXCLUSIVE, Cobol85Parser.EXPORT, Cobol85Parser.EXTENDED, Cobol85Parser.FOREGROUND_COLOR, Cobol85Parser.FOREGROUND_COLOUR, Cobol85Parser.FULL, Cobol85Parser.FUNCTIONNAME, Cobol85Parser.FUNCTION_POINTER, Cobol85Parser.GRID, Cobol85Parser.HIGHLIGHT, Cobol85Parser.IMPLICIT, Cobol85Parser.IMPORT, Cobol85Parser.INTEGER, Cobol85Parser.KEPT, Cobol85Parser.KEYBOARD, Cobol85Parser.LANGUAGE, Cobol85Parser.LB, Cobol85Parser.LD, Cobol85Parser.LEFTLINE, Cobol85Parser.LENGTH_CHECK, Cobol85Parser.LIBACCESS, Cobol85Parser.LIBPARAMETER, Cobol85Parser.LIBRARY, Cobol85Parser.LIST, Cobol85Parser.LOCAL, Cobol85Parser.LONG_DATE, Cobol85Parser.LONG_TIME, Cobol85Parser.LOWER, Cobol85Parser.LOWLIGHT, Cobol85Parser.MMDDYYYY, Cobol85Parser.NAMED, Cobol85Parser.NATIONAL, Cobol85Parser.NATIONAL_EDITED, Cobol85Parser.NETWORK, Cobol85Parser.NO_ECHO, Cobol85Parser.NUMERIC_DATE, Cobol85Parser.NUMERIC_TIME, Cobol85Parser.ODT, Cobol85Parser.ORDERLY, Cobol85Parser.OVERLINE, Cobol85Parser.OWN, Cobol85Parser.PASSWORD, Cobol85Parser.PORT, Cobol85Parser.PRINTER, Cobol85Parser.PRIVATE, Cobol85Parser.PROCESS, Cobol85Parser.PROGRAM, Cobol85Parser.PROMPT, Cobol85Parser.READER, Cobol85Parser.REMOTE, Cobol85Parser.REAL, Cobol85Parser.RECEIVED, Cobol85Parser.RECURSIVE, Cobol85Parser.REF, Cobol85Parser.REMOVE, Cobol85Parser.REQUIRED, Cobol85Parser.REVERSE_VIDEO, Cobol85Parser.SAVE, Cobol85Parser.SECURE, Cobol85Parser.SHARED, Cobol85Parser.SHAREDBYALL, Cobol85Parser.SHAREDBYRUNUNIT, Cobol85Parser.SHARING, Cobol85Parser.SHORT_DATE, Cobol85Parser.SQL, Cobol85Parser.SYMBOL, Cobol85Parser.TASK, Cobol85Parser.THREAD, Cobol85Parser.THREAD_LOCAL, Cobol85Parser.TIMER, Cobol85Parser.TODAYS_DATE, Cobol85Parser.TODAYS_NAME, Cobol85Parser.TRUNCATED, Cobol85Parser.TYPEDEF, Cobol85Parser.UNDERLINE, Cobol85Parser.VIRTUAL, Cobol85Parser.WAIT, Cobol85Parser.YEAR, Cobol85Parser.YYYYMMDD, Cobol85Parser.YYYYDDD, Cobol85Parser.ZERO_FILL, Cobol85Parser.IDENTIFIER]:
                self.state = 3003
                self.dataName()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ReportGroupUsageClauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.ReportGroupUsageClauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def DISPLAY(self):
            return self.getToken(Cobol85Parser.DISPLAY, 0)

        def DISPLAY_1(self):
            return self.getToken(Cobol85Parser.DISPLAY_1, 0)

        def USAGE(self):
            return self.getToken(Cobol85Parser.USAGE, 0)

        def IS(self):
            return self.getToken(Cobol85Parser.IS, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_reportGroupUsageClause

        def enterRule(self, listener):
            if hasattr(listener, "enterReportGroupUsageClause"):
                listener.enterReportGroupUsageClause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitReportGroupUsageClause"):
                listener.exitReportGroupUsageClause(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitReportGroupUsageClause"):
                return visitor.visitReportGroupUsageClause(self)
            else:
                return visitor.visitChildren(self)




    def reportGroupUsageClause(self):

        localctx = Cobol85Parser.ReportGroupUsageClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 388, self.RULE_reportGroupUsageClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3010
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.USAGE:
                self.state = 3006
                self.match(Cobol85Parser.USAGE)
                self.state = 3008
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Cobol85Parser.IS:
                    self.state = 3007
                    self.match(Cobol85Parser.IS)




            self.state = 3012
            _la = self._input.LA(1)
            if not(_la==Cobol85Parser.DISPLAY or _la==Cobol85Parser.DISPLAY_1):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ReportGroupTypePageFootingContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.ReportGroupTypePageFootingContext, self).__init__(parent, invokingState)
            self.parser = parser

        def PAGE(self):
            return self.getToken(Cobol85Parser.PAGE, 0)

        def FOOTING(self):
            return self.getToken(Cobol85Parser.FOOTING, 0)

        def PF(self):
            return self.getToken(Cobol85Parser.PF, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_reportGroupTypePageFooting

        def enterRule(self, listener):
            if hasattr(listener, "enterReportGroupTypePageFooting"):
                listener.enterReportGroupTypePageFooting(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitReportGroupTypePageFooting"):
                listener.exitReportGroupTypePageFooting(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitReportGroupTypePageFooting"):
                return visitor.visitReportGroupTypePageFooting(self)
            else:
                return visitor.visitChildren(self)




    def reportGroupTypePageFooting(self):

        localctx = Cobol85Parser.ReportGroupTypePageFootingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 390, self.RULE_reportGroupTypePageFooting)
        try:
            self.state = 3017
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Cobol85Parser.PAGE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3014
                self.match(Cobol85Parser.PAGE)
                self.state = 3015
                self.match(Cobol85Parser.FOOTING)
                pass
            elif token in [Cobol85Parser.PF]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3016
                self.match(Cobol85Parser.PF)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ReportGroupTypeReportFootingContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.ReportGroupTypeReportFootingContext, self).__init__(parent, invokingState)
            self.parser = parser

        def REPORT(self):
            return self.getToken(Cobol85Parser.REPORT, 0)

        def FOOTING(self):
            return self.getToken(Cobol85Parser.FOOTING, 0)

        def RF(self):
            return self.getToken(Cobol85Parser.RF, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_reportGroupTypeReportFooting

        def enterRule(self, listener):
            if hasattr(listener, "enterReportGroupTypeReportFooting"):
                listener.enterReportGroupTypeReportFooting(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitReportGroupTypeReportFooting"):
                listener.exitReportGroupTypeReportFooting(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitReportGroupTypeReportFooting"):
                return visitor.visitReportGroupTypeReportFooting(self)
            else:
                return visitor.visitChildren(self)




    def reportGroupTypeReportFooting(self):

        localctx = Cobol85Parser.ReportGroupTypeReportFootingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 392, self.RULE_reportGroupTypeReportFooting)
        try:
            self.state = 3022
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Cobol85Parser.REPORT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3019
                self.match(Cobol85Parser.REPORT)
                self.state = 3020
                self.match(Cobol85Parser.FOOTING)
                pass
            elif token in [Cobol85Parser.RF]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3021
                self.match(Cobol85Parser.RF)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ReportGroupValueClauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.ReportGroupValueClauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def VALUE(self):
            return self.getToken(Cobol85Parser.VALUE, 0)

        def literal(self):
            return self.getTypedRuleContext(Cobol85Parser.LiteralContext,0)


        def IS(self):
            return self.getToken(Cobol85Parser.IS, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_reportGroupValueClause

        def enterRule(self, listener):
            if hasattr(listener, "enterReportGroupValueClause"):
                listener.enterReportGroupValueClause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitReportGroupValueClause"):
                listener.exitReportGroupValueClause(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitReportGroupValueClause"):
                return visitor.visitReportGroupValueClause(self)
            else:
                return visitor.visitChildren(self)




    def reportGroupValueClause(self):

        localctx = Cobol85Parser.ReportGroupValueClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 394, self.RULE_reportGroupValueClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3024
            self.match(Cobol85Parser.VALUE)
            self.state = 3026
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.IS:
                self.state = 3025
                self.match(Cobol85Parser.IS)


            self.state = 3028
            self.literal()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ProgramLibrarySectionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.ProgramLibrarySectionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def PROGRAM_LIBRARY(self):
            return self.getToken(Cobol85Parser.PROGRAM_LIBRARY, 0)

        def SECTION(self):
            return self.getToken(Cobol85Parser.SECTION, 0)

        def DOT_FS(self):
            return self.getToken(Cobol85Parser.DOT_FS, 0)

        def libraryDescriptionEntry(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.LibraryDescriptionEntryContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.LibraryDescriptionEntryContext,i)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_programLibrarySection

        def enterRule(self, listener):
            if hasattr(listener, "enterProgramLibrarySection"):
                listener.enterProgramLibrarySection(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitProgramLibrarySection"):
                listener.exitProgramLibrarySection(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitProgramLibrarySection"):
                return visitor.visitProgramLibrarySection(self)
            else:
                return visitor.visitChildren(self)




    def programLibrarySection(self):

        localctx = Cobol85Parser.ProgramLibrarySectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 396, self.RULE_programLibrarySection)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3030
            self.match(Cobol85Parser.PROGRAM_LIBRARY)
            self.state = 3031
            self.match(Cobol85Parser.SECTION)
            self.state = 3032
            self.match(Cobol85Parser.DOT_FS)
            self.state = 3036
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==Cobol85Parser.LB or _la==Cobol85Parser.LD:
                self.state = 3033
                self.libraryDescriptionEntry()
                self.state = 3038
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LibraryDescriptionEntryContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.LibraryDescriptionEntryContext, self).__init__(parent, invokingState)
            self.parser = parser

        def libraryDescriptionEntryFormat1(self):
            return self.getTypedRuleContext(Cobol85Parser.LibraryDescriptionEntryFormat1Context,0)


        def libraryDescriptionEntryFormat2(self):
            return self.getTypedRuleContext(Cobol85Parser.LibraryDescriptionEntryFormat2Context,0)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_libraryDescriptionEntry

        def enterRule(self, listener):
            if hasattr(listener, "enterLibraryDescriptionEntry"):
                listener.enterLibraryDescriptionEntry(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitLibraryDescriptionEntry"):
                listener.exitLibraryDescriptionEntry(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitLibraryDescriptionEntry"):
                return visitor.visitLibraryDescriptionEntry(self)
            else:
                return visitor.visitChildren(self)




    def libraryDescriptionEntry(self):

        localctx = Cobol85Parser.LibraryDescriptionEntryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 398, self.RULE_libraryDescriptionEntry)
        try:
            self.state = 3041
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Cobol85Parser.LD]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3039
                self.libraryDescriptionEntryFormat1()
                pass
            elif token in [Cobol85Parser.LB]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3040
                self.libraryDescriptionEntryFormat2()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LibraryDescriptionEntryFormat1Context(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.LibraryDescriptionEntryFormat1Context, self).__init__(parent, invokingState)
            self.parser = parser

        def LD(self):
            return self.getToken(Cobol85Parser.LD, 0)

        def libraryName(self):
            return self.getTypedRuleContext(Cobol85Parser.LibraryNameContext,0)


        def EXPORT(self):
            return self.getToken(Cobol85Parser.EXPORT, 0)

        def libraryAttributeClauseFormat1(self):
            return self.getTypedRuleContext(Cobol85Parser.LibraryAttributeClauseFormat1Context,0)


        def libraryEntryProcedureClauseFormat1(self):
            return self.getTypedRuleContext(Cobol85Parser.LibraryEntryProcedureClauseFormat1Context,0)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_libraryDescriptionEntryFormat1

        def enterRule(self, listener):
            if hasattr(listener, "enterLibraryDescriptionEntryFormat1"):
                listener.enterLibraryDescriptionEntryFormat1(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitLibraryDescriptionEntryFormat1"):
                listener.exitLibraryDescriptionEntryFormat1(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitLibraryDescriptionEntryFormat1"):
                return visitor.visitLibraryDescriptionEntryFormat1(self)
            else:
                return visitor.visitChildren(self)




    def libraryDescriptionEntryFormat1(self):

        localctx = Cobol85Parser.LibraryDescriptionEntryFormat1Context(self, self._ctx, self.state)
        self.enterRule(localctx, 400, self.RULE_libraryDescriptionEntryFormat1)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3043
            self.match(Cobol85Parser.LD)
            self.state = 3044
            self.libraryName()
            self.state = 3045
            self.match(Cobol85Parser.EXPORT)
            self.state = 3047
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.ATTRIBUTE:
                self.state = 3046
                self.libraryAttributeClauseFormat1()


            self.state = 3050
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.ENTRY_PROCEDURE:
                self.state = 3049
                self.libraryEntryProcedureClauseFormat1()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LibraryDescriptionEntryFormat2Context(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.LibraryDescriptionEntryFormat2Context, self).__init__(parent, invokingState)
            self.parser = parser

        def LB(self):
            return self.getToken(Cobol85Parser.LB, 0)

        def libraryName(self):
            return self.getTypedRuleContext(Cobol85Parser.LibraryNameContext,0)


        def IMPORT(self):
            return self.getToken(Cobol85Parser.IMPORT, 0)

        def libraryIsGlobalClause(self):
            return self.getTypedRuleContext(Cobol85Parser.LibraryIsGlobalClauseContext,0)


        def libraryIsCommonClause(self):
            return self.getTypedRuleContext(Cobol85Parser.LibraryIsCommonClauseContext,0)


        def libraryAttributeClauseFormat2(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.LibraryAttributeClauseFormat2Context)
            else:
                return self.getTypedRuleContext(Cobol85Parser.LibraryAttributeClauseFormat2Context,i)


        def libraryEntryProcedureClauseFormat2(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.LibraryEntryProcedureClauseFormat2Context)
            else:
                return self.getTypedRuleContext(Cobol85Parser.LibraryEntryProcedureClauseFormat2Context,i)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_libraryDescriptionEntryFormat2

        def enterRule(self, listener):
            if hasattr(listener, "enterLibraryDescriptionEntryFormat2"):
                listener.enterLibraryDescriptionEntryFormat2(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitLibraryDescriptionEntryFormat2"):
                listener.exitLibraryDescriptionEntryFormat2(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitLibraryDescriptionEntryFormat2"):
                return visitor.visitLibraryDescriptionEntryFormat2(self)
            else:
                return visitor.visitChildren(self)




    def libraryDescriptionEntryFormat2(self):

        localctx = Cobol85Parser.LibraryDescriptionEntryFormat2Context(self, self._ctx, self.state)
        self.enterRule(localctx, 402, self.RULE_libraryDescriptionEntryFormat2)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3052
            self.match(Cobol85Parser.LB)
            self.state = 3053
            self.libraryName()
            self.state = 3054
            self.match(Cobol85Parser.IMPORT)
            self.state = 3056
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,371,self._ctx)
            if la_ == 1:
                self.state = 3055
                self.libraryIsGlobalClause()


            self.state = 3059
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.COMMON or _la==Cobol85Parser.IS:
                self.state = 3058
                self.libraryIsCommonClause()


            self.state = 3065
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==Cobol85Parser.ATTRIBUTE or _la==Cobol85Parser.ENTRY_PROCEDURE:
                self.state = 3063
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [Cobol85Parser.ATTRIBUTE]:
                    self.state = 3061
                    self.libraryAttributeClauseFormat2()
                    pass
                elif token in [Cobol85Parser.ENTRY_PROCEDURE]:
                    self.state = 3062
                    self.libraryEntryProcedureClauseFormat2()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 3067
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LibraryAttributeClauseFormat1Context(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.LibraryAttributeClauseFormat1Context, self).__init__(parent, invokingState)
            self.parser = parser

        def ATTRIBUTE(self):
            return self.getToken(Cobol85Parser.ATTRIBUTE, 0)

        def SHARING(self):
            return self.getToken(Cobol85Parser.SHARING, 0)

        def DONTCARE(self):
            return self.getToken(Cobol85Parser.DONTCARE, 0)

        def PRIVATE(self):
            return self.getToken(Cobol85Parser.PRIVATE, 0)

        def SHAREDBYRUNUNIT(self):
            return self.getToken(Cobol85Parser.SHAREDBYRUNUNIT, 0)

        def SHAREDBYALL(self):
            return self.getToken(Cobol85Parser.SHAREDBYALL, 0)

        def IS(self):
            return self.getToken(Cobol85Parser.IS, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_libraryAttributeClauseFormat1

        def enterRule(self, listener):
            if hasattr(listener, "enterLibraryAttributeClauseFormat1"):
                listener.enterLibraryAttributeClauseFormat1(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitLibraryAttributeClauseFormat1"):
                listener.exitLibraryAttributeClauseFormat1(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitLibraryAttributeClauseFormat1"):
                return visitor.visitLibraryAttributeClauseFormat1(self)
            else:
                return visitor.visitChildren(self)




    def libraryAttributeClauseFormat1(self):

        localctx = Cobol85Parser.LibraryAttributeClauseFormat1Context(self, self._ctx, self.state)
        self.enterRule(localctx, 404, self.RULE_libraryAttributeClauseFormat1)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3068
            self.match(Cobol85Parser.ATTRIBUTE)
            self.state = 3074
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.SHARING:
                self.state = 3069
                self.match(Cobol85Parser.SHARING)
                self.state = 3071
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Cobol85Parser.IS:
                    self.state = 3070
                    self.match(Cobol85Parser.IS)


                self.state = 3073
                _la = self._input.LA(1)
                if not(_la==Cobol85Parser.DONTCARE or _la==Cobol85Parser.PRIVATE or _la==Cobol85Parser.SHAREDBYALL or _la==Cobol85Parser.SHAREDBYRUNUNIT):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LibraryAttributeClauseFormat2Context(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.LibraryAttributeClauseFormat2Context, self).__init__(parent, invokingState)
            self.parser = parser

        def ATTRIBUTE(self):
            return self.getToken(Cobol85Parser.ATTRIBUTE, 0)

        def libraryAttributeFunction(self):
            return self.getTypedRuleContext(Cobol85Parser.LibraryAttributeFunctionContext,0)


        def LIBACCESS(self):
            return self.getToken(Cobol85Parser.LIBACCESS, 0)

        def libraryAttributeParameter(self):
            return self.getTypedRuleContext(Cobol85Parser.LibraryAttributeParameterContext,0)


        def libraryAttributeTitle(self):
            return self.getTypedRuleContext(Cobol85Parser.LibraryAttributeTitleContext,0)


        def BYFUNCTION(self):
            return self.getToken(Cobol85Parser.BYFUNCTION, 0)

        def BYTITLE(self):
            return self.getToken(Cobol85Parser.BYTITLE, 0)

        def IS(self):
            return self.getToken(Cobol85Parser.IS, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_libraryAttributeClauseFormat2

        def enterRule(self, listener):
            if hasattr(listener, "enterLibraryAttributeClauseFormat2"):
                listener.enterLibraryAttributeClauseFormat2(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitLibraryAttributeClauseFormat2"):
                listener.exitLibraryAttributeClauseFormat2(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitLibraryAttributeClauseFormat2"):
                return visitor.visitLibraryAttributeClauseFormat2(self)
            else:
                return visitor.visitChildren(self)




    def libraryAttributeClauseFormat2(self):

        localctx = Cobol85Parser.LibraryAttributeClauseFormat2Context(self, self._ctx, self.state)
        self.enterRule(localctx, 406, self.RULE_libraryAttributeClauseFormat2)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3076
            self.match(Cobol85Parser.ATTRIBUTE)
            self.state = 3078
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.FUNCTIONNAME:
                self.state = 3077
                self.libraryAttributeFunction()


            self.state = 3085
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.LIBACCESS:
                self.state = 3080
                self.match(Cobol85Parser.LIBACCESS)
                self.state = 3082
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Cobol85Parser.IS:
                    self.state = 3081
                    self.match(Cobol85Parser.IS)


                self.state = 3084
                _la = self._input.LA(1)
                if not(_la==Cobol85Parser.BYFUNCTION or _la==Cobol85Parser.BYTITLE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 3088
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.LIBPARAMETER:
                self.state = 3087
                self.libraryAttributeParameter()


            self.state = 3091
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.TITLE:
                self.state = 3090
                self.libraryAttributeTitle()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LibraryAttributeFunctionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.LibraryAttributeFunctionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def FUNCTIONNAME(self):
            return self.getToken(Cobol85Parser.FUNCTIONNAME, 0)

        def IS(self):
            return self.getToken(Cobol85Parser.IS, 0)

        def literal(self):
            return self.getTypedRuleContext(Cobol85Parser.LiteralContext,0)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_libraryAttributeFunction

        def enterRule(self, listener):
            if hasattr(listener, "enterLibraryAttributeFunction"):
                listener.enterLibraryAttributeFunction(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitLibraryAttributeFunction"):
                listener.exitLibraryAttributeFunction(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitLibraryAttributeFunction"):
                return visitor.visitLibraryAttributeFunction(self)
            else:
                return visitor.visitChildren(self)




    def libraryAttributeFunction(self):

        localctx = Cobol85Parser.LibraryAttributeFunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 408, self.RULE_libraryAttributeFunction)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3093
            self.match(Cobol85Parser.FUNCTIONNAME)
            self.state = 3094
            self.match(Cobol85Parser.IS)
            self.state = 3095
            self.literal()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LibraryAttributeParameterContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.LibraryAttributeParameterContext, self).__init__(parent, invokingState)
            self.parser = parser

        def LIBPARAMETER(self):
            return self.getToken(Cobol85Parser.LIBPARAMETER, 0)

        def literal(self):
            return self.getTypedRuleContext(Cobol85Parser.LiteralContext,0)


        def IS(self):
            return self.getToken(Cobol85Parser.IS, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_libraryAttributeParameter

        def enterRule(self, listener):
            if hasattr(listener, "enterLibraryAttributeParameter"):
                listener.enterLibraryAttributeParameter(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitLibraryAttributeParameter"):
                listener.exitLibraryAttributeParameter(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitLibraryAttributeParameter"):
                return visitor.visitLibraryAttributeParameter(self)
            else:
                return visitor.visitChildren(self)




    def libraryAttributeParameter(self):

        localctx = Cobol85Parser.LibraryAttributeParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 410, self.RULE_libraryAttributeParameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3097
            self.match(Cobol85Parser.LIBPARAMETER)
            self.state = 3099
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.IS:
                self.state = 3098
                self.match(Cobol85Parser.IS)


            self.state = 3101
            self.literal()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LibraryAttributeTitleContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.LibraryAttributeTitleContext, self).__init__(parent, invokingState)
            self.parser = parser

        def TITLE(self):
            return self.getToken(Cobol85Parser.TITLE, 0)

        def literal(self):
            return self.getTypedRuleContext(Cobol85Parser.LiteralContext,0)


        def IS(self):
            return self.getToken(Cobol85Parser.IS, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_libraryAttributeTitle

        def enterRule(self, listener):
            if hasattr(listener, "enterLibraryAttributeTitle"):
                listener.enterLibraryAttributeTitle(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitLibraryAttributeTitle"):
                listener.exitLibraryAttributeTitle(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitLibraryAttributeTitle"):
                return visitor.visitLibraryAttributeTitle(self)
            else:
                return visitor.visitChildren(self)




    def libraryAttributeTitle(self):

        localctx = Cobol85Parser.LibraryAttributeTitleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 412, self.RULE_libraryAttributeTitle)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3103
            self.match(Cobol85Parser.TITLE)
            self.state = 3105
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.IS:
                self.state = 3104
                self.match(Cobol85Parser.IS)


            self.state = 3107
            self.literal()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LibraryEntryProcedureClauseFormat1Context(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.LibraryEntryProcedureClauseFormat1Context, self).__init__(parent, invokingState)
            self.parser = parser

        def ENTRY_PROCEDURE(self):
            return self.getToken(Cobol85Parser.ENTRY_PROCEDURE, 0)

        def programName(self):
            return self.getTypedRuleContext(Cobol85Parser.ProgramNameContext,0)


        def libraryEntryProcedureForClause(self):
            return self.getTypedRuleContext(Cobol85Parser.LibraryEntryProcedureForClauseContext,0)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_libraryEntryProcedureClauseFormat1

        def enterRule(self, listener):
            if hasattr(listener, "enterLibraryEntryProcedureClauseFormat1"):
                listener.enterLibraryEntryProcedureClauseFormat1(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitLibraryEntryProcedureClauseFormat1"):
                listener.exitLibraryEntryProcedureClauseFormat1(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitLibraryEntryProcedureClauseFormat1"):
                return visitor.visitLibraryEntryProcedureClauseFormat1(self)
            else:
                return visitor.visitChildren(self)




    def libraryEntryProcedureClauseFormat1(self):

        localctx = Cobol85Parser.LibraryEntryProcedureClauseFormat1Context(self, self._ctx, self.state)
        self.enterRule(localctx, 414, self.RULE_libraryEntryProcedureClauseFormat1)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3109
            self.match(Cobol85Parser.ENTRY_PROCEDURE)
            self.state = 3110
            self.programName()
            self.state = 3112
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.FOR:
                self.state = 3111
                self.libraryEntryProcedureForClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LibraryEntryProcedureClauseFormat2Context(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.LibraryEntryProcedureClauseFormat2Context, self).__init__(parent, invokingState)
            self.parser = parser

        def ENTRY_PROCEDURE(self):
            return self.getToken(Cobol85Parser.ENTRY_PROCEDURE, 0)

        def programName(self):
            return self.getTypedRuleContext(Cobol85Parser.ProgramNameContext,0)


        def libraryEntryProcedureForClause(self):
            return self.getTypedRuleContext(Cobol85Parser.LibraryEntryProcedureForClauseContext,0)


        def libraryEntryProcedureWithClause(self):
            return self.getTypedRuleContext(Cobol85Parser.LibraryEntryProcedureWithClauseContext,0)


        def libraryEntryProcedureUsingClause(self):
            return self.getTypedRuleContext(Cobol85Parser.LibraryEntryProcedureUsingClauseContext,0)


        def libraryEntryProcedureGivingClause(self):
            return self.getTypedRuleContext(Cobol85Parser.LibraryEntryProcedureGivingClauseContext,0)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_libraryEntryProcedureClauseFormat2

        def enterRule(self, listener):
            if hasattr(listener, "enterLibraryEntryProcedureClauseFormat2"):
                listener.enterLibraryEntryProcedureClauseFormat2(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitLibraryEntryProcedureClauseFormat2"):
                listener.exitLibraryEntryProcedureClauseFormat2(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitLibraryEntryProcedureClauseFormat2"):
                return visitor.visitLibraryEntryProcedureClauseFormat2(self)
            else:
                return visitor.visitChildren(self)




    def libraryEntryProcedureClauseFormat2(self):

        localctx = Cobol85Parser.LibraryEntryProcedureClauseFormat2Context(self, self._ctx, self.state)
        self.enterRule(localctx, 416, self.RULE_libraryEntryProcedureClauseFormat2)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3114
            self.match(Cobol85Parser.ENTRY_PROCEDURE)
            self.state = 3115
            self.programName()
            self.state = 3117
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.FOR:
                self.state = 3116
                self.libraryEntryProcedureForClause()


            self.state = 3120
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.WITH:
                self.state = 3119
                self.libraryEntryProcedureWithClause()


            self.state = 3123
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.USING:
                self.state = 3122
                self.libraryEntryProcedureUsingClause()


            self.state = 3126
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.GIVING:
                self.state = 3125
                self.libraryEntryProcedureGivingClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LibraryEntryProcedureForClauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.LibraryEntryProcedureForClauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(Cobol85Parser.FOR, 0)

        def literal(self):
            return self.getTypedRuleContext(Cobol85Parser.LiteralContext,0)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_libraryEntryProcedureForClause

        def enterRule(self, listener):
            if hasattr(listener, "enterLibraryEntryProcedureForClause"):
                listener.enterLibraryEntryProcedureForClause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitLibraryEntryProcedureForClause"):
                listener.exitLibraryEntryProcedureForClause(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitLibraryEntryProcedureForClause"):
                return visitor.visitLibraryEntryProcedureForClause(self)
            else:
                return visitor.visitChildren(self)




    def libraryEntryProcedureForClause(self):

        localctx = Cobol85Parser.LibraryEntryProcedureForClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 418, self.RULE_libraryEntryProcedureForClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3128
            self.match(Cobol85Parser.FOR)
            self.state = 3129
            self.literal()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LibraryEntryProcedureGivingClauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.LibraryEntryProcedureGivingClauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def GIVING(self):
            return self.getToken(Cobol85Parser.GIVING, 0)

        def dataName(self):
            return self.getTypedRuleContext(Cobol85Parser.DataNameContext,0)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_libraryEntryProcedureGivingClause

        def enterRule(self, listener):
            if hasattr(listener, "enterLibraryEntryProcedureGivingClause"):
                listener.enterLibraryEntryProcedureGivingClause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitLibraryEntryProcedureGivingClause"):
                listener.exitLibraryEntryProcedureGivingClause(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitLibraryEntryProcedureGivingClause"):
                return visitor.visitLibraryEntryProcedureGivingClause(self)
            else:
                return visitor.visitChildren(self)




    def libraryEntryProcedureGivingClause(self):

        localctx = Cobol85Parser.LibraryEntryProcedureGivingClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 420, self.RULE_libraryEntryProcedureGivingClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3131
            self.match(Cobol85Parser.GIVING)
            self.state = 3132
            self.dataName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LibraryEntryProcedureUsingClauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.LibraryEntryProcedureUsingClauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def USING(self):
            return self.getToken(Cobol85Parser.USING, 0)

        def libraryEntryProcedureUsingName(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.LibraryEntryProcedureUsingNameContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.LibraryEntryProcedureUsingNameContext,i)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_libraryEntryProcedureUsingClause

        def enterRule(self, listener):
            if hasattr(listener, "enterLibraryEntryProcedureUsingClause"):
                listener.enterLibraryEntryProcedureUsingClause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitLibraryEntryProcedureUsingClause"):
                listener.exitLibraryEntryProcedureUsingClause(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitLibraryEntryProcedureUsingClause"):
                return visitor.visitLibraryEntryProcedureUsingClause(self)
            else:
                return visitor.visitChildren(self)




    def libraryEntryProcedureUsingClause(self):

        localctx = Cobol85Parser.LibraryEntryProcedureUsingClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 422, self.RULE_libraryEntryProcedureUsingClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3134
            self.match(Cobol85Parser.USING)
            self.state = 3136 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 3135
                    self.libraryEntryProcedureUsingName()

                else:
                    raise NoViableAltException(self)
                self.state = 3138 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,389,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LibraryEntryProcedureUsingNameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.LibraryEntryProcedureUsingNameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def dataName(self):
            return self.getTypedRuleContext(Cobol85Parser.DataNameContext,0)


        def fileName(self):
            return self.getTypedRuleContext(Cobol85Parser.FileNameContext,0)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_libraryEntryProcedureUsingName

        def enterRule(self, listener):
            if hasattr(listener, "enterLibraryEntryProcedureUsingName"):
                listener.enterLibraryEntryProcedureUsingName(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitLibraryEntryProcedureUsingName"):
                listener.exitLibraryEntryProcedureUsingName(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitLibraryEntryProcedureUsingName"):
                return visitor.visitLibraryEntryProcedureUsingName(self)
            else:
                return visitor.visitChildren(self)




    def libraryEntryProcedureUsingName(self):

        localctx = Cobol85Parser.LibraryEntryProcedureUsingNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 424, self.RULE_libraryEntryProcedureUsingName)
        try:
            self.state = 3142
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,390,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3140
                self.dataName()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3141
                self.fileName()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LibraryEntryProcedureWithClauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.LibraryEntryProcedureWithClauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(Cobol85Parser.WITH, 0)

        def libraryEntryProcedureWithName(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.LibraryEntryProcedureWithNameContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.LibraryEntryProcedureWithNameContext,i)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_libraryEntryProcedureWithClause

        def enterRule(self, listener):
            if hasattr(listener, "enterLibraryEntryProcedureWithClause"):
                listener.enterLibraryEntryProcedureWithClause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitLibraryEntryProcedureWithClause"):
                listener.exitLibraryEntryProcedureWithClause(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitLibraryEntryProcedureWithClause"):
                return visitor.visitLibraryEntryProcedureWithClause(self)
            else:
                return visitor.visitChildren(self)




    def libraryEntryProcedureWithClause(self):

        localctx = Cobol85Parser.LibraryEntryProcedureWithClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 426, self.RULE_libraryEntryProcedureWithClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3144
            self.match(Cobol85Parser.WITH)
            self.state = 3146 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 3145
                    self.libraryEntryProcedureWithName()

                else:
                    raise NoViableAltException(self)
                self.state = 3148 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,391,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LibraryEntryProcedureWithNameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.LibraryEntryProcedureWithNameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def localName(self):
            return self.getTypedRuleContext(Cobol85Parser.LocalNameContext,0)


        def fileName(self):
            return self.getTypedRuleContext(Cobol85Parser.FileNameContext,0)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_libraryEntryProcedureWithName

        def enterRule(self, listener):
            if hasattr(listener, "enterLibraryEntryProcedureWithName"):
                listener.enterLibraryEntryProcedureWithName(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitLibraryEntryProcedureWithName"):
                listener.exitLibraryEntryProcedureWithName(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitLibraryEntryProcedureWithName"):
                return visitor.visitLibraryEntryProcedureWithName(self)
            else:
                return visitor.visitChildren(self)




    def libraryEntryProcedureWithName(self):

        localctx = Cobol85Parser.LibraryEntryProcedureWithNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 428, self.RULE_libraryEntryProcedureWithName)
        try:
            self.state = 3152
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,392,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3150
                self.localName()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3151
                self.fileName()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LibraryIsCommonClauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.LibraryIsCommonClauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def COMMON(self):
            return self.getToken(Cobol85Parser.COMMON, 0)

        def IS(self):
            return self.getToken(Cobol85Parser.IS, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_libraryIsCommonClause

        def enterRule(self, listener):
            if hasattr(listener, "enterLibraryIsCommonClause"):
                listener.enterLibraryIsCommonClause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitLibraryIsCommonClause"):
                listener.exitLibraryIsCommonClause(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitLibraryIsCommonClause"):
                return visitor.visitLibraryIsCommonClause(self)
            else:
                return visitor.visitChildren(self)




    def libraryIsCommonClause(self):

        localctx = Cobol85Parser.LibraryIsCommonClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 430, self.RULE_libraryIsCommonClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3155
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.IS:
                self.state = 3154
                self.match(Cobol85Parser.IS)


            self.state = 3157
            self.match(Cobol85Parser.COMMON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LibraryIsGlobalClauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.LibraryIsGlobalClauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def GLOBAL(self):
            return self.getToken(Cobol85Parser.GLOBAL, 0)

        def IS(self):
            return self.getToken(Cobol85Parser.IS, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_libraryIsGlobalClause

        def enterRule(self, listener):
            if hasattr(listener, "enterLibraryIsGlobalClause"):
                listener.enterLibraryIsGlobalClause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitLibraryIsGlobalClause"):
                listener.exitLibraryIsGlobalClause(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitLibraryIsGlobalClause"):
                return visitor.visitLibraryIsGlobalClause(self)
            else:
                return visitor.visitChildren(self)




    def libraryIsGlobalClause(self):

        localctx = Cobol85Parser.LibraryIsGlobalClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 432, self.RULE_libraryIsGlobalClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3160
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.IS:
                self.state = 3159
                self.match(Cobol85Parser.IS)


            self.state = 3162
            self.match(Cobol85Parser.GLOBAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DataDescriptionEntryContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.DataDescriptionEntryContext, self).__init__(parent, invokingState)
            self.parser = parser

        def dataDescriptionEntryFormat1(self):
            return self.getTypedRuleContext(Cobol85Parser.DataDescriptionEntryFormat1Context,0)


        def dataDescriptionEntryFormat2(self):
            return self.getTypedRuleContext(Cobol85Parser.DataDescriptionEntryFormat2Context,0)


        def dataDescriptionEntryFormat3(self):
            return self.getTypedRuleContext(Cobol85Parser.DataDescriptionEntryFormat3Context,0)


        def dataDescriptionEntryExecSql(self):
            return self.getTypedRuleContext(Cobol85Parser.DataDescriptionEntryExecSqlContext,0)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_dataDescriptionEntry

        def enterRule(self, listener):
            if hasattr(listener, "enterDataDescriptionEntry"):
                listener.enterDataDescriptionEntry(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitDataDescriptionEntry"):
                listener.exitDataDescriptionEntry(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitDataDescriptionEntry"):
                return visitor.visitDataDescriptionEntry(self)
            else:
                return visitor.visitChildren(self)




    def dataDescriptionEntry(self):

        localctx = Cobol85Parser.DataDescriptionEntryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 434, self.RULE_dataDescriptionEntry)
        try:
            self.state = 3168
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Cobol85Parser.LEVEL_NUMBER_77, Cobol85Parser.INTEGERLITERAL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3164
                self.dataDescriptionEntryFormat1()
                pass
            elif token in [Cobol85Parser.LEVEL_NUMBER_66]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3165
                self.dataDescriptionEntryFormat2()
                pass
            elif token in [Cobol85Parser.LEVEL_NUMBER_88]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3166
                self.dataDescriptionEntryFormat3()
                pass
            elif token in [Cobol85Parser.EXECSQLLINE]:
                self.enterOuterAlt(localctx, 4)
                self.state = 3167
                self.dataDescriptionEntryExecSql()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DataDescriptionEntryFormat1Context(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.DataDescriptionEntryFormat1Context, self).__init__(parent, invokingState)
            self.parser = parser

        def DOT_FS(self):
            return self.getToken(Cobol85Parser.DOT_FS, 0)

        def INTEGERLITERAL(self):
            return self.getToken(Cobol85Parser.INTEGERLITERAL, 0)

        def LEVEL_NUMBER_77(self):
            return self.getToken(Cobol85Parser.LEVEL_NUMBER_77, 0)

        def FILLER(self):
            return self.getToken(Cobol85Parser.FILLER, 0)

        def dataName(self):
            return self.getTypedRuleContext(Cobol85Parser.DataNameContext,0)


        def dataRedefinesClause(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.DataRedefinesClauseContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.DataRedefinesClauseContext,i)


        def dataIntegerStringClause(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.DataIntegerStringClauseContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.DataIntegerStringClauseContext,i)


        def dataExternalClause(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.DataExternalClauseContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.DataExternalClauseContext,i)


        def dataGlobalClause(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.DataGlobalClauseContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.DataGlobalClauseContext,i)


        def dataTypeDefClause(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.DataTypeDefClauseContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.DataTypeDefClauseContext,i)


        def dataThreadLocalClause(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.DataThreadLocalClauseContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.DataThreadLocalClauseContext,i)


        def dataPictureClause(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.DataPictureClauseContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.DataPictureClauseContext,i)


        def dataCommonOwnLocalClause(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.DataCommonOwnLocalClauseContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.DataCommonOwnLocalClauseContext,i)


        def dataTypeClause(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.DataTypeClauseContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.DataTypeClauseContext,i)


        def dataUsingClause(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.DataUsingClauseContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.DataUsingClauseContext,i)


        def dataUsageClause(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.DataUsageClauseContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.DataUsageClauseContext,i)


        def dataValueClause(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.DataValueClauseContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.DataValueClauseContext,i)


        def dataReceivedByClause(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.DataReceivedByClauseContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.DataReceivedByClauseContext,i)


        def dataOccursClause(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.DataOccursClauseContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.DataOccursClauseContext,i)


        def dataSignClause(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.DataSignClauseContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.DataSignClauseContext,i)


        def dataSynchronizedClause(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.DataSynchronizedClauseContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.DataSynchronizedClauseContext,i)


        def dataJustifiedClause(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.DataJustifiedClauseContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.DataJustifiedClauseContext,i)


        def dataBlankWhenZeroClause(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.DataBlankWhenZeroClauseContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.DataBlankWhenZeroClauseContext,i)


        def dataWithLowerBoundsClause(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.DataWithLowerBoundsClauseContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.DataWithLowerBoundsClauseContext,i)


        def dataAlignedClause(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.DataAlignedClauseContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.DataAlignedClauseContext,i)


        def dataRecordAreaClause(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.DataRecordAreaClauseContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.DataRecordAreaClauseContext,i)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_dataDescriptionEntryFormat1

        def enterRule(self, listener):
            if hasattr(listener, "enterDataDescriptionEntryFormat1"):
                listener.enterDataDescriptionEntryFormat1(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitDataDescriptionEntryFormat1"):
                listener.exitDataDescriptionEntryFormat1(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitDataDescriptionEntryFormat1"):
                return visitor.visitDataDescriptionEntryFormat1(self)
            else:
                return visitor.visitChildren(self)




    def dataDescriptionEntryFormat1(self):

        localctx = Cobol85Parser.DataDescriptionEntryFormat1Context(self, self._ctx, self.state)
        self.enterRule(localctx, 436, self.RULE_dataDescriptionEntryFormat1)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3170
            _la = self._input.LA(1)
            if not(_la==Cobol85Parser.LEVEL_NUMBER_77 or _la==Cobol85Parser.INTEGERLITERAL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 3173
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,396,self._ctx)
            if la_ == 1:
                self.state = 3171
                self.match(Cobol85Parser.FILLER)

            elif la_ == 2:
                self.state = 3172
                self.dataName()


            self.state = 3198
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.ALIGNED) | (1 << Cobol85Parser.ALL) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE) | (1 << Cobol85Parser.AUTO) | (1 << Cobol85Parser.AUTO_SKIP) | (1 << Cobol85Parser.BACKGROUND_COLOR) | (1 << Cobol85Parser.BACKGROUND_COLOUR) | (1 << Cobol85Parser.BEEP) | (1 << Cobol85Parser.BELL) | (1 << Cobol85Parser.BINARY) | (1 << Cobol85Parser.BIT) | (1 << Cobol85Parser.BLANK) | (1 << Cobol85Parser.BLINK) | (1 << Cobol85Parser.BLOB) | (1 << Cobol85Parser.BOUNDS) | (1 << Cobol85Parser.BY) | (1 << Cobol85Parser.CAPABLE) | (1 << Cobol85Parser.CCSVERSION) | (1 << Cobol85Parser.CHANGED) | (1 << Cobol85Parser.CHANNEL))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (Cobol85Parser.CLOB - 67)) | (1 << (Cobol85Parser.CLOSE_DISPOSITION - 67)) | (1 << (Cobol85Parser.COBOL - 67)) | (1 << (Cobol85Parser.COMMITMENT - 67)) | (1 << (Cobol85Parser.COMMON - 67)) | (1 << (Cobol85Parser.COMP - 67)) | (1 << (Cobol85Parser.COMP_1 - 67)) | (1 << (Cobol85Parser.COMP_2 - 67)) | (1 << (Cobol85Parser.COMP_3 - 67)) | (1 << (Cobol85Parser.COMP_4 - 67)) | (1 << (Cobol85Parser.COMP_5 - 67)) | (1 << (Cobol85Parser.COMPUTATIONAL - 67)) | (1 << (Cobol85Parser.COMPUTATIONAL_1 - 67)) | (1 << (Cobol85Parser.COMPUTATIONAL_2 - 67)) | (1 << (Cobol85Parser.COMPUTATIONAL_3 - 67)) | (1 << (Cobol85Parser.COMPUTATIONAL_4 - 67)) | (1 << (Cobol85Parser.COMPUTATIONAL_5 - 67)) | (1 << (Cobol85Parser.CONTENT - 67)) | (1 << (Cobol85Parser.CONTROL_POINT - 67)) | (1 << (Cobol85Parser.CONVENTION - 67)) | (1 << (Cobol85Parser.CRUNCH - 67)) | (1 << (Cobol85Parser.CURSOR - 67)) | (1 << (Cobol85Parser.DATE - 67)) | (1 << (Cobol85Parser.DBCLOB - 67)))) != 0) or ((((_la - 131)) & ~0x3f) == 0 and ((1 << (_la - 131)) & ((1 << (Cobol85Parser.DEFAULT - 131)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 131)) | (1 << (Cobol85Parser.DEFINITION - 131)) | (1 << (Cobol85Parser.DFHRESP - 131)) | (1 << (Cobol85Parser.DFHVALUE - 131)) | (1 << (Cobol85Parser.DISK - 131)) | (1 << (Cobol85Parser.DISPLAY - 131)) | (1 << (Cobol85Parser.DISPLAY_1 - 131)) | (1 << (Cobol85Parser.DONTCARE - 131)) | (1 << (Cobol85Parser.DOUBLE - 131)) | (1 << (Cobol85Parser.EBCDIC - 131)) | (1 << (Cobol85Parser.EMPTY_CHECK - 131)) | (1 << (Cobol85Parser.ENTER - 131)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 131)) | (1 << (Cobol85Parser.ERASE - 131)) | (1 << (Cobol85Parser.EOL - 131)) | (1 << (Cobol85Parser.EOS - 131)))) != 0) or ((((_la - 195)) & ~0x3f) == 0 and ((1 << (_la - 195)) & ((1 << (Cobol85Parser.ESCAPE - 195)) | (1 << (Cobol85Parser.EVENT - 195)) | (1 << (Cobol85Parser.EXCLUSIVE - 195)) | (1 << (Cobol85Parser.EXPORT - 195)) | (1 << (Cobol85Parser.EXTENDED - 195)) | (1 << (Cobol85Parser.EXTERNAL - 195)) | (1 << (Cobol85Parser.FALSE - 195)) | (1 << (Cobol85Parser.FOREGROUND_COLOR - 195)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 195)) | (1 << (Cobol85Parser.FULL - 195)) | (1 << (Cobol85Parser.FUNCTIONNAME - 195)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 195)) | (1 << (Cobol85Parser.GLOBAL - 195)) | (1 << (Cobol85Parser.GRID - 195)) | (1 << (Cobol85Parser.HIGHLIGHT - 195)) | (1 << (Cobol85Parser.HIGH_VALUE - 195)) | (1 << (Cobol85Parser.HIGH_VALUES - 195)) | (1 << (Cobol85Parser.IMPLICIT - 195)) | (1 << (Cobol85Parser.IMPORT - 195)) | (1 << (Cobol85Parser.INDEX - 195)) | (1 << (Cobol85Parser.INTEGER - 195)) | (1 << (Cobol85Parser.IS - 195)))) != 0) or ((((_la - 259)) & ~0x3f) == 0 and ((1 << (_la - 259)) & ((1 << (Cobol85Parser.JUST - 259)) | (1 << (Cobol85Parser.JUSTIFIED - 259)) | (1 << (Cobol85Parser.KANJI - 259)) | (1 << (Cobol85Parser.KEPT - 259)) | (1 << (Cobol85Parser.KEYBOARD - 259)) | (1 << (Cobol85Parser.LANGUAGE - 259)) | (1 << (Cobol85Parser.LB - 259)) | (1 << (Cobol85Parser.LD - 259)) | (1 << (Cobol85Parser.LEADING - 259)) | (1 << (Cobol85Parser.LEFTLINE - 259)) | (1 << (Cobol85Parser.LENGTH_CHECK - 259)) | (1 << (Cobol85Parser.LIBACCESS - 259)) | (1 << (Cobol85Parser.LIBPARAMETER - 259)) | (1 << (Cobol85Parser.LIBRARY - 259)) | (1 << (Cobol85Parser.LIST - 259)) | (1 << (Cobol85Parser.LOCAL - 259)) | (1 << (Cobol85Parser.LOCK - 259)) | (1 << (Cobol85Parser.LONG_DATE - 259)) | (1 << (Cobol85Parser.LONG_TIME - 259)) | (1 << (Cobol85Parser.LOWER - 259)) | (1 << (Cobol85Parser.LOWLIGHT - 259)) | (1 << (Cobol85Parser.LOW_VALUE - 259)) | (1 << (Cobol85Parser.LOW_VALUES - 259)) | (1 << (Cobol85Parser.MMDDYYYY - 259)) | (1 << (Cobol85Parser.NAMED - 259)) | (1 << (Cobol85Parser.NATIONAL - 259)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 259)) | (1 << (Cobol85Parser.NETWORK - 259)) | (1 << (Cobol85Parser.NO_ECHO - 259)) | (1 << (Cobol85Parser.NULL - 259)) | (1 << (Cobol85Parser.NULLS - 259)) | (1 << (Cobol85Parser.NUMERIC_DATE - 259)))) != 0) or ((((_la - 323)) & ~0x3f) == 0 and ((1 << (_la - 323)) & ((1 << (Cobol85Parser.NUMERIC_TIME - 323)) | (1 << (Cobol85Parser.OCCURS - 323)) | (1 << (Cobol85Parser.ODT - 323)) | (1 << (Cobol85Parser.ORDERLY - 323)) | (1 << (Cobol85Parser.OVERLINE - 323)) | (1 << (Cobol85Parser.OWN - 323)) | (1 << (Cobol85Parser.PACKED_DECIMAL - 323)) | (1 << (Cobol85Parser.PASSWORD - 323)) | (1 << (Cobol85Parser.PIC - 323)) | (1 << (Cobol85Parser.PICTURE - 323)) | (1 << (Cobol85Parser.POINTER - 323)) | (1 << (Cobol85Parser.PORT - 323)) | (1 << (Cobol85Parser.PRINTER - 323)) | (1 << (Cobol85Parser.PRIVATE - 323)) | (1 << (Cobol85Parser.PROCEDURE_POINTER - 323)) | (1 << (Cobol85Parser.PROCESS - 323)) | (1 << (Cobol85Parser.PROGRAM - 323)) | (1 << (Cobol85Parser.PROMPT - 323)) | (1 << (Cobol85Parser.QUOTE - 323)) | (1 << (Cobol85Parser.QUOTES - 323)) | (1 << (Cobol85Parser.READER - 323)) | (1 << (Cobol85Parser.REMOTE - 323)) | (1 << (Cobol85Parser.REAL - 323)) | (1 << (Cobol85Parser.RECEIVED - 323)) | (1 << (Cobol85Parser.RECORD - 323)) | (1 << (Cobol85Parser.RECURSIVE - 323)) | (1 << (Cobol85Parser.REDEFINES - 323)))) != 0) or ((((_la - 387)) & ~0x3f) == 0 and ((1 << (_la - 387)) & ((1 << (Cobol85Parser.REF - 387)) | (1 << (Cobol85Parser.REFERENCE - 387)) | (1 << (Cobol85Parser.REMOVE - 387)) | (1 << (Cobol85Parser.REQUIRED - 387)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 387)) | (1 << (Cobol85Parser.SAVE - 387)) | (1 << (Cobol85Parser.SECURE - 387)) | (1 << (Cobol85Parser.SHARED - 387)) | (1 << (Cobol85Parser.SHAREDBYALL - 387)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 387)) | (1 << (Cobol85Parser.SHARING - 387)) | (1 << (Cobol85Parser.SHORT_DATE - 387)) | (1 << (Cobol85Parser.SIGN - 387)))) != 0) or ((((_la - 454)) & ~0x3f) == 0 and ((1 << (_la - 454)) & ((1 << (Cobol85Parser.SPACE - 454)) | (1 << (Cobol85Parser.SPACES - 454)) | (1 << (Cobol85Parser.SQL - 454)) | (1 << (Cobol85Parser.STRING - 454)) | (1 << (Cobol85Parser.SYMBOL - 454)) | (1 << (Cobol85Parser.SYNC - 454)) | (1 << (Cobol85Parser.SYNCHRONIZED - 454)) | (1 << (Cobol85Parser.TASK - 454)) | (1 << (Cobol85Parser.THREAD - 454)) | (1 << (Cobol85Parser.THREAD_LOCAL - 454)) | (1 << (Cobol85Parser.TIMER - 454)) | (1 << (Cobol85Parser.TODAYS_DATE - 454)) | (1 << (Cobol85Parser.TODAYS_NAME - 454)) | (1 << (Cobol85Parser.TRAILING - 454)) | (1 << (Cobol85Parser.TRUE - 454)) | (1 << (Cobol85Parser.TRUNCATED - 454)) | (1 << (Cobol85Parser.TYPE - 454)) | (1 << (Cobol85Parser.TYPEDEF - 454)) | (1 << (Cobol85Parser.UNDERLINE - 454)) | (1 << (Cobol85Parser.USAGE - 454)) | (1 << (Cobol85Parser.USING - 454)) | (1 << (Cobol85Parser.VALUE - 454)) | (1 << (Cobol85Parser.VALUES - 454)) | (1 << (Cobol85Parser.VIRTUAL - 454)) | (1 << (Cobol85Parser.WAIT - 454)))) != 0) or ((((_la - 519)) & ~0x3f) == 0 and ((1 << (_la - 519)) & ((1 << (Cobol85Parser.WITH - 519)) | (1 << (Cobol85Parser.YEAR - 519)) | (1 << (Cobol85Parser.YYYYMMDD - 519)) | (1 << (Cobol85Parser.YYYYDDD - 519)) | (1 << (Cobol85Parser.ZERO - 519)) | (1 << (Cobol85Parser.ZERO_FILL - 519)) | (1 << (Cobol85Parser.ZEROS - 519)) | (1 << (Cobol85Parser.ZEROES - 519)) | (1 << (Cobol85Parser.NONNUMERICLITERAL - 519)) | (1 << (Cobol85Parser.LEVEL_NUMBER_66 - 519)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 519)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 519)) | (1 << (Cobol85Parser.INTEGERLITERAL - 519)) | (1 << (Cobol85Parser.NUMERICLITERAL - 519)) | (1 << (Cobol85Parser.IDENTIFIER - 519)))) != 0):
                self.state = 3196
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,397,self._ctx)
                if la_ == 1:
                    self.state = 3175
                    self.dataRedefinesClause()
                    pass

                elif la_ == 2:
                    self.state = 3176
                    self.dataIntegerStringClause()
                    pass

                elif la_ == 3:
                    self.state = 3177
                    self.dataExternalClause()
                    pass

                elif la_ == 4:
                    self.state = 3178
                    self.dataGlobalClause()
                    pass

                elif la_ == 5:
                    self.state = 3179
                    self.dataTypeDefClause()
                    pass

                elif la_ == 6:
                    self.state = 3180
                    self.dataThreadLocalClause()
                    pass

                elif la_ == 7:
                    self.state = 3181
                    self.dataPictureClause()
                    pass

                elif la_ == 8:
                    self.state = 3182
                    self.dataCommonOwnLocalClause()
                    pass

                elif la_ == 9:
                    self.state = 3183
                    self.dataTypeClause()
                    pass

                elif la_ == 10:
                    self.state = 3184
                    self.dataUsingClause()
                    pass

                elif la_ == 11:
                    self.state = 3185
                    self.dataUsageClause()
                    pass

                elif la_ == 12:
                    self.state = 3186
                    self.dataValueClause()
                    pass

                elif la_ == 13:
                    self.state = 3187
                    self.dataReceivedByClause()
                    pass

                elif la_ == 14:
                    self.state = 3188
                    self.dataOccursClause()
                    pass

                elif la_ == 15:
                    self.state = 3189
                    self.dataSignClause()
                    pass

                elif la_ == 16:
                    self.state = 3190
                    self.dataSynchronizedClause()
                    pass

                elif la_ == 17:
                    self.state = 3191
                    self.dataJustifiedClause()
                    pass

                elif la_ == 18:
                    self.state = 3192
                    self.dataBlankWhenZeroClause()
                    pass

                elif la_ == 19:
                    self.state = 3193
                    self.dataWithLowerBoundsClause()
                    pass

                elif la_ == 20:
                    self.state = 3194
                    self.dataAlignedClause()
                    pass

                elif la_ == 21:
                    self.state = 3195
                    self.dataRecordAreaClause()
                    pass


                self.state = 3200
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 3201
            self.match(Cobol85Parser.DOT_FS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DataDescriptionEntryFormat2Context(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.DataDescriptionEntryFormat2Context, self).__init__(parent, invokingState)
            self.parser = parser

        def LEVEL_NUMBER_66(self):
            return self.getToken(Cobol85Parser.LEVEL_NUMBER_66, 0)

        def dataName(self):
            return self.getTypedRuleContext(Cobol85Parser.DataNameContext,0)


        def dataRenamesClause(self):
            return self.getTypedRuleContext(Cobol85Parser.DataRenamesClauseContext,0)


        def DOT_FS(self):
            return self.getToken(Cobol85Parser.DOT_FS, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_dataDescriptionEntryFormat2

        def enterRule(self, listener):
            if hasattr(listener, "enterDataDescriptionEntryFormat2"):
                listener.enterDataDescriptionEntryFormat2(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitDataDescriptionEntryFormat2"):
                listener.exitDataDescriptionEntryFormat2(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitDataDescriptionEntryFormat2"):
                return visitor.visitDataDescriptionEntryFormat2(self)
            else:
                return visitor.visitChildren(self)




    def dataDescriptionEntryFormat2(self):

        localctx = Cobol85Parser.DataDescriptionEntryFormat2Context(self, self._ctx, self.state)
        self.enterRule(localctx, 438, self.RULE_dataDescriptionEntryFormat2)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3203
            self.match(Cobol85Parser.LEVEL_NUMBER_66)
            self.state = 3204
            self.dataName()
            self.state = 3205
            self.dataRenamesClause()
            self.state = 3206
            self.match(Cobol85Parser.DOT_FS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DataDescriptionEntryFormat3Context(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.DataDescriptionEntryFormat3Context, self).__init__(parent, invokingState)
            self.parser = parser

        def LEVEL_NUMBER_88(self):
            return self.getToken(Cobol85Parser.LEVEL_NUMBER_88, 0)

        def conditionName(self):
            return self.getTypedRuleContext(Cobol85Parser.ConditionNameContext,0)


        def dataValueClause(self):
            return self.getTypedRuleContext(Cobol85Parser.DataValueClauseContext,0)


        def DOT_FS(self):
            return self.getToken(Cobol85Parser.DOT_FS, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_dataDescriptionEntryFormat3

        def enterRule(self, listener):
            if hasattr(listener, "enterDataDescriptionEntryFormat3"):
                listener.enterDataDescriptionEntryFormat3(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitDataDescriptionEntryFormat3"):
                listener.exitDataDescriptionEntryFormat3(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitDataDescriptionEntryFormat3"):
                return visitor.visitDataDescriptionEntryFormat3(self)
            else:
                return visitor.visitChildren(self)




    def dataDescriptionEntryFormat3(self):

        localctx = Cobol85Parser.DataDescriptionEntryFormat3Context(self, self._ctx, self.state)
        self.enterRule(localctx, 440, self.RULE_dataDescriptionEntryFormat3)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3208
            self.match(Cobol85Parser.LEVEL_NUMBER_88)
            self.state = 3209
            self.conditionName()
            self.state = 3210
            self.dataValueClause()
            self.state = 3211
            self.match(Cobol85Parser.DOT_FS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DataDescriptionEntryExecSqlContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.DataDescriptionEntryExecSqlContext, self).__init__(parent, invokingState)
            self.parser = parser

        def EXECSQLLINE(self, i=None):
            if i is None:
                return self.getTokens(Cobol85Parser.EXECSQLLINE)
            else:
                return self.getToken(Cobol85Parser.EXECSQLLINE, i)

        def DOT_FS(self):
            return self.getToken(Cobol85Parser.DOT_FS, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_dataDescriptionEntryExecSql

        def enterRule(self, listener):
            if hasattr(listener, "enterDataDescriptionEntryExecSql"):
                listener.enterDataDescriptionEntryExecSql(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitDataDescriptionEntryExecSql"):
                listener.exitDataDescriptionEntryExecSql(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitDataDescriptionEntryExecSql"):
                return visitor.visitDataDescriptionEntryExecSql(self)
            else:
                return visitor.visitChildren(self)




    def dataDescriptionEntryExecSql(self):

        localctx = Cobol85Parser.DataDescriptionEntryExecSqlContext(self, self._ctx, self.state)
        self.enterRule(localctx, 442, self.RULE_dataDescriptionEntryExecSql)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3214 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 3213
                    self.match(Cobol85Parser.EXECSQLLINE)

                else:
                    raise NoViableAltException(self)
                self.state = 3216 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,399,self._ctx)

            self.state = 3219
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.DOT_FS:
                self.state = 3218
                self.match(Cobol85Parser.DOT_FS)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DataAlignedClauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.DataAlignedClauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ALIGNED(self):
            return self.getToken(Cobol85Parser.ALIGNED, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_dataAlignedClause

        def enterRule(self, listener):
            if hasattr(listener, "enterDataAlignedClause"):
                listener.enterDataAlignedClause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitDataAlignedClause"):
                listener.exitDataAlignedClause(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitDataAlignedClause"):
                return visitor.visitDataAlignedClause(self)
            else:
                return visitor.visitChildren(self)




    def dataAlignedClause(self):

        localctx = Cobol85Parser.DataAlignedClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 444, self.RULE_dataAlignedClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3221
            self.match(Cobol85Parser.ALIGNED)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DataBlankWhenZeroClauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.DataBlankWhenZeroClauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def BLANK(self):
            return self.getToken(Cobol85Parser.BLANK, 0)

        def ZERO(self):
            return self.getToken(Cobol85Parser.ZERO, 0)

        def ZEROS(self):
            return self.getToken(Cobol85Parser.ZEROS, 0)

        def ZEROES(self):
            return self.getToken(Cobol85Parser.ZEROES, 0)

        def WHEN(self):
            return self.getToken(Cobol85Parser.WHEN, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_dataBlankWhenZeroClause

        def enterRule(self, listener):
            if hasattr(listener, "enterDataBlankWhenZeroClause"):
                listener.enterDataBlankWhenZeroClause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitDataBlankWhenZeroClause"):
                listener.exitDataBlankWhenZeroClause(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitDataBlankWhenZeroClause"):
                return visitor.visitDataBlankWhenZeroClause(self)
            else:
                return visitor.visitChildren(self)




    def dataBlankWhenZeroClause(self):

        localctx = Cobol85Parser.DataBlankWhenZeroClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 446, self.RULE_dataBlankWhenZeroClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3223
            self.match(Cobol85Parser.BLANK)
            self.state = 3225
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.WHEN:
                self.state = 3224
                self.match(Cobol85Parser.WHEN)


            self.state = 3227
            _la = self._input.LA(1)
            if not(((((_la - 526)) & ~0x3f) == 0 and ((1 << (_la - 526)) & ((1 << (Cobol85Parser.ZERO - 526)) | (1 << (Cobol85Parser.ZEROS - 526)) | (1 << (Cobol85Parser.ZEROES - 526)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DataCommonOwnLocalClauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.DataCommonOwnLocalClauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def COMMON(self):
            return self.getToken(Cobol85Parser.COMMON, 0)

        def OWN(self):
            return self.getToken(Cobol85Parser.OWN, 0)

        def LOCAL(self):
            return self.getToken(Cobol85Parser.LOCAL, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_dataCommonOwnLocalClause

        def enterRule(self, listener):
            if hasattr(listener, "enterDataCommonOwnLocalClause"):
                listener.enterDataCommonOwnLocalClause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitDataCommonOwnLocalClause"):
                listener.exitDataCommonOwnLocalClause(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitDataCommonOwnLocalClause"):
                return visitor.visitDataCommonOwnLocalClause(self)
            else:
                return visitor.visitChildren(self)




    def dataCommonOwnLocalClause(self):

        localctx = Cobol85Parser.DataCommonOwnLocalClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 448, self.RULE_dataCommonOwnLocalClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3229
            _la = self._input.LA(1)
            if not(_la==Cobol85Parser.COMMON or _la==Cobol85Parser.LOCAL or _la==Cobol85Parser.OWN):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DataExternalClauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.DataExternalClauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def EXTERNAL(self):
            return self.getToken(Cobol85Parser.EXTERNAL, 0)

        def IS(self):
            return self.getToken(Cobol85Parser.IS, 0)

        def BY(self):
            return self.getToken(Cobol85Parser.BY, 0)

        def literal(self):
            return self.getTypedRuleContext(Cobol85Parser.LiteralContext,0)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_dataExternalClause

        def enterRule(self, listener):
            if hasattr(listener, "enterDataExternalClause"):
                listener.enterDataExternalClause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitDataExternalClause"):
                listener.exitDataExternalClause(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitDataExternalClause"):
                return visitor.visitDataExternalClause(self)
            else:
                return visitor.visitChildren(self)




    def dataExternalClause(self):

        localctx = Cobol85Parser.DataExternalClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 450, self.RULE_dataExternalClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3232
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.IS:
                self.state = 3231
                self.match(Cobol85Parser.IS)


            self.state = 3234
            self.match(Cobol85Parser.EXTERNAL)
            self.state = 3237
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,403,self._ctx)
            if la_ == 1:
                self.state = 3235
                self.match(Cobol85Parser.BY)
                self.state = 3236
                self.literal()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DataGlobalClauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.DataGlobalClauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def GLOBAL(self):
            return self.getToken(Cobol85Parser.GLOBAL, 0)

        def IS(self):
            return self.getToken(Cobol85Parser.IS, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_dataGlobalClause

        def enterRule(self, listener):
            if hasattr(listener, "enterDataGlobalClause"):
                listener.enterDataGlobalClause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitDataGlobalClause"):
                listener.exitDataGlobalClause(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitDataGlobalClause"):
                return visitor.visitDataGlobalClause(self)
            else:
                return visitor.visitChildren(self)




    def dataGlobalClause(self):

        localctx = Cobol85Parser.DataGlobalClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 452, self.RULE_dataGlobalClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3240
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.IS:
                self.state = 3239
                self.match(Cobol85Parser.IS)


            self.state = 3242
            self.match(Cobol85Parser.GLOBAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DataIntegerStringClauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.DataIntegerStringClauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def INTEGER(self):
            return self.getToken(Cobol85Parser.INTEGER, 0)

        def STRING(self):
            return self.getToken(Cobol85Parser.STRING, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_dataIntegerStringClause

        def enterRule(self, listener):
            if hasattr(listener, "enterDataIntegerStringClause"):
                listener.enterDataIntegerStringClause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitDataIntegerStringClause"):
                listener.exitDataIntegerStringClause(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitDataIntegerStringClause"):
                return visitor.visitDataIntegerStringClause(self)
            else:
                return visitor.visitChildren(self)




    def dataIntegerStringClause(self):

        localctx = Cobol85Parser.DataIntegerStringClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 454, self.RULE_dataIntegerStringClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3244
            _la = self._input.LA(1)
            if not(_la==Cobol85Parser.INTEGER or _la==Cobol85Parser.STRING):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DataJustifiedClauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.DataJustifiedClauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def JUSTIFIED(self):
            return self.getToken(Cobol85Parser.JUSTIFIED, 0)

        def JUST(self):
            return self.getToken(Cobol85Parser.JUST, 0)

        def RIGHT(self):
            return self.getToken(Cobol85Parser.RIGHT, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_dataJustifiedClause

        def enterRule(self, listener):
            if hasattr(listener, "enterDataJustifiedClause"):
                listener.enterDataJustifiedClause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitDataJustifiedClause"):
                listener.exitDataJustifiedClause(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitDataJustifiedClause"):
                return visitor.visitDataJustifiedClause(self)
            else:
                return visitor.visitChildren(self)




    def dataJustifiedClause(self):

        localctx = Cobol85Parser.DataJustifiedClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 456, self.RULE_dataJustifiedClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3246
            _la = self._input.LA(1)
            if not(_la==Cobol85Parser.JUST or _la==Cobol85Parser.JUSTIFIED):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 3248
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.RIGHT:
                self.state = 3247
                self.match(Cobol85Parser.RIGHT)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DataOccursClauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.DataOccursClauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def OCCURS(self):
            return self.getToken(Cobol85Parser.OCCURS, 0)

        def integerLiteral(self):
            return self.getTypedRuleContext(Cobol85Parser.IntegerLiteralContext,0)


        def dataOccursTo(self):
            return self.getTypedRuleContext(Cobol85Parser.DataOccursToContext,0)


        def TIMES(self):
            return self.getToken(Cobol85Parser.TIMES, 0)

        def DEPENDING(self):
            return self.getToken(Cobol85Parser.DEPENDING, 0)

        def qualifiedDataName(self):
            return self.getTypedRuleContext(Cobol85Parser.QualifiedDataNameContext,0)


        def dataOccursSort(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.DataOccursSortContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.DataOccursSortContext,i)


        def INDEXED(self):
            return self.getToken(Cobol85Parser.INDEXED, 0)

        def ON(self):
            return self.getToken(Cobol85Parser.ON, 0)

        def BY(self):
            return self.getToken(Cobol85Parser.BY, 0)

        def LOCAL(self):
            return self.getToken(Cobol85Parser.LOCAL, 0)

        def indexName(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.IndexNameContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.IndexNameContext,i)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_dataOccursClause

        def enterRule(self, listener):
            if hasattr(listener, "enterDataOccursClause"):
                listener.enterDataOccursClause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitDataOccursClause"):
                listener.exitDataOccursClause(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitDataOccursClause"):
                return visitor.visitDataOccursClause(self)
            else:
                return visitor.visitChildren(self)




    def dataOccursClause(self):

        localctx = Cobol85Parser.DataOccursClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 458, self.RULE_dataOccursClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3250
            self.match(Cobol85Parser.OCCURS)
            self.state = 3251
            self.integerLiteral()
            self.state = 3253
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.TO:
                self.state = 3252
                self.dataOccursTo()


            self.state = 3256
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.TIMES:
                self.state = 3255
                self.match(Cobol85Parser.TIMES)


            self.state = 3263
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.DEPENDING:
                self.state = 3258
                self.match(Cobol85Parser.DEPENDING)
                self.state = 3260
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Cobol85Parser.ON:
                    self.state = 3259
                    self.match(Cobol85Parser.ON)


                self.state = 3262
                self.qualifiedDataName()


            self.state = 3268
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==Cobol85Parser.ASCENDING or _la==Cobol85Parser.DESCENDING:
                self.state = 3265
                self.dataOccursSort()
                self.state = 3270
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 3283
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.INDEXED:
                self.state = 3271
                self.match(Cobol85Parser.INDEXED)
                self.state = 3273
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Cobol85Parser.BY:
                    self.state = 3272
                    self.match(Cobol85Parser.BY)


                self.state = 3276
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,412,self._ctx)
                if la_ == 1:
                    self.state = 3275
                    self.match(Cobol85Parser.LOCAL)


                self.state = 3279 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 3278
                        self.indexName()

                    else:
                        raise NoViableAltException(self)
                    self.state = 3281 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,413,self._ctx)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DataOccursToContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.DataOccursToContext, self).__init__(parent, invokingState)
            self.parser = parser

        def TO(self):
            return self.getToken(Cobol85Parser.TO, 0)

        def integerLiteral(self):
            return self.getTypedRuleContext(Cobol85Parser.IntegerLiteralContext,0)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_dataOccursTo

        def enterRule(self, listener):
            if hasattr(listener, "enterDataOccursTo"):
                listener.enterDataOccursTo(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitDataOccursTo"):
                listener.exitDataOccursTo(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitDataOccursTo"):
                return visitor.visitDataOccursTo(self)
            else:
                return visitor.visitChildren(self)




    def dataOccursTo(self):

        localctx = Cobol85Parser.DataOccursToContext(self, self._ctx, self.state)
        self.enterRule(localctx, 460, self.RULE_dataOccursTo)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3285
            self.match(Cobol85Parser.TO)
            self.state = 3286
            self.integerLiteral()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DataOccursSortContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.DataOccursSortContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ASCENDING(self):
            return self.getToken(Cobol85Parser.ASCENDING, 0)

        def DESCENDING(self):
            return self.getToken(Cobol85Parser.DESCENDING, 0)

        def KEY(self):
            return self.getToken(Cobol85Parser.KEY, 0)

        def IS(self):
            return self.getToken(Cobol85Parser.IS, 0)

        def qualifiedDataName(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.QualifiedDataNameContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.QualifiedDataNameContext,i)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_dataOccursSort

        def enterRule(self, listener):
            if hasattr(listener, "enterDataOccursSort"):
                listener.enterDataOccursSort(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitDataOccursSort"):
                listener.exitDataOccursSort(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitDataOccursSort"):
                return visitor.visitDataOccursSort(self)
            else:
                return visitor.visitChildren(self)




    def dataOccursSort(self):

        localctx = Cobol85Parser.DataOccursSortContext(self, self._ctx, self.state)
        self.enterRule(localctx, 462, self.RULE_dataOccursSort)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3288
            _la = self._input.LA(1)
            if not(_la==Cobol85Parser.ASCENDING or _la==Cobol85Parser.DESCENDING):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 3290
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.KEY:
                self.state = 3289
                self.match(Cobol85Parser.KEY)


            self.state = 3293
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.IS:
                self.state = 3292
                self.match(Cobol85Parser.IS)


            self.state = 3296 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 3295
                    self.qualifiedDataName()

                else:
                    raise NoViableAltException(self)
                self.state = 3298 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,417,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DataPictureClauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.DataPictureClauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def pictureString(self):
            return self.getTypedRuleContext(Cobol85Parser.PictureStringContext,0)


        def PICTURE(self):
            return self.getToken(Cobol85Parser.PICTURE, 0)

        def PIC(self):
            return self.getToken(Cobol85Parser.PIC, 0)

        def IS(self):
            return self.getToken(Cobol85Parser.IS, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_dataPictureClause

        def enterRule(self, listener):
            if hasattr(listener, "enterDataPictureClause"):
                listener.enterDataPictureClause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitDataPictureClause"):
                listener.exitDataPictureClause(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitDataPictureClause"):
                return visitor.visitDataPictureClause(self)
            else:
                return visitor.visitChildren(self)




    def dataPictureClause(self):

        localctx = Cobol85Parser.DataPictureClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 464, self.RULE_dataPictureClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3300
            _la = self._input.LA(1)
            if not(_la==Cobol85Parser.PIC or _la==Cobol85Parser.PICTURE):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 3302
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.IS:
                self.state = 3301
                self.match(Cobol85Parser.IS)


            self.state = 3304
            self.pictureString()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PictureStringContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.PictureStringContext, self).__init__(parent, invokingState)
            self.parser = parser

        def pictureChars(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.PictureCharsContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.PictureCharsContext,i)


        def pictureCardinality(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.PictureCardinalityContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.PictureCardinalityContext,i)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_pictureString

        def enterRule(self, listener):
            if hasattr(listener, "enterPictureString"):
                listener.enterPictureString(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitPictureString"):
                listener.exitPictureString(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitPictureString"):
                return visitor.visitPictureString(self)
            else:
                return visitor.visitChildren(self)




    def pictureString(self):

        localctx = Cobol85Parser.PictureStringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 466, self.RULE_pictureString)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3314 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 3307 
                    self._errHandler.sync(self)
                    _alt = 1
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 3306
                            self.pictureChars()

                        else:
                            raise NoViableAltException(self)
                        self.state = 3309 
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,419,self._ctx)

                    self.state = 3312
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,420,self._ctx)
                    if la_ == 1:
                        self.state = 3311
                        self.pictureCardinality()



                else:
                    raise NoViableAltException(self)
                self.state = 3316 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,421,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PictureCharsContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.PictureCharsContext, self).__init__(parent, invokingState)
            self.parser = parser

        def DOLLARCHAR(self):
            return self.getToken(Cobol85Parser.DOLLARCHAR, 0)

        def IDENTIFIER(self):
            return self.getToken(Cobol85Parser.IDENTIFIER, 0)

        def NUMERICLITERAL(self):
            return self.getToken(Cobol85Parser.NUMERICLITERAL, 0)

        def SLASHCHAR(self):
            return self.getToken(Cobol85Parser.SLASHCHAR, 0)

        def COMMACHAR(self):
            return self.getToken(Cobol85Parser.COMMACHAR, 0)

        def DOT(self):
            return self.getToken(Cobol85Parser.DOT, 0)

        def COLONCHAR(self):
            return self.getToken(Cobol85Parser.COLONCHAR, 0)

        def ASTERISKCHAR(self):
            return self.getToken(Cobol85Parser.ASTERISKCHAR, 0)

        def DOUBLEASTERISKCHAR(self):
            return self.getToken(Cobol85Parser.DOUBLEASTERISKCHAR, 0)

        def LPARENCHAR(self):
            return self.getToken(Cobol85Parser.LPARENCHAR, 0)

        def RPARENCHAR(self):
            return self.getToken(Cobol85Parser.RPARENCHAR, 0)

        def PLUSCHAR(self):
            return self.getToken(Cobol85Parser.PLUSCHAR, 0)

        def MINUSCHAR(self):
            return self.getToken(Cobol85Parser.MINUSCHAR, 0)

        def LESSTHANCHAR(self):
            return self.getToken(Cobol85Parser.LESSTHANCHAR, 0)

        def MORETHANCHAR(self):
            return self.getToken(Cobol85Parser.MORETHANCHAR, 0)

        def integerLiteral(self):
            return self.getTypedRuleContext(Cobol85Parser.IntegerLiteralContext,0)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_pictureChars

        def enterRule(self, listener):
            if hasattr(listener, "enterPictureChars"):
                listener.enterPictureChars(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitPictureChars"):
                listener.exitPictureChars(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitPictureChars"):
                return visitor.visitPictureChars(self)
            else:
                return visitor.visitChildren(self)




    def pictureChars(self):

        localctx = Cobol85Parser.PictureCharsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 468, self.RULE_pictureChars)
        try:
            self.state = 3334
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Cobol85Parser.DOLLARCHAR]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3318
                self.match(Cobol85Parser.DOLLARCHAR)
                pass
            elif token in [Cobol85Parser.IDENTIFIER]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3319
                self.match(Cobol85Parser.IDENTIFIER)
                pass
            elif token in [Cobol85Parser.NUMERICLITERAL]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3320
                self.match(Cobol85Parser.NUMERICLITERAL)
                pass
            elif token in [Cobol85Parser.SLASHCHAR]:
                self.enterOuterAlt(localctx, 4)
                self.state = 3321
                self.match(Cobol85Parser.SLASHCHAR)
                pass
            elif token in [Cobol85Parser.COMMACHAR]:
                self.enterOuterAlt(localctx, 5)
                self.state = 3322
                self.match(Cobol85Parser.COMMACHAR)
                pass
            elif token in [Cobol85Parser.DOT]:
                self.enterOuterAlt(localctx, 6)
                self.state = 3323
                self.match(Cobol85Parser.DOT)
                pass
            elif token in [Cobol85Parser.COLONCHAR]:
                self.enterOuterAlt(localctx, 7)
                self.state = 3324
                self.match(Cobol85Parser.COLONCHAR)
                pass
            elif token in [Cobol85Parser.ASTERISKCHAR]:
                self.enterOuterAlt(localctx, 8)
                self.state = 3325
                self.match(Cobol85Parser.ASTERISKCHAR)
                pass
            elif token in [Cobol85Parser.DOUBLEASTERISKCHAR]:
                self.enterOuterAlt(localctx, 9)
                self.state = 3326
                self.match(Cobol85Parser.DOUBLEASTERISKCHAR)
                pass
            elif token in [Cobol85Parser.LPARENCHAR]:
                self.enterOuterAlt(localctx, 10)
                self.state = 3327
                self.match(Cobol85Parser.LPARENCHAR)
                pass
            elif token in [Cobol85Parser.RPARENCHAR]:
                self.enterOuterAlt(localctx, 11)
                self.state = 3328
                self.match(Cobol85Parser.RPARENCHAR)
                pass
            elif token in [Cobol85Parser.PLUSCHAR]:
                self.enterOuterAlt(localctx, 12)
                self.state = 3329
                self.match(Cobol85Parser.PLUSCHAR)
                pass
            elif token in [Cobol85Parser.MINUSCHAR]:
                self.enterOuterAlt(localctx, 13)
                self.state = 3330
                self.match(Cobol85Parser.MINUSCHAR)
                pass
            elif token in [Cobol85Parser.LESSTHANCHAR]:
                self.enterOuterAlt(localctx, 14)
                self.state = 3331
                self.match(Cobol85Parser.LESSTHANCHAR)
                pass
            elif token in [Cobol85Parser.MORETHANCHAR]:
                self.enterOuterAlt(localctx, 15)
                self.state = 3332
                self.match(Cobol85Parser.MORETHANCHAR)
                pass
            elif token in [Cobol85Parser.LEVEL_NUMBER_66, Cobol85Parser.LEVEL_NUMBER_77, Cobol85Parser.LEVEL_NUMBER_88, Cobol85Parser.INTEGERLITERAL]:
                self.enterOuterAlt(localctx, 16)
                self.state = 3333
                self.integerLiteral()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PictureCardinalityContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.PictureCardinalityContext, self).__init__(parent, invokingState)
            self.parser = parser

        def LPARENCHAR(self):
            return self.getToken(Cobol85Parser.LPARENCHAR, 0)

        def integerLiteral(self):
            return self.getTypedRuleContext(Cobol85Parser.IntegerLiteralContext,0)


        def RPARENCHAR(self):
            return self.getToken(Cobol85Parser.RPARENCHAR, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_pictureCardinality

        def enterRule(self, listener):
            if hasattr(listener, "enterPictureCardinality"):
                listener.enterPictureCardinality(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitPictureCardinality"):
                listener.exitPictureCardinality(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitPictureCardinality"):
                return visitor.visitPictureCardinality(self)
            else:
                return visitor.visitChildren(self)




    def pictureCardinality(self):

        localctx = Cobol85Parser.PictureCardinalityContext(self, self._ctx, self.state)
        self.enterRule(localctx, 470, self.RULE_pictureCardinality)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3336
            self.match(Cobol85Parser.LPARENCHAR)
            self.state = 3337
            self.integerLiteral()
            self.state = 3338
            self.match(Cobol85Parser.RPARENCHAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DataReceivedByClauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.DataReceivedByClauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def CONTENT(self):
            return self.getToken(Cobol85Parser.CONTENT, 0)

        def REFERENCE(self):
            return self.getToken(Cobol85Parser.REFERENCE, 0)

        def REF(self):
            return self.getToken(Cobol85Parser.REF, 0)

        def RECEIVED(self):
            return self.getToken(Cobol85Parser.RECEIVED, 0)

        def BY(self):
            return self.getToken(Cobol85Parser.BY, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_dataReceivedByClause

        def enterRule(self, listener):
            if hasattr(listener, "enterDataReceivedByClause"):
                listener.enterDataReceivedByClause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitDataReceivedByClause"):
                listener.exitDataReceivedByClause(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitDataReceivedByClause"):
                return visitor.visitDataReceivedByClause(self)
            else:
                return visitor.visitChildren(self)




    def dataReceivedByClause(self):

        localctx = Cobol85Parser.DataReceivedByClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 472, self.RULE_dataReceivedByClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3341
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.RECEIVED:
                self.state = 3340
                self.match(Cobol85Parser.RECEIVED)


            self.state = 3344
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.BY:
                self.state = 3343
                self.match(Cobol85Parser.BY)


            self.state = 3346
            _la = self._input.LA(1)
            if not(_la==Cobol85Parser.CONTENT or _la==Cobol85Parser.REF or _la==Cobol85Parser.REFERENCE):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DataRecordAreaClauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.DataRecordAreaClauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def RECORD(self):
            return self.getToken(Cobol85Parser.RECORD, 0)

        def AREA(self):
            return self.getToken(Cobol85Parser.AREA, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_dataRecordAreaClause

        def enterRule(self, listener):
            if hasattr(listener, "enterDataRecordAreaClause"):
                listener.enterDataRecordAreaClause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitDataRecordAreaClause"):
                listener.exitDataRecordAreaClause(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitDataRecordAreaClause"):
                return visitor.visitDataRecordAreaClause(self)
            else:
                return visitor.visitChildren(self)




    def dataRecordAreaClause(self):

        localctx = Cobol85Parser.DataRecordAreaClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 474, self.RULE_dataRecordAreaClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3348
            self.match(Cobol85Parser.RECORD)
            self.state = 3349
            self.match(Cobol85Parser.AREA)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DataRedefinesClauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.DataRedefinesClauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def REDEFINES(self):
            return self.getToken(Cobol85Parser.REDEFINES, 0)

        def dataName(self):
            return self.getTypedRuleContext(Cobol85Parser.DataNameContext,0)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_dataRedefinesClause

        def enterRule(self, listener):
            if hasattr(listener, "enterDataRedefinesClause"):
                listener.enterDataRedefinesClause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitDataRedefinesClause"):
                listener.exitDataRedefinesClause(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitDataRedefinesClause"):
                return visitor.visitDataRedefinesClause(self)
            else:
                return visitor.visitChildren(self)




    def dataRedefinesClause(self):

        localctx = Cobol85Parser.DataRedefinesClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 476, self.RULE_dataRedefinesClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3351
            self.match(Cobol85Parser.REDEFINES)
            self.state = 3352
            self.dataName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DataRenamesClauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.DataRenamesClauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def RENAMES(self):
            return self.getToken(Cobol85Parser.RENAMES, 0)

        def qualifiedDataName(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.QualifiedDataNameContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.QualifiedDataNameContext,i)


        def THROUGH(self):
            return self.getToken(Cobol85Parser.THROUGH, 0)

        def THRU(self):
            return self.getToken(Cobol85Parser.THRU, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_dataRenamesClause

        def enterRule(self, listener):
            if hasattr(listener, "enterDataRenamesClause"):
                listener.enterDataRenamesClause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitDataRenamesClause"):
                listener.exitDataRenamesClause(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitDataRenamesClause"):
                return visitor.visitDataRenamesClause(self)
            else:
                return visitor.visitChildren(self)




    def dataRenamesClause(self):

        localctx = Cobol85Parser.DataRenamesClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 478, self.RULE_dataRenamesClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3354
            self.match(Cobol85Parser.RENAMES)
            self.state = 3355
            self.qualifiedDataName()
            self.state = 3358
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.THROUGH or _la==Cobol85Parser.THRU:
                self.state = 3356
                _la = self._input.LA(1)
                if not(_la==Cobol85Parser.THROUGH or _la==Cobol85Parser.THRU):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3357
                self.qualifiedDataName()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DataSignClauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.DataSignClauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def LEADING(self):
            return self.getToken(Cobol85Parser.LEADING, 0)

        def TRAILING(self):
            return self.getToken(Cobol85Parser.TRAILING, 0)

        def SIGN(self):
            return self.getToken(Cobol85Parser.SIGN, 0)

        def SEPARATE(self):
            return self.getToken(Cobol85Parser.SEPARATE, 0)

        def IS(self):
            return self.getToken(Cobol85Parser.IS, 0)

        def CHARACTER(self):
            return self.getToken(Cobol85Parser.CHARACTER, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_dataSignClause

        def enterRule(self, listener):
            if hasattr(listener, "enterDataSignClause"):
                listener.enterDataSignClause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitDataSignClause"):
                listener.exitDataSignClause(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitDataSignClause"):
                return visitor.visitDataSignClause(self)
            else:
                return visitor.visitChildren(self)




    def dataSignClause(self):

        localctx = Cobol85Parser.DataSignClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 480, self.RULE_dataSignClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3364
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.SIGN:
                self.state = 3360
                self.match(Cobol85Parser.SIGN)
                self.state = 3362
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Cobol85Parser.IS:
                    self.state = 3361
                    self.match(Cobol85Parser.IS)




            self.state = 3366
            _la = self._input.LA(1)
            if not(_la==Cobol85Parser.LEADING or _la==Cobol85Parser.TRAILING):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 3371
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.SEPARATE:
                self.state = 3367
                self.match(Cobol85Parser.SEPARATE)
                self.state = 3369
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Cobol85Parser.CHARACTER:
                    self.state = 3368
                    self.match(Cobol85Parser.CHARACTER)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DataSynchronizedClauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.DataSynchronizedClauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def SYNCHRONIZED(self):
            return self.getToken(Cobol85Parser.SYNCHRONIZED, 0)

        def SYNC(self):
            return self.getToken(Cobol85Parser.SYNC, 0)

        def LEFT(self):
            return self.getToken(Cobol85Parser.LEFT, 0)

        def RIGHT(self):
            return self.getToken(Cobol85Parser.RIGHT, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_dataSynchronizedClause

        def enterRule(self, listener):
            if hasattr(listener, "enterDataSynchronizedClause"):
                listener.enterDataSynchronizedClause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitDataSynchronizedClause"):
                listener.exitDataSynchronizedClause(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitDataSynchronizedClause"):
                return visitor.visitDataSynchronizedClause(self)
            else:
                return visitor.visitChildren(self)




    def dataSynchronizedClause(self):

        localctx = Cobol85Parser.DataSynchronizedClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 482, self.RULE_dataSynchronizedClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3373
            _la = self._input.LA(1)
            if not(_la==Cobol85Parser.SYNC or _la==Cobol85Parser.SYNCHRONIZED):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 3375
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.LEFT or _la==Cobol85Parser.RIGHT:
                self.state = 3374
                _la = self._input.LA(1)
                if not(_la==Cobol85Parser.LEFT or _la==Cobol85Parser.RIGHT):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DataThreadLocalClauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.DataThreadLocalClauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def THREAD_LOCAL(self):
            return self.getToken(Cobol85Parser.THREAD_LOCAL, 0)

        def IS(self):
            return self.getToken(Cobol85Parser.IS, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_dataThreadLocalClause

        def enterRule(self, listener):
            if hasattr(listener, "enterDataThreadLocalClause"):
                listener.enterDataThreadLocalClause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitDataThreadLocalClause"):
                listener.exitDataThreadLocalClause(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitDataThreadLocalClause"):
                return visitor.visitDataThreadLocalClause(self)
            else:
                return visitor.visitChildren(self)




    def dataThreadLocalClause(self):

        localctx = Cobol85Parser.DataThreadLocalClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 484, self.RULE_dataThreadLocalClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3378
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.IS:
                self.state = 3377
                self.match(Cobol85Parser.IS)


            self.state = 3380
            self.match(Cobol85Parser.THREAD_LOCAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DataTypeClauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.DataTypeClauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def TYPE(self):
            return self.getToken(Cobol85Parser.TYPE, 0)

        def SHORT_DATE(self):
            return self.getToken(Cobol85Parser.SHORT_DATE, 0)

        def LONG_DATE(self):
            return self.getToken(Cobol85Parser.LONG_DATE, 0)

        def NUMERIC_DATE(self):
            return self.getToken(Cobol85Parser.NUMERIC_DATE, 0)

        def NUMERIC_TIME(self):
            return self.getToken(Cobol85Parser.NUMERIC_TIME, 0)

        def LONG_TIME(self):
            return self.getToken(Cobol85Parser.LONG_TIME, 0)

        def LPARENCHAR(self):
            return self.getToken(Cobol85Parser.LPARENCHAR, 0)

        def integerLiteral(self):
            return self.getTypedRuleContext(Cobol85Parser.IntegerLiteralContext,0)


        def RPARENCHAR(self):
            return self.getToken(Cobol85Parser.RPARENCHAR, 0)

        def IS(self):
            return self.getToken(Cobol85Parser.IS, 0)

        def CLOB(self):
            return self.getToken(Cobol85Parser.CLOB, 0)

        def BLOB(self):
            return self.getToken(Cobol85Parser.BLOB, 0)

        def DBCLOB(self):
            return self.getToken(Cobol85Parser.DBCLOB, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_dataTypeClause

        def enterRule(self, listener):
            if hasattr(listener, "enterDataTypeClause"):
                listener.enterDataTypeClause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitDataTypeClause"):
                listener.exitDataTypeClause(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitDataTypeClause"):
                return visitor.visitDataTypeClause(self)
            else:
                return visitor.visitChildren(self)




    def dataTypeClause(self):

        localctx = Cobol85Parser.DataTypeClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 486, self.RULE_dataTypeClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3382
            self.match(Cobol85Parser.TYPE)
            self.state = 3384
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.IS:
                self.state = 3383
                self.match(Cobol85Parser.IS)


            self.state = 3396
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Cobol85Parser.SHORT_DATE]:
                self.state = 3386
                self.match(Cobol85Parser.SHORT_DATE)
                pass
            elif token in [Cobol85Parser.LONG_DATE]:
                self.state = 3387
                self.match(Cobol85Parser.LONG_DATE)
                pass
            elif token in [Cobol85Parser.NUMERIC_DATE]:
                self.state = 3388
                self.match(Cobol85Parser.NUMERIC_DATE)
                pass
            elif token in [Cobol85Parser.NUMERIC_TIME]:
                self.state = 3389
                self.match(Cobol85Parser.NUMERIC_TIME)
                pass
            elif token in [Cobol85Parser.LONG_TIME]:
                self.state = 3390
                self.match(Cobol85Parser.LONG_TIME)
                pass
            elif token in [Cobol85Parser.BLOB, Cobol85Parser.CLOB, Cobol85Parser.DBCLOB]:
                self.state = 3391
                _la = self._input.LA(1)
                if not(_la==Cobol85Parser.BLOB or _la==Cobol85Parser.CLOB or _la==Cobol85Parser.DBCLOB):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3392
                self.match(Cobol85Parser.LPARENCHAR)
                self.state = 3393
                self.integerLiteral()
                self.state = 3394
                self.match(Cobol85Parser.RPARENCHAR)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DataTypeDefClauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.DataTypeDefClauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def TYPEDEF(self):
            return self.getToken(Cobol85Parser.TYPEDEF, 0)

        def IS(self):
            return self.getToken(Cobol85Parser.IS, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_dataTypeDefClause

        def enterRule(self, listener):
            if hasattr(listener, "enterDataTypeDefClause"):
                listener.enterDataTypeDefClause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitDataTypeDefClause"):
                listener.exitDataTypeDefClause(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitDataTypeDefClause"):
                return visitor.visitDataTypeDefClause(self)
            else:
                return visitor.visitChildren(self)




    def dataTypeDefClause(self):

        localctx = Cobol85Parser.DataTypeDefClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 488, self.RULE_dataTypeDefClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3399
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.IS:
                self.state = 3398
                self.match(Cobol85Parser.IS)


            self.state = 3401
            self.match(Cobol85Parser.TYPEDEF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DataUsageClauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.DataUsageClauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def BINARY(self):
            return self.getToken(Cobol85Parser.BINARY, 0)

        def BIT(self):
            return self.getToken(Cobol85Parser.BIT, 0)

        def COMP(self):
            return self.getToken(Cobol85Parser.COMP, 0)

        def COMP_1(self):
            return self.getToken(Cobol85Parser.COMP_1, 0)

        def COMP_2(self):
            return self.getToken(Cobol85Parser.COMP_2, 0)

        def COMP_3(self):
            return self.getToken(Cobol85Parser.COMP_3, 0)

        def COMP_4(self):
            return self.getToken(Cobol85Parser.COMP_4, 0)

        def COMP_5(self):
            return self.getToken(Cobol85Parser.COMP_5, 0)

        def COMPUTATIONAL(self):
            return self.getToken(Cobol85Parser.COMPUTATIONAL, 0)

        def COMPUTATIONAL_1(self):
            return self.getToken(Cobol85Parser.COMPUTATIONAL_1, 0)

        def COMPUTATIONAL_2(self):
            return self.getToken(Cobol85Parser.COMPUTATIONAL_2, 0)

        def COMPUTATIONAL_3(self):
            return self.getToken(Cobol85Parser.COMPUTATIONAL_3, 0)

        def COMPUTATIONAL_4(self):
            return self.getToken(Cobol85Parser.COMPUTATIONAL_4, 0)

        def COMPUTATIONAL_5(self):
            return self.getToken(Cobol85Parser.COMPUTATIONAL_5, 0)

        def CONTROL_POINT(self):
            return self.getToken(Cobol85Parser.CONTROL_POINT, 0)

        def DATE(self):
            return self.getToken(Cobol85Parser.DATE, 0)

        def DISPLAY(self):
            return self.getToken(Cobol85Parser.DISPLAY, 0)

        def DISPLAY_1(self):
            return self.getToken(Cobol85Parser.DISPLAY_1, 0)

        def DOUBLE(self):
            return self.getToken(Cobol85Parser.DOUBLE, 0)

        def EVENT(self):
            return self.getToken(Cobol85Parser.EVENT, 0)

        def FUNCTION_POINTER(self):
            return self.getToken(Cobol85Parser.FUNCTION_POINTER, 0)

        def INDEX(self):
            return self.getToken(Cobol85Parser.INDEX, 0)

        def KANJI(self):
            return self.getToken(Cobol85Parser.KANJI, 0)

        def LOCK(self):
            return self.getToken(Cobol85Parser.LOCK, 0)

        def NATIONAL(self):
            return self.getToken(Cobol85Parser.NATIONAL, 0)

        def PACKED_DECIMAL(self):
            return self.getToken(Cobol85Parser.PACKED_DECIMAL, 0)

        def POINTER(self):
            return self.getToken(Cobol85Parser.POINTER, 0)

        def PROCEDURE_POINTER(self):
            return self.getToken(Cobol85Parser.PROCEDURE_POINTER, 0)

        def REAL(self):
            return self.getToken(Cobol85Parser.REAL, 0)

        def SQL(self):
            return self.getToken(Cobol85Parser.SQL, 0)

        def TASK(self):
            return self.getToken(Cobol85Parser.TASK, 0)

        def USAGE(self):
            return self.getToken(Cobol85Parser.USAGE, 0)

        def IS(self):
            return self.getToken(Cobol85Parser.IS, 0)

        def TRUNCATED(self):
            return self.getToken(Cobol85Parser.TRUNCATED, 0)

        def EXTENDED(self):
            return self.getToken(Cobol85Parser.EXTENDED, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_dataUsageClause

        def enterRule(self, listener):
            if hasattr(listener, "enterDataUsageClause"):
                listener.enterDataUsageClause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitDataUsageClause"):
                listener.exitDataUsageClause(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitDataUsageClause"):
                return visitor.visitDataUsageClause(self)
            else:
                return visitor.visitChildren(self)




    def dataUsageClause(self):

        localctx = Cobol85Parser.DataUsageClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 490, self.RULE_dataUsageClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3407
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.USAGE:
                self.state = 3403
                self.match(Cobol85Parser.USAGE)
                self.state = 3405
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Cobol85Parser.IS:
                    self.state = 3404
                    self.match(Cobol85Parser.IS)




            self.state = 3443
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Cobol85Parser.BINARY]:
                self.state = 3409
                self.match(Cobol85Parser.BINARY)
                self.state = 3411
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,437,self._ctx)
                if la_ == 1:
                    self.state = 3410
                    _la = self._input.LA(1)
                    if not(_la==Cobol85Parser.EXTENDED or _la==Cobol85Parser.TRUNCATED):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                pass
            elif token in [Cobol85Parser.BIT]:
                self.state = 3413
                self.match(Cobol85Parser.BIT)
                pass
            elif token in [Cobol85Parser.COMP]:
                self.state = 3414
                self.match(Cobol85Parser.COMP)
                pass
            elif token in [Cobol85Parser.COMP_1]:
                self.state = 3415
                self.match(Cobol85Parser.COMP_1)
                pass
            elif token in [Cobol85Parser.COMP_2]:
                self.state = 3416
                self.match(Cobol85Parser.COMP_2)
                pass
            elif token in [Cobol85Parser.COMP_3]:
                self.state = 3417
                self.match(Cobol85Parser.COMP_3)
                pass
            elif token in [Cobol85Parser.COMP_4]:
                self.state = 3418
                self.match(Cobol85Parser.COMP_4)
                pass
            elif token in [Cobol85Parser.COMP_5]:
                self.state = 3419
                self.match(Cobol85Parser.COMP_5)
                pass
            elif token in [Cobol85Parser.COMPUTATIONAL]:
                self.state = 3420
                self.match(Cobol85Parser.COMPUTATIONAL)
                pass
            elif token in [Cobol85Parser.COMPUTATIONAL_1]:
                self.state = 3421
                self.match(Cobol85Parser.COMPUTATIONAL_1)
                pass
            elif token in [Cobol85Parser.COMPUTATIONAL_2]:
                self.state = 3422
                self.match(Cobol85Parser.COMPUTATIONAL_2)
                pass
            elif token in [Cobol85Parser.COMPUTATIONAL_3]:
                self.state = 3423
                self.match(Cobol85Parser.COMPUTATIONAL_3)
                pass
            elif token in [Cobol85Parser.COMPUTATIONAL_4]:
                self.state = 3424
                self.match(Cobol85Parser.COMPUTATIONAL_4)
                pass
            elif token in [Cobol85Parser.COMPUTATIONAL_5]:
                self.state = 3425
                self.match(Cobol85Parser.COMPUTATIONAL_5)
                pass
            elif token in [Cobol85Parser.CONTROL_POINT]:
                self.state = 3426
                self.match(Cobol85Parser.CONTROL_POINT)
                pass
            elif token in [Cobol85Parser.DATE]:
                self.state = 3427
                self.match(Cobol85Parser.DATE)
                pass
            elif token in [Cobol85Parser.DISPLAY]:
                self.state = 3428
                self.match(Cobol85Parser.DISPLAY)
                pass
            elif token in [Cobol85Parser.DISPLAY_1]:
                self.state = 3429
                self.match(Cobol85Parser.DISPLAY_1)
                pass
            elif token in [Cobol85Parser.DOUBLE]:
                self.state = 3430
                self.match(Cobol85Parser.DOUBLE)
                pass
            elif token in [Cobol85Parser.EVENT]:
                self.state = 3431
                self.match(Cobol85Parser.EVENT)
                pass
            elif token in [Cobol85Parser.FUNCTION_POINTER]:
                self.state = 3432
                self.match(Cobol85Parser.FUNCTION_POINTER)
                pass
            elif token in [Cobol85Parser.INDEX]:
                self.state = 3433
                self.match(Cobol85Parser.INDEX)
                pass
            elif token in [Cobol85Parser.KANJI]:
                self.state = 3434
                self.match(Cobol85Parser.KANJI)
                pass
            elif token in [Cobol85Parser.LOCK]:
                self.state = 3435
                self.match(Cobol85Parser.LOCK)
                pass
            elif token in [Cobol85Parser.NATIONAL]:
                self.state = 3436
                self.match(Cobol85Parser.NATIONAL)
                pass
            elif token in [Cobol85Parser.PACKED_DECIMAL]:
                self.state = 3437
                self.match(Cobol85Parser.PACKED_DECIMAL)
                pass
            elif token in [Cobol85Parser.POINTER]:
                self.state = 3438
                self.match(Cobol85Parser.POINTER)
                pass
            elif token in [Cobol85Parser.PROCEDURE_POINTER]:
                self.state = 3439
                self.match(Cobol85Parser.PROCEDURE_POINTER)
                pass
            elif token in [Cobol85Parser.REAL]:
                self.state = 3440
                self.match(Cobol85Parser.REAL)
                pass
            elif token in [Cobol85Parser.SQL]:
                self.state = 3441
                self.match(Cobol85Parser.SQL)
                pass
            elif token in [Cobol85Parser.TASK]:
                self.state = 3442
                self.match(Cobol85Parser.TASK)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DataUsingClauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.DataUsingClauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def USING(self):
            return self.getToken(Cobol85Parser.USING, 0)

        def LANGUAGE(self):
            return self.getToken(Cobol85Parser.LANGUAGE, 0)

        def CONVENTION(self):
            return self.getToken(Cobol85Parser.CONVENTION, 0)

        def cobolWord(self):
            return self.getTypedRuleContext(Cobol85Parser.CobolWordContext,0)


        def dataName(self):
            return self.getTypedRuleContext(Cobol85Parser.DataNameContext,0)


        def OF(self):
            return self.getToken(Cobol85Parser.OF, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_dataUsingClause

        def enterRule(self, listener):
            if hasattr(listener, "enterDataUsingClause"):
                listener.enterDataUsingClause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitDataUsingClause"):
                listener.exitDataUsingClause(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitDataUsingClause"):
                return visitor.visitDataUsingClause(self)
            else:
                return visitor.visitChildren(self)




    def dataUsingClause(self):

        localctx = Cobol85Parser.DataUsingClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 492, self.RULE_dataUsingClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3445
            self.match(Cobol85Parser.USING)
            self.state = 3446
            _la = self._input.LA(1)
            if not(_la==Cobol85Parser.CONVENTION or _la==Cobol85Parser.LANGUAGE):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 3448
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.OF:
                self.state = 3447
                self.match(Cobol85Parser.OF)


            self.state = 3452
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,440,self._ctx)
            if la_ == 1:
                self.state = 3450
                self.cobolWord()
                pass

            elif la_ == 2:
                self.state = 3451
                self.dataName()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DataValueClauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.DataValueClauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def dataValueInterval(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.DataValueIntervalContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.DataValueIntervalContext,i)


        def VALUE(self):
            return self.getToken(Cobol85Parser.VALUE, 0)

        def VALUES(self):
            return self.getToken(Cobol85Parser.VALUES, 0)

        def COMMACHAR(self, i=None):
            if i is None:
                return self.getTokens(Cobol85Parser.COMMACHAR)
            else:
                return self.getToken(Cobol85Parser.COMMACHAR, i)

        def IS(self):
            return self.getToken(Cobol85Parser.IS, 0)

        def ARE(self):
            return self.getToken(Cobol85Parser.ARE, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_dataValueClause

        def enterRule(self, listener):
            if hasattr(listener, "enterDataValueClause"):
                listener.enterDataValueClause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitDataValueClause"):
                listener.exitDataValueClause(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitDataValueClause"):
                return visitor.visitDataValueClause(self)
            else:
                return visitor.visitChildren(self)




    def dataValueClause(self):

        localctx = Cobol85Parser.DataValueClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 494, self.RULE_dataValueClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3458
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.VALUE or _la==Cobol85Parser.VALUES:
                self.state = 3454
                _la = self._input.LA(1)
                if not(_la==Cobol85Parser.VALUE or _la==Cobol85Parser.VALUES):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3456
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Cobol85Parser.ARE or _la==Cobol85Parser.IS:
                    self.state = 3455
                    _la = self._input.LA(1)
                    if not(_la==Cobol85Parser.ARE or _la==Cobol85Parser.IS):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()




            self.state = 3460
            self.dataValueInterval()
            self.state = 3467
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,444,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 3462
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==Cobol85Parser.COMMACHAR:
                        self.state = 3461
                        self.match(Cobol85Parser.COMMACHAR)


                    self.state = 3464
                    self.dataValueInterval() 
                self.state = 3469
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,444,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DataValueIntervalContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.DataValueIntervalContext, self).__init__(parent, invokingState)
            self.parser = parser

        def dataValueIntervalFrom(self):
            return self.getTypedRuleContext(Cobol85Parser.DataValueIntervalFromContext,0)


        def dataValueIntervalTo(self):
            return self.getTypedRuleContext(Cobol85Parser.DataValueIntervalToContext,0)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_dataValueInterval

        def enterRule(self, listener):
            if hasattr(listener, "enterDataValueInterval"):
                listener.enterDataValueInterval(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitDataValueInterval"):
                listener.exitDataValueInterval(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitDataValueInterval"):
                return visitor.visitDataValueInterval(self)
            else:
                return visitor.visitChildren(self)




    def dataValueInterval(self):

        localctx = Cobol85Parser.DataValueIntervalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 496, self.RULE_dataValueInterval)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3470
            self.dataValueIntervalFrom()
            self.state = 3472
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.THROUGH or _la==Cobol85Parser.THRU:
                self.state = 3471
                self.dataValueIntervalTo()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DataValueIntervalFromContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.DataValueIntervalFromContext, self).__init__(parent, invokingState)
            self.parser = parser

        def literal(self):
            return self.getTypedRuleContext(Cobol85Parser.LiteralContext,0)


        def cobolWord(self):
            return self.getTypedRuleContext(Cobol85Parser.CobolWordContext,0)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_dataValueIntervalFrom

        def enterRule(self, listener):
            if hasattr(listener, "enterDataValueIntervalFrom"):
                listener.enterDataValueIntervalFrom(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitDataValueIntervalFrom"):
                listener.exitDataValueIntervalFrom(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitDataValueIntervalFrom"):
                return visitor.visitDataValueIntervalFrom(self)
            else:
                return visitor.visitChildren(self)




    def dataValueIntervalFrom(self):

        localctx = Cobol85Parser.DataValueIntervalFromContext(self, self._ctx, self.state)
        self.enterRule(localctx, 498, self.RULE_dataValueIntervalFrom)
        try:
            self.state = 3476
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,446,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3474
                self.literal()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3475
                self.cobolWord()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DataValueIntervalToContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.DataValueIntervalToContext, self).__init__(parent, invokingState)
            self.parser = parser

        def literal(self):
            return self.getTypedRuleContext(Cobol85Parser.LiteralContext,0)


        def THROUGH(self):
            return self.getToken(Cobol85Parser.THROUGH, 0)

        def THRU(self):
            return self.getToken(Cobol85Parser.THRU, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_dataValueIntervalTo

        def enterRule(self, listener):
            if hasattr(listener, "enterDataValueIntervalTo"):
                listener.enterDataValueIntervalTo(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitDataValueIntervalTo"):
                listener.exitDataValueIntervalTo(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitDataValueIntervalTo"):
                return visitor.visitDataValueIntervalTo(self)
            else:
                return visitor.visitChildren(self)




    def dataValueIntervalTo(self):

        localctx = Cobol85Parser.DataValueIntervalToContext(self, self._ctx, self.state)
        self.enterRule(localctx, 500, self.RULE_dataValueIntervalTo)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3478
            _la = self._input.LA(1)
            if not(_la==Cobol85Parser.THROUGH or _la==Cobol85Parser.THRU):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 3479
            self.literal()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DataWithLowerBoundsClauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.DataWithLowerBoundsClauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def LOWER(self):
            return self.getToken(Cobol85Parser.LOWER, 0)

        def BOUNDS(self):
            return self.getToken(Cobol85Parser.BOUNDS, 0)

        def WITH(self):
            return self.getToken(Cobol85Parser.WITH, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_dataWithLowerBoundsClause

        def enterRule(self, listener):
            if hasattr(listener, "enterDataWithLowerBoundsClause"):
                listener.enterDataWithLowerBoundsClause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitDataWithLowerBoundsClause"):
                listener.exitDataWithLowerBoundsClause(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitDataWithLowerBoundsClause"):
                return visitor.visitDataWithLowerBoundsClause(self)
            else:
                return visitor.visitChildren(self)




    def dataWithLowerBoundsClause(self):

        localctx = Cobol85Parser.DataWithLowerBoundsClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 502, self.RULE_dataWithLowerBoundsClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3482
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.WITH:
                self.state = 3481
                self.match(Cobol85Parser.WITH)


            self.state = 3484
            self.match(Cobol85Parser.LOWER)
            self.state = 3485
            self.match(Cobol85Parser.BOUNDS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ProcedureDivisionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.ProcedureDivisionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def PROCEDURE(self):
            return self.getToken(Cobol85Parser.PROCEDURE, 0)

        def DIVISION(self):
            return self.getToken(Cobol85Parser.DIVISION, 0)

        def DOT_FS(self):
            return self.getToken(Cobol85Parser.DOT_FS, 0)

        def procedureDivisionBody(self):
            return self.getTypedRuleContext(Cobol85Parser.ProcedureDivisionBodyContext,0)


        def procedureDivisionUsingClause(self):
            return self.getTypedRuleContext(Cobol85Parser.ProcedureDivisionUsingClauseContext,0)


        def procedureDivisionGivingClause(self):
            return self.getTypedRuleContext(Cobol85Parser.ProcedureDivisionGivingClauseContext,0)


        def procedureDeclaratives(self):
            return self.getTypedRuleContext(Cobol85Parser.ProcedureDeclarativesContext,0)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_procedureDivision

        def enterRule(self, listener):
            if hasattr(listener, "enterProcedureDivision"):
                listener.enterProcedureDivision(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitProcedureDivision"):
                listener.exitProcedureDivision(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitProcedureDivision"):
                return visitor.visitProcedureDivision(self)
            else:
                return visitor.visitChildren(self)




    def procedureDivision(self):

        localctx = Cobol85Parser.ProcedureDivisionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 504, self.RULE_procedureDivision)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3487
            self.match(Cobol85Parser.PROCEDURE)
            self.state = 3488
            self.match(Cobol85Parser.DIVISION)
            self.state = 3490
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.CHAINING or _la==Cobol85Parser.USING:
                self.state = 3489
                self.procedureDivisionUsingClause()


            self.state = 3493
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.GIVING or _la==Cobol85Parser.RETURNING:
                self.state = 3492
                self.procedureDivisionGivingClause()


            self.state = 3495
            self.match(Cobol85Parser.DOT_FS)
            self.state = 3497
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.DECLARATIVES:
                self.state = 3496
                self.procedureDeclaratives()


            self.state = 3499
            self.procedureDivisionBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ProcedureDivisionUsingClauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.ProcedureDivisionUsingClauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def USING(self):
            return self.getToken(Cobol85Parser.USING, 0)

        def CHAINING(self):
            return self.getToken(Cobol85Parser.CHAINING, 0)

        def procedureDivisionUsingParameter(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.ProcedureDivisionUsingParameterContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.ProcedureDivisionUsingParameterContext,i)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_procedureDivisionUsingClause

        def enterRule(self, listener):
            if hasattr(listener, "enterProcedureDivisionUsingClause"):
                listener.enterProcedureDivisionUsingClause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitProcedureDivisionUsingClause"):
                listener.exitProcedureDivisionUsingClause(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitProcedureDivisionUsingClause"):
                return visitor.visitProcedureDivisionUsingClause(self)
            else:
                return visitor.visitChildren(self)




    def procedureDivisionUsingClause(self):

        localctx = Cobol85Parser.ProcedureDivisionUsingClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 506, self.RULE_procedureDivisionUsingClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3501
            _la = self._input.LA(1)
            if not(_la==Cobol85Parser.CHAINING or _la==Cobol85Parser.USING):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 3503 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 3502
                self.procedureDivisionUsingParameter()
                self.state = 3505 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.ADDRESS) | (1 << Cobol85Parser.ANY) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE) | (1 << Cobol85Parser.AUTO) | (1 << Cobol85Parser.AUTO_SKIP) | (1 << Cobol85Parser.BACKGROUND_COLOR) | (1 << Cobol85Parser.BACKGROUND_COLOUR) | (1 << Cobol85Parser.BEEP) | (1 << Cobol85Parser.BELL) | (1 << Cobol85Parser.BINARY) | (1 << Cobol85Parser.BIT) | (1 << Cobol85Parser.BLINK) | (1 << Cobol85Parser.BLOB) | (1 << Cobol85Parser.BOUNDS) | (1 << Cobol85Parser.BY) | (1 << Cobol85Parser.CAPABLE) | (1 << Cobol85Parser.CCSVERSION) | (1 << Cobol85Parser.CHANGED) | (1 << Cobol85Parser.CHANNEL))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (Cobol85Parser.CLOB - 67)) | (1 << (Cobol85Parser.CLOSE_DISPOSITION - 67)) | (1 << (Cobol85Parser.COBOL - 67)) | (1 << (Cobol85Parser.COMMITMENT - 67)) | (1 << (Cobol85Parser.CONTROL_POINT - 67)) | (1 << (Cobol85Parser.CONVENTION - 67)) | (1 << (Cobol85Parser.CRUNCH - 67)) | (1 << (Cobol85Parser.CURSOR - 67)) | (1 << (Cobol85Parser.DATE - 67)) | (1 << (Cobol85Parser.DAY - 67)) | (1 << (Cobol85Parser.DAY_OF_WEEK - 67)) | (1 << (Cobol85Parser.DBCLOB - 67)) | (1 << (Cobol85Parser.DEBUG_CONTENTS - 67)) | (1 << (Cobol85Parser.DEBUG_ITEM - 67)) | (1 << (Cobol85Parser.DEBUG_LINE - 67)) | (1 << (Cobol85Parser.DEBUG_NAME - 67)) | (1 << (Cobol85Parser.DEBUG_SUB_1 - 67)) | (1 << (Cobol85Parser.DEBUG_SUB_2 - 67)) | (1 << (Cobol85Parser.DEBUG_SUB_3 - 67)))) != 0) or ((((_la - 131)) & ~0x3f) == 0 and ((1 << (_la - 131)) & ((1 << (Cobol85Parser.DEFAULT - 131)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 131)) | (1 << (Cobol85Parser.DEFINITION - 131)) | (1 << (Cobol85Parser.DFHRESP - 131)) | (1 << (Cobol85Parser.DFHVALUE - 131)) | (1 << (Cobol85Parser.DISK - 131)) | (1 << (Cobol85Parser.DONTCARE - 131)) | (1 << (Cobol85Parser.DOUBLE - 131)) | (1 << (Cobol85Parser.EBCDIC - 131)) | (1 << (Cobol85Parser.EMPTY_CHECK - 131)) | (1 << (Cobol85Parser.ENTER - 131)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 131)) | (1 << (Cobol85Parser.ERASE - 131)) | (1 << (Cobol85Parser.EOL - 131)) | (1 << (Cobol85Parser.EOS - 131)))) != 0) or ((((_la - 195)) & ~0x3f) == 0 and ((1 << (_la - 195)) & ((1 << (Cobol85Parser.ESCAPE - 195)) | (1 << (Cobol85Parser.EVENT - 195)) | (1 << (Cobol85Parser.EXCLUSIVE - 195)) | (1 << (Cobol85Parser.EXPORT - 195)) | (1 << (Cobol85Parser.EXTENDED - 195)) | (1 << (Cobol85Parser.FOREGROUND_COLOR - 195)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 195)) | (1 << (Cobol85Parser.FULL - 195)) | (1 << (Cobol85Parser.FUNCTION - 195)) | (1 << (Cobol85Parser.FUNCTIONNAME - 195)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 195)) | (1 << (Cobol85Parser.GRID - 195)) | (1 << (Cobol85Parser.HIGHLIGHT - 195)) | (1 << (Cobol85Parser.IMPLICIT - 195)) | (1 << (Cobol85Parser.IMPORT - 195)) | (1 << (Cobol85Parser.INTEGER - 195)))) != 0) or ((((_la - 262)) & ~0x3f) == 0 and ((1 << (_la - 262)) & ((1 << (Cobol85Parser.KEPT - 262)) | (1 << (Cobol85Parser.KEYBOARD - 262)) | (1 << (Cobol85Parser.LANGUAGE - 262)) | (1 << (Cobol85Parser.LB - 262)) | (1 << (Cobol85Parser.LD - 262)) | (1 << (Cobol85Parser.LEFTLINE - 262)) | (1 << (Cobol85Parser.LENGTH - 262)) | (1 << (Cobol85Parser.LENGTH_CHECK - 262)) | (1 << (Cobol85Parser.LIBACCESS - 262)) | (1 << (Cobol85Parser.LIBPARAMETER - 262)) | (1 << (Cobol85Parser.LIBRARY - 262)) | (1 << (Cobol85Parser.LINAGE_COUNTER - 262)) | (1 << (Cobol85Parser.LINE_COUNTER - 262)) | (1 << (Cobol85Parser.LIST - 262)) | (1 << (Cobol85Parser.LOCAL - 262)) | (1 << (Cobol85Parser.LONG_DATE - 262)) | (1 << (Cobol85Parser.LONG_TIME - 262)) | (1 << (Cobol85Parser.LOWER - 262)) | (1 << (Cobol85Parser.LOWLIGHT - 262)) | (1 << (Cobol85Parser.MMDDYYYY - 262)) | (1 << (Cobol85Parser.NAMED - 262)) | (1 << (Cobol85Parser.NATIONAL - 262)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 262)) | (1 << (Cobol85Parser.NETWORK - 262)) | (1 << (Cobol85Parser.NO_ECHO - 262)) | (1 << (Cobol85Parser.NUMERIC_DATE - 262)) | (1 << (Cobol85Parser.NUMERIC_TIME - 262)))) != 0) or ((((_la - 326)) & ~0x3f) == 0 and ((1 << (_la - 326)) & ((1 << (Cobol85Parser.ODT - 326)) | (1 << (Cobol85Parser.OPTIONAL - 326)) | (1 << (Cobol85Parser.ORDERLY - 326)) | (1 << (Cobol85Parser.OVERLINE - 326)) | (1 << (Cobol85Parser.OWN - 326)) | (1 << (Cobol85Parser.PAGE_COUNTER - 326)) | (1 << (Cobol85Parser.PASSWORD - 326)) | (1 << (Cobol85Parser.PORT - 326)) | (1 << (Cobol85Parser.PRINTER - 326)) | (1 << (Cobol85Parser.PRIVATE - 326)) | (1 << (Cobol85Parser.PROCESS - 326)) | (1 << (Cobol85Parser.PROGRAM - 326)) | (1 << (Cobol85Parser.PROMPT - 326)) | (1 << (Cobol85Parser.READER - 326)) | (1 << (Cobol85Parser.REMOTE - 326)) | (1 << (Cobol85Parser.REAL - 326)) | (1 << (Cobol85Parser.RECEIVED - 326)) | (1 << (Cobol85Parser.RECURSIVE - 326)) | (1 << (Cobol85Parser.REF - 326)) | (1 << (Cobol85Parser.REFERENCE - 326)))) != 0) or ((((_la - 395)) & ~0x3f) == 0 and ((1 << (_la - 395)) & ((1 << (Cobol85Parser.REMOVE - 395)) | (1 << (Cobol85Parser.REQUIRED - 395)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 395)) | (1 << (Cobol85Parser.RETURN_CODE - 395)) | (1 << (Cobol85Parser.SAVE - 395)) | (1 << (Cobol85Parser.SECURE - 395)) | (1 << (Cobol85Parser.SHARED - 395)) | (1 << (Cobol85Parser.SHAREDBYALL - 395)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 395)) | (1 << (Cobol85Parser.SHARING - 395)) | (1 << (Cobol85Parser.SHIFT_IN - 395)) | (1 << (Cobol85Parser.SHIFT_OUT - 395)) | (1 << (Cobol85Parser.SHORT_DATE - 395)) | (1 << (Cobol85Parser.SORT_CONTROL - 395)) | (1 << (Cobol85Parser.SORT_CORE_SIZE - 395)) | (1 << (Cobol85Parser.SORT_FILE_SIZE - 395)) | (1 << (Cobol85Parser.SORT_MESSAGE - 395)) | (1 << (Cobol85Parser.SORT_MODE_SIZE - 395)) | (1 << (Cobol85Parser.SORT_RETURN - 395)) | (1 << (Cobol85Parser.SQL - 395)))) != 0) or ((((_la - 471)) & ~0x3f) == 0 and ((1 << (_la - 471)) & ((1 << (Cobol85Parser.SYMBOL - 471)) | (1 << (Cobol85Parser.TALLY - 471)) | (1 << (Cobol85Parser.TASK - 471)) | (1 << (Cobol85Parser.THREAD - 471)) | (1 << (Cobol85Parser.THREAD_LOCAL - 471)) | (1 << (Cobol85Parser.TIME - 471)) | (1 << (Cobol85Parser.TIMER - 471)) | (1 << (Cobol85Parser.TODAYS_DATE - 471)) | (1 << (Cobol85Parser.TODAYS_NAME - 471)) | (1 << (Cobol85Parser.TRUNCATED - 471)) | (1 << (Cobol85Parser.TYPEDEF - 471)) | (1 << (Cobol85Parser.UNDERLINE - 471)) | (1 << (Cobol85Parser.VALUE - 471)) | (1 << (Cobol85Parser.VIRTUAL - 471)) | (1 << (Cobol85Parser.WAIT - 471)) | (1 << (Cobol85Parser.WHEN_COMPILED - 471)) | (1 << (Cobol85Parser.YEAR - 471)) | (1 << (Cobol85Parser.YYYYMMDD - 471)) | (1 << (Cobol85Parser.YYYYDDD - 471)) | (1 << (Cobol85Parser.ZERO_FILL - 471)))) != 0) or ((((_la - 557)) & ~0x3f) == 0 and ((1 << (_la - 557)) & ((1 << (Cobol85Parser.LEVEL_NUMBER_66 - 557)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 557)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 557)) | (1 << (Cobol85Parser.INTEGERLITERAL - 557)) | (1 << (Cobol85Parser.IDENTIFIER - 557)))) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ProcedureDivisionGivingClauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.ProcedureDivisionGivingClauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def dataName(self):
            return self.getTypedRuleContext(Cobol85Parser.DataNameContext,0)


        def GIVING(self):
            return self.getToken(Cobol85Parser.GIVING, 0)

        def RETURNING(self):
            return self.getToken(Cobol85Parser.RETURNING, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_procedureDivisionGivingClause

        def enterRule(self, listener):
            if hasattr(listener, "enterProcedureDivisionGivingClause"):
                listener.enterProcedureDivisionGivingClause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitProcedureDivisionGivingClause"):
                listener.exitProcedureDivisionGivingClause(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitProcedureDivisionGivingClause"):
                return visitor.visitProcedureDivisionGivingClause(self)
            else:
                return visitor.visitChildren(self)




    def procedureDivisionGivingClause(self):

        localctx = Cobol85Parser.ProcedureDivisionGivingClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 508, self.RULE_procedureDivisionGivingClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3507
            _la = self._input.LA(1)
            if not(_la==Cobol85Parser.GIVING or _la==Cobol85Parser.RETURNING):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 3508
            self.dataName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ProcedureDivisionUsingParameterContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.ProcedureDivisionUsingParameterContext, self).__init__(parent, invokingState)
            self.parser = parser

        def procedureDivisionByReferencePhrase(self):
            return self.getTypedRuleContext(Cobol85Parser.ProcedureDivisionByReferencePhraseContext,0)


        def procedureDivisionByValuePhrase(self):
            return self.getTypedRuleContext(Cobol85Parser.ProcedureDivisionByValuePhraseContext,0)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_procedureDivisionUsingParameter

        def enterRule(self, listener):
            if hasattr(listener, "enterProcedureDivisionUsingParameter"):
                listener.enterProcedureDivisionUsingParameter(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitProcedureDivisionUsingParameter"):
                listener.exitProcedureDivisionUsingParameter(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitProcedureDivisionUsingParameter"):
                return visitor.visitProcedureDivisionUsingParameter(self)
            else:
                return visitor.visitChildren(self)




    def procedureDivisionUsingParameter(self):

        localctx = Cobol85Parser.ProcedureDivisionUsingParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 510, self.RULE_procedureDivisionUsingParameter)
        try:
            self.state = 3512
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,452,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3510
                self.procedureDivisionByReferencePhrase()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3511
                self.procedureDivisionByValuePhrase()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ProcedureDivisionByReferencePhraseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.ProcedureDivisionByReferencePhraseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self):
            return self.getToken(Cobol85Parser.REFERENCE, 0)

        def procedureDivisionByReference(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.ProcedureDivisionByReferenceContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.ProcedureDivisionByReferenceContext,i)


        def BY(self):
            return self.getToken(Cobol85Parser.BY, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_procedureDivisionByReferencePhrase

        def enterRule(self, listener):
            if hasattr(listener, "enterProcedureDivisionByReferencePhrase"):
                listener.enterProcedureDivisionByReferencePhrase(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitProcedureDivisionByReferencePhrase"):
                listener.exitProcedureDivisionByReferencePhrase(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitProcedureDivisionByReferencePhrase"):
                return visitor.visitProcedureDivisionByReferencePhrase(self)
            else:
                return visitor.visitChildren(self)




    def procedureDivisionByReferencePhrase(self):

        localctx = Cobol85Parser.ProcedureDivisionByReferencePhraseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 512, self.RULE_procedureDivisionByReferencePhrase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3518
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.BY or _la==Cobol85Parser.REFERENCE:
                self.state = 3515
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Cobol85Parser.BY:
                    self.state = 3514
                    self.match(Cobol85Parser.BY)


                self.state = 3517
                self.match(Cobol85Parser.REFERENCE)


            self.state = 3521 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 3520
                    self.procedureDivisionByReference()

                else:
                    raise NoViableAltException(self)
                self.state = 3523 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,455,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ProcedureDivisionByReferenceContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.ProcedureDivisionByReferenceContext, self).__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(Cobol85Parser.IdentifierContext,0)


        def fileName(self):
            return self.getTypedRuleContext(Cobol85Parser.FileNameContext,0)


        def OPTIONAL(self):
            return self.getToken(Cobol85Parser.OPTIONAL, 0)

        def ANY(self):
            return self.getToken(Cobol85Parser.ANY, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_procedureDivisionByReference

        def enterRule(self, listener):
            if hasattr(listener, "enterProcedureDivisionByReference"):
                listener.enterProcedureDivisionByReference(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitProcedureDivisionByReference"):
                listener.exitProcedureDivisionByReference(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitProcedureDivisionByReference"):
                return visitor.visitProcedureDivisionByReference(self)
            else:
                return visitor.visitChildren(self)




    def procedureDivisionByReference(self):

        localctx = Cobol85Parser.ProcedureDivisionByReferenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 514, self.RULE_procedureDivisionByReference)
        self._la = 0 # Token type
        try:
            self.state = 3533
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Cobol85Parser.ABORT, Cobol85Parser.ADDRESS, Cobol85Parser.AS, Cobol85Parser.ASCII, Cobol85Parser.ASSOCIATED_DATA, Cobol85Parser.ASSOCIATED_DATA_LENGTH, Cobol85Parser.ATTRIBUTE, Cobol85Parser.AUTO, Cobol85Parser.AUTO_SKIP, Cobol85Parser.BACKGROUND_COLOR, Cobol85Parser.BACKGROUND_COLOUR, Cobol85Parser.BEEP, Cobol85Parser.BELL, Cobol85Parser.BINARY, Cobol85Parser.BIT, Cobol85Parser.BLINK, Cobol85Parser.BLOB, Cobol85Parser.BOUNDS, Cobol85Parser.CAPABLE, Cobol85Parser.CCSVERSION, Cobol85Parser.CHANGED, Cobol85Parser.CHANNEL, Cobol85Parser.CLOB, Cobol85Parser.CLOSE_DISPOSITION, Cobol85Parser.COBOL, Cobol85Parser.COMMITMENT, Cobol85Parser.CONTROL_POINT, Cobol85Parser.CONVENTION, Cobol85Parser.CRUNCH, Cobol85Parser.CURSOR, Cobol85Parser.DATE, Cobol85Parser.DAY, Cobol85Parser.DAY_OF_WEEK, Cobol85Parser.DBCLOB, Cobol85Parser.DEBUG_CONTENTS, Cobol85Parser.DEBUG_ITEM, Cobol85Parser.DEBUG_LINE, Cobol85Parser.DEBUG_NAME, Cobol85Parser.DEBUG_SUB_1, Cobol85Parser.DEBUG_SUB_2, Cobol85Parser.DEBUG_SUB_3, Cobol85Parser.DEFAULT, Cobol85Parser.DEFAULT_DISPLAY, Cobol85Parser.DEFINITION, Cobol85Parser.DFHRESP, Cobol85Parser.DFHVALUE, Cobol85Parser.DISK, Cobol85Parser.DONTCARE, Cobol85Parser.DOUBLE, Cobol85Parser.EBCDIC, Cobol85Parser.EMPTY_CHECK, Cobol85Parser.ENTER, Cobol85Parser.ENTRY_PROCEDURE, Cobol85Parser.ERASE, Cobol85Parser.EOL, Cobol85Parser.EOS, Cobol85Parser.ESCAPE, Cobol85Parser.EVENT, Cobol85Parser.EXCLUSIVE, Cobol85Parser.EXPORT, Cobol85Parser.EXTENDED, Cobol85Parser.FOREGROUND_COLOR, Cobol85Parser.FOREGROUND_COLOUR, Cobol85Parser.FULL, Cobol85Parser.FUNCTION, Cobol85Parser.FUNCTIONNAME, Cobol85Parser.FUNCTION_POINTER, Cobol85Parser.GRID, Cobol85Parser.HIGHLIGHT, Cobol85Parser.IMPLICIT, Cobol85Parser.IMPORT, Cobol85Parser.INTEGER, Cobol85Parser.KEPT, Cobol85Parser.KEYBOARD, Cobol85Parser.LANGUAGE, Cobol85Parser.LB, Cobol85Parser.LD, Cobol85Parser.LEFTLINE, Cobol85Parser.LENGTH, Cobol85Parser.LENGTH_CHECK, Cobol85Parser.LIBACCESS, Cobol85Parser.LIBPARAMETER, Cobol85Parser.LIBRARY, Cobol85Parser.LINAGE_COUNTER, Cobol85Parser.LINE_COUNTER, Cobol85Parser.LIST, Cobol85Parser.LOCAL, Cobol85Parser.LONG_DATE, Cobol85Parser.LONG_TIME, Cobol85Parser.LOWER, Cobol85Parser.LOWLIGHT, Cobol85Parser.MMDDYYYY, Cobol85Parser.NAMED, Cobol85Parser.NATIONAL, Cobol85Parser.NATIONAL_EDITED, Cobol85Parser.NETWORK, Cobol85Parser.NO_ECHO, Cobol85Parser.NUMERIC_DATE, Cobol85Parser.NUMERIC_TIME, Cobol85Parser.ODT, Cobol85Parser.OPTIONAL, Cobol85Parser.ORDERLY, Cobol85Parser.OVERLINE, Cobol85Parser.OWN, Cobol85Parser.PAGE_COUNTER, Cobol85Parser.PASSWORD, Cobol85Parser.PORT, Cobol85Parser.PRINTER, Cobol85Parser.PRIVATE, Cobol85Parser.PROCESS, Cobol85Parser.PROGRAM, Cobol85Parser.PROMPT, Cobol85Parser.READER, Cobol85Parser.REMOTE, Cobol85Parser.REAL, Cobol85Parser.RECEIVED, Cobol85Parser.RECURSIVE, Cobol85Parser.REF, Cobol85Parser.REMOVE, Cobol85Parser.REQUIRED, Cobol85Parser.REVERSE_VIDEO, Cobol85Parser.RETURN_CODE, Cobol85Parser.SAVE, Cobol85Parser.SECURE, Cobol85Parser.SHARED, Cobol85Parser.SHAREDBYALL, Cobol85Parser.SHAREDBYRUNUNIT, Cobol85Parser.SHARING, Cobol85Parser.SHIFT_IN, Cobol85Parser.SHIFT_OUT, Cobol85Parser.SHORT_DATE, Cobol85Parser.SORT_CONTROL, Cobol85Parser.SORT_CORE_SIZE, Cobol85Parser.SORT_FILE_SIZE, Cobol85Parser.SORT_MESSAGE, Cobol85Parser.SORT_MODE_SIZE, Cobol85Parser.SORT_RETURN, Cobol85Parser.SQL, Cobol85Parser.SYMBOL, Cobol85Parser.TALLY, Cobol85Parser.TASK, Cobol85Parser.THREAD, Cobol85Parser.THREAD_LOCAL, Cobol85Parser.TIME, Cobol85Parser.TIMER, Cobol85Parser.TODAYS_DATE, Cobol85Parser.TODAYS_NAME, Cobol85Parser.TRUNCATED, Cobol85Parser.TYPEDEF, Cobol85Parser.UNDERLINE, Cobol85Parser.VIRTUAL, Cobol85Parser.WAIT, Cobol85Parser.WHEN_COMPILED, Cobol85Parser.YEAR, Cobol85Parser.YYYYMMDD, Cobol85Parser.YYYYDDD, Cobol85Parser.ZERO_FILL, Cobol85Parser.LEVEL_NUMBER_66, Cobol85Parser.LEVEL_NUMBER_77, Cobol85Parser.LEVEL_NUMBER_88, Cobol85Parser.INTEGERLITERAL, Cobol85Parser.IDENTIFIER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3526
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Cobol85Parser.OPTIONAL:
                    self.state = 3525
                    self.match(Cobol85Parser.OPTIONAL)


                self.state = 3530
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,457,self._ctx)
                if la_ == 1:
                    self.state = 3528
                    self.identifier()
                    pass

                elif la_ == 2:
                    self.state = 3529
                    self.fileName()
                    pass


                pass
            elif token in [Cobol85Parser.ANY]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3532
                self.match(Cobol85Parser.ANY)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ProcedureDivisionByValuePhraseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.ProcedureDivisionByValuePhraseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def VALUE(self):
            return self.getToken(Cobol85Parser.VALUE, 0)

        def BY(self):
            return self.getToken(Cobol85Parser.BY, 0)

        def procedureDivisionByValue(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.ProcedureDivisionByValueContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.ProcedureDivisionByValueContext,i)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_procedureDivisionByValuePhrase

        def enterRule(self, listener):
            if hasattr(listener, "enterProcedureDivisionByValuePhrase"):
                listener.enterProcedureDivisionByValuePhrase(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitProcedureDivisionByValuePhrase"):
                listener.exitProcedureDivisionByValuePhrase(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitProcedureDivisionByValuePhrase"):
                return visitor.visitProcedureDivisionByValuePhrase(self)
            else:
                return visitor.visitChildren(self)




    def procedureDivisionByValuePhrase(self):

        localctx = Cobol85Parser.ProcedureDivisionByValuePhraseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 516, self.RULE_procedureDivisionByValuePhrase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3536
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.BY:
                self.state = 3535
                self.match(Cobol85Parser.BY)


            self.state = 3538
            self.match(Cobol85Parser.VALUE)
            self.state = 3540 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 3539
                    self.procedureDivisionByValue()

                else:
                    raise NoViableAltException(self)
                self.state = 3542 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,460,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ProcedureDivisionByValueContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.ProcedureDivisionByValueContext, self).__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(Cobol85Parser.IdentifierContext,0)


        def literal(self):
            return self.getTypedRuleContext(Cobol85Parser.LiteralContext,0)


        def ANY(self):
            return self.getToken(Cobol85Parser.ANY, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_procedureDivisionByValue

        def enterRule(self, listener):
            if hasattr(listener, "enterProcedureDivisionByValue"):
                listener.enterProcedureDivisionByValue(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitProcedureDivisionByValue"):
                listener.exitProcedureDivisionByValue(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitProcedureDivisionByValue"):
                return visitor.visitProcedureDivisionByValue(self)
            else:
                return visitor.visitChildren(self)




    def procedureDivisionByValue(self):

        localctx = Cobol85Parser.ProcedureDivisionByValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 518, self.RULE_procedureDivisionByValue)
        try:
            self.state = 3547
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,461,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3544
                self.identifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3545
                self.literal()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3546
                self.match(Cobol85Parser.ANY)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ProcedureDeclarativesContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.ProcedureDeclarativesContext, self).__init__(parent, invokingState)
            self.parser = parser

        def DECLARATIVES(self, i=None):
            if i is None:
                return self.getTokens(Cobol85Parser.DECLARATIVES)
            else:
                return self.getToken(Cobol85Parser.DECLARATIVES, i)

        def DOT_FS(self, i=None):
            if i is None:
                return self.getTokens(Cobol85Parser.DOT_FS)
            else:
                return self.getToken(Cobol85Parser.DOT_FS, i)

        def END(self):
            return self.getToken(Cobol85Parser.END, 0)

        def procedureDeclarative(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.ProcedureDeclarativeContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.ProcedureDeclarativeContext,i)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_procedureDeclaratives

        def enterRule(self, listener):
            if hasattr(listener, "enterProcedureDeclaratives"):
                listener.enterProcedureDeclaratives(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitProcedureDeclaratives"):
                listener.exitProcedureDeclaratives(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitProcedureDeclaratives"):
                return visitor.visitProcedureDeclaratives(self)
            else:
                return visitor.visitChildren(self)




    def procedureDeclaratives(self):

        localctx = Cobol85Parser.ProcedureDeclarativesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 520, self.RULE_procedureDeclaratives)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3549
            self.match(Cobol85Parser.DECLARATIVES)
            self.state = 3550
            self.match(Cobol85Parser.DOT_FS)
            self.state = 3552 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 3551
                self.procedureDeclarative()
                self.state = 3554 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE) | (1 << Cobol85Parser.AUTO) | (1 << Cobol85Parser.AUTO_SKIP) | (1 << Cobol85Parser.BACKGROUND_COLOR) | (1 << Cobol85Parser.BACKGROUND_COLOUR) | (1 << Cobol85Parser.BEEP) | (1 << Cobol85Parser.BELL) | (1 << Cobol85Parser.BINARY) | (1 << Cobol85Parser.BIT) | (1 << Cobol85Parser.BLINK) | (1 << Cobol85Parser.BLOB) | (1 << Cobol85Parser.BOUNDS) | (1 << Cobol85Parser.CAPABLE) | (1 << Cobol85Parser.CCSVERSION) | (1 << Cobol85Parser.CHANGED) | (1 << Cobol85Parser.CHANNEL))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (Cobol85Parser.CLOB - 67)) | (1 << (Cobol85Parser.CLOSE_DISPOSITION - 67)) | (1 << (Cobol85Parser.COBOL - 67)) | (1 << (Cobol85Parser.COMMITMENT - 67)) | (1 << (Cobol85Parser.CONTROL_POINT - 67)) | (1 << (Cobol85Parser.CONVENTION - 67)) | (1 << (Cobol85Parser.CRUNCH - 67)) | (1 << (Cobol85Parser.CURSOR - 67)) | (1 << (Cobol85Parser.DBCLOB - 67)))) != 0) or ((((_la - 131)) & ~0x3f) == 0 and ((1 << (_la - 131)) & ((1 << (Cobol85Parser.DEFAULT - 131)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 131)) | (1 << (Cobol85Parser.DEFINITION - 131)) | (1 << (Cobol85Parser.DFHRESP - 131)) | (1 << (Cobol85Parser.DFHVALUE - 131)) | (1 << (Cobol85Parser.DISK - 131)) | (1 << (Cobol85Parser.DONTCARE - 131)) | (1 << (Cobol85Parser.DOUBLE - 131)) | (1 << (Cobol85Parser.EBCDIC - 131)) | (1 << (Cobol85Parser.EMPTY_CHECK - 131)) | (1 << (Cobol85Parser.ENTER - 131)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 131)) | (1 << (Cobol85Parser.ERASE - 131)) | (1 << (Cobol85Parser.EOL - 131)) | (1 << (Cobol85Parser.EOS - 131)))) != 0) or ((((_la - 195)) & ~0x3f) == 0 and ((1 << (_la - 195)) & ((1 << (Cobol85Parser.ESCAPE - 195)) | (1 << (Cobol85Parser.EVENT - 195)) | (1 << (Cobol85Parser.EXCLUSIVE - 195)) | (1 << (Cobol85Parser.EXPORT - 195)) | (1 << (Cobol85Parser.EXTENDED - 195)) | (1 << (Cobol85Parser.FOREGROUND_COLOR - 195)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 195)) | (1 << (Cobol85Parser.FULL - 195)) | (1 << (Cobol85Parser.FUNCTIONNAME - 195)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 195)) | (1 << (Cobol85Parser.GRID - 195)) | (1 << (Cobol85Parser.HIGHLIGHT - 195)) | (1 << (Cobol85Parser.IMPLICIT - 195)) | (1 << (Cobol85Parser.IMPORT - 195)) | (1 << (Cobol85Parser.INTEGER - 195)))) != 0) or ((((_la - 262)) & ~0x3f) == 0 and ((1 << (_la - 262)) & ((1 << (Cobol85Parser.KEPT - 262)) | (1 << (Cobol85Parser.KEYBOARD - 262)) | (1 << (Cobol85Parser.LANGUAGE - 262)) | (1 << (Cobol85Parser.LB - 262)) | (1 << (Cobol85Parser.LD - 262)) | (1 << (Cobol85Parser.LEFTLINE - 262)) | (1 << (Cobol85Parser.LENGTH_CHECK - 262)) | (1 << (Cobol85Parser.LIBACCESS - 262)) | (1 << (Cobol85Parser.LIBPARAMETER - 262)) | (1 << (Cobol85Parser.LIBRARY - 262)) | (1 << (Cobol85Parser.LIST - 262)) | (1 << (Cobol85Parser.LOCAL - 262)) | (1 << (Cobol85Parser.LONG_DATE - 262)) | (1 << (Cobol85Parser.LONG_TIME - 262)) | (1 << (Cobol85Parser.LOWER - 262)) | (1 << (Cobol85Parser.LOWLIGHT - 262)) | (1 << (Cobol85Parser.MMDDYYYY - 262)) | (1 << (Cobol85Parser.NAMED - 262)) | (1 << (Cobol85Parser.NATIONAL - 262)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 262)) | (1 << (Cobol85Parser.NETWORK - 262)) | (1 << (Cobol85Parser.NO_ECHO - 262)) | (1 << (Cobol85Parser.NUMERIC_DATE - 262)) | (1 << (Cobol85Parser.NUMERIC_TIME - 262)))) != 0) or ((((_la - 326)) & ~0x3f) == 0 and ((1 << (_la - 326)) & ((1 << (Cobol85Parser.ODT - 326)) | (1 << (Cobol85Parser.ORDERLY - 326)) | (1 << (Cobol85Parser.OVERLINE - 326)) | (1 << (Cobol85Parser.OWN - 326)) | (1 << (Cobol85Parser.PASSWORD - 326)) | (1 << (Cobol85Parser.PORT - 326)) | (1 << (Cobol85Parser.PRINTER - 326)) | (1 << (Cobol85Parser.PRIVATE - 326)) | (1 << (Cobol85Parser.PROCESS - 326)) | (1 << (Cobol85Parser.PROGRAM - 326)) | (1 << (Cobol85Parser.PROMPT - 326)) | (1 << (Cobol85Parser.READER - 326)) | (1 << (Cobol85Parser.REMOTE - 326)) | (1 << (Cobol85Parser.REAL - 326)) | (1 << (Cobol85Parser.RECEIVED - 326)) | (1 << (Cobol85Parser.RECURSIVE - 326)) | (1 << (Cobol85Parser.REF - 326)))) != 0) or ((((_la - 395)) & ~0x3f) == 0 and ((1 << (_la - 395)) & ((1 << (Cobol85Parser.REMOVE - 395)) | (1 << (Cobol85Parser.REQUIRED - 395)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 395)) | (1 << (Cobol85Parser.SAVE - 395)) | (1 << (Cobol85Parser.SECURE - 395)) | (1 << (Cobol85Parser.SHARED - 395)) | (1 << (Cobol85Parser.SHAREDBYALL - 395)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 395)) | (1 << (Cobol85Parser.SHARING - 395)) | (1 << (Cobol85Parser.SHORT_DATE - 395)) | (1 << (Cobol85Parser.SQL - 395)))) != 0) or ((((_la - 471)) & ~0x3f) == 0 and ((1 << (_la - 471)) & ((1 << (Cobol85Parser.SYMBOL - 471)) | (1 << (Cobol85Parser.TASK - 471)) | (1 << (Cobol85Parser.THREAD - 471)) | (1 << (Cobol85Parser.THREAD_LOCAL - 471)) | (1 << (Cobol85Parser.TIMER - 471)) | (1 << (Cobol85Parser.TODAYS_DATE - 471)) | (1 << (Cobol85Parser.TODAYS_NAME - 471)) | (1 << (Cobol85Parser.TRUNCATED - 471)) | (1 << (Cobol85Parser.TYPEDEF - 471)) | (1 << (Cobol85Parser.UNDERLINE - 471)) | (1 << (Cobol85Parser.VIRTUAL - 471)) | (1 << (Cobol85Parser.WAIT - 471)) | (1 << (Cobol85Parser.YEAR - 471)) | (1 << (Cobol85Parser.YYYYMMDD - 471)) | (1 << (Cobol85Parser.YYYYDDD - 471)) | (1 << (Cobol85Parser.ZERO_FILL - 471)))) != 0) or ((((_la - 557)) & ~0x3f) == 0 and ((1 << (_la - 557)) & ((1 << (Cobol85Parser.LEVEL_NUMBER_66 - 557)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 557)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 557)) | (1 << (Cobol85Parser.INTEGERLITERAL - 557)) | (1 << (Cobol85Parser.IDENTIFIER - 557)))) != 0)):
                    break

            self.state = 3556
            self.match(Cobol85Parser.END)
            self.state = 3557
            self.match(Cobol85Parser.DECLARATIVES)
            self.state = 3558
            self.match(Cobol85Parser.DOT_FS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ProcedureDeclarativeContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.ProcedureDeclarativeContext, self).__init__(parent, invokingState)
            self.parser = parser

        def procedureSectionHeader(self):
            return self.getTypedRuleContext(Cobol85Parser.ProcedureSectionHeaderContext,0)


        def DOT_FS(self, i=None):
            if i is None:
                return self.getTokens(Cobol85Parser.DOT_FS)
            else:
                return self.getToken(Cobol85Parser.DOT_FS, i)

        def useStatement(self):
            return self.getTypedRuleContext(Cobol85Parser.UseStatementContext,0)


        def paragraphs(self):
            return self.getTypedRuleContext(Cobol85Parser.ParagraphsContext,0)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_procedureDeclarative

        def enterRule(self, listener):
            if hasattr(listener, "enterProcedureDeclarative"):
                listener.enterProcedureDeclarative(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitProcedureDeclarative"):
                listener.exitProcedureDeclarative(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitProcedureDeclarative"):
                return visitor.visitProcedureDeclarative(self)
            else:
                return visitor.visitChildren(self)




    def procedureDeclarative(self):

        localctx = Cobol85Parser.ProcedureDeclarativeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 522, self.RULE_procedureDeclarative)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3560
            self.procedureSectionHeader()
            self.state = 3561
            self.match(Cobol85Parser.DOT_FS)
            self.state = 3562
            self.useStatement()
            self.state = 3563
            self.match(Cobol85Parser.DOT_FS)
            self.state = 3564
            self.paragraphs()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ProcedureSectionHeaderContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.ProcedureSectionHeaderContext, self).__init__(parent, invokingState)
            self.parser = parser

        def sectionName(self):
            return self.getTypedRuleContext(Cobol85Parser.SectionNameContext,0)


        def SECTION(self):
            return self.getToken(Cobol85Parser.SECTION, 0)

        def integerLiteral(self):
            return self.getTypedRuleContext(Cobol85Parser.IntegerLiteralContext,0)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_procedureSectionHeader

        def enterRule(self, listener):
            if hasattr(listener, "enterProcedureSectionHeader"):
                listener.enterProcedureSectionHeader(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitProcedureSectionHeader"):
                listener.exitProcedureSectionHeader(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitProcedureSectionHeader"):
                return visitor.visitProcedureSectionHeader(self)
            else:
                return visitor.visitChildren(self)




    def procedureSectionHeader(self):

        localctx = Cobol85Parser.ProcedureSectionHeaderContext(self, self._ctx, self.state)
        self.enterRule(localctx, 524, self.RULE_procedureSectionHeader)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3566
            self.sectionName()
            self.state = 3567
            self.match(Cobol85Parser.SECTION)
            self.state = 3569
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 557)) & ~0x3f) == 0 and ((1 << (_la - 557)) & ((1 << (Cobol85Parser.LEVEL_NUMBER_66 - 557)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 557)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 557)) | (1 << (Cobol85Parser.INTEGERLITERAL - 557)))) != 0):
                self.state = 3568
                self.integerLiteral()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ProcedureDivisionBodyContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.ProcedureDivisionBodyContext, self).__init__(parent, invokingState)
            self.parser = parser

        def paragraphs(self):
            return self.getTypedRuleContext(Cobol85Parser.ParagraphsContext,0)


        def procedureSection(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.ProcedureSectionContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.ProcedureSectionContext,i)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_procedureDivisionBody

        def enterRule(self, listener):
            if hasattr(listener, "enterProcedureDivisionBody"):
                listener.enterProcedureDivisionBody(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitProcedureDivisionBody"):
                listener.exitProcedureDivisionBody(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitProcedureDivisionBody"):
                return visitor.visitProcedureDivisionBody(self)
            else:
                return visitor.visitChildren(self)




    def procedureDivisionBody(self):

        localctx = Cobol85Parser.ProcedureDivisionBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 526, self.RULE_procedureDivisionBody)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3571
            self.paragraphs()
            self.state = 3575
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE) | (1 << Cobol85Parser.AUTO) | (1 << Cobol85Parser.AUTO_SKIP) | (1 << Cobol85Parser.BACKGROUND_COLOR) | (1 << Cobol85Parser.BACKGROUND_COLOUR) | (1 << Cobol85Parser.BEEP) | (1 << Cobol85Parser.BELL) | (1 << Cobol85Parser.BINARY) | (1 << Cobol85Parser.BIT) | (1 << Cobol85Parser.BLINK) | (1 << Cobol85Parser.BLOB) | (1 << Cobol85Parser.BOUNDS) | (1 << Cobol85Parser.CAPABLE) | (1 << Cobol85Parser.CCSVERSION) | (1 << Cobol85Parser.CHANGED) | (1 << Cobol85Parser.CHANNEL))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (Cobol85Parser.CLOB - 67)) | (1 << (Cobol85Parser.CLOSE_DISPOSITION - 67)) | (1 << (Cobol85Parser.COBOL - 67)) | (1 << (Cobol85Parser.COMMITMENT - 67)) | (1 << (Cobol85Parser.CONTROL_POINT - 67)) | (1 << (Cobol85Parser.CONVENTION - 67)) | (1 << (Cobol85Parser.CRUNCH - 67)) | (1 << (Cobol85Parser.CURSOR - 67)) | (1 << (Cobol85Parser.DBCLOB - 67)))) != 0) or ((((_la - 131)) & ~0x3f) == 0 and ((1 << (_la - 131)) & ((1 << (Cobol85Parser.DEFAULT - 131)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 131)) | (1 << (Cobol85Parser.DEFINITION - 131)) | (1 << (Cobol85Parser.DFHRESP - 131)) | (1 << (Cobol85Parser.DFHVALUE - 131)) | (1 << (Cobol85Parser.DISK - 131)) | (1 << (Cobol85Parser.DONTCARE - 131)) | (1 << (Cobol85Parser.DOUBLE - 131)) | (1 << (Cobol85Parser.EBCDIC - 131)) | (1 << (Cobol85Parser.EMPTY_CHECK - 131)) | (1 << (Cobol85Parser.ENTER - 131)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 131)) | (1 << (Cobol85Parser.ERASE - 131)) | (1 << (Cobol85Parser.EOL - 131)) | (1 << (Cobol85Parser.EOS - 131)))) != 0) or ((((_la - 195)) & ~0x3f) == 0 and ((1 << (_la - 195)) & ((1 << (Cobol85Parser.ESCAPE - 195)) | (1 << (Cobol85Parser.EVENT - 195)) | (1 << (Cobol85Parser.EXCLUSIVE - 195)) | (1 << (Cobol85Parser.EXPORT - 195)) | (1 << (Cobol85Parser.EXTENDED - 195)) | (1 << (Cobol85Parser.FOREGROUND_COLOR - 195)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 195)) | (1 << (Cobol85Parser.FULL - 195)) | (1 << (Cobol85Parser.FUNCTIONNAME - 195)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 195)) | (1 << (Cobol85Parser.GRID - 195)) | (1 << (Cobol85Parser.HIGHLIGHT - 195)) | (1 << (Cobol85Parser.IMPLICIT - 195)) | (1 << (Cobol85Parser.IMPORT - 195)) | (1 << (Cobol85Parser.INTEGER - 195)))) != 0) or ((((_la - 262)) & ~0x3f) == 0 and ((1 << (_la - 262)) & ((1 << (Cobol85Parser.KEPT - 262)) | (1 << (Cobol85Parser.KEYBOARD - 262)) | (1 << (Cobol85Parser.LANGUAGE - 262)) | (1 << (Cobol85Parser.LB - 262)) | (1 << (Cobol85Parser.LD - 262)) | (1 << (Cobol85Parser.LEFTLINE - 262)) | (1 << (Cobol85Parser.LENGTH_CHECK - 262)) | (1 << (Cobol85Parser.LIBACCESS - 262)) | (1 << (Cobol85Parser.LIBPARAMETER - 262)) | (1 << (Cobol85Parser.LIBRARY - 262)) | (1 << (Cobol85Parser.LIST - 262)) | (1 << (Cobol85Parser.LOCAL - 262)) | (1 << (Cobol85Parser.LONG_DATE - 262)) | (1 << (Cobol85Parser.LONG_TIME - 262)) | (1 << (Cobol85Parser.LOWER - 262)) | (1 << (Cobol85Parser.LOWLIGHT - 262)) | (1 << (Cobol85Parser.MMDDYYYY - 262)) | (1 << (Cobol85Parser.NAMED - 262)) | (1 << (Cobol85Parser.NATIONAL - 262)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 262)) | (1 << (Cobol85Parser.NETWORK - 262)) | (1 << (Cobol85Parser.NO_ECHO - 262)) | (1 << (Cobol85Parser.NUMERIC_DATE - 262)) | (1 << (Cobol85Parser.NUMERIC_TIME - 262)))) != 0) or ((((_la - 326)) & ~0x3f) == 0 and ((1 << (_la - 326)) & ((1 << (Cobol85Parser.ODT - 326)) | (1 << (Cobol85Parser.ORDERLY - 326)) | (1 << (Cobol85Parser.OVERLINE - 326)) | (1 << (Cobol85Parser.OWN - 326)) | (1 << (Cobol85Parser.PASSWORD - 326)) | (1 << (Cobol85Parser.PORT - 326)) | (1 << (Cobol85Parser.PRINTER - 326)) | (1 << (Cobol85Parser.PRIVATE - 326)) | (1 << (Cobol85Parser.PROCESS - 326)) | (1 << (Cobol85Parser.PROGRAM - 326)) | (1 << (Cobol85Parser.PROMPT - 326)) | (1 << (Cobol85Parser.READER - 326)) | (1 << (Cobol85Parser.REMOTE - 326)) | (1 << (Cobol85Parser.REAL - 326)) | (1 << (Cobol85Parser.RECEIVED - 326)) | (1 << (Cobol85Parser.RECURSIVE - 326)) | (1 << (Cobol85Parser.REF - 326)))) != 0) or ((((_la - 395)) & ~0x3f) == 0 and ((1 << (_la - 395)) & ((1 << (Cobol85Parser.REMOVE - 395)) | (1 << (Cobol85Parser.REQUIRED - 395)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 395)) | (1 << (Cobol85Parser.SAVE - 395)) | (1 << (Cobol85Parser.SECURE - 395)) | (1 << (Cobol85Parser.SHARED - 395)) | (1 << (Cobol85Parser.SHAREDBYALL - 395)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 395)) | (1 << (Cobol85Parser.SHARING - 395)) | (1 << (Cobol85Parser.SHORT_DATE - 395)) | (1 << (Cobol85Parser.SQL - 395)))) != 0) or ((((_la - 471)) & ~0x3f) == 0 and ((1 << (_la - 471)) & ((1 << (Cobol85Parser.SYMBOL - 471)) | (1 << (Cobol85Parser.TASK - 471)) | (1 << (Cobol85Parser.THREAD - 471)) | (1 << (Cobol85Parser.THREAD_LOCAL - 471)) | (1 << (Cobol85Parser.TIMER - 471)) | (1 << (Cobol85Parser.TODAYS_DATE - 471)) | (1 << (Cobol85Parser.TODAYS_NAME - 471)) | (1 << (Cobol85Parser.TRUNCATED - 471)) | (1 << (Cobol85Parser.TYPEDEF - 471)) | (1 << (Cobol85Parser.UNDERLINE - 471)) | (1 << (Cobol85Parser.VIRTUAL - 471)) | (1 << (Cobol85Parser.WAIT - 471)) | (1 << (Cobol85Parser.YEAR - 471)) | (1 << (Cobol85Parser.YYYYMMDD - 471)) | (1 << (Cobol85Parser.YYYYDDD - 471)) | (1 << (Cobol85Parser.ZERO_FILL - 471)))) != 0) or ((((_la - 557)) & ~0x3f) == 0 and ((1 << (_la - 557)) & ((1 << (Cobol85Parser.LEVEL_NUMBER_66 - 557)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 557)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 557)) | (1 << (Cobol85Parser.INTEGERLITERAL - 557)) | (1 << (Cobol85Parser.IDENTIFIER - 557)))) != 0):
                self.state = 3572
                self.procedureSection()
                self.state = 3577
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ProcedureSectionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.ProcedureSectionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def procedureSectionHeader(self):
            return self.getTypedRuleContext(Cobol85Parser.ProcedureSectionHeaderContext,0)


        def DOT_FS(self):
            return self.getToken(Cobol85Parser.DOT_FS, 0)

        def paragraphs(self):
            return self.getTypedRuleContext(Cobol85Parser.ParagraphsContext,0)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_procedureSection

        def enterRule(self, listener):
            if hasattr(listener, "enterProcedureSection"):
                listener.enterProcedureSection(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitProcedureSection"):
                listener.exitProcedureSection(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitProcedureSection"):
                return visitor.visitProcedureSection(self)
            else:
                return visitor.visitChildren(self)




    def procedureSection(self):

        localctx = Cobol85Parser.ProcedureSectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 528, self.RULE_procedureSection)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3578
            self.procedureSectionHeader()
            self.state = 3579
            self.match(Cobol85Parser.DOT_FS)
            self.state = 3580
            self.paragraphs()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ParagraphsContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.ParagraphsContext, self).__init__(parent, invokingState)
            self.parser = parser

        def sentence(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.SentenceContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.SentenceContext,i)


        def paragraph(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.ParagraphContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.ParagraphContext,i)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_paragraphs

        def enterRule(self, listener):
            if hasattr(listener, "enterParagraphs"):
                listener.enterParagraphs(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitParagraphs"):
                listener.exitParagraphs(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitParagraphs"):
                return visitor.visitParagraphs(self)
            else:
                return visitor.visitChildren(self)




    def paragraphs(self):

        localctx = Cobol85Parser.ParagraphsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 530, self.RULE_paragraphs)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3585
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Cobol85Parser.ACCEPT) | (1 << Cobol85Parser.ADD) | (1 << Cobol85Parser.ALTER) | (1 << Cobol85Parser.CALL) | (1 << Cobol85Parser.CANCEL))) != 0) or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & ((1 << (Cobol85Parser.CLOSE - 69)) | (1 << (Cobol85Parser.COMPUTE - 69)) | (1 << (Cobol85Parser.CONTINUE - 69)))) != 0) or ((((_la - 134)) & ~0x3f) == 0 and ((1 << (_la - 134)) & ((1 << (Cobol85Parser.DELETE - 134)) | (1 << (Cobol85Parser.DISABLE - 134)) | (1 << (Cobol85Parser.DISPLAY - 134)) | (1 << (Cobol85Parser.DIVIDE - 134)) | (1 << (Cobol85Parser.ENABLE - 134)) | (1 << (Cobol85Parser.ENTRY - 134)) | (1 << (Cobol85Parser.EVALUATE - 134)))) != 0) or ((((_la - 202)) & ~0x3f) == 0 and ((1 << (_la - 202)) & ((1 << (Cobol85Parser.EXHIBIT - 202)) | (1 << (Cobol85Parser.EXIT - 202)) | (1 << (Cobol85Parser.GENERATE - 202)) | (1 << (Cobol85Parser.GOBACK - 202)) | (1 << (Cobol85Parser.GO - 202)) | (1 << (Cobol85Parser.IF - 202)) | (1 << (Cobol85Parser.INITIALIZE - 202)) | (1 << (Cobol85Parser.INITIATE - 202)) | (1 << (Cobol85Parser.INSPECT - 202)))) != 0) or ((((_la - 298)) & ~0x3f) == 0 and ((1 << (_la - 298)) & ((1 << (Cobol85Parser.MERGE - 298)) | (1 << (Cobol85Parser.MOVE - 298)) | (1 << (Cobol85Parser.MULTIPLY - 298)) | (1 << (Cobol85Parser.OPEN - 298)) | (1 << (Cobol85Parser.PERFORM - 298)))) != 0) or ((((_la - 369)) & ~0x3f) == 0 and ((1 << (_la - 369)) & ((1 << (Cobol85Parser.PURGE - 369)) | (1 << (Cobol85Parser.READ - 369)) | (1 << (Cobol85Parser.RECEIVE - 369)) | (1 << (Cobol85Parser.RELEASE - 369)) | (1 << (Cobol85Parser.RETURN - 369)) | (1 << (Cobol85Parser.REWRITE - 369)) | (1 << (Cobol85Parser.SEARCH - 369)) | (1 << (Cobol85Parser.SEND - 369)))) != 0) or ((((_la - 434)) & ~0x3f) == 0 and ((1 << (_la - 434)) & ((1 << (Cobol85Parser.SET - 434)) | (1 << (Cobol85Parser.SORT - 434)) | (1 << (Cobol85Parser.START - 434)) | (1 << (Cobol85Parser.STOP - 434)) | (1 << (Cobol85Parser.STRING - 434)) | (1 << (Cobol85Parser.SUBTRACT - 434)) | (1 << (Cobol85Parser.TERMINATE - 434)))) != 0) or ((((_la - 505)) & ~0x3f) == 0 and ((1 << (_la - 505)) & ((1 << (Cobol85Parser.UNSTRING - 505)) | (1 << (Cobol85Parser.WRITE - 505)) | (1 << (Cobol85Parser.DOT_FS - 505)) | (1 << (Cobol85Parser.EXECCICSLINE - 505)) | (1 << (Cobol85Parser.EXECSQLIMSLINE - 505)) | (1 << (Cobol85Parser.EXECSQLLINE - 505)))) != 0):
                self.state = 3582
                self.sentence()
                self.state = 3587
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 3591
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,466,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 3588
                    self.paragraph() 
                self.state = 3593
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,466,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ParagraphContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.ParagraphContext, self).__init__(parent, invokingState)
            self.parser = parser

        def paragraphName(self):
            return self.getTypedRuleContext(Cobol85Parser.ParagraphNameContext,0)


        def alteredGoTo(self):
            return self.getTypedRuleContext(Cobol85Parser.AlteredGoToContext,0)


        def DOT_FS(self):
            return self.getToken(Cobol85Parser.DOT_FS, 0)

        def sentence(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.SentenceContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.SentenceContext,i)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_paragraph

        def enterRule(self, listener):
            if hasattr(listener, "enterParagraph"):
                listener.enterParagraph(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitParagraph"):
                listener.exitParagraph(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitParagraph"):
                return visitor.visitParagraph(self)
            else:
                return visitor.visitChildren(self)




    def paragraph(self):

        localctx = Cobol85Parser.ParagraphContext(self, self._ctx, self.state)
        self.enterRule(localctx, 532, self.RULE_paragraph)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3594
            self.paragraphName()
            self.state = 3596
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,467,self._ctx)
            if la_ == 1:
                self.state = 3595
                self.match(Cobol85Parser.DOT_FS)


            self.state = 3605
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,469,self._ctx)
            if la_ == 1:
                self.state = 3598
                self.alteredGoTo()
                pass

            elif la_ == 2:
                self.state = 3602
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Cobol85Parser.ACCEPT) | (1 << Cobol85Parser.ADD) | (1 << Cobol85Parser.ALTER) | (1 << Cobol85Parser.CALL) | (1 << Cobol85Parser.CANCEL))) != 0) or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & ((1 << (Cobol85Parser.CLOSE - 69)) | (1 << (Cobol85Parser.COMPUTE - 69)) | (1 << (Cobol85Parser.CONTINUE - 69)))) != 0) or ((((_la - 134)) & ~0x3f) == 0 and ((1 << (_la - 134)) & ((1 << (Cobol85Parser.DELETE - 134)) | (1 << (Cobol85Parser.DISABLE - 134)) | (1 << (Cobol85Parser.DISPLAY - 134)) | (1 << (Cobol85Parser.DIVIDE - 134)) | (1 << (Cobol85Parser.ENABLE - 134)) | (1 << (Cobol85Parser.ENTRY - 134)) | (1 << (Cobol85Parser.EVALUATE - 134)))) != 0) or ((((_la - 202)) & ~0x3f) == 0 and ((1 << (_la - 202)) & ((1 << (Cobol85Parser.EXHIBIT - 202)) | (1 << (Cobol85Parser.EXIT - 202)) | (1 << (Cobol85Parser.GENERATE - 202)) | (1 << (Cobol85Parser.GOBACK - 202)) | (1 << (Cobol85Parser.GO - 202)) | (1 << (Cobol85Parser.IF - 202)) | (1 << (Cobol85Parser.INITIALIZE - 202)) | (1 << (Cobol85Parser.INITIATE - 202)) | (1 << (Cobol85Parser.INSPECT - 202)))) != 0) or ((((_la - 298)) & ~0x3f) == 0 and ((1 << (_la - 298)) & ((1 << (Cobol85Parser.MERGE - 298)) | (1 << (Cobol85Parser.MOVE - 298)) | (1 << (Cobol85Parser.MULTIPLY - 298)) | (1 << (Cobol85Parser.OPEN - 298)) | (1 << (Cobol85Parser.PERFORM - 298)))) != 0) or ((((_la - 369)) & ~0x3f) == 0 and ((1 << (_la - 369)) & ((1 << (Cobol85Parser.PURGE - 369)) | (1 << (Cobol85Parser.READ - 369)) | (1 << (Cobol85Parser.RECEIVE - 369)) | (1 << (Cobol85Parser.RELEASE - 369)) | (1 << (Cobol85Parser.RETURN - 369)) | (1 << (Cobol85Parser.REWRITE - 369)) | (1 << (Cobol85Parser.SEARCH - 369)) | (1 << (Cobol85Parser.SEND - 369)))) != 0) or ((((_la - 434)) & ~0x3f) == 0 and ((1 << (_la - 434)) & ((1 << (Cobol85Parser.SET - 434)) | (1 << (Cobol85Parser.SORT - 434)) | (1 << (Cobol85Parser.START - 434)) | (1 << (Cobol85Parser.STOP - 434)) | (1 << (Cobol85Parser.STRING - 434)) | (1 << (Cobol85Parser.SUBTRACT - 434)) | (1 << (Cobol85Parser.TERMINATE - 434)))) != 0) or ((((_la - 505)) & ~0x3f) == 0 and ((1 << (_la - 505)) & ((1 << (Cobol85Parser.UNSTRING - 505)) | (1 << (Cobol85Parser.WRITE - 505)) | (1 << (Cobol85Parser.DOT_FS - 505)) | (1 << (Cobol85Parser.EXECCICSLINE - 505)) | (1 << (Cobol85Parser.EXECSQLIMSLINE - 505)) | (1 << (Cobol85Parser.EXECSQLLINE - 505)))) != 0):
                    self.state = 3599
                    self.sentence()
                    self.state = 3604
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SentenceContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.SentenceContext, self).__init__(parent, invokingState)
            self.parser = parser

        def DOT_FS(self):
            return self.getToken(Cobol85Parser.DOT_FS, 0)

        def statement(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.StatementContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.StatementContext,i)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_sentence

        def enterRule(self, listener):
            if hasattr(listener, "enterSentence"):
                listener.enterSentence(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSentence"):
                listener.exitSentence(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitSentence"):
                return visitor.visitSentence(self)
            else:
                return visitor.visitChildren(self)




    def sentence(self):

        localctx = Cobol85Parser.SentenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 534, self.RULE_sentence)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3610
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Cobol85Parser.ACCEPT) | (1 << Cobol85Parser.ADD) | (1 << Cobol85Parser.ALTER) | (1 << Cobol85Parser.CALL) | (1 << Cobol85Parser.CANCEL))) != 0) or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & ((1 << (Cobol85Parser.CLOSE - 69)) | (1 << (Cobol85Parser.COMPUTE - 69)) | (1 << (Cobol85Parser.CONTINUE - 69)))) != 0) or ((((_la - 134)) & ~0x3f) == 0 and ((1 << (_la - 134)) & ((1 << (Cobol85Parser.DELETE - 134)) | (1 << (Cobol85Parser.DISABLE - 134)) | (1 << (Cobol85Parser.DISPLAY - 134)) | (1 << (Cobol85Parser.DIVIDE - 134)) | (1 << (Cobol85Parser.ENABLE - 134)) | (1 << (Cobol85Parser.ENTRY - 134)) | (1 << (Cobol85Parser.EVALUATE - 134)))) != 0) or ((((_la - 202)) & ~0x3f) == 0 and ((1 << (_la - 202)) & ((1 << (Cobol85Parser.EXHIBIT - 202)) | (1 << (Cobol85Parser.EXIT - 202)) | (1 << (Cobol85Parser.GENERATE - 202)) | (1 << (Cobol85Parser.GOBACK - 202)) | (1 << (Cobol85Parser.GO - 202)) | (1 << (Cobol85Parser.IF - 202)) | (1 << (Cobol85Parser.INITIALIZE - 202)) | (1 << (Cobol85Parser.INITIATE - 202)) | (1 << (Cobol85Parser.INSPECT - 202)))) != 0) or ((((_la - 298)) & ~0x3f) == 0 and ((1 << (_la - 298)) & ((1 << (Cobol85Parser.MERGE - 298)) | (1 << (Cobol85Parser.MOVE - 298)) | (1 << (Cobol85Parser.MULTIPLY - 298)) | (1 << (Cobol85Parser.OPEN - 298)) | (1 << (Cobol85Parser.PERFORM - 298)))) != 0) or ((((_la - 369)) & ~0x3f) == 0 and ((1 << (_la - 369)) & ((1 << (Cobol85Parser.PURGE - 369)) | (1 << (Cobol85Parser.READ - 369)) | (1 << (Cobol85Parser.RECEIVE - 369)) | (1 << (Cobol85Parser.RELEASE - 369)) | (1 << (Cobol85Parser.RETURN - 369)) | (1 << (Cobol85Parser.REWRITE - 369)) | (1 << (Cobol85Parser.SEARCH - 369)) | (1 << (Cobol85Parser.SEND - 369)))) != 0) or ((((_la - 434)) & ~0x3f) == 0 and ((1 << (_la - 434)) & ((1 << (Cobol85Parser.SET - 434)) | (1 << (Cobol85Parser.SORT - 434)) | (1 << (Cobol85Parser.START - 434)) | (1 << (Cobol85Parser.STOP - 434)) | (1 << (Cobol85Parser.STRING - 434)) | (1 << (Cobol85Parser.SUBTRACT - 434)) | (1 << (Cobol85Parser.TERMINATE - 434)))) != 0) or ((((_la - 505)) & ~0x3f) == 0 and ((1 << (_la - 505)) & ((1 << (Cobol85Parser.UNSTRING - 505)) | (1 << (Cobol85Parser.WRITE - 505)) | (1 << (Cobol85Parser.EXECCICSLINE - 505)) | (1 << (Cobol85Parser.EXECSQLIMSLINE - 505)) | (1 << (Cobol85Parser.EXECSQLLINE - 505)))) != 0):
                self.state = 3607
                self.statement()
                self.state = 3612
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 3613
            self.match(Cobol85Parser.DOT_FS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StatementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.StatementContext, self).__init__(parent, invokingState)
            self.parser = parser

        def acceptStatement(self):
            return self.getTypedRuleContext(Cobol85Parser.AcceptStatementContext,0)


        def addStatement(self):
            return self.getTypedRuleContext(Cobol85Parser.AddStatementContext,0)


        def alterStatement(self):
            return self.getTypedRuleContext(Cobol85Parser.AlterStatementContext,0)


        def callStatement(self):
            return self.getTypedRuleContext(Cobol85Parser.CallStatementContext,0)


        def cancelStatement(self):
            return self.getTypedRuleContext(Cobol85Parser.CancelStatementContext,0)


        def closeStatement(self):
            return self.getTypedRuleContext(Cobol85Parser.CloseStatementContext,0)


        def computeStatement(self):
            return self.getTypedRuleContext(Cobol85Parser.ComputeStatementContext,0)


        def continueStatement(self):
            return self.getTypedRuleContext(Cobol85Parser.ContinueStatementContext,0)


        def deleteStatement(self):
            return self.getTypedRuleContext(Cobol85Parser.DeleteStatementContext,0)


        def disableStatement(self):
            return self.getTypedRuleContext(Cobol85Parser.DisableStatementContext,0)


        def displayStatement(self):
            return self.getTypedRuleContext(Cobol85Parser.DisplayStatementContext,0)


        def divideStatement(self):
            return self.getTypedRuleContext(Cobol85Parser.DivideStatementContext,0)


        def enableStatement(self):
            return self.getTypedRuleContext(Cobol85Parser.EnableStatementContext,0)


        def entryStatement(self):
            return self.getTypedRuleContext(Cobol85Parser.EntryStatementContext,0)


        def evaluateStatement(self):
            return self.getTypedRuleContext(Cobol85Parser.EvaluateStatementContext,0)


        def exhibitStatement(self):
            return self.getTypedRuleContext(Cobol85Parser.ExhibitStatementContext,0)


        def execCicsStatement(self):
            return self.getTypedRuleContext(Cobol85Parser.ExecCicsStatementContext,0)


        def execSqlStatement(self):
            return self.getTypedRuleContext(Cobol85Parser.ExecSqlStatementContext,0)


        def execSqlImsStatement(self):
            return self.getTypedRuleContext(Cobol85Parser.ExecSqlImsStatementContext,0)


        def exitStatement(self):
            return self.getTypedRuleContext(Cobol85Parser.ExitStatementContext,0)


        def generateStatement(self):
            return self.getTypedRuleContext(Cobol85Parser.GenerateStatementContext,0)


        def gobackStatement(self):
            return self.getTypedRuleContext(Cobol85Parser.GobackStatementContext,0)


        def goToStatement(self):
            return self.getTypedRuleContext(Cobol85Parser.GoToStatementContext,0)


        def ifStatement(self):
            return self.getTypedRuleContext(Cobol85Parser.IfStatementContext,0)


        def initializeStatement(self):
            return self.getTypedRuleContext(Cobol85Parser.InitializeStatementContext,0)


        def initiateStatement(self):
            return self.getTypedRuleContext(Cobol85Parser.InitiateStatementContext,0)


        def inspectStatement(self):
            return self.getTypedRuleContext(Cobol85Parser.InspectStatementContext,0)


        def mergeStatement(self):
            return self.getTypedRuleContext(Cobol85Parser.MergeStatementContext,0)


        def moveStatement(self):
            return self.getTypedRuleContext(Cobol85Parser.MoveStatementContext,0)


        def multiplyStatement(self):
            return self.getTypedRuleContext(Cobol85Parser.MultiplyStatementContext,0)


        def openStatement(self):
            return self.getTypedRuleContext(Cobol85Parser.OpenStatementContext,0)


        def performStatement(self):
            return self.getTypedRuleContext(Cobol85Parser.PerformStatementContext,0)


        def purgeStatement(self):
            return self.getTypedRuleContext(Cobol85Parser.PurgeStatementContext,0)


        def readStatement(self):
            return self.getTypedRuleContext(Cobol85Parser.ReadStatementContext,0)


        def receiveStatement(self):
            return self.getTypedRuleContext(Cobol85Parser.ReceiveStatementContext,0)


        def releaseStatement(self):
            return self.getTypedRuleContext(Cobol85Parser.ReleaseStatementContext,0)


        def returnStatement(self):
            return self.getTypedRuleContext(Cobol85Parser.ReturnStatementContext,0)


        def rewriteStatement(self):
            return self.getTypedRuleContext(Cobol85Parser.RewriteStatementContext,0)


        def searchStatement(self):
            return self.getTypedRuleContext(Cobol85Parser.SearchStatementContext,0)


        def sendStatement(self):
            return self.getTypedRuleContext(Cobol85Parser.SendStatementContext,0)


        def setStatement(self):
            return self.getTypedRuleContext(Cobol85Parser.SetStatementContext,0)


        def sortStatement(self):
            return self.getTypedRuleContext(Cobol85Parser.SortStatementContext,0)


        def startStatement(self):
            return self.getTypedRuleContext(Cobol85Parser.StartStatementContext,0)


        def stopStatement(self):
            return self.getTypedRuleContext(Cobol85Parser.StopStatementContext,0)


        def stringStatement(self):
            return self.getTypedRuleContext(Cobol85Parser.StringStatementContext,0)


        def subtractStatement(self):
            return self.getTypedRuleContext(Cobol85Parser.SubtractStatementContext,0)


        def terminateStatement(self):
            return self.getTypedRuleContext(Cobol85Parser.TerminateStatementContext,0)


        def unstringStatement(self):
            return self.getTypedRuleContext(Cobol85Parser.UnstringStatementContext,0)


        def writeStatement(self):
            return self.getTypedRuleContext(Cobol85Parser.WriteStatementContext,0)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_statement

        def enterRule(self, listener):
            if hasattr(listener, "enterStatement"):
                listener.enterStatement(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitStatement"):
                listener.exitStatement(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitStatement"):
                return visitor.visitStatement(self)
            else:
                return visitor.visitChildren(self)




    def statement(self):

        localctx = Cobol85Parser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 536, self.RULE_statement)
        try:
            self.state = 3664
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Cobol85Parser.ACCEPT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3615
                self.acceptStatement()
                pass
            elif token in [Cobol85Parser.ADD]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3616
                self.addStatement()
                pass
            elif token in [Cobol85Parser.ALTER]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3617
                self.alterStatement()
                pass
            elif token in [Cobol85Parser.CALL]:
                self.enterOuterAlt(localctx, 4)
                self.state = 3618
                self.callStatement()
                pass
            elif token in [Cobol85Parser.CANCEL]:
                self.enterOuterAlt(localctx, 5)
                self.state = 3619
                self.cancelStatement()
                pass
            elif token in [Cobol85Parser.CLOSE]:
                self.enterOuterAlt(localctx, 6)
                self.state = 3620
                self.closeStatement()
                pass
            elif token in [Cobol85Parser.COMPUTE]:
                self.enterOuterAlt(localctx, 7)
                self.state = 3621
                self.computeStatement()
                pass
            elif token in [Cobol85Parser.CONTINUE]:
                self.enterOuterAlt(localctx, 8)
                self.state = 3622
                self.continueStatement()
                pass
            elif token in [Cobol85Parser.DELETE]:
                self.enterOuterAlt(localctx, 9)
                self.state = 3623
                self.deleteStatement()
                pass
            elif token in [Cobol85Parser.DISABLE]:
                self.enterOuterAlt(localctx, 10)
                self.state = 3624
                self.disableStatement()
                pass
            elif token in [Cobol85Parser.DISPLAY]:
                self.enterOuterAlt(localctx, 11)
                self.state = 3625
                self.displayStatement()
                pass
            elif token in [Cobol85Parser.DIVIDE]:
                self.enterOuterAlt(localctx, 12)
                self.state = 3626
                self.divideStatement()
                pass
            elif token in [Cobol85Parser.ENABLE]:
                self.enterOuterAlt(localctx, 13)
                self.state = 3627
                self.enableStatement()
                pass
            elif token in [Cobol85Parser.ENTRY]:
                self.enterOuterAlt(localctx, 14)
                self.state = 3628
                self.entryStatement()
                pass
            elif token in [Cobol85Parser.EVALUATE]:
                self.enterOuterAlt(localctx, 15)
                self.state = 3629
                self.evaluateStatement()
                pass
            elif token in [Cobol85Parser.EXHIBIT]:
                self.enterOuterAlt(localctx, 16)
                self.state = 3630
                self.exhibitStatement()
                pass
            elif token in [Cobol85Parser.EXECCICSLINE]:
                self.enterOuterAlt(localctx, 17)
                self.state = 3631
                self.execCicsStatement()
                pass
            elif token in [Cobol85Parser.EXECSQLLINE]:
                self.enterOuterAlt(localctx, 18)
                self.state = 3632
                self.execSqlStatement()
                pass
            elif token in [Cobol85Parser.EXECSQLIMSLINE]:
                self.enterOuterAlt(localctx, 19)
                self.state = 3633
                self.execSqlImsStatement()
                pass
            elif token in [Cobol85Parser.EXIT]:
                self.enterOuterAlt(localctx, 20)
                self.state = 3634
                self.exitStatement()
                pass
            elif token in [Cobol85Parser.GENERATE]:
                self.enterOuterAlt(localctx, 21)
                self.state = 3635
                self.generateStatement()
                pass
            elif token in [Cobol85Parser.GOBACK]:
                self.enterOuterAlt(localctx, 22)
                self.state = 3636
                self.gobackStatement()
                pass
            elif token in [Cobol85Parser.GO]:
                self.enterOuterAlt(localctx, 23)
                self.state = 3637
                self.goToStatement()
                pass
            elif token in [Cobol85Parser.IF]:
                self.enterOuterAlt(localctx, 24)
                self.state = 3638
                self.ifStatement()
                pass
            elif token in [Cobol85Parser.INITIALIZE]:
                self.enterOuterAlt(localctx, 25)
                self.state = 3639
                self.initializeStatement()
                pass
            elif token in [Cobol85Parser.INITIATE]:
                self.enterOuterAlt(localctx, 26)
                self.state = 3640
                self.initiateStatement()
                pass
            elif token in [Cobol85Parser.INSPECT]:
                self.enterOuterAlt(localctx, 27)
                self.state = 3641
                self.inspectStatement()
                pass
            elif token in [Cobol85Parser.MERGE]:
                self.enterOuterAlt(localctx, 28)
                self.state = 3642
                self.mergeStatement()
                pass
            elif token in [Cobol85Parser.MOVE]:
                self.enterOuterAlt(localctx, 29)
                self.state = 3643
                self.moveStatement()
                pass
            elif token in [Cobol85Parser.MULTIPLY]:
                self.enterOuterAlt(localctx, 30)
                self.state = 3644
                self.multiplyStatement()
                pass
            elif token in [Cobol85Parser.OPEN]:
                self.enterOuterAlt(localctx, 31)
                self.state = 3645
                self.openStatement()
                pass
            elif token in [Cobol85Parser.PERFORM]:
                self.enterOuterAlt(localctx, 32)
                self.state = 3646
                self.performStatement()
                pass
            elif token in [Cobol85Parser.PURGE]:
                self.enterOuterAlt(localctx, 33)
                self.state = 3647
                self.purgeStatement()
                pass
            elif token in [Cobol85Parser.READ]:
                self.enterOuterAlt(localctx, 34)
                self.state = 3648
                self.readStatement()
                pass
            elif token in [Cobol85Parser.RECEIVE]:
                self.enterOuterAlt(localctx, 35)
                self.state = 3649
                self.receiveStatement()
                pass
            elif token in [Cobol85Parser.RELEASE]:
                self.enterOuterAlt(localctx, 36)
                self.state = 3650
                self.releaseStatement()
                pass
            elif token in [Cobol85Parser.RETURN]:
                self.enterOuterAlt(localctx, 37)
                self.state = 3651
                self.returnStatement()
                pass
            elif token in [Cobol85Parser.REWRITE]:
                self.enterOuterAlt(localctx, 38)
                self.state = 3652
                self.rewriteStatement()
                pass
            elif token in [Cobol85Parser.SEARCH]:
                self.enterOuterAlt(localctx, 39)
                self.state = 3653
                self.searchStatement()
                pass
            elif token in [Cobol85Parser.SEND]:
                self.enterOuterAlt(localctx, 40)
                self.state = 3654
                self.sendStatement()
                pass
            elif token in [Cobol85Parser.SET]:
                self.enterOuterAlt(localctx, 41)
                self.state = 3655
                self.setStatement()
                pass
            elif token in [Cobol85Parser.SORT]:
                self.enterOuterAlt(localctx, 42)
                self.state = 3656
                self.sortStatement()
                pass
            elif token in [Cobol85Parser.START]:
                self.enterOuterAlt(localctx, 43)
                self.state = 3657
                self.startStatement()
                pass
            elif token in [Cobol85Parser.STOP]:
                self.enterOuterAlt(localctx, 44)
                self.state = 3658
                self.stopStatement()
                pass
            elif token in [Cobol85Parser.STRING]:
                self.enterOuterAlt(localctx, 45)
                self.state = 3659
                self.stringStatement()
                pass
            elif token in [Cobol85Parser.SUBTRACT]:
                self.enterOuterAlt(localctx, 46)
                self.state = 3660
                self.subtractStatement()
                pass
            elif token in [Cobol85Parser.TERMINATE]:
                self.enterOuterAlt(localctx, 47)
                self.state = 3661
                self.terminateStatement()
                pass
            elif token in [Cobol85Parser.UNSTRING]:
                self.enterOuterAlt(localctx, 48)
                self.state = 3662
                self.unstringStatement()
                pass
            elif token in [Cobol85Parser.WRITE]:
                self.enterOuterAlt(localctx, 49)
                self.state = 3663
                self.writeStatement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AcceptStatementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.AcceptStatementContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ACCEPT(self):
            return self.getToken(Cobol85Parser.ACCEPT, 0)

        def identifier(self):
            return self.getTypedRuleContext(Cobol85Parser.IdentifierContext,0)


        def acceptFromDateStatement(self):
            return self.getTypedRuleContext(Cobol85Parser.AcceptFromDateStatementContext,0)


        def acceptFromEscapeKeyStatement(self):
            return self.getTypedRuleContext(Cobol85Parser.AcceptFromEscapeKeyStatementContext,0)


        def acceptFromMnemonicStatement(self):
            return self.getTypedRuleContext(Cobol85Parser.AcceptFromMnemonicStatementContext,0)


        def acceptMessageCountStatement(self):
            return self.getTypedRuleContext(Cobol85Parser.AcceptMessageCountStatementContext,0)


        def onExceptionClause(self):
            return self.getTypedRuleContext(Cobol85Parser.OnExceptionClauseContext,0)


        def notOnExceptionClause(self):
            return self.getTypedRuleContext(Cobol85Parser.NotOnExceptionClauseContext,0)


        def END_ACCEPT(self):
            return self.getToken(Cobol85Parser.END_ACCEPT, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_acceptStatement

        def enterRule(self, listener):
            if hasattr(listener, "enterAcceptStatement"):
                listener.enterAcceptStatement(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitAcceptStatement"):
                listener.exitAcceptStatement(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitAcceptStatement"):
                return visitor.visitAcceptStatement(self)
            else:
                return visitor.visitChildren(self)




    def acceptStatement(self):

        localctx = Cobol85Parser.AcceptStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 538, self.RULE_acceptStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3666
            self.match(Cobol85Parser.ACCEPT)
            self.state = 3667
            self.identifier()
            self.state = 3672
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,472,self._ctx)
            if la_ == 1:
                self.state = 3668
                self.acceptFromDateStatement()

            elif la_ == 2:
                self.state = 3669
                self.acceptFromEscapeKeyStatement()

            elif la_ == 3:
                self.state = 3670
                self.acceptFromMnemonicStatement()

            elif la_ == 4:
                self.state = 3671
                self.acceptMessageCountStatement()


            self.state = 3675
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,473,self._ctx)
            if la_ == 1:
                self.state = 3674
                self.onExceptionClause()


            self.state = 3678
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,474,self._ctx)
            if la_ == 1:
                self.state = 3677
                self.notOnExceptionClause()


            self.state = 3681
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,475,self._ctx)
            if la_ == 1:
                self.state = 3680
                self.match(Cobol85Parser.END_ACCEPT)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AcceptFromDateStatementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.AcceptFromDateStatementContext, self).__init__(parent, invokingState)
            self.parser = parser

        def FROM(self):
            return self.getToken(Cobol85Parser.FROM, 0)

        def DATE(self):
            return self.getToken(Cobol85Parser.DATE, 0)

        def DAY(self):
            return self.getToken(Cobol85Parser.DAY, 0)

        def DAY_OF_WEEK(self):
            return self.getToken(Cobol85Parser.DAY_OF_WEEK, 0)

        def TIME(self):
            return self.getToken(Cobol85Parser.TIME, 0)

        def TIMER(self):
            return self.getToken(Cobol85Parser.TIMER, 0)

        def TODAYS_DATE(self):
            return self.getToken(Cobol85Parser.TODAYS_DATE, 0)

        def TODAYS_NAME(self):
            return self.getToken(Cobol85Parser.TODAYS_NAME, 0)

        def YEAR(self):
            return self.getToken(Cobol85Parser.YEAR, 0)

        def YYYYMMDD(self):
            return self.getToken(Cobol85Parser.YYYYMMDD, 0)

        def YYYYDDD(self):
            return self.getToken(Cobol85Parser.YYYYDDD, 0)

        def MMDDYYYY(self):
            return self.getToken(Cobol85Parser.MMDDYYYY, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_acceptFromDateStatement

        def enterRule(self, listener):
            if hasattr(listener, "enterAcceptFromDateStatement"):
                listener.enterAcceptFromDateStatement(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitAcceptFromDateStatement"):
                listener.exitAcceptFromDateStatement(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitAcceptFromDateStatement"):
                return visitor.visitAcceptFromDateStatement(self)
            else:
                return visitor.visitChildren(self)




    def acceptFromDateStatement(self):

        localctx = Cobol85Parser.AcceptFromDateStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 540, self.RULE_acceptFromDateStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3683
            self.match(Cobol85Parser.FROM)
            self.state = 3703
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Cobol85Parser.DATE]:
                self.state = 3684
                self.match(Cobol85Parser.DATE)
                self.state = 3686
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Cobol85Parser.YYYYMMDD:
                    self.state = 3685
                    self.match(Cobol85Parser.YYYYMMDD)


                pass
            elif token in [Cobol85Parser.DAY]:
                self.state = 3688
                self.match(Cobol85Parser.DAY)
                self.state = 3690
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Cobol85Parser.YYYYDDD:
                    self.state = 3689
                    self.match(Cobol85Parser.YYYYDDD)


                pass
            elif token in [Cobol85Parser.DAY_OF_WEEK]:
                self.state = 3692
                self.match(Cobol85Parser.DAY_OF_WEEK)
                pass
            elif token in [Cobol85Parser.TIME]:
                self.state = 3693
                self.match(Cobol85Parser.TIME)
                pass
            elif token in [Cobol85Parser.TIMER]:
                self.state = 3694
                self.match(Cobol85Parser.TIMER)
                pass
            elif token in [Cobol85Parser.TODAYS_DATE]:
                self.state = 3695
                self.match(Cobol85Parser.TODAYS_DATE)
                self.state = 3697
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Cobol85Parser.MMDDYYYY:
                    self.state = 3696
                    self.match(Cobol85Parser.MMDDYYYY)


                pass
            elif token in [Cobol85Parser.TODAYS_NAME]:
                self.state = 3699
                self.match(Cobol85Parser.TODAYS_NAME)
                pass
            elif token in [Cobol85Parser.YEAR]:
                self.state = 3700
                self.match(Cobol85Parser.YEAR)
                pass
            elif token in [Cobol85Parser.YYYYMMDD]:
                self.state = 3701
                self.match(Cobol85Parser.YYYYMMDD)
                pass
            elif token in [Cobol85Parser.YYYYDDD]:
                self.state = 3702
                self.match(Cobol85Parser.YYYYDDD)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AcceptFromMnemonicStatementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.AcceptFromMnemonicStatementContext, self).__init__(parent, invokingState)
            self.parser = parser

        def FROM(self):
            return self.getToken(Cobol85Parser.FROM, 0)

        def mnemonicName(self):
            return self.getTypedRuleContext(Cobol85Parser.MnemonicNameContext,0)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_acceptFromMnemonicStatement

        def enterRule(self, listener):
            if hasattr(listener, "enterAcceptFromMnemonicStatement"):
                listener.enterAcceptFromMnemonicStatement(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitAcceptFromMnemonicStatement"):
                listener.exitAcceptFromMnemonicStatement(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitAcceptFromMnemonicStatement"):
                return visitor.visitAcceptFromMnemonicStatement(self)
            else:
                return visitor.visitChildren(self)




    def acceptFromMnemonicStatement(self):

        localctx = Cobol85Parser.AcceptFromMnemonicStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 542, self.RULE_acceptFromMnemonicStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3705
            self.match(Cobol85Parser.FROM)
            self.state = 3706
            self.mnemonicName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AcceptFromEscapeKeyStatementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.AcceptFromEscapeKeyStatementContext, self).__init__(parent, invokingState)
            self.parser = parser

        def FROM(self):
            return self.getToken(Cobol85Parser.FROM, 0)

        def ESCAPE(self):
            return self.getToken(Cobol85Parser.ESCAPE, 0)

        def KEY(self):
            return self.getToken(Cobol85Parser.KEY, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_acceptFromEscapeKeyStatement

        def enterRule(self, listener):
            if hasattr(listener, "enterAcceptFromEscapeKeyStatement"):
                listener.enterAcceptFromEscapeKeyStatement(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitAcceptFromEscapeKeyStatement"):
                listener.exitAcceptFromEscapeKeyStatement(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitAcceptFromEscapeKeyStatement"):
                return visitor.visitAcceptFromEscapeKeyStatement(self)
            else:
                return visitor.visitChildren(self)




    def acceptFromEscapeKeyStatement(self):

        localctx = Cobol85Parser.AcceptFromEscapeKeyStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 544, self.RULE_acceptFromEscapeKeyStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3708
            self.match(Cobol85Parser.FROM)
            self.state = 3709
            self.match(Cobol85Parser.ESCAPE)
            self.state = 3710
            self.match(Cobol85Parser.KEY)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AcceptMessageCountStatementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.AcceptMessageCountStatementContext, self).__init__(parent, invokingState)
            self.parser = parser

        def COUNT(self):
            return self.getToken(Cobol85Parser.COUNT, 0)

        def MESSAGE(self):
            return self.getToken(Cobol85Parser.MESSAGE, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_acceptMessageCountStatement

        def enterRule(self, listener):
            if hasattr(listener, "enterAcceptMessageCountStatement"):
                listener.enterAcceptMessageCountStatement(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitAcceptMessageCountStatement"):
                listener.exitAcceptMessageCountStatement(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitAcceptMessageCountStatement"):
                return visitor.visitAcceptMessageCountStatement(self)
            else:
                return visitor.visitChildren(self)




    def acceptMessageCountStatement(self):

        localctx = Cobol85Parser.AcceptMessageCountStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 546, self.RULE_acceptMessageCountStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3713
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.MESSAGE:
                self.state = 3712
                self.match(Cobol85Parser.MESSAGE)


            self.state = 3715
            self.match(Cobol85Parser.COUNT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AddStatementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.AddStatementContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ADD(self):
            return self.getToken(Cobol85Parser.ADD, 0)

        def addToStatement(self):
            return self.getTypedRuleContext(Cobol85Parser.AddToStatementContext,0)


        def addToGivingStatement(self):
            return self.getTypedRuleContext(Cobol85Parser.AddToGivingStatementContext,0)


        def addCorrespondingStatement(self):
            return self.getTypedRuleContext(Cobol85Parser.AddCorrespondingStatementContext,0)


        def onSizeErrorPhrase(self):
            return self.getTypedRuleContext(Cobol85Parser.OnSizeErrorPhraseContext,0)


        def notOnSizeErrorPhrase(self):
            return self.getTypedRuleContext(Cobol85Parser.NotOnSizeErrorPhraseContext,0)


        def END_ADD(self):
            return self.getToken(Cobol85Parser.END_ADD, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_addStatement

        def enterRule(self, listener):
            if hasattr(listener, "enterAddStatement"):
                listener.enterAddStatement(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitAddStatement"):
                listener.exitAddStatement(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitAddStatement"):
                return visitor.visitAddStatement(self)
            else:
                return visitor.visitChildren(self)




    def addStatement(self):

        localctx = Cobol85Parser.AddStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 548, self.RULE_addStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3717
            self.match(Cobol85Parser.ADD)
            self.state = 3721
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,481,self._ctx)
            if la_ == 1:
                self.state = 3718
                self.addToStatement()
                pass

            elif la_ == 2:
                self.state = 3719
                self.addToGivingStatement()
                pass

            elif la_ == 3:
                self.state = 3720
                self.addCorrespondingStatement()
                pass


            self.state = 3724
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,482,self._ctx)
            if la_ == 1:
                self.state = 3723
                self.onSizeErrorPhrase()


            self.state = 3727
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,483,self._ctx)
            if la_ == 1:
                self.state = 3726
                self.notOnSizeErrorPhrase()


            self.state = 3730
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,484,self._ctx)
            if la_ == 1:
                self.state = 3729
                self.match(Cobol85Parser.END_ADD)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AddToStatementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.AddToStatementContext, self).__init__(parent, invokingState)
            self.parser = parser

        def TO(self):
            return self.getToken(Cobol85Parser.TO, 0)

        def addFrom(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.AddFromContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.AddFromContext,i)


        def addTo(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.AddToContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.AddToContext,i)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_addToStatement

        def enterRule(self, listener):
            if hasattr(listener, "enterAddToStatement"):
                listener.enterAddToStatement(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitAddToStatement"):
                listener.exitAddToStatement(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitAddToStatement"):
                return visitor.visitAddToStatement(self)
            else:
                return visitor.visitChildren(self)




    def addToStatement(self):

        localctx = Cobol85Parser.AddToStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 550, self.RULE_addToStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3733 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 3732
                self.addFrom()
                self.state = 3735 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.ADDRESS) | (1 << Cobol85Parser.ALL) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE) | (1 << Cobol85Parser.AUTO) | (1 << Cobol85Parser.AUTO_SKIP) | (1 << Cobol85Parser.BACKGROUND_COLOR) | (1 << Cobol85Parser.BACKGROUND_COLOUR) | (1 << Cobol85Parser.BEEP) | (1 << Cobol85Parser.BELL) | (1 << Cobol85Parser.BINARY) | (1 << Cobol85Parser.BIT) | (1 << Cobol85Parser.BLINK) | (1 << Cobol85Parser.BLOB) | (1 << Cobol85Parser.BOUNDS) | (1 << Cobol85Parser.CAPABLE) | (1 << Cobol85Parser.CCSVERSION) | (1 << Cobol85Parser.CHANGED) | (1 << Cobol85Parser.CHANNEL))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (Cobol85Parser.CLOB - 67)) | (1 << (Cobol85Parser.CLOSE_DISPOSITION - 67)) | (1 << (Cobol85Parser.COBOL - 67)) | (1 << (Cobol85Parser.COMMITMENT - 67)) | (1 << (Cobol85Parser.CONTROL_POINT - 67)) | (1 << (Cobol85Parser.CONVENTION - 67)) | (1 << (Cobol85Parser.CRUNCH - 67)) | (1 << (Cobol85Parser.CURSOR - 67)) | (1 << (Cobol85Parser.DATE - 67)) | (1 << (Cobol85Parser.DAY - 67)) | (1 << (Cobol85Parser.DAY_OF_WEEK - 67)) | (1 << (Cobol85Parser.DBCLOB - 67)) | (1 << (Cobol85Parser.DEBUG_CONTENTS - 67)) | (1 << (Cobol85Parser.DEBUG_ITEM - 67)) | (1 << (Cobol85Parser.DEBUG_LINE - 67)) | (1 << (Cobol85Parser.DEBUG_NAME - 67)) | (1 << (Cobol85Parser.DEBUG_SUB_1 - 67)) | (1 << (Cobol85Parser.DEBUG_SUB_2 - 67)) | (1 << (Cobol85Parser.DEBUG_SUB_3 - 67)))) != 0) or ((((_la - 131)) & ~0x3f) == 0 and ((1 << (_la - 131)) & ((1 << (Cobol85Parser.DEFAULT - 131)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 131)) | (1 << (Cobol85Parser.DEFINITION - 131)) | (1 << (Cobol85Parser.DFHRESP - 131)) | (1 << (Cobol85Parser.DFHVALUE - 131)) | (1 << (Cobol85Parser.DISK - 131)) | (1 << (Cobol85Parser.DONTCARE - 131)) | (1 << (Cobol85Parser.DOUBLE - 131)) | (1 << (Cobol85Parser.EBCDIC - 131)) | (1 << (Cobol85Parser.EMPTY_CHECK - 131)) | (1 << (Cobol85Parser.ENTER - 131)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 131)) | (1 << (Cobol85Parser.ERASE - 131)) | (1 << (Cobol85Parser.EOL - 131)) | (1 << (Cobol85Parser.EOS - 131)))) != 0) or ((((_la - 195)) & ~0x3f) == 0 and ((1 << (_la - 195)) & ((1 << (Cobol85Parser.ESCAPE - 195)) | (1 << (Cobol85Parser.EVENT - 195)) | (1 << (Cobol85Parser.EXCLUSIVE - 195)) | (1 << (Cobol85Parser.EXPORT - 195)) | (1 << (Cobol85Parser.EXTENDED - 195)) | (1 << (Cobol85Parser.FALSE - 195)) | (1 << (Cobol85Parser.FOREGROUND_COLOR - 195)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 195)) | (1 << (Cobol85Parser.FULL - 195)) | (1 << (Cobol85Parser.FUNCTION - 195)) | (1 << (Cobol85Parser.FUNCTIONNAME - 195)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 195)) | (1 << (Cobol85Parser.GRID - 195)) | (1 << (Cobol85Parser.HIGHLIGHT - 195)) | (1 << (Cobol85Parser.HIGH_VALUE - 195)) | (1 << (Cobol85Parser.HIGH_VALUES - 195)) | (1 << (Cobol85Parser.IMPLICIT - 195)) | (1 << (Cobol85Parser.IMPORT - 195)) | (1 << (Cobol85Parser.INTEGER - 195)))) != 0) or ((((_la - 262)) & ~0x3f) == 0 and ((1 << (_la - 262)) & ((1 << (Cobol85Parser.KEPT - 262)) | (1 << (Cobol85Parser.KEYBOARD - 262)) | (1 << (Cobol85Parser.LANGUAGE - 262)) | (1 << (Cobol85Parser.LB - 262)) | (1 << (Cobol85Parser.LD - 262)) | (1 << (Cobol85Parser.LEFTLINE - 262)) | (1 << (Cobol85Parser.LENGTH - 262)) | (1 << (Cobol85Parser.LENGTH_CHECK - 262)) | (1 << (Cobol85Parser.LIBACCESS - 262)) | (1 << (Cobol85Parser.LIBPARAMETER - 262)) | (1 << (Cobol85Parser.LIBRARY - 262)) | (1 << (Cobol85Parser.LINAGE_COUNTER - 262)) | (1 << (Cobol85Parser.LINE_COUNTER - 262)) | (1 << (Cobol85Parser.LIST - 262)) | (1 << (Cobol85Parser.LOCAL - 262)) | (1 << (Cobol85Parser.LONG_DATE - 262)) | (1 << (Cobol85Parser.LONG_TIME - 262)) | (1 << (Cobol85Parser.LOWER - 262)) | (1 << (Cobol85Parser.LOWLIGHT - 262)) | (1 << (Cobol85Parser.LOW_VALUE - 262)) | (1 << (Cobol85Parser.LOW_VALUES - 262)) | (1 << (Cobol85Parser.MMDDYYYY - 262)) | (1 << (Cobol85Parser.NAMED - 262)) | (1 << (Cobol85Parser.NATIONAL - 262)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 262)) | (1 << (Cobol85Parser.NETWORK - 262)) | (1 << (Cobol85Parser.NO_ECHO - 262)) | (1 << (Cobol85Parser.NULL - 262)) | (1 << (Cobol85Parser.NULLS - 262)) | (1 << (Cobol85Parser.NUMERIC_DATE - 262)) | (1 << (Cobol85Parser.NUMERIC_TIME - 262)))) != 0) or ((((_la - 326)) & ~0x3f) == 0 and ((1 << (_la - 326)) & ((1 << (Cobol85Parser.ODT - 326)) | (1 << (Cobol85Parser.ORDERLY - 326)) | (1 << (Cobol85Parser.OVERLINE - 326)) | (1 << (Cobol85Parser.OWN - 326)) | (1 << (Cobol85Parser.PAGE_COUNTER - 326)) | (1 << (Cobol85Parser.PASSWORD - 326)) | (1 << (Cobol85Parser.PORT - 326)) | (1 << (Cobol85Parser.PRINTER - 326)) | (1 << (Cobol85Parser.PRIVATE - 326)) | (1 << (Cobol85Parser.PROCESS - 326)) | (1 << (Cobol85Parser.PROGRAM - 326)) | (1 << (Cobol85Parser.PROMPT - 326)) | (1 << (Cobol85Parser.QUOTE - 326)) | (1 << (Cobol85Parser.QUOTES - 326)) | (1 << (Cobol85Parser.READER - 326)) | (1 << (Cobol85Parser.REMOTE - 326)) | (1 << (Cobol85Parser.REAL - 326)) | (1 << (Cobol85Parser.RECEIVED - 326)) | (1 << (Cobol85Parser.RECURSIVE - 326)) | (1 << (Cobol85Parser.REF - 326)))) != 0) or ((((_la - 395)) & ~0x3f) == 0 and ((1 << (_la - 395)) & ((1 << (Cobol85Parser.REMOVE - 395)) | (1 << (Cobol85Parser.REQUIRED - 395)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 395)) | (1 << (Cobol85Parser.RETURN_CODE - 395)) | (1 << (Cobol85Parser.SAVE - 395)) | (1 << (Cobol85Parser.SECURE - 395)) | (1 << (Cobol85Parser.SHARED - 395)) | (1 << (Cobol85Parser.SHAREDBYALL - 395)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 395)) | (1 << (Cobol85Parser.SHARING - 395)) | (1 << (Cobol85Parser.SHIFT_IN - 395)) | (1 << (Cobol85Parser.SHIFT_OUT - 395)) | (1 << (Cobol85Parser.SHORT_DATE - 395)) | (1 << (Cobol85Parser.SORT_CONTROL - 395)) | (1 << (Cobol85Parser.SORT_CORE_SIZE - 395)) | (1 << (Cobol85Parser.SORT_FILE_SIZE - 395)) | (1 << (Cobol85Parser.SORT_MESSAGE - 395)) | (1 << (Cobol85Parser.SORT_MODE_SIZE - 395)) | (1 << (Cobol85Parser.SORT_RETURN - 395)) | (1 << (Cobol85Parser.SPACE - 395)) | (1 << (Cobol85Parser.SPACES - 395)) | (1 << (Cobol85Parser.SQL - 395)))) != 0) or ((((_la - 471)) & ~0x3f) == 0 and ((1 << (_la - 471)) & ((1 << (Cobol85Parser.SYMBOL - 471)) | (1 << (Cobol85Parser.TALLY - 471)) | (1 << (Cobol85Parser.TASK - 471)) | (1 << (Cobol85Parser.THREAD - 471)) | (1 << (Cobol85Parser.THREAD_LOCAL - 471)) | (1 << (Cobol85Parser.TIME - 471)) | (1 << (Cobol85Parser.TIMER - 471)) | (1 << (Cobol85Parser.TODAYS_DATE - 471)) | (1 << (Cobol85Parser.TODAYS_NAME - 471)) | (1 << (Cobol85Parser.TRUE - 471)) | (1 << (Cobol85Parser.TRUNCATED - 471)) | (1 << (Cobol85Parser.TYPEDEF - 471)) | (1 << (Cobol85Parser.UNDERLINE - 471)) | (1 << (Cobol85Parser.VIRTUAL - 471)) | (1 << (Cobol85Parser.WAIT - 471)) | (1 << (Cobol85Parser.WHEN_COMPILED - 471)) | (1 << (Cobol85Parser.YEAR - 471)) | (1 << (Cobol85Parser.YYYYMMDD - 471)) | (1 << (Cobol85Parser.YYYYDDD - 471)) | (1 << (Cobol85Parser.ZERO - 471)) | (1 << (Cobol85Parser.ZERO_FILL - 471)) | (1 << (Cobol85Parser.ZEROS - 471)) | (1 << (Cobol85Parser.ZEROES - 471)))) != 0) or ((((_la - 556)) & ~0x3f) == 0 and ((1 << (_la - 556)) & ((1 << (Cobol85Parser.NONNUMERICLITERAL - 556)) | (1 << (Cobol85Parser.LEVEL_NUMBER_66 - 556)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 556)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 556)) | (1 << (Cobol85Parser.INTEGERLITERAL - 556)) | (1 << (Cobol85Parser.NUMERICLITERAL - 556)) | (1 << (Cobol85Parser.IDENTIFIER - 556)))) != 0)):
                    break

            self.state = 3737
            self.match(Cobol85Parser.TO)
            self.state = 3739 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 3738
                self.addTo()
                self.state = 3741 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.ADDRESS) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE) | (1 << Cobol85Parser.AUTO) | (1 << Cobol85Parser.AUTO_SKIP) | (1 << Cobol85Parser.BACKGROUND_COLOR) | (1 << Cobol85Parser.BACKGROUND_COLOUR) | (1 << Cobol85Parser.BEEP) | (1 << Cobol85Parser.BELL) | (1 << Cobol85Parser.BINARY) | (1 << Cobol85Parser.BIT) | (1 << Cobol85Parser.BLINK) | (1 << Cobol85Parser.BLOB) | (1 << Cobol85Parser.BOUNDS) | (1 << Cobol85Parser.CAPABLE) | (1 << Cobol85Parser.CCSVERSION) | (1 << Cobol85Parser.CHANGED) | (1 << Cobol85Parser.CHANNEL))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (Cobol85Parser.CLOB - 67)) | (1 << (Cobol85Parser.CLOSE_DISPOSITION - 67)) | (1 << (Cobol85Parser.COBOL - 67)) | (1 << (Cobol85Parser.COMMITMENT - 67)) | (1 << (Cobol85Parser.CONTROL_POINT - 67)) | (1 << (Cobol85Parser.CONVENTION - 67)) | (1 << (Cobol85Parser.CRUNCH - 67)) | (1 << (Cobol85Parser.CURSOR - 67)) | (1 << (Cobol85Parser.DATE - 67)) | (1 << (Cobol85Parser.DAY - 67)) | (1 << (Cobol85Parser.DAY_OF_WEEK - 67)) | (1 << (Cobol85Parser.DBCLOB - 67)) | (1 << (Cobol85Parser.DEBUG_CONTENTS - 67)) | (1 << (Cobol85Parser.DEBUG_ITEM - 67)) | (1 << (Cobol85Parser.DEBUG_LINE - 67)) | (1 << (Cobol85Parser.DEBUG_NAME - 67)) | (1 << (Cobol85Parser.DEBUG_SUB_1 - 67)) | (1 << (Cobol85Parser.DEBUG_SUB_2 - 67)) | (1 << (Cobol85Parser.DEBUG_SUB_3 - 67)))) != 0) or ((((_la - 131)) & ~0x3f) == 0 and ((1 << (_la - 131)) & ((1 << (Cobol85Parser.DEFAULT - 131)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 131)) | (1 << (Cobol85Parser.DEFINITION - 131)) | (1 << (Cobol85Parser.DFHRESP - 131)) | (1 << (Cobol85Parser.DFHVALUE - 131)) | (1 << (Cobol85Parser.DISK - 131)) | (1 << (Cobol85Parser.DONTCARE - 131)) | (1 << (Cobol85Parser.DOUBLE - 131)) | (1 << (Cobol85Parser.EBCDIC - 131)) | (1 << (Cobol85Parser.EMPTY_CHECK - 131)) | (1 << (Cobol85Parser.ENTER - 131)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 131)) | (1 << (Cobol85Parser.ERASE - 131)) | (1 << (Cobol85Parser.EOL - 131)) | (1 << (Cobol85Parser.EOS - 131)))) != 0) or ((((_la - 195)) & ~0x3f) == 0 and ((1 << (_la - 195)) & ((1 << (Cobol85Parser.ESCAPE - 195)) | (1 << (Cobol85Parser.EVENT - 195)) | (1 << (Cobol85Parser.EXCLUSIVE - 195)) | (1 << (Cobol85Parser.EXPORT - 195)) | (1 << (Cobol85Parser.EXTENDED - 195)) | (1 << (Cobol85Parser.FOREGROUND_COLOR - 195)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 195)) | (1 << (Cobol85Parser.FULL - 195)) | (1 << (Cobol85Parser.FUNCTION - 195)) | (1 << (Cobol85Parser.FUNCTIONNAME - 195)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 195)) | (1 << (Cobol85Parser.GRID - 195)) | (1 << (Cobol85Parser.HIGHLIGHT - 195)) | (1 << (Cobol85Parser.IMPLICIT - 195)) | (1 << (Cobol85Parser.IMPORT - 195)) | (1 << (Cobol85Parser.INTEGER - 195)))) != 0) or ((((_la - 262)) & ~0x3f) == 0 and ((1 << (_la - 262)) & ((1 << (Cobol85Parser.KEPT - 262)) | (1 << (Cobol85Parser.KEYBOARD - 262)) | (1 << (Cobol85Parser.LANGUAGE - 262)) | (1 << (Cobol85Parser.LB - 262)) | (1 << (Cobol85Parser.LD - 262)) | (1 << (Cobol85Parser.LEFTLINE - 262)) | (1 << (Cobol85Parser.LENGTH - 262)) | (1 << (Cobol85Parser.LENGTH_CHECK - 262)) | (1 << (Cobol85Parser.LIBACCESS - 262)) | (1 << (Cobol85Parser.LIBPARAMETER - 262)) | (1 << (Cobol85Parser.LIBRARY - 262)) | (1 << (Cobol85Parser.LINAGE_COUNTER - 262)) | (1 << (Cobol85Parser.LINE_COUNTER - 262)) | (1 << (Cobol85Parser.LIST - 262)) | (1 << (Cobol85Parser.LOCAL - 262)) | (1 << (Cobol85Parser.LONG_DATE - 262)) | (1 << (Cobol85Parser.LONG_TIME - 262)) | (1 << (Cobol85Parser.LOWER - 262)) | (1 << (Cobol85Parser.LOWLIGHT - 262)) | (1 << (Cobol85Parser.MMDDYYYY - 262)) | (1 << (Cobol85Parser.NAMED - 262)) | (1 << (Cobol85Parser.NATIONAL - 262)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 262)) | (1 << (Cobol85Parser.NETWORK - 262)) | (1 << (Cobol85Parser.NO_ECHO - 262)) | (1 << (Cobol85Parser.NUMERIC_DATE - 262)) | (1 << (Cobol85Parser.NUMERIC_TIME - 262)))) != 0) or ((((_la - 326)) & ~0x3f) == 0 and ((1 << (_la - 326)) & ((1 << (Cobol85Parser.ODT - 326)) | (1 << (Cobol85Parser.ORDERLY - 326)) | (1 << (Cobol85Parser.OVERLINE - 326)) | (1 << (Cobol85Parser.OWN - 326)) | (1 << (Cobol85Parser.PAGE_COUNTER - 326)) | (1 << (Cobol85Parser.PASSWORD - 326)) | (1 << (Cobol85Parser.PORT - 326)) | (1 << (Cobol85Parser.PRINTER - 326)) | (1 << (Cobol85Parser.PRIVATE - 326)) | (1 << (Cobol85Parser.PROCESS - 326)) | (1 << (Cobol85Parser.PROGRAM - 326)) | (1 << (Cobol85Parser.PROMPT - 326)) | (1 << (Cobol85Parser.READER - 326)) | (1 << (Cobol85Parser.REMOTE - 326)) | (1 << (Cobol85Parser.REAL - 326)) | (1 << (Cobol85Parser.RECEIVED - 326)) | (1 << (Cobol85Parser.RECURSIVE - 326)) | (1 << (Cobol85Parser.REF - 326)))) != 0) or ((((_la - 395)) & ~0x3f) == 0 and ((1 << (_la - 395)) & ((1 << (Cobol85Parser.REMOVE - 395)) | (1 << (Cobol85Parser.REQUIRED - 395)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 395)) | (1 << (Cobol85Parser.RETURN_CODE - 395)) | (1 << (Cobol85Parser.SAVE - 395)) | (1 << (Cobol85Parser.SECURE - 395)) | (1 << (Cobol85Parser.SHARED - 395)) | (1 << (Cobol85Parser.SHAREDBYALL - 395)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 395)) | (1 << (Cobol85Parser.SHARING - 395)) | (1 << (Cobol85Parser.SHIFT_IN - 395)) | (1 << (Cobol85Parser.SHIFT_OUT - 395)) | (1 << (Cobol85Parser.SHORT_DATE - 395)) | (1 << (Cobol85Parser.SORT_CONTROL - 395)) | (1 << (Cobol85Parser.SORT_CORE_SIZE - 395)) | (1 << (Cobol85Parser.SORT_FILE_SIZE - 395)) | (1 << (Cobol85Parser.SORT_MESSAGE - 395)) | (1 << (Cobol85Parser.SORT_MODE_SIZE - 395)) | (1 << (Cobol85Parser.SORT_RETURN - 395)) | (1 << (Cobol85Parser.SQL - 395)))) != 0) or ((((_la - 471)) & ~0x3f) == 0 and ((1 << (_la - 471)) & ((1 << (Cobol85Parser.SYMBOL - 471)) | (1 << (Cobol85Parser.TALLY - 471)) | (1 << (Cobol85Parser.TASK - 471)) | (1 << (Cobol85Parser.THREAD - 471)) | (1 << (Cobol85Parser.THREAD_LOCAL - 471)) | (1 << (Cobol85Parser.TIME - 471)) | (1 << (Cobol85Parser.TIMER - 471)) | (1 << (Cobol85Parser.TODAYS_DATE - 471)) | (1 << (Cobol85Parser.TODAYS_NAME - 471)) | (1 << (Cobol85Parser.TRUNCATED - 471)) | (1 << (Cobol85Parser.TYPEDEF - 471)) | (1 << (Cobol85Parser.UNDERLINE - 471)) | (1 << (Cobol85Parser.VIRTUAL - 471)) | (1 << (Cobol85Parser.WAIT - 471)) | (1 << (Cobol85Parser.WHEN_COMPILED - 471)) | (1 << (Cobol85Parser.YEAR - 471)) | (1 << (Cobol85Parser.YYYYMMDD - 471)) | (1 << (Cobol85Parser.YYYYDDD - 471)) | (1 << (Cobol85Parser.ZERO_FILL - 471)))) != 0) or ((((_la - 557)) & ~0x3f) == 0 and ((1 << (_la - 557)) & ((1 << (Cobol85Parser.LEVEL_NUMBER_66 - 557)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 557)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 557)) | (1 << (Cobol85Parser.INTEGERLITERAL - 557)) | (1 << (Cobol85Parser.IDENTIFIER - 557)))) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AddToGivingStatementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.AddToGivingStatementContext, self).__init__(parent, invokingState)
            self.parser = parser

        def GIVING(self):
            return self.getToken(Cobol85Parser.GIVING, 0)

        def addFrom(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.AddFromContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.AddFromContext,i)


        def TO(self):
            return self.getToken(Cobol85Parser.TO, 0)

        def addGiving(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.AddGivingContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.AddGivingContext,i)


        def addToGiving(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.AddToGivingContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.AddToGivingContext,i)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_addToGivingStatement

        def enterRule(self, listener):
            if hasattr(listener, "enterAddToGivingStatement"):
                listener.enterAddToGivingStatement(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitAddToGivingStatement"):
                listener.exitAddToGivingStatement(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitAddToGivingStatement"):
                return visitor.visitAddToGivingStatement(self)
            else:
                return visitor.visitChildren(self)




    def addToGivingStatement(self):

        localctx = Cobol85Parser.AddToGivingStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 552, self.RULE_addToGivingStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3744 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 3743
                self.addFrom()
                self.state = 3746 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.ADDRESS) | (1 << Cobol85Parser.ALL) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE) | (1 << Cobol85Parser.AUTO) | (1 << Cobol85Parser.AUTO_SKIP) | (1 << Cobol85Parser.BACKGROUND_COLOR) | (1 << Cobol85Parser.BACKGROUND_COLOUR) | (1 << Cobol85Parser.BEEP) | (1 << Cobol85Parser.BELL) | (1 << Cobol85Parser.BINARY) | (1 << Cobol85Parser.BIT) | (1 << Cobol85Parser.BLINK) | (1 << Cobol85Parser.BLOB) | (1 << Cobol85Parser.BOUNDS) | (1 << Cobol85Parser.CAPABLE) | (1 << Cobol85Parser.CCSVERSION) | (1 << Cobol85Parser.CHANGED) | (1 << Cobol85Parser.CHANNEL))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (Cobol85Parser.CLOB - 67)) | (1 << (Cobol85Parser.CLOSE_DISPOSITION - 67)) | (1 << (Cobol85Parser.COBOL - 67)) | (1 << (Cobol85Parser.COMMITMENT - 67)) | (1 << (Cobol85Parser.CONTROL_POINT - 67)) | (1 << (Cobol85Parser.CONVENTION - 67)) | (1 << (Cobol85Parser.CRUNCH - 67)) | (1 << (Cobol85Parser.CURSOR - 67)) | (1 << (Cobol85Parser.DATE - 67)) | (1 << (Cobol85Parser.DAY - 67)) | (1 << (Cobol85Parser.DAY_OF_WEEK - 67)) | (1 << (Cobol85Parser.DBCLOB - 67)) | (1 << (Cobol85Parser.DEBUG_CONTENTS - 67)) | (1 << (Cobol85Parser.DEBUG_ITEM - 67)) | (1 << (Cobol85Parser.DEBUG_LINE - 67)) | (1 << (Cobol85Parser.DEBUG_NAME - 67)) | (1 << (Cobol85Parser.DEBUG_SUB_1 - 67)) | (1 << (Cobol85Parser.DEBUG_SUB_2 - 67)) | (1 << (Cobol85Parser.DEBUG_SUB_3 - 67)))) != 0) or ((((_la - 131)) & ~0x3f) == 0 and ((1 << (_la - 131)) & ((1 << (Cobol85Parser.DEFAULT - 131)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 131)) | (1 << (Cobol85Parser.DEFINITION - 131)) | (1 << (Cobol85Parser.DFHRESP - 131)) | (1 << (Cobol85Parser.DFHVALUE - 131)) | (1 << (Cobol85Parser.DISK - 131)) | (1 << (Cobol85Parser.DONTCARE - 131)) | (1 << (Cobol85Parser.DOUBLE - 131)) | (1 << (Cobol85Parser.EBCDIC - 131)) | (1 << (Cobol85Parser.EMPTY_CHECK - 131)) | (1 << (Cobol85Parser.ENTER - 131)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 131)) | (1 << (Cobol85Parser.ERASE - 131)) | (1 << (Cobol85Parser.EOL - 131)) | (1 << (Cobol85Parser.EOS - 131)))) != 0) or ((((_la - 195)) & ~0x3f) == 0 and ((1 << (_la - 195)) & ((1 << (Cobol85Parser.ESCAPE - 195)) | (1 << (Cobol85Parser.EVENT - 195)) | (1 << (Cobol85Parser.EXCLUSIVE - 195)) | (1 << (Cobol85Parser.EXPORT - 195)) | (1 << (Cobol85Parser.EXTENDED - 195)) | (1 << (Cobol85Parser.FALSE - 195)) | (1 << (Cobol85Parser.FOREGROUND_COLOR - 195)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 195)) | (1 << (Cobol85Parser.FULL - 195)) | (1 << (Cobol85Parser.FUNCTION - 195)) | (1 << (Cobol85Parser.FUNCTIONNAME - 195)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 195)) | (1 << (Cobol85Parser.GRID - 195)) | (1 << (Cobol85Parser.HIGHLIGHT - 195)) | (1 << (Cobol85Parser.HIGH_VALUE - 195)) | (1 << (Cobol85Parser.HIGH_VALUES - 195)) | (1 << (Cobol85Parser.IMPLICIT - 195)) | (1 << (Cobol85Parser.IMPORT - 195)) | (1 << (Cobol85Parser.INTEGER - 195)))) != 0) or ((((_la - 262)) & ~0x3f) == 0 and ((1 << (_la - 262)) & ((1 << (Cobol85Parser.KEPT - 262)) | (1 << (Cobol85Parser.KEYBOARD - 262)) | (1 << (Cobol85Parser.LANGUAGE - 262)) | (1 << (Cobol85Parser.LB - 262)) | (1 << (Cobol85Parser.LD - 262)) | (1 << (Cobol85Parser.LEFTLINE - 262)) | (1 << (Cobol85Parser.LENGTH - 262)) | (1 << (Cobol85Parser.LENGTH_CHECK - 262)) | (1 << (Cobol85Parser.LIBACCESS - 262)) | (1 << (Cobol85Parser.LIBPARAMETER - 262)) | (1 << (Cobol85Parser.LIBRARY - 262)) | (1 << (Cobol85Parser.LINAGE_COUNTER - 262)) | (1 << (Cobol85Parser.LINE_COUNTER - 262)) | (1 << (Cobol85Parser.LIST - 262)) | (1 << (Cobol85Parser.LOCAL - 262)) | (1 << (Cobol85Parser.LONG_DATE - 262)) | (1 << (Cobol85Parser.LONG_TIME - 262)) | (1 << (Cobol85Parser.LOWER - 262)) | (1 << (Cobol85Parser.LOWLIGHT - 262)) | (1 << (Cobol85Parser.LOW_VALUE - 262)) | (1 << (Cobol85Parser.LOW_VALUES - 262)) | (1 << (Cobol85Parser.MMDDYYYY - 262)) | (1 << (Cobol85Parser.NAMED - 262)) | (1 << (Cobol85Parser.NATIONAL - 262)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 262)) | (1 << (Cobol85Parser.NETWORK - 262)) | (1 << (Cobol85Parser.NO_ECHO - 262)) | (1 << (Cobol85Parser.NULL - 262)) | (1 << (Cobol85Parser.NULLS - 262)) | (1 << (Cobol85Parser.NUMERIC_DATE - 262)) | (1 << (Cobol85Parser.NUMERIC_TIME - 262)))) != 0) or ((((_la - 326)) & ~0x3f) == 0 and ((1 << (_la - 326)) & ((1 << (Cobol85Parser.ODT - 326)) | (1 << (Cobol85Parser.ORDERLY - 326)) | (1 << (Cobol85Parser.OVERLINE - 326)) | (1 << (Cobol85Parser.OWN - 326)) | (1 << (Cobol85Parser.PAGE_COUNTER - 326)) | (1 << (Cobol85Parser.PASSWORD - 326)) | (1 << (Cobol85Parser.PORT - 326)) | (1 << (Cobol85Parser.PRINTER - 326)) | (1 << (Cobol85Parser.PRIVATE - 326)) | (1 << (Cobol85Parser.PROCESS - 326)) | (1 << (Cobol85Parser.PROGRAM - 326)) | (1 << (Cobol85Parser.PROMPT - 326)) | (1 << (Cobol85Parser.QUOTE - 326)) | (1 << (Cobol85Parser.QUOTES - 326)) | (1 << (Cobol85Parser.READER - 326)) | (1 << (Cobol85Parser.REMOTE - 326)) | (1 << (Cobol85Parser.REAL - 326)) | (1 << (Cobol85Parser.RECEIVED - 326)) | (1 << (Cobol85Parser.RECURSIVE - 326)) | (1 << (Cobol85Parser.REF - 326)))) != 0) or ((((_la - 395)) & ~0x3f) == 0 and ((1 << (_la - 395)) & ((1 << (Cobol85Parser.REMOVE - 395)) | (1 << (Cobol85Parser.REQUIRED - 395)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 395)) | (1 << (Cobol85Parser.RETURN_CODE - 395)) | (1 << (Cobol85Parser.SAVE - 395)) | (1 << (Cobol85Parser.SECURE - 395)) | (1 << (Cobol85Parser.SHARED - 395)) | (1 << (Cobol85Parser.SHAREDBYALL - 395)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 395)) | (1 << (Cobol85Parser.SHARING - 395)) | (1 << (Cobol85Parser.SHIFT_IN - 395)) | (1 << (Cobol85Parser.SHIFT_OUT - 395)) | (1 << (Cobol85Parser.SHORT_DATE - 395)) | (1 << (Cobol85Parser.SORT_CONTROL - 395)) | (1 << (Cobol85Parser.SORT_CORE_SIZE - 395)) | (1 << (Cobol85Parser.SORT_FILE_SIZE - 395)) | (1 << (Cobol85Parser.SORT_MESSAGE - 395)) | (1 << (Cobol85Parser.SORT_MODE_SIZE - 395)) | (1 << (Cobol85Parser.SORT_RETURN - 395)) | (1 << (Cobol85Parser.SPACE - 395)) | (1 << (Cobol85Parser.SPACES - 395)) | (1 << (Cobol85Parser.SQL - 395)))) != 0) or ((((_la - 471)) & ~0x3f) == 0 and ((1 << (_la - 471)) & ((1 << (Cobol85Parser.SYMBOL - 471)) | (1 << (Cobol85Parser.TALLY - 471)) | (1 << (Cobol85Parser.TASK - 471)) | (1 << (Cobol85Parser.THREAD - 471)) | (1 << (Cobol85Parser.THREAD_LOCAL - 471)) | (1 << (Cobol85Parser.TIME - 471)) | (1 << (Cobol85Parser.TIMER - 471)) | (1 << (Cobol85Parser.TODAYS_DATE - 471)) | (1 << (Cobol85Parser.TODAYS_NAME - 471)) | (1 << (Cobol85Parser.TRUE - 471)) | (1 << (Cobol85Parser.TRUNCATED - 471)) | (1 << (Cobol85Parser.TYPEDEF - 471)) | (1 << (Cobol85Parser.UNDERLINE - 471)) | (1 << (Cobol85Parser.VIRTUAL - 471)) | (1 << (Cobol85Parser.WAIT - 471)) | (1 << (Cobol85Parser.WHEN_COMPILED - 471)) | (1 << (Cobol85Parser.YEAR - 471)) | (1 << (Cobol85Parser.YYYYMMDD - 471)) | (1 << (Cobol85Parser.YYYYDDD - 471)) | (1 << (Cobol85Parser.ZERO - 471)) | (1 << (Cobol85Parser.ZERO_FILL - 471)) | (1 << (Cobol85Parser.ZEROS - 471)) | (1 << (Cobol85Parser.ZEROES - 471)))) != 0) or ((((_la - 556)) & ~0x3f) == 0 and ((1 << (_la - 556)) & ((1 << (Cobol85Parser.NONNUMERICLITERAL - 556)) | (1 << (Cobol85Parser.LEVEL_NUMBER_66 - 556)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 556)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 556)) | (1 << (Cobol85Parser.INTEGERLITERAL - 556)) | (1 << (Cobol85Parser.NUMERICLITERAL - 556)) | (1 << (Cobol85Parser.IDENTIFIER - 556)))) != 0)):
                    break

            self.state = 3754
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.TO:
                self.state = 3748
                self.match(Cobol85Parser.TO)
                self.state = 3750 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 3749
                    self.addToGiving()
                    self.state = 3752 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.ADDRESS) | (1 << Cobol85Parser.ALL) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE) | (1 << Cobol85Parser.AUTO) | (1 << Cobol85Parser.AUTO_SKIP) | (1 << Cobol85Parser.BACKGROUND_COLOR) | (1 << Cobol85Parser.BACKGROUND_COLOUR) | (1 << Cobol85Parser.BEEP) | (1 << Cobol85Parser.BELL) | (1 << Cobol85Parser.BINARY) | (1 << Cobol85Parser.BIT) | (1 << Cobol85Parser.BLINK) | (1 << Cobol85Parser.BLOB) | (1 << Cobol85Parser.BOUNDS) | (1 << Cobol85Parser.CAPABLE) | (1 << Cobol85Parser.CCSVERSION) | (1 << Cobol85Parser.CHANGED) | (1 << Cobol85Parser.CHANNEL))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (Cobol85Parser.CLOB - 67)) | (1 << (Cobol85Parser.CLOSE_DISPOSITION - 67)) | (1 << (Cobol85Parser.COBOL - 67)) | (1 << (Cobol85Parser.COMMITMENT - 67)) | (1 << (Cobol85Parser.CONTROL_POINT - 67)) | (1 << (Cobol85Parser.CONVENTION - 67)) | (1 << (Cobol85Parser.CRUNCH - 67)) | (1 << (Cobol85Parser.CURSOR - 67)) | (1 << (Cobol85Parser.DATE - 67)) | (1 << (Cobol85Parser.DAY - 67)) | (1 << (Cobol85Parser.DAY_OF_WEEK - 67)) | (1 << (Cobol85Parser.DBCLOB - 67)) | (1 << (Cobol85Parser.DEBUG_CONTENTS - 67)) | (1 << (Cobol85Parser.DEBUG_ITEM - 67)) | (1 << (Cobol85Parser.DEBUG_LINE - 67)) | (1 << (Cobol85Parser.DEBUG_NAME - 67)) | (1 << (Cobol85Parser.DEBUG_SUB_1 - 67)) | (1 << (Cobol85Parser.DEBUG_SUB_2 - 67)) | (1 << (Cobol85Parser.DEBUG_SUB_3 - 67)))) != 0) or ((((_la - 131)) & ~0x3f) == 0 and ((1 << (_la - 131)) & ((1 << (Cobol85Parser.DEFAULT - 131)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 131)) | (1 << (Cobol85Parser.DEFINITION - 131)) | (1 << (Cobol85Parser.DFHRESP - 131)) | (1 << (Cobol85Parser.DFHVALUE - 131)) | (1 << (Cobol85Parser.DISK - 131)) | (1 << (Cobol85Parser.DONTCARE - 131)) | (1 << (Cobol85Parser.DOUBLE - 131)) | (1 << (Cobol85Parser.EBCDIC - 131)) | (1 << (Cobol85Parser.EMPTY_CHECK - 131)) | (1 << (Cobol85Parser.ENTER - 131)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 131)) | (1 << (Cobol85Parser.ERASE - 131)) | (1 << (Cobol85Parser.EOL - 131)) | (1 << (Cobol85Parser.EOS - 131)))) != 0) or ((((_la - 195)) & ~0x3f) == 0 and ((1 << (_la - 195)) & ((1 << (Cobol85Parser.ESCAPE - 195)) | (1 << (Cobol85Parser.EVENT - 195)) | (1 << (Cobol85Parser.EXCLUSIVE - 195)) | (1 << (Cobol85Parser.EXPORT - 195)) | (1 << (Cobol85Parser.EXTENDED - 195)) | (1 << (Cobol85Parser.FALSE - 195)) | (1 << (Cobol85Parser.FOREGROUND_COLOR - 195)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 195)) | (1 << (Cobol85Parser.FULL - 195)) | (1 << (Cobol85Parser.FUNCTION - 195)) | (1 << (Cobol85Parser.FUNCTIONNAME - 195)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 195)) | (1 << (Cobol85Parser.GRID - 195)) | (1 << (Cobol85Parser.HIGHLIGHT - 195)) | (1 << (Cobol85Parser.HIGH_VALUE - 195)) | (1 << (Cobol85Parser.HIGH_VALUES - 195)) | (1 << (Cobol85Parser.IMPLICIT - 195)) | (1 << (Cobol85Parser.IMPORT - 195)) | (1 << (Cobol85Parser.INTEGER - 195)))) != 0) or ((((_la - 262)) & ~0x3f) == 0 and ((1 << (_la - 262)) & ((1 << (Cobol85Parser.KEPT - 262)) | (1 << (Cobol85Parser.KEYBOARD - 262)) | (1 << (Cobol85Parser.LANGUAGE - 262)) | (1 << (Cobol85Parser.LB - 262)) | (1 << (Cobol85Parser.LD - 262)) | (1 << (Cobol85Parser.LEFTLINE - 262)) | (1 << (Cobol85Parser.LENGTH - 262)) | (1 << (Cobol85Parser.LENGTH_CHECK - 262)) | (1 << (Cobol85Parser.LIBACCESS - 262)) | (1 << (Cobol85Parser.LIBPARAMETER - 262)) | (1 << (Cobol85Parser.LIBRARY - 262)) | (1 << (Cobol85Parser.LINAGE_COUNTER - 262)) | (1 << (Cobol85Parser.LINE_COUNTER - 262)) | (1 << (Cobol85Parser.LIST - 262)) | (1 << (Cobol85Parser.LOCAL - 262)) | (1 << (Cobol85Parser.LONG_DATE - 262)) | (1 << (Cobol85Parser.LONG_TIME - 262)) | (1 << (Cobol85Parser.LOWER - 262)) | (1 << (Cobol85Parser.LOWLIGHT - 262)) | (1 << (Cobol85Parser.LOW_VALUE - 262)) | (1 << (Cobol85Parser.LOW_VALUES - 262)) | (1 << (Cobol85Parser.MMDDYYYY - 262)) | (1 << (Cobol85Parser.NAMED - 262)) | (1 << (Cobol85Parser.NATIONAL - 262)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 262)) | (1 << (Cobol85Parser.NETWORK - 262)) | (1 << (Cobol85Parser.NO_ECHO - 262)) | (1 << (Cobol85Parser.NULL - 262)) | (1 << (Cobol85Parser.NULLS - 262)) | (1 << (Cobol85Parser.NUMERIC_DATE - 262)) | (1 << (Cobol85Parser.NUMERIC_TIME - 262)))) != 0) or ((((_la - 326)) & ~0x3f) == 0 and ((1 << (_la - 326)) & ((1 << (Cobol85Parser.ODT - 326)) | (1 << (Cobol85Parser.ORDERLY - 326)) | (1 << (Cobol85Parser.OVERLINE - 326)) | (1 << (Cobol85Parser.OWN - 326)) | (1 << (Cobol85Parser.PAGE_COUNTER - 326)) | (1 << (Cobol85Parser.PASSWORD - 326)) | (1 << (Cobol85Parser.PORT - 326)) | (1 << (Cobol85Parser.PRINTER - 326)) | (1 << (Cobol85Parser.PRIVATE - 326)) | (1 << (Cobol85Parser.PROCESS - 326)) | (1 << (Cobol85Parser.PROGRAM - 326)) | (1 << (Cobol85Parser.PROMPT - 326)) | (1 << (Cobol85Parser.QUOTE - 326)) | (1 << (Cobol85Parser.QUOTES - 326)) | (1 << (Cobol85Parser.READER - 326)) | (1 << (Cobol85Parser.REMOTE - 326)) | (1 << (Cobol85Parser.REAL - 326)) | (1 << (Cobol85Parser.RECEIVED - 326)) | (1 << (Cobol85Parser.RECURSIVE - 326)) | (1 << (Cobol85Parser.REF - 326)))) != 0) or ((((_la - 395)) & ~0x3f) == 0 and ((1 << (_la - 395)) & ((1 << (Cobol85Parser.REMOVE - 395)) | (1 << (Cobol85Parser.REQUIRED - 395)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 395)) | (1 << (Cobol85Parser.RETURN_CODE - 395)) | (1 << (Cobol85Parser.SAVE - 395)) | (1 << (Cobol85Parser.SECURE - 395)) | (1 << (Cobol85Parser.SHARED - 395)) | (1 << (Cobol85Parser.SHAREDBYALL - 395)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 395)) | (1 << (Cobol85Parser.SHARING - 395)) | (1 << (Cobol85Parser.SHIFT_IN - 395)) | (1 << (Cobol85Parser.SHIFT_OUT - 395)) | (1 << (Cobol85Parser.SHORT_DATE - 395)) | (1 << (Cobol85Parser.SORT_CONTROL - 395)) | (1 << (Cobol85Parser.SORT_CORE_SIZE - 395)) | (1 << (Cobol85Parser.SORT_FILE_SIZE - 395)) | (1 << (Cobol85Parser.SORT_MESSAGE - 395)) | (1 << (Cobol85Parser.SORT_MODE_SIZE - 395)) | (1 << (Cobol85Parser.SORT_RETURN - 395)) | (1 << (Cobol85Parser.SPACE - 395)) | (1 << (Cobol85Parser.SPACES - 395)) | (1 << (Cobol85Parser.SQL - 395)))) != 0) or ((((_la - 471)) & ~0x3f) == 0 and ((1 << (_la - 471)) & ((1 << (Cobol85Parser.SYMBOL - 471)) | (1 << (Cobol85Parser.TALLY - 471)) | (1 << (Cobol85Parser.TASK - 471)) | (1 << (Cobol85Parser.THREAD - 471)) | (1 << (Cobol85Parser.THREAD_LOCAL - 471)) | (1 << (Cobol85Parser.TIME - 471)) | (1 << (Cobol85Parser.TIMER - 471)) | (1 << (Cobol85Parser.TODAYS_DATE - 471)) | (1 << (Cobol85Parser.TODAYS_NAME - 471)) | (1 << (Cobol85Parser.TRUE - 471)) | (1 << (Cobol85Parser.TRUNCATED - 471)) | (1 << (Cobol85Parser.TYPEDEF - 471)) | (1 << (Cobol85Parser.UNDERLINE - 471)) | (1 << (Cobol85Parser.VIRTUAL - 471)) | (1 << (Cobol85Parser.WAIT - 471)) | (1 << (Cobol85Parser.WHEN_COMPILED - 471)) | (1 << (Cobol85Parser.YEAR - 471)) | (1 << (Cobol85Parser.YYYYMMDD - 471)) | (1 << (Cobol85Parser.YYYYDDD - 471)) | (1 << (Cobol85Parser.ZERO - 471)) | (1 << (Cobol85Parser.ZERO_FILL - 471)) | (1 << (Cobol85Parser.ZEROS - 471)) | (1 << (Cobol85Parser.ZEROES - 471)))) != 0) or ((((_la - 556)) & ~0x3f) == 0 and ((1 << (_la - 556)) & ((1 << (Cobol85Parser.NONNUMERICLITERAL - 556)) | (1 << (Cobol85Parser.LEVEL_NUMBER_66 - 556)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 556)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 556)) | (1 << (Cobol85Parser.INTEGERLITERAL - 556)) | (1 << (Cobol85Parser.NUMERICLITERAL - 556)) | (1 << (Cobol85Parser.IDENTIFIER - 556)))) != 0)):
                        break



            self.state = 3756
            self.match(Cobol85Parser.GIVING)
            self.state = 3758 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 3757
                self.addGiving()
                self.state = 3760 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.ADDRESS) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE) | (1 << Cobol85Parser.AUTO) | (1 << Cobol85Parser.AUTO_SKIP) | (1 << Cobol85Parser.BACKGROUND_COLOR) | (1 << Cobol85Parser.BACKGROUND_COLOUR) | (1 << Cobol85Parser.BEEP) | (1 << Cobol85Parser.BELL) | (1 << Cobol85Parser.BINARY) | (1 << Cobol85Parser.BIT) | (1 << Cobol85Parser.BLINK) | (1 << Cobol85Parser.BLOB) | (1 << Cobol85Parser.BOUNDS) | (1 << Cobol85Parser.CAPABLE) | (1 << Cobol85Parser.CCSVERSION) | (1 << Cobol85Parser.CHANGED) | (1 << Cobol85Parser.CHANNEL))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (Cobol85Parser.CLOB - 67)) | (1 << (Cobol85Parser.CLOSE_DISPOSITION - 67)) | (1 << (Cobol85Parser.COBOL - 67)) | (1 << (Cobol85Parser.COMMITMENT - 67)) | (1 << (Cobol85Parser.CONTROL_POINT - 67)) | (1 << (Cobol85Parser.CONVENTION - 67)) | (1 << (Cobol85Parser.CRUNCH - 67)) | (1 << (Cobol85Parser.CURSOR - 67)) | (1 << (Cobol85Parser.DATE - 67)) | (1 << (Cobol85Parser.DAY - 67)) | (1 << (Cobol85Parser.DAY_OF_WEEK - 67)) | (1 << (Cobol85Parser.DBCLOB - 67)) | (1 << (Cobol85Parser.DEBUG_CONTENTS - 67)) | (1 << (Cobol85Parser.DEBUG_ITEM - 67)) | (1 << (Cobol85Parser.DEBUG_LINE - 67)) | (1 << (Cobol85Parser.DEBUG_NAME - 67)) | (1 << (Cobol85Parser.DEBUG_SUB_1 - 67)) | (1 << (Cobol85Parser.DEBUG_SUB_2 - 67)) | (1 << (Cobol85Parser.DEBUG_SUB_3 - 67)))) != 0) or ((((_la - 131)) & ~0x3f) == 0 and ((1 << (_la - 131)) & ((1 << (Cobol85Parser.DEFAULT - 131)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 131)) | (1 << (Cobol85Parser.DEFINITION - 131)) | (1 << (Cobol85Parser.DFHRESP - 131)) | (1 << (Cobol85Parser.DFHVALUE - 131)) | (1 << (Cobol85Parser.DISK - 131)) | (1 << (Cobol85Parser.DONTCARE - 131)) | (1 << (Cobol85Parser.DOUBLE - 131)) | (1 << (Cobol85Parser.EBCDIC - 131)) | (1 << (Cobol85Parser.EMPTY_CHECK - 131)) | (1 << (Cobol85Parser.ENTER - 131)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 131)) | (1 << (Cobol85Parser.ERASE - 131)) | (1 << (Cobol85Parser.EOL - 131)) | (1 << (Cobol85Parser.EOS - 131)))) != 0) or ((((_la - 195)) & ~0x3f) == 0 and ((1 << (_la - 195)) & ((1 << (Cobol85Parser.ESCAPE - 195)) | (1 << (Cobol85Parser.EVENT - 195)) | (1 << (Cobol85Parser.EXCLUSIVE - 195)) | (1 << (Cobol85Parser.EXPORT - 195)) | (1 << (Cobol85Parser.EXTENDED - 195)) | (1 << (Cobol85Parser.FOREGROUND_COLOR - 195)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 195)) | (1 << (Cobol85Parser.FULL - 195)) | (1 << (Cobol85Parser.FUNCTION - 195)) | (1 << (Cobol85Parser.FUNCTIONNAME - 195)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 195)) | (1 << (Cobol85Parser.GRID - 195)) | (1 << (Cobol85Parser.HIGHLIGHT - 195)) | (1 << (Cobol85Parser.IMPLICIT - 195)) | (1 << (Cobol85Parser.IMPORT - 195)) | (1 << (Cobol85Parser.INTEGER - 195)))) != 0) or ((((_la - 262)) & ~0x3f) == 0 and ((1 << (_la - 262)) & ((1 << (Cobol85Parser.KEPT - 262)) | (1 << (Cobol85Parser.KEYBOARD - 262)) | (1 << (Cobol85Parser.LANGUAGE - 262)) | (1 << (Cobol85Parser.LB - 262)) | (1 << (Cobol85Parser.LD - 262)) | (1 << (Cobol85Parser.LEFTLINE - 262)) | (1 << (Cobol85Parser.LENGTH - 262)) | (1 << (Cobol85Parser.LENGTH_CHECK - 262)) | (1 << (Cobol85Parser.LIBACCESS - 262)) | (1 << (Cobol85Parser.LIBPARAMETER - 262)) | (1 << (Cobol85Parser.LIBRARY - 262)) | (1 << (Cobol85Parser.LINAGE_COUNTER - 262)) | (1 << (Cobol85Parser.LINE_COUNTER - 262)) | (1 << (Cobol85Parser.LIST - 262)) | (1 << (Cobol85Parser.LOCAL - 262)) | (1 << (Cobol85Parser.LONG_DATE - 262)) | (1 << (Cobol85Parser.LONG_TIME - 262)) | (1 << (Cobol85Parser.LOWER - 262)) | (1 << (Cobol85Parser.LOWLIGHT - 262)) | (1 << (Cobol85Parser.MMDDYYYY - 262)) | (1 << (Cobol85Parser.NAMED - 262)) | (1 << (Cobol85Parser.NATIONAL - 262)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 262)) | (1 << (Cobol85Parser.NETWORK - 262)) | (1 << (Cobol85Parser.NO_ECHO - 262)) | (1 << (Cobol85Parser.NUMERIC_DATE - 262)) | (1 << (Cobol85Parser.NUMERIC_TIME - 262)))) != 0) or ((((_la - 326)) & ~0x3f) == 0 and ((1 << (_la - 326)) & ((1 << (Cobol85Parser.ODT - 326)) | (1 << (Cobol85Parser.ORDERLY - 326)) | (1 << (Cobol85Parser.OVERLINE - 326)) | (1 << (Cobol85Parser.OWN - 326)) | (1 << (Cobol85Parser.PAGE_COUNTER - 326)) | (1 << (Cobol85Parser.PASSWORD - 326)) | (1 << (Cobol85Parser.PORT - 326)) | (1 << (Cobol85Parser.PRINTER - 326)) | (1 << (Cobol85Parser.PRIVATE - 326)) | (1 << (Cobol85Parser.PROCESS - 326)) | (1 << (Cobol85Parser.PROGRAM - 326)) | (1 << (Cobol85Parser.PROMPT - 326)) | (1 << (Cobol85Parser.READER - 326)) | (1 << (Cobol85Parser.REMOTE - 326)) | (1 << (Cobol85Parser.REAL - 326)) | (1 << (Cobol85Parser.RECEIVED - 326)) | (1 << (Cobol85Parser.RECURSIVE - 326)) | (1 << (Cobol85Parser.REF - 326)))) != 0) or ((((_la - 395)) & ~0x3f) == 0 and ((1 << (_la - 395)) & ((1 << (Cobol85Parser.REMOVE - 395)) | (1 << (Cobol85Parser.REQUIRED - 395)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 395)) | (1 << (Cobol85Parser.RETURN_CODE - 395)) | (1 << (Cobol85Parser.SAVE - 395)) | (1 << (Cobol85Parser.SECURE - 395)) | (1 << (Cobol85Parser.SHARED - 395)) | (1 << (Cobol85Parser.SHAREDBYALL - 395)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 395)) | (1 << (Cobol85Parser.SHARING - 395)) | (1 << (Cobol85Parser.SHIFT_IN - 395)) | (1 << (Cobol85Parser.SHIFT_OUT - 395)) | (1 << (Cobol85Parser.SHORT_DATE - 395)) | (1 << (Cobol85Parser.SORT_CONTROL - 395)) | (1 << (Cobol85Parser.SORT_CORE_SIZE - 395)) | (1 << (Cobol85Parser.SORT_FILE_SIZE - 395)) | (1 << (Cobol85Parser.SORT_MESSAGE - 395)) | (1 << (Cobol85Parser.SORT_MODE_SIZE - 395)) | (1 << (Cobol85Parser.SORT_RETURN - 395)) | (1 << (Cobol85Parser.SQL - 395)))) != 0) or ((((_la - 471)) & ~0x3f) == 0 and ((1 << (_la - 471)) & ((1 << (Cobol85Parser.SYMBOL - 471)) | (1 << (Cobol85Parser.TALLY - 471)) | (1 << (Cobol85Parser.TASK - 471)) | (1 << (Cobol85Parser.THREAD - 471)) | (1 << (Cobol85Parser.THREAD_LOCAL - 471)) | (1 << (Cobol85Parser.TIME - 471)) | (1 << (Cobol85Parser.TIMER - 471)) | (1 << (Cobol85Parser.TODAYS_DATE - 471)) | (1 << (Cobol85Parser.TODAYS_NAME - 471)) | (1 << (Cobol85Parser.TRUNCATED - 471)) | (1 << (Cobol85Parser.TYPEDEF - 471)) | (1 << (Cobol85Parser.UNDERLINE - 471)) | (1 << (Cobol85Parser.VIRTUAL - 471)) | (1 << (Cobol85Parser.WAIT - 471)) | (1 << (Cobol85Parser.WHEN_COMPILED - 471)) | (1 << (Cobol85Parser.YEAR - 471)) | (1 << (Cobol85Parser.YYYYMMDD - 471)) | (1 << (Cobol85Parser.YYYYDDD - 471)) | (1 << (Cobol85Parser.ZERO_FILL - 471)))) != 0) or ((((_la - 557)) & ~0x3f) == 0 and ((1 << (_la - 557)) & ((1 << (Cobol85Parser.LEVEL_NUMBER_66 - 557)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 557)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 557)) | (1 << (Cobol85Parser.INTEGERLITERAL - 557)) | (1 << (Cobol85Parser.IDENTIFIER - 557)))) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AddCorrespondingStatementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.AddCorrespondingStatementContext, self).__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(Cobol85Parser.IdentifierContext,0)


        def TO(self):
            return self.getToken(Cobol85Parser.TO, 0)

        def addTo(self):
            return self.getTypedRuleContext(Cobol85Parser.AddToContext,0)


        def CORRESPONDING(self):
            return self.getToken(Cobol85Parser.CORRESPONDING, 0)

        def CORR(self):
            return self.getToken(Cobol85Parser.CORR, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_addCorrespondingStatement

        def enterRule(self, listener):
            if hasattr(listener, "enterAddCorrespondingStatement"):
                listener.enterAddCorrespondingStatement(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitAddCorrespondingStatement"):
                listener.exitAddCorrespondingStatement(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitAddCorrespondingStatement"):
                return visitor.visitAddCorrespondingStatement(self)
            else:
                return visitor.visitChildren(self)




    def addCorrespondingStatement(self):

        localctx = Cobol85Parser.AddCorrespondingStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 554, self.RULE_addCorrespondingStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3762
            _la = self._input.LA(1)
            if not(_la==Cobol85Parser.CORR or _la==Cobol85Parser.CORRESPONDING):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 3763
            self.identifier()
            self.state = 3764
            self.match(Cobol85Parser.TO)
            self.state = 3765
            self.addTo()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AddFromContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.AddFromContext, self).__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(Cobol85Parser.IdentifierContext,0)


        def literal(self):
            return self.getTypedRuleContext(Cobol85Parser.LiteralContext,0)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_addFrom

        def enterRule(self, listener):
            if hasattr(listener, "enterAddFrom"):
                listener.enterAddFrom(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitAddFrom"):
                listener.exitAddFrom(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitAddFrom"):
                return visitor.visitAddFrom(self)
            else:
                return visitor.visitChildren(self)




    def addFrom(self):

        localctx = Cobol85Parser.AddFromContext(self, self._ctx, self.state)
        self.enterRule(localctx, 556, self.RULE_addFrom)
        try:
            self.state = 3769
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,491,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3767
                self.identifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3768
                self.literal()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AddToContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.AddToContext, self).__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(Cobol85Parser.IdentifierContext,0)


        def ROUNDED(self):
            return self.getToken(Cobol85Parser.ROUNDED, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_addTo

        def enterRule(self, listener):
            if hasattr(listener, "enterAddTo"):
                listener.enterAddTo(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitAddTo"):
                listener.exitAddTo(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitAddTo"):
                return visitor.visitAddTo(self)
            else:
                return visitor.visitChildren(self)




    def addTo(self):

        localctx = Cobol85Parser.AddToContext(self, self._ctx, self.state)
        self.enterRule(localctx, 558, self.RULE_addTo)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3771
            self.identifier()
            self.state = 3773
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.ROUNDED:
                self.state = 3772
                self.match(Cobol85Parser.ROUNDED)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AddToGivingContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.AddToGivingContext, self).__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(Cobol85Parser.IdentifierContext,0)


        def literal(self):
            return self.getTypedRuleContext(Cobol85Parser.LiteralContext,0)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_addToGiving

        def enterRule(self, listener):
            if hasattr(listener, "enterAddToGiving"):
                listener.enterAddToGiving(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitAddToGiving"):
                listener.exitAddToGiving(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitAddToGiving"):
                return visitor.visitAddToGiving(self)
            else:
                return visitor.visitChildren(self)




    def addToGiving(self):

        localctx = Cobol85Parser.AddToGivingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 560, self.RULE_addToGiving)
        try:
            self.state = 3777
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,493,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3775
                self.identifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3776
                self.literal()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AddGivingContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.AddGivingContext, self).__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(Cobol85Parser.IdentifierContext,0)


        def ROUNDED(self):
            return self.getToken(Cobol85Parser.ROUNDED, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_addGiving

        def enterRule(self, listener):
            if hasattr(listener, "enterAddGiving"):
                listener.enterAddGiving(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitAddGiving"):
                listener.exitAddGiving(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitAddGiving"):
                return visitor.visitAddGiving(self)
            else:
                return visitor.visitChildren(self)




    def addGiving(self):

        localctx = Cobol85Parser.AddGivingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 562, self.RULE_addGiving)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3779
            self.identifier()
            self.state = 3781
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.ROUNDED:
                self.state = 3780
                self.match(Cobol85Parser.ROUNDED)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AlteredGoToContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.AlteredGoToContext, self).__init__(parent, invokingState)
            self.parser = parser

        def GO(self):
            return self.getToken(Cobol85Parser.GO, 0)

        def DOT_FS(self):
            return self.getToken(Cobol85Parser.DOT_FS, 0)

        def TO(self):
            return self.getToken(Cobol85Parser.TO, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_alteredGoTo

        def enterRule(self, listener):
            if hasattr(listener, "enterAlteredGoTo"):
                listener.enterAlteredGoTo(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitAlteredGoTo"):
                listener.exitAlteredGoTo(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitAlteredGoTo"):
                return visitor.visitAlteredGoTo(self)
            else:
                return visitor.visitChildren(self)




    def alteredGoTo(self):

        localctx = Cobol85Parser.AlteredGoToContext(self, self._ctx, self.state)
        self.enterRule(localctx, 564, self.RULE_alteredGoTo)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3783
            self.match(Cobol85Parser.GO)
            self.state = 3785
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.TO:
                self.state = 3784
                self.match(Cobol85Parser.TO)


            self.state = 3787
            self.match(Cobol85Parser.DOT_FS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AlterStatementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.AlterStatementContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(Cobol85Parser.ALTER, 0)

        def alterProceedTo(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.AlterProceedToContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.AlterProceedToContext,i)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_alterStatement

        def enterRule(self, listener):
            if hasattr(listener, "enterAlterStatement"):
                listener.enterAlterStatement(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitAlterStatement"):
                listener.exitAlterStatement(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitAlterStatement"):
                return visitor.visitAlterStatement(self)
            else:
                return visitor.visitChildren(self)




    def alterStatement(self):

        localctx = Cobol85Parser.AlterStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 566, self.RULE_alterStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3789
            self.match(Cobol85Parser.ALTER)
            self.state = 3791 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 3790
                self.alterProceedTo()
                self.state = 3793 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE) | (1 << Cobol85Parser.AUTO) | (1 << Cobol85Parser.AUTO_SKIP) | (1 << Cobol85Parser.BACKGROUND_COLOR) | (1 << Cobol85Parser.BACKGROUND_COLOUR) | (1 << Cobol85Parser.BEEP) | (1 << Cobol85Parser.BELL) | (1 << Cobol85Parser.BINARY) | (1 << Cobol85Parser.BIT) | (1 << Cobol85Parser.BLINK) | (1 << Cobol85Parser.BLOB) | (1 << Cobol85Parser.BOUNDS) | (1 << Cobol85Parser.CAPABLE) | (1 << Cobol85Parser.CCSVERSION) | (1 << Cobol85Parser.CHANGED) | (1 << Cobol85Parser.CHANNEL))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (Cobol85Parser.CLOB - 67)) | (1 << (Cobol85Parser.CLOSE_DISPOSITION - 67)) | (1 << (Cobol85Parser.COBOL - 67)) | (1 << (Cobol85Parser.COMMITMENT - 67)) | (1 << (Cobol85Parser.CONTROL_POINT - 67)) | (1 << (Cobol85Parser.CONVENTION - 67)) | (1 << (Cobol85Parser.CRUNCH - 67)) | (1 << (Cobol85Parser.CURSOR - 67)) | (1 << (Cobol85Parser.DBCLOB - 67)))) != 0) or ((((_la - 131)) & ~0x3f) == 0 and ((1 << (_la - 131)) & ((1 << (Cobol85Parser.DEFAULT - 131)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 131)) | (1 << (Cobol85Parser.DEFINITION - 131)) | (1 << (Cobol85Parser.DFHRESP - 131)) | (1 << (Cobol85Parser.DFHVALUE - 131)) | (1 << (Cobol85Parser.DISK - 131)) | (1 << (Cobol85Parser.DONTCARE - 131)) | (1 << (Cobol85Parser.DOUBLE - 131)) | (1 << (Cobol85Parser.EBCDIC - 131)) | (1 << (Cobol85Parser.EMPTY_CHECK - 131)) | (1 << (Cobol85Parser.ENTER - 131)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 131)) | (1 << (Cobol85Parser.ERASE - 131)) | (1 << (Cobol85Parser.EOL - 131)) | (1 << (Cobol85Parser.EOS - 131)))) != 0) or ((((_la - 195)) & ~0x3f) == 0 and ((1 << (_la - 195)) & ((1 << (Cobol85Parser.ESCAPE - 195)) | (1 << (Cobol85Parser.EVENT - 195)) | (1 << (Cobol85Parser.EXCLUSIVE - 195)) | (1 << (Cobol85Parser.EXPORT - 195)) | (1 << (Cobol85Parser.EXTENDED - 195)) | (1 << (Cobol85Parser.FOREGROUND_COLOR - 195)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 195)) | (1 << (Cobol85Parser.FULL - 195)) | (1 << (Cobol85Parser.FUNCTIONNAME - 195)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 195)) | (1 << (Cobol85Parser.GRID - 195)) | (1 << (Cobol85Parser.HIGHLIGHT - 195)) | (1 << (Cobol85Parser.IMPLICIT - 195)) | (1 << (Cobol85Parser.IMPORT - 195)) | (1 << (Cobol85Parser.INTEGER - 195)))) != 0) or ((((_la - 262)) & ~0x3f) == 0 and ((1 << (_la - 262)) & ((1 << (Cobol85Parser.KEPT - 262)) | (1 << (Cobol85Parser.KEYBOARD - 262)) | (1 << (Cobol85Parser.LANGUAGE - 262)) | (1 << (Cobol85Parser.LB - 262)) | (1 << (Cobol85Parser.LD - 262)) | (1 << (Cobol85Parser.LEFTLINE - 262)) | (1 << (Cobol85Parser.LENGTH_CHECK - 262)) | (1 << (Cobol85Parser.LIBACCESS - 262)) | (1 << (Cobol85Parser.LIBPARAMETER - 262)) | (1 << (Cobol85Parser.LIBRARY - 262)) | (1 << (Cobol85Parser.LIST - 262)) | (1 << (Cobol85Parser.LOCAL - 262)) | (1 << (Cobol85Parser.LONG_DATE - 262)) | (1 << (Cobol85Parser.LONG_TIME - 262)) | (1 << (Cobol85Parser.LOWER - 262)) | (1 << (Cobol85Parser.LOWLIGHT - 262)) | (1 << (Cobol85Parser.MMDDYYYY - 262)) | (1 << (Cobol85Parser.NAMED - 262)) | (1 << (Cobol85Parser.NATIONAL - 262)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 262)) | (1 << (Cobol85Parser.NETWORK - 262)) | (1 << (Cobol85Parser.NO_ECHO - 262)) | (1 << (Cobol85Parser.NUMERIC_DATE - 262)) | (1 << (Cobol85Parser.NUMERIC_TIME - 262)))) != 0) or ((((_la - 326)) & ~0x3f) == 0 and ((1 << (_la - 326)) & ((1 << (Cobol85Parser.ODT - 326)) | (1 << (Cobol85Parser.ORDERLY - 326)) | (1 << (Cobol85Parser.OVERLINE - 326)) | (1 << (Cobol85Parser.OWN - 326)) | (1 << (Cobol85Parser.PASSWORD - 326)) | (1 << (Cobol85Parser.PORT - 326)) | (1 << (Cobol85Parser.PRINTER - 326)) | (1 << (Cobol85Parser.PRIVATE - 326)) | (1 << (Cobol85Parser.PROCESS - 326)) | (1 << (Cobol85Parser.PROGRAM - 326)) | (1 << (Cobol85Parser.PROMPT - 326)) | (1 << (Cobol85Parser.READER - 326)) | (1 << (Cobol85Parser.REMOTE - 326)) | (1 << (Cobol85Parser.REAL - 326)) | (1 << (Cobol85Parser.RECEIVED - 326)) | (1 << (Cobol85Parser.RECURSIVE - 326)) | (1 << (Cobol85Parser.REF - 326)))) != 0) or ((((_la - 395)) & ~0x3f) == 0 and ((1 << (_la - 395)) & ((1 << (Cobol85Parser.REMOVE - 395)) | (1 << (Cobol85Parser.REQUIRED - 395)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 395)) | (1 << (Cobol85Parser.SAVE - 395)) | (1 << (Cobol85Parser.SECURE - 395)) | (1 << (Cobol85Parser.SHARED - 395)) | (1 << (Cobol85Parser.SHAREDBYALL - 395)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 395)) | (1 << (Cobol85Parser.SHARING - 395)) | (1 << (Cobol85Parser.SHORT_DATE - 395)) | (1 << (Cobol85Parser.SQL - 395)))) != 0) or ((((_la - 471)) & ~0x3f) == 0 and ((1 << (_la - 471)) & ((1 << (Cobol85Parser.SYMBOL - 471)) | (1 << (Cobol85Parser.TASK - 471)) | (1 << (Cobol85Parser.THREAD - 471)) | (1 << (Cobol85Parser.THREAD_LOCAL - 471)) | (1 << (Cobol85Parser.TIMER - 471)) | (1 << (Cobol85Parser.TODAYS_DATE - 471)) | (1 << (Cobol85Parser.TODAYS_NAME - 471)) | (1 << (Cobol85Parser.TRUNCATED - 471)) | (1 << (Cobol85Parser.TYPEDEF - 471)) | (1 << (Cobol85Parser.UNDERLINE - 471)) | (1 << (Cobol85Parser.VIRTUAL - 471)) | (1 << (Cobol85Parser.WAIT - 471)) | (1 << (Cobol85Parser.YEAR - 471)) | (1 << (Cobol85Parser.YYYYMMDD - 471)) | (1 << (Cobol85Parser.YYYYDDD - 471)) | (1 << (Cobol85Parser.ZERO_FILL - 471)))) != 0) or ((((_la - 557)) & ~0x3f) == 0 and ((1 << (_la - 557)) & ((1 << (Cobol85Parser.LEVEL_NUMBER_66 - 557)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 557)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 557)) | (1 << (Cobol85Parser.INTEGERLITERAL - 557)) | (1 << (Cobol85Parser.IDENTIFIER - 557)))) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AlterProceedToContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.AlterProceedToContext, self).__init__(parent, invokingState)
            self.parser = parser

        def procedureName(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.ProcedureNameContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.ProcedureNameContext,i)


        def TO(self, i=None):
            if i is None:
                return self.getTokens(Cobol85Parser.TO)
            else:
                return self.getToken(Cobol85Parser.TO, i)

        def PROCEED(self):
            return self.getToken(Cobol85Parser.PROCEED, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_alterProceedTo

        def enterRule(self, listener):
            if hasattr(listener, "enterAlterProceedTo"):
                listener.enterAlterProceedTo(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitAlterProceedTo"):
                listener.exitAlterProceedTo(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitAlterProceedTo"):
                return visitor.visitAlterProceedTo(self)
            else:
                return visitor.visitChildren(self)




    def alterProceedTo(self):

        localctx = Cobol85Parser.AlterProceedToContext(self, self._ctx, self.state)
        self.enterRule(localctx, 568, self.RULE_alterProceedTo)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3795
            self.procedureName()
            self.state = 3796
            self.match(Cobol85Parser.TO)
            self.state = 3799
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.PROCEED:
                self.state = 3797
                self.match(Cobol85Parser.PROCEED)
                self.state = 3798
                self.match(Cobol85Parser.TO)


            self.state = 3801
            self.procedureName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CallStatementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.CallStatementContext, self).__init__(parent, invokingState)
            self.parser = parser

        def CALL(self):
            return self.getToken(Cobol85Parser.CALL, 0)

        def identifier(self):
            return self.getTypedRuleContext(Cobol85Parser.IdentifierContext,0)


        def literal(self):
            return self.getTypedRuleContext(Cobol85Parser.LiteralContext,0)


        def callUsingPhrase(self):
            return self.getTypedRuleContext(Cobol85Parser.CallUsingPhraseContext,0)


        def callGivingPhrase(self):
            return self.getTypedRuleContext(Cobol85Parser.CallGivingPhraseContext,0)


        def onOverflowPhrase(self):
            return self.getTypedRuleContext(Cobol85Parser.OnOverflowPhraseContext,0)


        def onExceptionClause(self):
            return self.getTypedRuleContext(Cobol85Parser.OnExceptionClauseContext,0)


        def notOnExceptionClause(self):
            return self.getTypedRuleContext(Cobol85Parser.NotOnExceptionClauseContext,0)


        def END_CALL(self):
            return self.getToken(Cobol85Parser.END_CALL, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_callStatement

        def enterRule(self, listener):
            if hasattr(listener, "enterCallStatement"):
                listener.enterCallStatement(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitCallStatement"):
                listener.exitCallStatement(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitCallStatement"):
                return visitor.visitCallStatement(self)
            else:
                return visitor.visitChildren(self)




    def callStatement(self):

        localctx = Cobol85Parser.CallStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 570, self.RULE_callStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3803
            self.match(Cobol85Parser.CALL)
            self.state = 3806
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,498,self._ctx)
            if la_ == 1:
                self.state = 3804
                self.identifier()
                pass

            elif la_ == 2:
                self.state = 3805
                self.literal()
                pass


            self.state = 3809
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.USING:
                self.state = 3808
                self.callUsingPhrase()


            self.state = 3812
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.GIVING or _la==Cobol85Parser.RETURNING:
                self.state = 3811
                self.callGivingPhrase()


            self.state = 3815
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,501,self._ctx)
            if la_ == 1:
                self.state = 3814
                self.onOverflowPhrase()


            self.state = 3818
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,502,self._ctx)
            if la_ == 1:
                self.state = 3817
                self.onExceptionClause()


            self.state = 3821
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,503,self._ctx)
            if la_ == 1:
                self.state = 3820
                self.notOnExceptionClause()


            self.state = 3824
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,504,self._ctx)
            if la_ == 1:
                self.state = 3823
                self.match(Cobol85Parser.END_CALL)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CallUsingPhraseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.CallUsingPhraseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def USING(self):
            return self.getToken(Cobol85Parser.USING, 0)

        def callUsingParameter(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.CallUsingParameterContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.CallUsingParameterContext,i)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_callUsingPhrase

        def enterRule(self, listener):
            if hasattr(listener, "enterCallUsingPhrase"):
                listener.enterCallUsingPhrase(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitCallUsingPhrase"):
                listener.exitCallUsingPhrase(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitCallUsingPhrase"):
                return visitor.visitCallUsingPhrase(self)
            else:
                return visitor.visitChildren(self)




    def callUsingPhrase(self):

        localctx = Cobol85Parser.CallUsingPhraseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 572, self.RULE_callUsingPhrase)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3826
            self.match(Cobol85Parser.USING)
            self.state = 3828 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 3827
                    self.callUsingParameter()

                else:
                    raise NoViableAltException(self)
                self.state = 3830 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,505,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CallUsingParameterContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.CallUsingParameterContext, self).__init__(parent, invokingState)
            self.parser = parser

        def callByReferencePhrase(self):
            return self.getTypedRuleContext(Cobol85Parser.CallByReferencePhraseContext,0)


        def callByValuePhrase(self):
            return self.getTypedRuleContext(Cobol85Parser.CallByValuePhraseContext,0)


        def callByContentPhrase(self):
            return self.getTypedRuleContext(Cobol85Parser.CallByContentPhraseContext,0)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_callUsingParameter

        def enterRule(self, listener):
            if hasattr(listener, "enterCallUsingParameter"):
                listener.enterCallUsingParameter(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitCallUsingParameter"):
                listener.exitCallUsingParameter(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitCallUsingParameter"):
                return visitor.visitCallUsingParameter(self)
            else:
                return visitor.visitChildren(self)




    def callUsingParameter(self):

        localctx = Cobol85Parser.CallUsingParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 574, self.RULE_callUsingParameter)
        try:
            self.state = 3835
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,506,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3832
                self.callByReferencePhrase()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3833
                self.callByValuePhrase()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3834
                self.callByContentPhrase()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CallByReferencePhraseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.CallByReferencePhraseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self):
            return self.getToken(Cobol85Parser.REFERENCE, 0)

        def callByReference(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.CallByReferenceContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.CallByReferenceContext,i)


        def BY(self):
            return self.getToken(Cobol85Parser.BY, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_callByReferencePhrase

        def enterRule(self, listener):
            if hasattr(listener, "enterCallByReferencePhrase"):
                listener.enterCallByReferencePhrase(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitCallByReferencePhrase"):
                listener.exitCallByReferencePhrase(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitCallByReferencePhrase"):
                return visitor.visitCallByReferencePhrase(self)
            else:
                return visitor.visitChildren(self)




    def callByReferencePhrase(self):

        localctx = Cobol85Parser.CallByReferencePhraseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 576, self.RULE_callByReferencePhrase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3841
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.BY or _la==Cobol85Parser.REFERENCE:
                self.state = 3838
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Cobol85Parser.BY:
                    self.state = 3837
                    self.match(Cobol85Parser.BY)


                self.state = 3840
                self.match(Cobol85Parser.REFERENCE)


            self.state = 3844 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 3843
                    self.callByReference()

                else:
                    raise NoViableAltException(self)
                self.state = 3846 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,509,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CallByReferenceContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.CallByReferenceContext, self).__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(Cobol85Parser.IdentifierContext,0)


        def literal(self):
            return self.getTypedRuleContext(Cobol85Parser.LiteralContext,0)


        def fileName(self):
            return self.getTypedRuleContext(Cobol85Parser.FileNameContext,0)


        def ADDRESS(self):
            return self.getToken(Cobol85Parser.ADDRESS, 0)

        def OF(self):
            return self.getToken(Cobol85Parser.OF, 0)

        def INTEGER(self):
            return self.getToken(Cobol85Parser.INTEGER, 0)

        def STRING(self):
            return self.getToken(Cobol85Parser.STRING, 0)

        def OMITTED(self):
            return self.getToken(Cobol85Parser.OMITTED, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_callByReference

        def enterRule(self, listener):
            if hasattr(listener, "enterCallByReference"):
                listener.enterCallByReference(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitCallByReference"):
                listener.exitCallByReference(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitCallByReference"):
                return visitor.visitCallByReference(self)
            else:
                return visitor.visitChildren(self)




    def callByReference(self):

        localctx = Cobol85Parser.CallByReferenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 578, self.RULE_callByReference)
        try:
            self.state = 3860
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Cobol85Parser.ABORT, Cobol85Parser.ADDRESS, Cobol85Parser.ALL, Cobol85Parser.AS, Cobol85Parser.ASCII, Cobol85Parser.ASSOCIATED_DATA, Cobol85Parser.ASSOCIATED_DATA_LENGTH, Cobol85Parser.ATTRIBUTE, Cobol85Parser.AUTO, Cobol85Parser.AUTO_SKIP, Cobol85Parser.BACKGROUND_COLOR, Cobol85Parser.BACKGROUND_COLOUR, Cobol85Parser.BEEP, Cobol85Parser.BELL, Cobol85Parser.BINARY, Cobol85Parser.BIT, Cobol85Parser.BLINK, Cobol85Parser.BLOB, Cobol85Parser.BOUNDS, Cobol85Parser.CAPABLE, Cobol85Parser.CCSVERSION, Cobol85Parser.CHANGED, Cobol85Parser.CHANNEL, Cobol85Parser.CLOB, Cobol85Parser.CLOSE_DISPOSITION, Cobol85Parser.COBOL, Cobol85Parser.COMMITMENT, Cobol85Parser.CONTROL_POINT, Cobol85Parser.CONVENTION, Cobol85Parser.CRUNCH, Cobol85Parser.CURSOR, Cobol85Parser.DATE, Cobol85Parser.DAY, Cobol85Parser.DAY_OF_WEEK, Cobol85Parser.DBCLOB, Cobol85Parser.DEBUG_CONTENTS, Cobol85Parser.DEBUG_ITEM, Cobol85Parser.DEBUG_LINE, Cobol85Parser.DEBUG_NAME, Cobol85Parser.DEBUG_SUB_1, Cobol85Parser.DEBUG_SUB_2, Cobol85Parser.DEBUG_SUB_3, Cobol85Parser.DEFAULT, Cobol85Parser.DEFAULT_DISPLAY, Cobol85Parser.DEFINITION, Cobol85Parser.DFHRESP, Cobol85Parser.DFHVALUE, Cobol85Parser.DISK, Cobol85Parser.DONTCARE, Cobol85Parser.DOUBLE, Cobol85Parser.EBCDIC, Cobol85Parser.EMPTY_CHECK, Cobol85Parser.ENTER, Cobol85Parser.ENTRY_PROCEDURE, Cobol85Parser.ERASE, Cobol85Parser.EOL, Cobol85Parser.EOS, Cobol85Parser.ESCAPE, Cobol85Parser.EVENT, Cobol85Parser.EXCLUSIVE, Cobol85Parser.EXPORT, Cobol85Parser.EXTENDED, Cobol85Parser.FALSE, Cobol85Parser.FOREGROUND_COLOR, Cobol85Parser.FOREGROUND_COLOUR, Cobol85Parser.FULL, Cobol85Parser.FUNCTION, Cobol85Parser.FUNCTIONNAME, Cobol85Parser.FUNCTION_POINTER, Cobol85Parser.GRID, Cobol85Parser.HIGHLIGHT, Cobol85Parser.HIGH_VALUE, Cobol85Parser.HIGH_VALUES, Cobol85Parser.IMPLICIT, Cobol85Parser.IMPORT, Cobol85Parser.INTEGER, Cobol85Parser.KEPT, Cobol85Parser.KEYBOARD, Cobol85Parser.LANGUAGE, Cobol85Parser.LB, Cobol85Parser.LD, Cobol85Parser.LEFTLINE, Cobol85Parser.LENGTH, Cobol85Parser.LENGTH_CHECK, Cobol85Parser.LIBACCESS, Cobol85Parser.LIBPARAMETER, Cobol85Parser.LIBRARY, Cobol85Parser.LINAGE_COUNTER, Cobol85Parser.LINE_COUNTER, Cobol85Parser.LIST, Cobol85Parser.LOCAL, Cobol85Parser.LONG_DATE, Cobol85Parser.LONG_TIME, Cobol85Parser.LOWER, Cobol85Parser.LOWLIGHT, Cobol85Parser.LOW_VALUE, Cobol85Parser.LOW_VALUES, Cobol85Parser.MMDDYYYY, Cobol85Parser.NAMED, Cobol85Parser.NATIONAL, Cobol85Parser.NATIONAL_EDITED, Cobol85Parser.NETWORK, Cobol85Parser.NO_ECHO, Cobol85Parser.NULL, Cobol85Parser.NULLS, Cobol85Parser.NUMERIC_DATE, Cobol85Parser.NUMERIC_TIME, Cobol85Parser.ODT, Cobol85Parser.ORDERLY, Cobol85Parser.OVERLINE, Cobol85Parser.OWN, Cobol85Parser.PAGE_COUNTER, Cobol85Parser.PASSWORD, Cobol85Parser.PORT, Cobol85Parser.PRINTER, Cobol85Parser.PRIVATE, Cobol85Parser.PROCESS, Cobol85Parser.PROGRAM, Cobol85Parser.PROMPT, Cobol85Parser.QUOTE, Cobol85Parser.QUOTES, Cobol85Parser.READER, Cobol85Parser.REMOTE, Cobol85Parser.REAL, Cobol85Parser.RECEIVED, Cobol85Parser.RECURSIVE, Cobol85Parser.REF, Cobol85Parser.REMOVE, Cobol85Parser.REQUIRED, Cobol85Parser.REVERSE_VIDEO, Cobol85Parser.RETURN_CODE, Cobol85Parser.SAVE, Cobol85Parser.SECURE, Cobol85Parser.SHARED, Cobol85Parser.SHAREDBYALL, Cobol85Parser.SHAREDBYRUNUNIT, Cobol85Parser.SHARING, Cobol85Parser.SHIFT_IN, Cobol85Parser.SHIFT_OUT, Cobol85Parser.SHORT_DATE, Cobol85Parser.SORT_CONTROL, Cobol85Parser.SORT_CORE_SIZE, Cobol85Parser.SORT_FILE_SIZE, Cobol85Parser.SORT_MESSAGE, Cobol85Parser.SORT_MODE_SIZE, Cobol85Parser.SORT_RETURN, Cobol85Parser.SPACE, Cobol85Parser.SPACES, Cobol85Parser.SQL, Cobol85Parser.STRING, Cobol85Parser.SYMBOL, Cobol85Parser.TALLY, Cobol85Parser.TASK, Cobol85Parser.THREAD, Cobol85Parser.THREAD_LOCAL, Cobol85Parser.TIME, Cobol85Parser.TIMER, Cobol85Parser.TODAYS_DATE, Cobol85Parser.TODAYS_NAME, Cobol85Parser.TRUE, Cobol85Parser.TRUNCATED, Cobol85Parser.TYPEDEF, Cobol85Parser.UNDERLINE, Cobol85Parser.VIRTUAL, Cobol85Parser.WAIT, Cobol85Parser.WHEN_COMPILED, Cobol85Parser.YEAR, Cobol85Parser.YYYYMMDD, Cobol85Parser.YYYYDDD, Cobol85Parser.ZERO, Cobol85Parser.ZERO_FILL, Cobol85Parser.ZEROS, Cobol85Parser.ZEROES, Cobol85Parser.NONNUMERICLITERAL, Cobol85Parser.LEVEL_NUMBER_66, Cobol85Parser.LEVEL_NUMBER_77, Cobol85Parser.LEVEL_NUMBER_88, Cobol85Parser.INTEGERLITERAL, Cobol85Parser.NUMERICLITERAL, Cobol85Parser.IDENTIFIER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3857
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,511,self._ctx)
                if la_ == 1:
                    self.state = 3852
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,510,self._ctx)
                    if la_ == 1:
                        self.state = 3848
                        self.match(Cobol85Parser.ADDRESS)
                        self.state = 3849
                        self.match(Cobol85Parser.OF)

                    elif la_ == 2:
                        self.state = 3850
                        self.match(Cobol85Parser.INTEGER)

                    elif la_ == 3:
                        self.state = 3851
                        self.match(Cobol85Parser.STRING)


                    self.state = 3854
                    self.identifier()
                    pass

                elif la_ == 2:
                    self.state = 3855
                    self.literal()
                    pass

                elif la_ == 3:
                    self.state = 3856
                    self.fileName()
                    pass


                pass
            elif token in [Cobol85Parser.OMITTED]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3859
                self.match(Cobol85Parser.OMITTED)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CallByValuePhraseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.CallByValuePhraseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def VALUE(self):
            return self.getToken(Cobol85Parser.VALUE, 0)

        def BY(self):
            return self.getToken(Cobol85Parser.BY, 0)

        def callByValue(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.CallByValueContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.CallByValueContext,i)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_callByValuePhrase

        def enterRule(self, listener):
            if hasattr(listener, "enterCallByValuePhrase"):
                listener.enterCallByValuePhrase(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitCallByValuePhrase"):
                listener.exitCallByValuePhrase(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitCallByValuePhrase"):
                return visitor.visitCallByValuePhrase(self)
            else:
                return visitor.visitChildren(self)




    def callByValuePhrase(self):

        localctx = Cobol85Parser.CallByValuePhraseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 580, self.RULE_callByValuePhrase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3863
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.BY:
                self.state = 3862
                self.match(Cobol85Parser.BY)


            self.state = 3865
            self.match(Cobol85Parser.VALUE)
            self.state = 3867 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 3866
                    self.callByValue()

                else:
                    raise NoViableAltException(self)
                self.state = 3869 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,514,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CallByValueContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.CallByValueContext, self).__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(Cobol85Parser.IdentifierContext,0)


        def literal(self):
            return self.getTypedRuleContext(Cobol85Parser.LiteralContext,0)


        def ADDRESS(self):
            return self.getToken(Cobol85Parser.ADDRESS, 0)

        def OF(self):
            return self.getToken(Cobol85Parser.OF, 0)

        def LENGTH(self):
            return self.getToken(Cobol85Parser.LENGTH, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_callByValue

        def enterRule(self, listener):
            if hasattr(listener, "enterCallByValue"):
                listener.enterCallByValue(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitCallByValue"):
                listener.exitCallByValue(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitCallByValue"):
                return visitor.visitCallByValue(self)
            else:
                return visitor.visitChildren(self)




    def callByValue(self):

        localctx = Cobol85Parser.CallByValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 582, self.RULE_callByValue)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3877
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,516,self._ctx)
            if la_ == 1:
                self.state = 3871
                self.match(Cobol85Parser.ADDRESS)
                self.state = 3872
                self.match(Cobol85Parser.OF)

            elif la_ == 2:
                self.state = 3873
                self.match(Cobol85Parser.LENGTH)
                self.state = 3875
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Cobol85Parser.OF:
                    self.state = 3874
                    self.match(Cobol85Parser.OF)




            self.state = 3881
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,517,self._ctx)
            if la_ == 1:
                self.state = 3879
                self.identifier()
                pass

            elif la_ == 2:
                self.state = 3880
                self.literal()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CallByContentPhraseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.CallByContentPhraseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def CONTENT(self):
            return self.getToken(Cobol85Parser.CONTENT, 0)

        def BY(self):
            return self.getToken(Cobol85Parser.BY, 0)

        def callByContent(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.CallByContentContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.CallByContentContext,i)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_callByContentPhrase

        def enterRule(self, listener):
            if hasattr(listener, "enterCallByContentPhrase"):
                listener.enterCallByContentPhrase(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitCallByContentPhrase"):
                listener.exitCallByContentPhrase(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitCallByContentPhrase"):
                return visitor.visitCallByContentPhrase(self)
            else:
                return visitor.visitChildren(self)




    def callByContentPhrase(self):

        localctx = Cobol85Parser.CallByContentPhraseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 584, self.RULE_callByContentPhrase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3884
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.BY:
                self.state = 3883
                self.match(Cobol85Parser.BY)


            self.state = 3886
            self.match(Cobol85Parser.CONTENT)
            self.state = 3888 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 3887
                    self.callByContent()

                else:
                    raise NoViableAltException(self)
                self.state = 3890 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,519,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CallByContentContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.CallByContentContext, self).__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(Cobol85Parser.IdentifierContext,0)


        def ADDRESS(self):
            return self.getToken(Cobol85Parser.ADDRESS, 0)

        def OF(self):
            return self.getToken(Cobol85Parser.OF, 0)

        def LENGTH(self):
            return self.getToken(Cobol85Parser.LENGTH, 0)

        def literal(self):
            return self.getTypedRuleContext(Cobol85Parser.LiteralContext,0)


        def OMITTED(self):
            return self.getToken(Cobol85Parser.OMITTED, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_callByContent

        def enterRule(self, listener):
            if hasattr(listener, "enterCallByContent"):
                listener.enterCallByContent(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitCallByContent"):
                listener.exitCallByContent(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitCallByContent"):
                return visitor.visitCallByContent(self)
            else:
                return visitor.visitChildren(self)




    def callByContent(self):

        localctx = Cobol85Parser.CallByContentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 586, self.RULE_callByContent)
        self._la = 0 # Token type
        try:
            self.state = 3903
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,522,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3898
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,521,self._ctx)
                if la_ == 1:
                    self.state = 3892
                    self.match(Cobol85Parser.ADDRESS)
                    self.state = 3893
                    self.match(Cobol85Parser.OF)

                elif la_ == 2:
                    self.state = 3894
                    self.match(Cobol85Parser.LENGTH)
                    self.state = 3896
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==Cobol85Parser.OF:
                        self.state = 3895
                        self.match(Cobol85Parser.OF)




                self.state = 3900
                self.identifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3901
                self.literal()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3902
                self.match(Cobol85Parser.OMITTED)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CallGivingPhraseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.CallGivingPhraseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(Cobol85Parser.IdentifierContext,0)


        def GIVING(self):
            return self.getToken(Cobol85Parser.GIVING, 0)

        def RETURNING(self):
            return self.getToken(Cobol85Parser.RETURNING, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_callGivingPhrase

        def enterRule(self, listener):
            if hasattr(listener, "enterCallGivingPhrase"):
                listener.enterCallGivingPhrase(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitCallGivingPhrase"):
                listener.exitCallGivingPhrase(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitCallGivingPhrase"):
                return visitor.visitCallGivingPhrase(self)
            else:
                return visitor.visitChildren(self)




    def callGivingPhrase(self):

        localctx = Cobol85Parser.CallGivingPhraseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 588, self.RULE_callGivingPhrase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3905
            _la = self._input.LA(1)
            if not(_la==Cobol85Parser.GIVING or _la==Cobol85Parser.RETURNING):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 3906
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CancelStatementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.CancelStatementContext, self).__init__(parent, invokingState)
            self.parser = parser

        def CANCEL(self):
            return self.getToken(Cobol85Parser.CANCEL, 0)

        def cancelCall(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.CancelCallContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.CancelCallContext,i)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_cancelStatement

        def enterRule(self, listener):
            if hasattr(listener, "enterCancelStatement"):
                listener.enterCancelStatement(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitCancelStatement"):
                listener.exitCancelStatement(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitCancelStatement"):
                return visitor.visitCancelStatement(self)
            else:
                return visitor.visitChildren(self)




    def cancelStatement(self):

        localctx = Cobol85Parser.CancelStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 590, self.RULE_cancelStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3908
            self.match(Cobol85Parser.CANCEL)
            self.state = 3910 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 3909
                self.cancelCall()
                self.state = 3912 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.ADDRESS) | (1 << Cobol85Parser.ALL) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE) | (1 << Cobol85Parser.AUTO) | (1 << Cobol85Parser.AUTO_SKIP) | (1 << Cobol85Parser.BACKGROUND_COLOR) | (1 << Cobol85Parser.BACKGROUND_COLOUR) | (1 << Cobol85Parser.BEEP) | (1 << Cobol85Parser.BELL) | (1 << Cobol85Parser.BINARY) | (1 << Cobol85Parser.BIT) | (1 << Cobol85Parser.BLINK) | (1 << Cobol85Parser.BLOB) | (1 << Cobol85Parser.BOUNDS) | (1 << Cobol85Parser.CAPABLE) | (1 << Cobol85Parser.CCSVERSION) | (1 << Cobol85Parser.CHANGED) | (1 << Cobol85Parser.CHANNEL))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (Cobol85Parser.CLOB - 67)) | (1 << (Cobol85Parser.CLOSE_DISPOSITION - 67)) | (1 << (Cobol85Parser.COBOL - 67)) | (1 << (Cobol85Parser.COMMITMENT - 67)) | (1 << (Cobol85Parser.CONTROL_POINT - 67)) | (1 << (Cobol85Parser.CONVENTION - 67)) | (1 << (Cobol85Parser.CRUNCH - 67)) | (1 << (Cobol85Parser.CURSOR - 67)) | (1 << (Cobol85Parser.DATE - 67)) | (1 << (Cobol85Parser.DAY - 67)) | (1 << (Cobol85Parser.DAY_OF_WEEK - 67)) | (1 << (Cobol85Parser.DBCLOB - 67)) | (1 << (Cobol85Parser.DEBUG_CONTENTS - 67)) | (1 << (Cobol85Parser.DEBUG_ITEM - 67)) | (1 << (Cobol85Parser.DEBUG_LINE - 67)) | (1 << (Cobol85Parser.DEBUG_NAME - 67)) | (1 << (Cobol85Parser.DEBUG_SUB_1 - 67)) | (1 << (Cobol85Parser.DEBUG_SUB_2 - 67)) | (1 << (Cobol85Parser.DEBUG_SUB_3 - 67)))) != 0) or ((((_la - 131)) & ~0x3f) == 0 and ((1 << (_la - 131)) & ((1 << (Cobol85Parser.DEFAULT - 131)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 131)) | (1 << (Cobol85Parser.DEFINITION - 131)) | (1 << (Cobol85Parser.DFHRESP - 131)) | (1 << (Cobol85Parser.DFHVALUE - 131)) | (1 << (Cobol85Parser.DISK - 131)) | (1 << (Cobol85Parser.DONTCARE - 131)) | (1 << (Cobol85Parser.DOUBLE - 131)) | (1 << (Cobol85Parser.EBCDIC - 131)) | (1 << (Cobol85Parser.EMPTY_CHECK - 131)) | (1 << (Cobol85Parser.ENTER - 131)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 131)) | (1 << (Cobol85Parser.ERASE - 131)) | (1 << (Cobol85Parser.EOL - 131)) | (1 << (Cobol85Parser.EOS - 131)))) != 0) or ((((_la - 195)) & ~0x3f) == 0 and ((1 << (_la - 195)) & ((1 << (Cobol85Parser.ESCAPE - 195)) | (1 << (Cobol85Parser.EVENT - 195)) | (1 << (Cobol85Parser.EXCLUSIVE - 195)) | (1 << (Cobol85Parser.EXPORT - 195)) | (1 << (Cobol85Parser.EXTENDED - 195)) | (1 << (Cobol85Parser.FALSE - 195)) | (1 << (Cobol85Parser.FOREGROUND_COLOR - 195)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 195)) | (1 << (Cobol85Parser.FULL - 195)) | (1 << (Cobol85Parser.FUNCTION - 195)) | (1 << (Cobol85Parser.FUNCTIONNAME - 195)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 195)) | (1 << (Cobol85Parser.GRID - 195)) | (1 << (Cobol85Parser.HIGHLIGHT - 195)) | (1 << (Cobol85Parser.HIGH_VALUE - 195)) | (1 << (Cobol85Parser.HIGH_VALUES - 195)) | (1 << (Cobol85Parser.IMPLICIT - 195)) | (1 << (Cobol85Parser.IMPORT - 195)) | (1 << (Cobol85Parser.INTEGER - 195)))) != 0) or ((((_la - 262)) & ~0x3f) == 0 and ((1 << (_la - 262)) & ((1 << (Cobol85Parser.KEPT - 262)) | (1 << (Cobol85Parser.KEYBOARD - 262)) | (1 << (Cobol85Parser.LANGUAGE - 262)) | (1 << (Cobol85Parser.LB - 262)) | (1 << (Cobol85Parser.LD - 262)) | (1 << (Cobol85Parser.LEFTLINE - 262)) | (1 << (Cobol85Parser.LENGTH - 262)) | (1 << (Cobol85Parser.LENGTH_CHECK - 262)) | (1 << (Cobol85Parser.LIBACCESS - 262)) | (1 << (Cobol85Parser.LIBPARAMETER - 262)) | (1 << (Cobol85Parser.LIBRARY - 262)) | (1 << (Cobol85Parser.LINAGE_COUNTER - 262)) | (1 << (Cobol85Parser.LINE_COUNTER - 262)) | (1 << (Cobol85Parser.LIST - 262)) | (1 << (Cobol85Parser.LOCAL - 262)) | (1 << (Cobol85Parser.LONG_DATE - 262)) | (1 << (Cobol85Parser.LONG_TIME - 262)) | (1 << (Cobol85Parser.LOWER - 262)) | (1 << (Cobol85Parser.LOWLIGHT - 262)) | (1 << (Cobol85Parser.LOW_VALUE - 262)) | (1 << (Cobol85Parser.LOW_VALUES - 262)) | (1 << (Cobol85Parser.MMDDYYYY - 262)) | (1 << (Cobol85Parser.NAMED - 262)) | (1 << (Cobol85Parser.NATIONAL - 262)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 262)) | (1 << (Cobol85Parser.NETWORK - 262)) | (1 << (Cobol85Parser.NO_ECHO - 262)) | (1 << (Cobol85Parser.NULL - 262)) | (1 << (Cobol85Parser.NULLS - 262)) | (1 << (Cobol85Parser.NUMERIC_DATE - 262)) | (1 << (Cobol85Parser.NUMERIC_TIME - 262)))) != 0) or ((((_la - 326)) & ~0x3f) == 0 and ((1 << (_la - 326)) & ((1 << (Cobol85Parser.ODT - 326)) | (1 << (Cobol85Parser.ORDERLY - 326)) | (1 << (Cobol85Parser.OVERLINE - 326)) | (1 << (Cobol85Parser.OWN - 326)) | (1 << (Cobol85Parser.PAGE_COUNTER - 326)) | (1 << (Cobol85Parser.PASSWORD - 326)) | (1 << (Cobol85Parser.PORT - 326)) | (1 << (Cobol85Parser.PRINTER - 326)) | (1 << (Cobol85Parser.PRIVATE - 326)) | (1 << (Cobol85Parser.PROCESS - 326)) | (1 << (Cobol85Parser.PROGRAM - 326)) | (1 << (Cobol85Parser.PROMPT - 326)) | (1 << (Cobol85Parser.QUOTE - 326)) | (1 << (Cobol85Parser.QUOTES - 326)) | (1 << (Cobol85Parser.READER - 326)) | (1 << (Cobol85Parser.REMOTE - 326)) | (1 << (Cobol85Parser.REAL - 326)) | (1 << (Cobol85Parser.RECEIVED - 326)) | (1 << (Cobol85Parser.RECURSIVE - 326)) | (1 << (Cobol85Parser.REF - 326)))) != 0) or ((((_la - 395)) & ~0x3f) == 0 and ((1 << (_la - 395)) & ((1 << (Cobol85Parser.REMOVE - 395)) | (1 << (Cobol85Parser.REQUIRED - 395)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 395)) | (1 << (Cobol85Parser.RETURN_CODE - 395)) | (1 << (Cobol85Parser.SAVE - 395)) | (1 << (Cobol85Parser.SECURE - 395)) | (1 << (Cobol85Parser.SHARED - 395)) | (1 << (Cobol85Parser.SHAREDBYALL - 395)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 395)) | (1 << (Cobol85Parser.SHARING - 395)) | (1 << (Cobol85Parser.SHIFT_IN - 395)) | (1 << (Cobol85Parser.SHIFT_OUT - 395)) | (1 << (Cobol85Parser.SHORT_DATE - 395)) | (1 << (Cobol85Parser.SORT_CONTROL - 395)) | (1 << (Cobol85Parser.SORT_CORE_SIZE - 395)) | (1 << (Cobol85Parser.SORT_FILE_SIZE - 395)) | (1 << (Cobol85Parser.SORT_MESSAGE - 395)) | (1 << (Cobol85Parser.SORT_MODE_SIZE - 395)) | (1 << (Cobol85Parser.SORT_RETURN - 395)) | (1 << (Cobol85Parser.SPACE - 395)) | (1 << (Cobol85Parser.SPACES - 395)) | (1 << (Cobol85Parser.SQL - 395)))) != 0) or ((((_la - 471)) & ~0x3f) == 0 and ((1 << (_la - 471)) & ((1 << (Cobol85Parser.SYMBOL - 471)) | (1 << (Cobol85Parser.TALLY - 471)) | (1 << (Cobol85Parser.TASK - 471)) | (1 << (Cobol85Parser.THREAD - 471)) | (1 << (Cobol85Parser.THREAD_LOCAL - 471)) | (1 << (Cobol85Parser.TIME - 471)) | (1 << (Cobol85Parser.TIMER - 471)) | (1 << (Cobol85Parser.TODAYS_DATE - 471)) | (1 << (Cobol85Parser.TODAYS_NAME - 471)) | (1 << (Cobol85Parser.TRUE - 471)) | (1 << (Cobol85Parser.TRUNCATED - 471)) | (1 << (Cobol85Parser.TYPEDEF - 471)) | (1 << (Cobol85Parser.UNDERLINE - 471)) | (1 << (Cobol85Parser.VIRTUAL - 471)) | (1 << (Cobol85Parser.WAIT - 471)) | (1 << (Cobol85Parser.WHEN_COMPILED - 471)) | (1 << (Cobol85Parser.YEAR - 471)) | (1 << (Cobol85Parser.YYYYMMDD - 471)) | (1 << (Cobol85Parser.YYYYDDD - 471)) | (1 << (Cobol85Parser.ZERO - 471)) | (1 << (Cobol85Parser.ZERO_FILL - 471)) | (1 << (Cobol85Parser.ZEROS - 471)) | (1 << (Cobol85Parser.ZEROES - 471)))) != 0) or ((((_la - 556)) & ~0x3f) == 0 and ((1 << (_la - 556)) & ((1 << (Cobol85Parser.NONNUMERICLITERAL - 556)) | (1 << (Cobol85Parser.LEVEL_NUMBER_66 - 556)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 556)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 556)) | (1 << (Cobol85Parser.INTEGERLITERAL - 556)) | (1 << (Cobol85Parser.NUMERICLITERAL - 556)) | (1 << (Cobol85Parser.IDENTIFIER - 556)))) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CancelCallContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.CancelCallContext, self).__init__(parent, invokingState)
            self.parser = parser

        def libraryName(self):
            return self.getTypedRuleContext(Cobol85Parser.LibraryNameContext,0)


        def BYTITLE(self):
            return self.getToken(Cobol85Parser.BYTITLE, 0)

        def BYFUNCTION(self):
            return self.getToken(Cobol85Parser.BYFUNCTION, 0)

        def identifier(self):
            return self.getTypedRuleContext(Cobol85Parser.IdentifierContext,0)


        def literal(self):
            return self.getTypedRuleContext(Cobol85Parser.LiteralContext,0)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_cancelCall

        def enterRule(self, listener):
            if hasattr(listener, "enterCancelCall"):
                listener.enterCancelCall(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitCancelCall"):
                listener.exitCancelCall(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitCancelCall"):
                return visitor.visitCancelCall(self)
            else:
                return visitor.visitChildren(self)




    def cancelCall(self):

        localctx = Cobol85Parser.CancelCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 592, self.RULE_cancelCall)
        self._la = 0 # Token type
        try:
            self.state = 3919
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,524,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3914
                self.libraryName()
                self.state = 3915
                _la = self._input.LA(1)
                if not(_la==Cobol85Parser.BYFUNCTION or _la==Cobol85Parser.BYTITLE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3917
                self.identifier()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3918
                self.literal()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CloseStatementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.CloseStatementContext, self).__init__(parent, invokingState)
            self.parser = parser

        def CLOSE(self):
            return self.getToken(Cobol85Parser.CLOSE, 0)

        def closeFile(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.CloseFileContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.CloseFileContext,i)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_closeStatement

        def enterRule(self, listener):
            if hasattr(listener, "enterCloseStatement"):
                listener.enterCloseStatement(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitCloseStatement"):
                listener.exitCloseStatement(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitCloseStatement"):
                return visitor.visitCloseStatement(self)
            else:
                return visitor.visitChildren(self)




    def closeStatement(self):

        localctx = Cobol85Parser.CloseStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 594, self.RULE_closeStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3921
            self.match(Cobol85Parser.CLOSE)
            self.state = 3923 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 3922
                self.closeFile()
                self.state = 3925 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE) | (1 << Cobol85Parser.AUTO) | (1 << Cobol85Parser.AUTO_SKIP) | (1 << Cobol85Parser.BACKGROUND_COLOR) | (1 << Cobol85Parser.BACKGROUND_COLOUR) | (1 << Cobol85Parser.BEEP) | (1 << Cobol85Parser.BELL) | (1 << Cobol85Parser.BINARY) | (1 << Cobol85Parser.BIT) | (1 << Cobol85Parser.BLINK) | (1 << Cobol85Parser.BLOB) | (1 << Cobol85Parser.BOUNDS) | (1 << Cobol85Parser.CAPABLE) | (1 << Cobol85Parser.CCSVERSION) | (1 << Cobol85Parser.CHANGED) | (1 << Cobol85Parser.CHANNEL))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (Cobol85Parser.CLOB - 67)) | (1 << (Cobol85Parser.CLOSE_DISPOSITION - 67)) | (1 << (Cobol85Parser.COBOL - 67)) | (1 << (Cobol85Parser.COMMITMENT - 67)) | (1 << (Cobol85Parser.CONTROL_POINT - 67)) | (1 << (Cobol85Parser.CONVENTION - 67)) | (1 << (Cobol85Parser.CRUNCH - 67)) | (1 << (Cobol85Parser.CURSOR - 67)) | (1 << (Cobol85Parser.DBCLOB - 67)))) != 0) or ((((_la - 131)) & ~0x3f) == 0 and ((1 << (_la - 131)) & ((1 << (Cobol85Parser.DEFAULT - 131)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 131)) | (1 << (Cobol85Parser.DEFINITION - 131)) | (1 << (Cobol85Parser.DFHRESP - 131)) | (1 << (Cobol85Parser.DFHVALUE - 131)) | (1 << (Cobol85Parser.DISK - 131)) | (1 << (Cobol85Parser.DONTCARE - 131)) | (1 << (Cobol85Parser.DOUBLE - 131)) | (1 << (Cobol85Parser.EBCDIC - 131)) | (1 << (Cobol85Parser.EMPTY_CHECK - 131)) | (1 << (Cobol85Parser.ENTER - 131)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 131)) | (1 << (Cobol85Parser.ERASE - 131)) | (1 << (Cobol85Parser.EOL - 131)) | (1 << (Cobol85Parser.EOS - 131)))) != 0) or ((((_la - 195)) & ~0x3f) == 0 and ((1 << (_la - 195)) & ((1 << (Cobol85Parser.ESCAPE - 195)) | (1 << (Cobol85Parser.EVENT - 195)) | (1 << (Cobol85Parser.EXCLUSIVE - 195)) | (1 << (Cobol85Parser.EXPORT - 195)) | (1 << (Cobol85Parser.EXTENDED - 195)) | (1 << (Cobol85Parser.FOREGROUND_COLOR - 195)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 195)) | (1 << (Cobol85Parser.FULL - 195)) | (1 << (Cobol85Parser.FUNCTIONNAME - 195)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 195)) | (1 << (Cobol85Parser.GRID - 195)) | (1 << (Cobol85Parser.HIGHLIGHT - 195)) | (1 << (Cobol85Parser.IMPLICIT - 195)) | (1 << (Cobol85Parser.IMPORT - 195)) | (1 << (Cobol85Parser.INTEGER - 195)))) != 0) or ((((_la - 262)) & ~0x3f) == 0 and ((1 << (_la - 262)) & ((1 << (Cobol85Parser.KEPT - 262)) | (1 << (Cobol85Parser.KEYBOARD - 262)) | (1 << (Cobol85Parser.LANGUAGE - 262)) | (1 << (Cobol85Parser.LB - 262)) | (1 << (Cobol85Parser.LD - 262)) | (1 << (Cobol85Parser.LEFTLINE - 262)) | (1 << (Cobol85Parser.LENGTH_CHECK - 262)) | (1 << (Cobol85Parser.LIBACCESS - 262)) | (1 << (Cobol85Parser.LIBPARAMETER - 262)) | (1 << (Cobol85Parser.LIBRARY - 262)) | (1 << (Cobol85Parser.LIST - 262)) | (1 << (Cobol85Parser.LOCAL - 262)) | (1 << (Cobol85Parser.LONG_DATE - 262)) | (1 << (Cobol85Parser.LONG_TIME - 262)) | (1 << (Cobol85Parser.LOWER - 262)) | (1 << (Cobol85Parser.LOWLIGHT - 262)) | (1 << (Cobol85Parser.MMDDYYYY - 262)) | (1 << (Cobol85Parser.NAMED - 262)) | (1 << (Cobol85Parser.NATIONAL - 262)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 262)) | (1 << (Cobol85Parser.NETWORK - 262)) | (1 << (Cobol85Parser.NO_ECHO - 262)) | (1 << (Cobol85Parser.NUMERIC_DATE - 262)) | (1 << (Cobol85Parser.NUMERIC_TIME - 262)))) != 0) or ((((_la - 326)) & ~0x3f) == 0 and ((1 << (_la - 326)) & ((1 << (Cobol85Parser.ODT - 326)) | (1 << (Cobol85Parser.ORDERLY - 326)) | (1 << (Cobol85Parser.OVERLINE - 326)) | (1 << (Cobol85Parser.OWN - 326)) | (1 << (Cobol85Parser.PASSWORD - 326)) | (1 << (Cobol85Parser.PORT - 326)) | (1 << (Cobol85Parser.PRINTER - 326)) | (1 << (Cobol85Parser.PRIVATE - 326)) | (1 << (Cobol85Parser.PROCESS - 326)) | (1 << (Cobol85Parser.PROGRAM - 326)) | (1 << (Cobol85Parser.PROMPT - 326)) | (1 << (Cobol85Parser.READER - 326)) | (1 << (Cobol85Parser.REMOTE - 326)) | (1 << (Cobol85Parser.REAL - 326)) | (1 << (Cobol85Parser.RECEIVED - 326)) | (1 << (Cobol85Parser.RECURSIVE - 326)) | (1 << (Cobol85Parser.REF - 326)))) != 0) or ((((_la - 395)) & ~0x3f) == 0 and ((1 << (_la - 395)) & ((1 << (Cobol85Parser.REMOVE - 395)) | (1 << (Cobol85Parser.REQUIRED - 395)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 395)) | (1 << (Cobol85Parser.SAVE - 395)) | (1 << (Cobol85Parser.SECURE - 395)) | (1 << (Cobol85Parser.SHARED - 395)) | (1 << (Cobol85Parser.SHAREDBYALL - 395)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 395)) | (1 << (Cobol85Parser.SHARING - 395)) | (1 << (Cobol85Parser.SHORT_DATE - 395)) | (1 << (Cobol85Parser.SQL - 395)))) != 0) or ((((_la - 471)) & ~0x3f) == 0 and ((1 << (_la - 471)) & ((1 << (Cobol85Parser.SYMBOL - 471)) | (1 << (Cobol85Parser.TASK - 471)) | (1 << (Cobol85Parser.THREAD - 471)) | (1 << (Cobol85Parser.THREAD_LOCAL - 471)) | (1 << (Cobol85Parser.TIMER - 471)) | (1 << (Cobol85Parser.TODAYS_DATE - 471)) | (1 << (Cobol85Parser.TODAYS_NAME - 471)) | (1 << (Cobol85Parser.TRUNCATED - 471)) | (1 << (Cobol85Parser.TYPEDEF - 471)) | (1 << (Cobol85Parser.UNDERLINE - 471)) | (1 << (Cobol85Parser.VIRTUAL - 471)) | (1 << (Cobol85Parser.WAIT - 471)) | (1 << (Cobol85Parser.YEAR - 471)) | (1 << (Cobol85Parser.YYYYMMDD - 471)) | (1 << (Cobol85Parser.YYYYDDD - 471)) | (1 << (Cobol85Parser.ZERO_FILL - 471)))) != 0) or _la==Cobol85Parser.IDENTIFIER):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CloseFileContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.CloseFileContext, self).__init__(parent, invokingState)
            self.parser = parser

        def fileName(self):
            return self.getTypedRuleContext(Cobol85Parser.FileNameContext,0)


        def closeReelUnitStatement(self):
            return self.getTypedRuleContext(Cobol85Parser.CloseReelUnitStatementContext,0)


        def closeRelativeStatement(self):
            return self.getTypedRuleContext(Cobol85Parser.CloseRelativeStatementContext,0)


        def closePortFileIOStatement(self):
            return self.getTypedRuleContext(Cobol85Parser.ClosePortFileIOStatementContext,0)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_closeFile

        def enterRule(self, listener):
            if hasattr(listener, "enterCloseFile"):
                listener.enterCloseFile(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitCloseFile"):
                listener.exitCloseFile(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitCloseFile"):
                return visitor.visitCloseFile(self)
            else:
                return visitor.visitChildren(self)




    def closeFile(self):

        localctx = Cobol85Parser.CloseFileContext(self, self._ctx, self.state)
        self.enterRule(localctx, 596, self.RULE_closeFile)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3927
            self.fileName()
            self.state = 3931
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,526,self._ctx)
            if la_ == 1:
                self.state = 3928
                self.closeReelUnitStatement()

            elif la_ == 2:
                self.state = 3929
                self.closeRelativeStatement()

            elif la_ == 3:
                self.state = 3930
                self.closePortFileIOStatement()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CloseReelUnitStatementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.CloseReelUnitStatementContext, self).__init__(parent, invokingState)
            self.parser = parser

        def REEL(self):
            return self.getToken(Cobol85Parser.REEL, 0)

        def UNIT(self):
            return self.getToken(Cobol85Parser.UNIT, 0)

        def REMOVAL(self):
            return self.getToken(Cobol85Parser.REMOVAL, 0)

        def NO(self):
            return self.getToken(Cobol85Parser.NO, 0)

        def REWIND(self):
            return self.getToken(Cobol85Parser.REWIND, 0)

        def LOCK(self):
            return self.getToken(Cobol85Parser.LOCK, 0)

        def FOR(self):
            return self.getToken(Cobol85Parser.FOR, 0)

        def WITH(self):
            return self.getToken(Cobol85Parser.WITH, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_closeReelUnitStatement

        def enterRule(self, listener):
            if hasattr(listener, "enterCloseReelUnitStatement"):
                listener.enterCloseReelUnitStatement(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitCloseReelUnitStatement"):
                listener.exitCloseReelUnitStatement(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitCloseReelUnitStatement"):
                return visitor.visitCloseReelUnitStatement(self)
            else:
                return visitor.visitChildren(self)




    def closeReelUnitStatement(self):

        localctx = Cobol85Parser.CloseReelUnitStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 598, self.RULE_closeReelUnitStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3933
            _la = self._input.LA(1)
            if not(_la==Cobol85Parser.REEL or _la==Cobol85Parser.UNIT):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 3938
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.FOR or _la==Cobol85Parser.REMOVAL:
                self.state = 3935
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Cobol85Parser.FOR:
                    self.state = 3934
                    self.match(Cobol85Parser.FOR)


                self.state = 3937
                self.match(Cobol85Parser.REMOVAL)


            self.state = 3948
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,531,self._ctx)
            if la_ == 1:
                self.state = 3941
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Cobol85Parser.WITH:
                    self.state = 3940
                    self.match(Cobol85Parser.WITH)


                self.state = 3946
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [Cobol85Parser.NO]:
                    self.state = 3943
                    self.match(Cobol85Parser.NO)
                    self.state = 3944
                    self.match(Cobol85Parser.REWIND)
                    pass
                elif token in [Cobol85Parser.LOCK]:
                    self.state = 3945
                    self.match(Cobol85Parser.LOCK)
                    pass
                else:
                    raise NoViableAltException(self)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CloseRelativeStatementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.CloseRelativeStatementContext, self).__init__(parent, invokingState)
            self.parser = parser

        def NO(self):
            return self.getToken(Cobol85Parser.NO, 0)

        def REWIND(self):
            return self.getToken(Cobol85Parser.REWIND, 0)

        def LOCK(self):
            return self.getToken(Cobol85Parser.LOCK, 0)

        def WITH(self):
            return self.getToken(Cobol85Parser.WITH, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_closeRelativeStatement

        def enterRule(self, listener):
            if hasattr(listener, "enterCloseRelativeStatement"):
                listener.enterCloseRelativeStatement(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitCloseRelativeStatement"):
                listener.exitCloseRelativeStatement(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitCloseRelativeStatement"):
                return visitor.visitCloseRelativeStatement(self)
            else:
                return visitor.visitChildren(self)




    def closeRelativeStatement(self):

        localctx = Cobol85Parser.CloseRelativeStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 600, self.RULE_closeRelativeStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3951
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.WITH:
                self.state = 3950
                self.match(Cobol85Parser.WITH)


            self.state = 3956
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Cobol85Parser.NO]:
                self.state = 3953
                self.match(Cobol85Parser.NO)
                self.state = 3954
                self.match(Cobol85Parser.REWIND)
                pass
            elif token in [Cobol85Parser.LOCK]:
                self.state = 3955
                self.match(Cobol85Parser.LOCK)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ClosePortFileIOStatementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.ClosePortFileIOStatementContext, self).__init__(parent, invokingState)
            self.parser = parser

        def NO(self):
            return self.getToken(Cobol85Parser.NO, 0)

        def WAIT(self):
            return self.getToken(Cobol85Parser.WAIT, 0)

        def WITH(self):
            return self.getToken(Cobol85Parser.WITH, 0)

        def USING(self):
            return self.getToken(Cobol85Parser.USING, 0)

        def closePortFileIOUsing(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.ClosePortFileIOUsingContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.ClosePortFileIOUsingContext,i)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_closePortFileIOStatement

        def enterRule(self, listener):
            if hasattr(listener, "enterClosePortFileIOStatement"):
                listener.enterClosePortFileIOStatement(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitClosePortFileIOStatement"):
                listener.exitClosePortFileIOStatement(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitClosePortFileIOStatement"):
                return visitor.visitClosePortFileIOStatement(self)
            else:
                return visitor.visitChildren(self)




    def closePortFileIOStatement(self):

        localctx = Cobol85Parser.ClosePortFileIOStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 602, self.RULE_closePortFileIOStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3965
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,535,self._ctx)
            if la_ == 1:
                self.state = 3959
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Cobol85Parser.WITH:
                    self.state = 3958
                    self.match(Cobol85Parser.WITH)


                self.state = 3961
                self.match(Cobol85Parser.NO)
                self.state = 3962
                self.match(Cobol85Parser.WAIT)
                pass

            elif la_ == 2:
                self.state = 3963
                self.match(Cobol85Parser.WITH)
                self.state = 3964
                self.match(Cobol85Parser.WAIT)
                pass


            self.state = 3973
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.USING:
                self.state = 3967
                self.match(Cobol85Parser.USING)
                self.state = 3969 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 3968
                        self.closePortFileIOUsing()

                    else:
                        raise NoViableAltException(self)
                    self.state = 3971 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,536,self._ctx)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ClosePortFileIOUsingContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.ClosePortFileIOUsingContext, self).__init__(parent, invokingState)
            self.parser = parser

        def closePortFileIOUsingCloseDisposition(self):
            return self.getTypedRuleContext(Cobol85Parser.ClosePortFileIOUsingCloseDispositionContext,0)


        def closePortFileIOUsingAssociatedData(self):
            return self.getTypedRuleContext(Cobol85Parser.ClosePortFileIOUsingAssociatedDataContext,0)


        def closePortFileIOUsingAssociatedDataLength(self):
            return self.getTypedRuleContext(Cobol85Parser.ClosePortFileIOUsingAssociatedDataLengthContext,0)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_closePortFileIOUsing

        def enterRule(self, listener):
            if hasattr(listener, "enterClosePortFileIOUsing"):
                listener.enterClosePortFileIOUsing(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitClosePortFileIOUsing"):
                listener.exitClosePortFileIOUsing(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitClosePortFileIOUsing"):
                return visitor.visitClosePortFileIOUsing(self)
            else:
                return visitor.visitChildren(self)




    def closePortFileIOUsing(self):

        localctx = Cobol85Parser.ClosePortFileIOUsingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 604, self.RULE_closePortFileIOUsing)
        try:
            self.state = 3978
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Cobol85Parser.CLOSE_DISPOSITION]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3975
                self.closePortFileIOUsingCloseDisposition()
                pass
            elif token in [Cobol85Parser.ASSOCIATED_DATA]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3976
                self.closePortFileIOUsingAssociatedData()
                pass
            elif token in [Cobol85Parser.ASSOCIATED_DATA_LENGTH]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3977
                self.closePortFileIOUsingAssociatedDataLength()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ClosePortFileIOUsingCloseDispositionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.ClosePortFileIOUsingCloseDispositionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def CLOSE_DISPOSITION(self):
            return self.getToken(Cobol85Parser.CLOSE_DISPOSITION, 0)

        def ABORT(self):
            return self.getToken(Cobol85Parser.ABORT, 0)

        def ORDERLY(self):
            return self.getToken(Cobol85Parser.ORDERLY, 0)

        def OF(self):
            return self.getToken(Cobol85Parser.OF, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_closePortFileIOUsingCloseDisposition

        def enterRule(self, listener):
            if hasattr(listener, "enterClosePortFileIOUsingCloseDisposition"):
                listener.enterClosePortFileIOUsingCloseDisposition(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitClosePortFileIOUsingCloseDisposition"):
                listener.exitClosePortFileIOUsingCloseDisposition(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitClosePortFileIOUsingCloseDisposition"):
                return visitor.visitClosePortFileIOUsingCloseDisposition(self)
            else:
                return visitor.visitChildren(self)




    def closePortFileIOUsingCloseDisposition(self):

        localctx = Cobol85Parser.ClosePortFileIOUsingCloseDispositionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 606, self.RULE_closePortFileIOUsingCloseDisposition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3980
            self.match(Cobol85Parser.CLOSE_DISPOSITION)
            self.state = 3982
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.OF:
                self.state = 3981
                self.match(Cobol85Parser.OF)


            self.state = 3984
            _la = self._input.LA(1)
            if not(_la==Cobol85Parser.ABORT or _la==Cobol85Parser.ORDERLY):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ClosePortFileIOUsingAssociatedDataContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.ClosePortFileIOUsingAssociatedDataContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ASSOCIATED_DATA(self):
            return self.getToken(Cobol85Parser.ASSOCIATED_DATA, 0)

        def identifier(self):
            return self.getTypedRuleContext(Cobol85Parser.IdentifierContext,0)


        def integerLiteral(self):
            return self.getTypedRuleContext(Cobol85Parser.IntegerLiteralContext,0)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_closePortFileIOUsingAssociatedData

        def enterRule(self, listener):
            if hasattr(listener, "enterClosePortFileIOUsingAssociatedData"):
                listener.enterClosePortFileIOUsingAssociatedData(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitClosePortFileIOUsingAssociatedData"):
                listener.exitClosePortFileIOUsingAssociatedData(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitClosePortFileIOUsingAssociatedData"):
                return visitor.visitClosePortFileIOUsingAssociatedData(self)
            else:
                return visitor.visitChildren(self)




    def closePortFileIOUsingAssociatedData(self):

        localctx = Cobol85Parser.ClosePortFileIOUsingAssociatedDataContext(self, self._ctx, self.state)
        self.enterRule(localctx, 608, self.RULE_closePortFileIOUsingAssociatedData)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3986
            self.match(Cobol85Parser.ASSOCIATED_DATA)
            self.state = 3989
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,540,self._ctx)
            if la_ == 1:
                self.state = 3987
                self.identifier()
                pass

            elif la_ == 2:
                self.state = 3988
                self.integerLiteral()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ClosePortFileIOUsingAssociatedDataLengthContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.ClosePortFileIOUsingAssociatedDataLengthContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ASSOCIATED_DATA_LENGTH(self):
            return self.getToken(Cobol85Parser.ASSOCIATED_DATA_LENGTH, 0)

        def identifier(self):
            return self.getTypedRuleContext(Cobol85Parser.IdentifierContext,0)


        def integerLiteral(self):
            return self.getTypedRuleContext(Cobol85Parser.IntegerLiteralContext,0)


        def OF(self):
            return self.getToken(Cobol85Parser.OF, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_closePortFileIOUsingAssociatedDataLength

        def enterRule(self, listener):
            if hasattr(listener, "enterClosePortFileIOUsingAssociatedDataLength"):
                listener.enterClosePortFileIOUsingAssociatedDataLength(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitClosePortFileIOUsingAssociatedDataLength"):
                listener.exitClosePortFileIOUsingAssociatedDataLength(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitClosePortFileIOUsingAssociatedDataLength"):
                return visitor.visitClosePortFileIOUsingAssociatedDataLength(self)
            else:
                return visitor.visitChildren(self)




    def closePortFileIOUsingAssociatedDataLength(self):

        localctx = Cobol85Parser.ClosePortFileIOUsingAssociatedDataLengthContext(self, self._ctx, self.state)
        self.enterRule(localctx, 610, self.RULE_closePortFileIOUsingAssociatedDataLength)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3991
            self.match(Cobol85Parser.ASSOCIATED_DATA_LENGTH)
            self.state = 3993
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.OF:
                self.state = 3992
                self.match(Cobol85Parser.OF)


            self.state = 3997
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,542,self._ctx)
            if la_ == 1:
                self.state = 3995
                self.identifier()
                pass

            elif la_ == 2:
                self.state = 3996
                self.integerLiteral()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ComputeStatementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.ComputeStatementContext, self).__init__(parent, invokingState)
            self.parser = parser

        def COMPUTE(self):
            return self.getToken(Cobol85Parser.COMPUTE, 0)

        def arithmeticExpression(self):
            return self.getTypedRuleContext(Cobol85Parser.ArithmeticExpressionContext,0)


        def EQUALCHAR(self):
            return self.getToken(Cobol85Parser.EQUALCHAR, 0)

        def EQUAL(self):
            return self.getToken(Cobol85Parser.EQUAL, 0)

        def computeStore(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.ComputeStoreContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.ComputeStoreContext,i)


        def onSizeErrorPhrase(self):
            return self.getTypedRuleContext(Cobol85Parser.OnSizeErrorPhraseContext,0)


        def notOnSizeErrorPhrase(self):
            return self.getTypedRuleContext(Cobol85Parser.NotOnSizeErrorPhraseContext,0)


        def END_COMPUTE(self):
            return self.getToken(Cobol85Parser.END_COMPUTE, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_computeStatement

        def enterRule(self, listener):
            if hasattr(listener, "enterComputeStatement"):
                listener.enterComputeStatement(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitComputeStatement"):
                listener.exitComputeStatement(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitComputeStatement"):
                return visitor.visitComputeStatement(self)
            else:
                return visitor.visitChildren(self)




    def computeStatement(self):

        localctx = Cobol85Parser.ComputeStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 612, self.RULE_computeStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3999
            self.match(Cobol85Parser.COMPUTE)
            self.state = 4001 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 4000
                self.computeStore()
                self.state = 4003 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.ADDRESS) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE) | (1 << Cobol85Parser.AUTO) | (1 << Cobol85Parser.AUTO_SKIP) | (1 << Cobol85Parser.BACKGROUND_COLOR) | (1 << Cobol85Parser.BACKGROUND_COLOUR) | (1 << Cobol85Parser.BEEP) | (1 << Cobol85Parser.BELL) | (1 << Cobol85Parser.BINARY) | (1 << Cobol85Parser.BIT) | (1 << Cobol85Parser.BLINK) | (1 << Cobol85Parser.BLOB) | (1 << Cobol85Parser.BOUNDS) | (1 << Cobol85Parser.CAPABLE) | (1 << Cobol85Parser.CCSVERSION) | (1 << Cobol85Parser.CHANGED) | (1 << Cobol85Parser.CHANNEL))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (Cobol85Parser.CLOB - 67)) | (1 << (Cobol85Parser.CLOSE_DISPOSITION - 67)) | (1 << (Cobol85Parser.COBOL - 67)) | (1 << (Cobol85Parser.COMMITMENT - 67)) | (1 << (Cobol85Parser.CONTROL_POINT - 67)) | (1 << (Cobol85Parser.CONVENTION - 67)) | (1 << (Cobol85Parser.CRUNCH - 67)) | (1 << (Cobol85Parser.CURSOR - 67)) | (1 << (Cobol85Parser.DATE - 67)) | (1 << (Cobol85Parser.DAY - 67)) | (1 << (Cobol85Parser.DAY_OF_WEEK - 67)) | (1 << (Cobol85Parser.DBCLOB - 67)) | (1 << (Cobol85Parser.DEBUG_CONTENTS - 67)) | (1 << (Cobol85Parser.DEBUG_ITEM - 67)) | (1 << (Cobol85Parser.DEBUG_LINE - 67)) | (1 << (Cobol85Parser.DEBUG_NAME - 67)) | (1 << (Cobol85Parser.DEBUG_SUB_1 - 67)) | (1 << (Cobol85Parser.DEBUG_SUB_2 - 67)) | (1 << (Cobol85Parser.DEBUG_SUB_3 - 67)))) != 0) or ((((_la - 131)) & ~0x3f) == 0 and ((1 << (_la - 131)) & ((1 << (Cobol85Parser.DEFAULT - 131)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 131)) | (1 << (Cobol85Parser.DEFINITION - 131)) | (1 << (Cobol85Parser.DFHRESP - 131)) | (1 << (Cobol85Parser.DFHVALUE - 131)) | (1 << (Cobol85Parser.DISK - 131)) | (1 << (Cobol85Parser.DONTCARE - 131)) | (1 << (Cobol85Parser.DOUBLE - 131)) | (1 << (Cobol85Parser.EBCDIC - 131)) | (1 << (Cobol85Parser.EMPTY_CHECK - 131)) | (1 << (Cobol85Parser.ENTER - 131)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 131)) | (1 << (Cobol85Parser.ERASE - 131)) | (1 << (Cobol85Parser.EOL - 131)) | (1 << (Cobol85Parser.EOS - 131)))) != 0) or ((((_la - 195)) & ~0x3f) == 0 and ((1 << (_la - 195)) & ((1 << (Cobol85Parser.ESCAPE - 195)) | (1 << (Cobol85Parser.EVENT - 195)) | (1 << (Cobol85Parser.EXCLUSIVE - 195)) | (1 << (Cobol85Parser.EXPORT - 195)) | (1 << (Cobol85Parser.EXTENDED - 195)) | (1 << (Cobol85Parser.FOREGROUND_COLOR - 195)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 195)) | (1 << (Cobol85Parser.FULL - 195)) | (1 << (Cobol85Parser.FUNCTION - 195)) | (1 << (Cobol85Parser.FUNCTIONNAME - 195)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 195)) | (1 << (Cobol85Parser.GRID - 195)) | (1 << (Cobol85Parser.HIGHLIGHT - 195)) | (1 << (Cobol85Parser.IMPLICIT - 195)) | (1 << (Cobol85Parser.IMPORT - 195)) | (1 << (Cobol85Parser.INTEGER - 195)))) != 0) or ((((_la - 262)) & ~0x3f) == 0 and ((1 << (_la - 262)) & ((1 << (Cobol85Parser.KEPT - 262)) | (1 << (Cobol85Parser.KEYBOARD - 262)) | (1 << (Cobol85Parser.LANGUAGE - 262)) | (1 << (Cobol85Parser.LB - 262)) | (1 << (Cobol85Parser.LD - 262)) | (1 << (Cobol85Parser.LEFTLINE - 262)) | (1 << (Cobol85Parser.LENGTH - 262)) | (1 << (Cobol85Parser.LENGTH_CHECK - 262)) | (1 << (Cobol85Parser.LIBACCESS - 262)) | (1 << (Cobol85Parser.LIBPARAMETER - 262)) | (1 << (Cobol85Parser.LIBRARY - 262)) | (1 << (Cobol85Parser.LINAGE_COUNTER - 262)) | (1 << (Cobol85Parser.LINE_COUNTER - 262)) | (1 << (Cobol85Parser.LIST - 262)) | (1 << (Cobol85Parser.LOCAL - 262)) | (1 << (Cobol85Parser.LONG_DATE - 262)) | (1 << (Cobol85Parser.LONG_TIME - 262)) | (1 << (Cobol85Parser.LOWER - 262)) | (1 << (Cobol85Parser.LOWLIGHT - 262)) | (1 << (Cobol85Parser.MMDDYYYY - 262)) | (1 << (Cobol85Parser.NAMED - 262)) | (1 << (Cobol85Parser.NATIONAL - 262)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 262)) | (1 << (Cobol85Parser.NETWORK - 262)) | (1 << (Cobol85Parser.NO_ECHO - 262)) | (1 << (Cobol85Parser.NUMERIC_DATE - 262)) | (1 << (Cobol85Parser.NUMERIC_TIME - 262)))) != 0) or ((((_la - 326)) & ~0x3f) == 0 and ((1 << (_la - 326)) & ((1 << (Cobol85Parser.ODT - 326)) | (1 << (Cobol85Parser.ORDERLY - 326)) | (1 << (Cobol85Parser.OVERLINE - 326)) | (1 << (Cobol85Parser.OWN - 326)) | (1 << (Cobol85Parser.PAGE_COUNTER - 326)) | (1 << (Cobol85Parser.PASSWORD - 326)) | (1 << (Cobol85Parser.PORT - 326)) | (1 << (Cobol85Parser.PRINTER - 326)) | (1 << (Cobol85Parser.PRIVATE - 326)) | (1 << (Cobol85Parser.PROCESS - 326)) | (1 << (Cobol85Parser.PROGRAM - 326)) | (1 << (Cobol85Parser.PROMPT - 326)) | (1 << (Cobol85Parser.READER - 326)) | (1 << (Cobol85Parser.REMOTE - 326)) | (1 << (Cobol85Parser.REAL - 326)) | (1 << (Cobol85Parser.RECEIVED - 326)) | (1 << (Cobol85Parser.RECURSIVE - 326)) | (1 << (Cobol85Parser.REF - 326)))) != 0) or ((((_la - 395)) & ~0x3f) == 0 and ((1 << (_la - 395)) & ((1 << (Cobol85Parser.REMOVE - 395)) | (1 << (Cobol85Parser.REQUIRED - 395)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 395)) | (1 << (Cobol85Parser.RETURN_CODE - 395)) | (1 << (Cobol85Parser.SAVE - 395)) | (1 << (Cobol85Parser.SECURE - 395)) | (1 << (Cobol85Parser.SHARED - 395)) | (1 << (Cobol85Parser.SHAREDBYALL - 395)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 395)) | (1 << (Cobol85Parser.SHARING - 395)) | (1 << (Cobol85Parser.SHIFT_IN - 395)) | (1 << (Cobol85Parser.SHIFT_OUT - 395)) | (1 << (Cobol85Parser.SHORT_DATE - 395)) | (1 << (Cobol85Parser.SORT_CONTROL - 395)) | (1 << (Cobol85Parser.SORT_CORE_SIZE - 395)) | (1 << (Cobol85Parser.SORT_FILE_SIZE - 395)) | (1 << (Cobol85Parser.SORT_MESSAGE - 395)) | (1 << (Cobol85Parser.SORT_MODE_SIZE - 395)) | (1 << (Cobol85Parser.SORT_RETURN - 395)) | (1 << (Cobol85Parser.SQL - 395)))) != 0) or ((((_la - 471)) & ~0x3f) == 0 and ((1 << (_la - 471)) & ((1 << (Cobol85Parser.SYMBOL - 471)) | (1 << (Cobol85Parser.TALLY - 471)) | (1 << (Cobol85Parser.TASK - 471)) | (1 << (Cobol85Parser.THREAD - 471)) | (1 << (Cobol85Parser.THREAD_LOCAL - 471)) | (1 << (Cobol85Parser.TIME - 471)) | (1 << (Cobol85Parser.TIMER - 471)) | (1 << (Cobol85Parser.TODAYS_DATE - 471)) | (1 << (Cobol85Parser.TODAYS_NAME - 471)) | (1 << (Cobol85Parser.TRUNCATED - 471)) | (1 << (Cobol85Parser.TYPEDEF - 471)) | (1 << (Cobol85Parser.UNDERLINE - 471)) | (1 << (Cobol85Parser.VIRTUAL - 471)) | (1 << (Cobol85Parser.WAIT - 471)) | (1 << (Cobol85Parser.WHEN_COMPILED - 471)) | (1 << (Cobol85Parser.YEAR - 471)) | (1 << (Cobol85Parser.YYYYMMDD - 471)) | (1 << (Cobol85Parser.YYYYDDD - 471)) | (1 << (Cobol85Parser.ZERO_FILL - 471)))) != 0) or ((((_la - 557)) & ~0x3f) == 0 and ((1 << (_la - 557)) & ((1 << (Cobol85Parser.LEVEL_NUMBER_66 - 557)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 557)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 557)) | (1 << (Cobol85Parser.INTEGERLITERAL - 557)) | (1 << (Cobol85Parser.IDENTIFIER - 557)))) != 0)):
                    break

            self.state = 4005
            _la = self._input.LA(1)
            if not(_la==Cobol85Parser.EQUAL or _la==Cobol85Parser.EQUALCHAR):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 4006
            self.arithmeticExpression()
            self.state = 4008
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,544,self._ctx)
            if la_ == 1:
                self.state = 4007
                self.onSizeErrorPhrase()


            self.state = 4011
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,545,self._ctx)
            if la_ == 1:
                self.state = 4010
                self.notOnSizeErrorPhrase()


            self.state = 4014
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,546,self._ctx)
            if la_ == 1:
                self.state = 4013
                self.match(Cobol85Parser.END_COMPUTE)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ComputeStoreContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.ComputeStoreContext, self).__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(Cobol85Parser.IdentifierContext,0)


        def ROUNDED(self):
            return self.getToken(Cobol85Parser.ROUNDED, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_computeStore

        def enterRule(self, listener):
            if hasattr(listener, "enterComputeStore"):
                listener.enterComputeStore(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitComputeStore"):
                listener.exitComputeStore(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitComputeStore"):
                return visitor.visitComputeStore(self)
            else:
                return visitor.visitChildren(self)




    def computeStore(self):

        localctx = Cobol85Parser.ComputeStoreContext(self, self._ctx, self.state)
        self.enterRule(localctx, 614, self.RULE_computeStore)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4016
            self.identifier()
            self.state = 4018
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.ROUNDED:
                self.state = 4017
                self.match(Cobol85Parser.ROUNDED)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ContinueStatementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.ContinueStatementContext, self).__init__(parent, invokingState)
            self.parser = parser

        def CONTINUE(self):
            return self.getToken(Cobol85Parser.CONTINUE, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_continueStatement

        def enterRule(self, listener):
            if hasattr(listener, "enterContinueStatement"):
                listener.enterContinueStatement(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitContinueStatement"):
                listener.exitContinueStatement(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitContinueStatement"):
                return visitor.visitContinueStatement(self)
            else:
                return visitor.visitChildren(self)




    def continueStatement(self):

        localctx = Cobol85Parser.ContinueStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 616, self.RULE_continueStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4020
            self.match(Cobol85Parser.CONTINUE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DeleteStatementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.DeleteStatementContext, self).__init__(parent, invokingState)
            self.parser = parser

        def DELETE(self):
            return self.getToken(Cobol85Parser.DELETE, 0)

        def fileName(self):
            return self.getTypedRuleContext(Cobol85Parser.FileNameContext,0)


        def RECORD(self):
            return self.getToken(Cobol85Parser.RECORD, 0)

        def invalidKeyPhrase(self):
            return self.getTypedRuleContext(Cobol85Parser.InvalidKeyPhraseContext,0)


        def notInvalidKeyPhrase(self):
            return self.getTypedRuleContext(Cobol85Parser.NotInvalidKeyPhraseContext,0)


        def END_DELETE(self):
            return self.getToken(Cobol85Parser.END_DELETE, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_deleteStatement

        def enterRule(self, listener):
            if hasattr(listener, "enterDeleteStatement"):
                listener.enterDeleteStatement(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitDeleteStatement"):
                listener.exitDeleteStatement(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitDeleteStatement"):
                return visitor.visitDeleteStatement(self)
            else:
                return visitor.visitChildren(self)




    def deleteStatement(self):

        localctx = Cobol85Parser.DeleteStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 618, self.RULE_deleteStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4022
            self.match(Cobol85Parser.DELETE)
            self.state = 4023
            self.fileName()
            self.state = 4025
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.RECORD:
                self.state = 4024
                self.match(Cobol85Parser.RECORD)


            self.state = 4028
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,549,self._ctx)
            if la_ == 1:
                self.state = 4027
                self.invalidKeyPhrase()


            self.state = 4031
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,550,self._ctx)
            if la_ == 1:
                self.state = 4030
                self.notInvalidKeyPhrase()


            self.state = 4034
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,551,self._ctx)
            if la_ == 1:
                self.state = 4033
                self.match(Cobol85Parser.END_DELETE)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DisableStatementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.DisableStatementContext, self).__init__(parent, invokingState)
            self.parser = parser

        def DISABLE(self):
            return self.getToken(Cobol85Parser.DISABLE, 0)

        def cdName(self):
            return self.getTypedRuleContext(Cobol85Parser.CdNameContext,0)


        def KEY(self):
            return self.getToken(Cobol85Parser.KEY, 0)

        def INPUT(self):
            return self.getToken(Cobol85Parser.INPUT, 0)

        def I_O(self):
            return self.getToken(Cobol85Parser.I_O, 0)

        def TERMINAL(self):
            return self.getToken(Cobol85Parser.TERMINAL, 0)

        def OUTPUT(self):
            return self.getToken(Cobol85Parser.OUTPUT, 0)

        def identifier(self):
            return self.getTypedRuleContext(Cobol85Parser.IdentifierContext,0)


        def literal(self):
            return self.getTypedRuleContext(Cobol85Parser.LiteralContext,0)


        def WITH(self):
            return self.getToken(Cobol85Parser.WITH, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_disableStatement

        def enterRule(self, listener):
            if hasattr(listener, "enterDisableStatement"):
                listener.enterDisableStatement(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitDisableStatement"):
                listener.exitDisableStatement(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitDisableStatement"):
                return visitor.visitDisableStatement(self)
            else:
                return visitor.visitChildren(self)




    def disableStatement(self):

        localctx = Cobol85Parser.DisableStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 620, self.RULE_disableStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4036
            self.match(Cobol85Parser.DISABLE)
            self.state = 4044
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Cobol85Parser.INPUT]:
                self.state = 4037
                self.match(Cobol85Parser.INPUT)
                self.state = 4039
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Cobol85Parser.TERMINAL:
                    self.state = 4038
                    self.match(Cobol85Parser.TERMINAL)


                pass
            elif token in [Cobol85Parser.I_O]:
                self.state = 4041
                self.match(Cobol85Parser.I_O)
                self.state = 4042
                self.match(Cobol85Parser.TERMINAL)
                pass
            elif token in [Cobol85Parser.OUTPUT]:
                self.state = 4043
                self.match(Cobol85Parser.OUTPUT)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 4046
            self.cdName()
            self.state = 4048
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.WITH:
                self.state = 4047
                self.match(Cobol85Parser.WITH)


            self.state = 4050
            self.match(Cobol85Parser.KEY)
            self.state = 4053
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,555,self._ctx)
            if la_ == 1:
                self.state = 4051
                self.identifier()
                pass

            elif la_ == 2:
                self.state = 4052
                self.literal()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DisplayStatementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.DisplayStatementContext, self).__init__(parent, invokingState)
            self.parser = parser

        def DISPLAY(self):
            return self.getToken(Cobol85Parser.DISPLAY, 0)

        def displayOperand(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.DisplayOperandContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.DisplayOperandContext,i)


        def displayAt(self):
            return self.getTypedRuleContext(Cobol85Parser.DisplayAtContext,0)


        def displayUpon(self):
            return self.getTypedRuleContext(Cobol85Parser.DisplayUponContext,0)


        def displayWith(self):
            return self.getTypedRuleContext(Cobol85Parser.DisplayWithContext,0)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_displayStatement

        def enterRule(self, listener):
            if hasattr(listener, "enterDisplayStatement"):
                listener.enterDisplayStatement(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitDisplayStatement"):
                listener.exitDisplayStatement(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitDisplayStatement"):
                return visitor.visitDisplayStatement(self)
            else:
                return visitor.visitChildren(self)




    def displayStatement(self):

        localctx = Cobol85Parser.DisplayStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 622, self.RULE_displayStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4055
            self.match(Cobol85Parser.DISPLAY)
            self.state = 4057 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 4056
                self.displayOperand()
                self.state = 4059 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.ADDRESS) | (1 << Cobol85Parser.ALL) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE) | (1 << Cobol85Parser.AUTO) | (1 << Cobol85Parser.AUTO_SKIP) | (1 << Cobol85Parser.BACKGROUND_COLOR) | (1 << Cobol85Parser.BACKGROUND_COLOUR) | (1 << Cobol85Parser.BEEP) | (1 << Cobol85Parser.BELL) | (1 << Cobol85Parser.BINARY) | (1 << Cobol85Parser.BIT) | (1 << Cobol85Parser.BLINK) | (1 << Cobol85Parser.BLOB) | (1 << Cobol85Parser.BOUNDS) | (1 << Cobol85Parser.CAPABLE) | (1 << Cobol85Parser.CCSVERSION) | (1 << Cobol85Parser.CHANGED) | (1 << Cobol85Parser.CHANNEL))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (Cobol85Parser.CLOB - 67)) | (1 << (Cobol85Parser.CLOSE_DISPOSITION - 67)) | (1 << (Cobol85Parser.COBOL - 67)) | (1 << (Cobol85Parser.COMMITMENT - 67)) | (1 << (Cobol85Parser.CONTROL_POINT - 67)) | (1 << (Cobol85Parser.CONVENTION - 67)) | (1 << (Cobol85Parser.CRUNCH - 67)) | (1 << (Cobol85Parser.CURSOR - 67)) | (1 << (Cobol85Parser.DATE - 67)) | (1 << (Cobol85Parser.DAY - 67)) | (1 << (Cobol85Parser.DAY_OF_WEEK - 67)) | (1 << (Cobol85Parser.DBCLOB - 67)) | (1 << (Cobol85Parser.DEBUG_CONTENTS - 67)) | (1 << (Cobol85Parser.DEBUG_ITEM - 67)) | (1 << (Cobol85Parser.DEBUG_LINE - 67)) | (1 << (Cobol85Parser.DEBUG_NAME - 67)) | (1 << (Cobol85Parser.DEBUG_SUB_1 - 67)) | (1 << (Cobol85Parser.DEBUG_SUB_2 - 67)) | (1 << (Cobol85Parser.DEBUG_SUB_3 - 67)))) != 0) or ((((_la - 131)) & ~0x3f) == 0 and ((1 << (_la - 131)) & ((1 << (Cobol85Parser.DEFAULT - 131)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 131)) | (1 << (Cobol85Parser.DEFINITION - 131)) | (1 << (Cobol85Parser.DFHRESP - 131)) | (1 << (Cobol85Parser.DFHVALUE - 131)) | (1 << (Cobol85Parser.DISK - 131)) | (1 << (Cobol85Parser.DONTCARE - 131)) | (1 << (Cobol85Parser.DOUBLE - 131)) | (1 << (Cobol85Parser.EBCDIC - 131)) | (1 << (Cobol85Parser.EMPTY_CHECK - 131)) | (1 << (Cobol85Parser.ENTER - 131)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 131)) | (1 << (Cobol85Parser.ERASE - 131)) | (1 << (Cobol85Parser.EOL - 131)) | (1 << (Cobol85Parser.EOS - 131)))) != 0) or ((((_la - 195)) & ~0x3f) == 0 and ((1 << (_la - 195)) & ((1 << (Cobol85Parser.ESCAPE - 195)) | (1 << (Cobol85Parser.EVENT - 195)) | (1 << (Cobol85Parser.EXCLUSIVE - 195)) | (1 << (Cobol85Parser.EXPORT - 195)) | (1 << (Cobol85Parser.EXTENDED - 195)) | (1 << (Cobol85Parser.FALSE - 195)) | (1 << (Cobol85Parser.FOREGROUND_COLOR - 195)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 195)) | (1 << (Cobol85Parser.FULL - 195)) | (1 << (Cobol85Parser.FUNCTION - 195)) | (1 << (Cobol85Parser.FUNCTIONNAME - 195)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 195)) | (1 << (Cobol85Parser.GRID - 195)) | (1 << (Cobol85Parser.HIGHLIGHT - 195)) | (1 << (Cobol85Parser.HIGH_VALUE - 195)) | (1 << (Cobol85Parser.HIGH_VALUES - 195)) | (1 << (Cobol85Parser.IMPLICIT - 195)) | (1 << (Cobol85Parser.IMPORT - 195)) | (1 << (Cobol85Parser.INTEGER - 195)))) != 0) or ((((_la - 262)) & ~0x3f) == 0 and ((1 << (_la - 262)) & ((1 << (Cobol85Parser.KEPT - 262)) | (1 << (Cobol85Parser.KEYBOARD - 262)) | (1 << (Cobol85Parser.LANGUAGE - 262)) | (1 << (Cobol85Parser.LB - 262)) | (1 << (Cobol85Parser.LD - 262)) | (1 << (Cobol85Parser.LEFTLINE - 262)) | (1 << (Cobol85Parser.LENGTH - 262)) | (1 << (Cobol85Parser.LENGTH_CHECK - 262)) | (1 << (Cobol85Parser.LIBACCESS - 262)) | (1 << (Cobol85Parser.LIBPARAMETER - 262)) | (1 << (Cobol85Parser.LIBRARY - 262)) | (1 << (Cobol85Parser.LINAGE_COUNTER - 262)) | (1 << (Cobol85Parser.LINE_COUNTER - 262)) | (1 << (Cobol85Parser.LIST - 262)) | (1 << (Cobol85Parser.LOCAL - 262)) | (1 << (Cobol85Parser.LONG_DATE - 262)) | (1 << (Cobol85Parser.LONG_TIME - 262)) | (1 << (Cobol85Parser.LOWER - 262)) | (1 << (Cobol85Parser.LOWLIGHT - 262)) | (1 << (Cobol85Parser.LOW_VALUE - 262)) | (1 << (Cobol85Parser.LOW_VALUES - 262)) | (1 << (Cobol85Parser.MMDDYYYY - 262)) | (1 << (Cobol85Parser.NAMED - 262)) | (1 << (Cobol85Parser.NATIONAL - 262)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 262)) | (1 << (Cobol85Parser.NETWORK - 262)) | (1 << (Cobol85Parser.NO_ECHO - 262)) | (1 << (Cobol85Parser.NULL - 262)) | (1 << (Cobol85Parser.NULLS - 262)) | (1 << (Cobol85Parser.NUMERIC_DATE - 262)) | (1 << (Cobol85Parser.NUMERIC_TIME - 262)))) != 0) or ((((_la - 326)) & ~0x3f) == 0 and ((1 << (_la - 326)) & ((1 << (Cobol85Parser.ODT - 326)) | (1 << (Cobol85Parser.ORDERLY - 326)) | (1 << (Cobol85Parser.OVERLINE - 326)) | (1 << (Cobol85Parser.OWN - 326)) | (1 << (Cobol85Parser.PAGE_COUNTER - 326)) | (1 << (Cobol85Parser.PASSWORD - 326)) | (1 << (Cobol85Parser.PORT - 326)) | (1 << (Cobol85Parser.PRINTER - 326)) | (1 << (Cobol85Parser.PRIVATE - 326)) | (1 << (Cobol85Parser.PROCESS - 326)) | (1 << (Cobol85Parser.PROGRAM - 326)) | (1 << (Cobol85Parser.PROMPT - 326)) | (1 << (Cobol85Parser.QUOTE - 326)) | (1 << (Cobol85Parser.QUOTES - 326)) | (1 << (Cobol85Parser.READER - 326)) | (1 << (Cobol85Parser.REMOTE - 326)) | (1 << (Cobol85Parser.REAL - 326)) | (1 << (Cobol85Parser.RECEIVED - 326)) | (1 << (Cobol85Parser.RECURSIVE - 326)) | (1 << (Cobol85Parser.REF - 326)))) != 0) or ((((_la - 395)) & ~0x3f) == 0 and ((1 << (_la - 395)) & ((1 << (Cobol85Parser.REMOVE - 395)) | (1 << (Cobol85Parser.REQUIRED - 395)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 395)) | (1 << (Cobol85Parser.RETURN_CODE - 395)) | (1 << (Cobol85Parser.SAVE - 395)) | (1 << (Cobol85Parser.SECURE - 395)) | (1 << (Cobol85Parser.SHARED - 395)) | (1 << (Cobol85Parser.SHAREDBYALL - 395)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 395)) | (1 << (Cobol85Parser.SHARING - 395)) | (1 << (Cobol85Parser.SHIFT_IN - 395)) | (1 << (Cobol85Parser.SHIFT_OUT - 395)) | (1 << (Cobol85Parser.SHORT_DATE - 395)) | (1 << (Cobol85Parser.SORT_CONTROL - 395)) | (1 << (Cobol85Parser.SORT_CORE_SIZE - 395)) | (1 << (Cobol85Parser.SORT_FILE_SIZE - 395)) | (1 << (Cobol85Parser.SORT_MESSAGE - 395)) | (1 << (Cobol85Parser.SORT_MODE_SIZE - 395)) | (1 << (Cobol85Parser.SORT_RETURN - 395)) | (1 << (Cobol85Parser.SPACE - 395)) | (1 << (Cobol85Parser.SPACES - 395)) | (1 << (Cobol85Parser.SQL - 395)))) != 0) or ((((_la - 471)) & ~0x3f) == 0 and ((1 << (_la - 471)) & ((1 << (Cobol85Parser.SYMBOL - 471)) | (1 << (Cobol85Parser.TALLY - 471)) | (1 << (Cobol85Parser.TASK - 471)) | (1 << (Cobol85Parser.THREAD - 471)) | (1 << (Cobol85Parser.THREAD_LOCAL - 471)) | (1 << (Cobol85Parser.TIME - 471)) | (1 << (Cobol85Parser.TIMER - 471)) | (1 << (Cobol85Parser.TODAYS_DATE - 471)) | (1 << (Cobol85Parser.TODAYS_NAME - 471)) | (1 << (Cobol85Parser.TRUE - 471)) | (1 << (Cobol85Parser.TRUNCATED - 471)) | (1 << (Cobol85Parser.TYPEDEF - 471)) | (1 << (Cobol85Parser.UNDERLINE - 471)) | (1 << (Cobol85Parser.VIRTUAL - 471)) | (1 << (Cobol85Parser.WAIT - 471)) | (1 << (Cobol85Parser.WHEN_COMPILED - 471)) | (1 << (Cobol85Parser.YEAR - 471)) | (1 << (Cobol85Parser.YYYYMMDD - 471)) | (1 << (Cobol85Parser.YYYYDDD - 471)) | (1 << (Cobol85Parser.ZERO - 471)) | (1 << (Cobol85Parser.ZERO_FILL - 471)) | (1 << (Cobol85Parser.ZEROS - 471)) | (1 << (Cobol85Parser.ZEROES - 471)))) != 0) or ((((_la - 556)) & ~0x3f) == 0 and ((1 << (_la - 556)) & ((1 << (Cobol85Parser.NONNUMERICLITERAL - 556)) | (1 << (Cobol85Parser.LEVEL_NUMBER_66 - 556)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 556)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 556)) | (1 << (Cobol85Parser.INTEGERLITERAL - 556)) | (1 << (Cobol85Parser.NUMERICLITERAL - 556)) | (1 << (Cobol85Parser.IDENTIFIER - 556)))) != 0)):
                    break

            self.state = 4062
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,557,self._ctx)
            if la_ == 1:
                self.state = 4061
                self.displayAt()


            self.state = 4065
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.UPON:
                self.state = 4064
                self.displayUpon()


            self.state = 4068
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,559,self._ctx)
            if la_ == 1:
                self.state = 4067
                self.displayWith()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DisplayOperandContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.DisplayOperandContext, self).__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(Cobol85Parser.IdentifierContext,0)


        def literal(self):
            return self.getTypedRuleContext(Cobol85Parser.LiteralContext,0)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_displayOperand

        def enterRule(self, listener):
            if hasattr(listener, "enterDisplayOperand"):
                listener.enterDisplayOperand(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitDisplayOperand"):
                listener.exitDisplayOperand(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitDisplayOperand"):
                return visitor.visitDisplayOperand(self)
            else:
                return visitor.visitChildren(self)




    def displayOperand(self):

        localctx = Cobol85Parser.DisplayOperandContext(self, self._ctx, self.state)
        self.enterRule(localctx, 624, self.RULE_displayOperand)
        try:
            self.state = 4072
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,560,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4070
                self.identifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4071
                self.literal()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DisplayAtContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.DisplayAtContext, self).__init__(parent, invokingState)
            self.parser = parser

        def AT(self):
            return self.getToken(Cobol85Parser.AT, 0)

        def identifier(self):
            return self.getTypedRuleContext(Cobol85Parser.IdentifierContext,0)


        def literal(self):
            return self.getTypedRuleContext(Cobol85Parser.LiteralContext,0)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_displayAt

        def enterRule(self, listener):
            if hasattr(listener, "enterDisplayAt"):
                listener.enterDisplayAt(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitDisplayAt"):
                listener.exitDisplayAt(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitDisplayAt"):
                return visitor.visitDisplayAt(self)
            else:
                return visitor.visitChildren(self)




    def displayAt(self):

        localctx = Cobol85Parser.DisplayAtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 626, self.RULE_displayAt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4074
            self.match(Cobol85Parser.AT)
            self.state = 4077
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,561,self._ctx)
            if la_ == 1:
                self.state = 4075
                self.identifier()
                pass

            elif la_ == 2:
                self.state = 4076
                self.literal()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DisplayUponContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.DisplayUponContext, self).__init__(parent, invokingState)
            self.parser = parser

        def UPON(self):
            return self.getToken(Cobol85Parser.UPON, 0)

        def mnemonicName(self):
            return self.getTypedRuleContext(Cobol85Parser.MnemonicNameContext,0)


        def environmentName(self):
            return self.getTypedRuleContext(Cobol85Parser.EnvironmentNameContext,0)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_displayUpon

        def enterRule(self, listener):
            if hasattr(listener, "enterDisplayUpon"):
                listener.enterDisplayUpon(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitDisplayUpon"):
                listener.exitDisplayUpon(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitDisplayUpon"):
                return visitor.visitDisplayUpon(self)
            else:
                return visitor.visitChildren(self)




    def displayUpon(self):

        localctx = Cobol85Parser.DisplayUponContext(self, self._ctx, self.state)
        self.enterRule(localctx, 628, self.RULE_displayUpon)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4079
            self.match(Cobol85Parser.UPON)
            self.state = 4082
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,562,self._ctx)
            if la_ == 1:
                self.state = 4080
                self.mnemonicName()
                pass

            elif la_ == 2:
                self.state = 4081
                self.environmentName()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DisplayWithContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.DisplayWithContext, self).__init__(parent, invokingState)
            self.parser = parser

        def NO(self):
            return self.getToken(Cobol85Parser.NO, 0)

        def ADVANCING(self):
            return self.getToken(Cobol85Parser.ADVANCING, 0)

        def WITH(self):
            return self.getToken(Cobol85Parser.WITH, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_displayWith

        def enterRule(self, listener):
            if hasattr(listener, "enterDisplayWith"):
                listener.enterDisplayWith(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitDisplayWith"):
                listener.exitDisplayWith(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitDisplayWith"):
                return visitor.visitDisplayWith(self)
            else:
                return visitor.visitChildren(self)




    def displayWith(self):

        localctx = Cobol85Parser.DisplayWithContext(self, self._ctx, self.state)
        self.enterRule(localctx, 630, self.RULE_displayWith)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4085
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.WITH:
                self.state = 4084
                self.match(Cobol85Parser.WITH)


            self.state = 4087
            self.match(Cobol85Parser.NO)
            self.state = 4088
            self.match(Cobol85Parser.ADVANCING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DivideStatementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.DivideStatementContext, self).__init__(parent, invokingState)
            self.parser = parser

        def DIVIDE(self):
            return self.getToken(Cobol85Parser.DIVIDE, 0)

        def identifier(self):
            return self.getTypedRuleContext(Cobol85Parser.IdentifierContext,0)


        def literal(self):
            return self.getTypedRuleContext(Cobol85Parser.LiteralContext,0)


        def divideIntoStatement(self):
            return self.getTypedRuleContext(Cobol85Parser.DivideIntoStatementContext,0)


        def divideIntoGivingStatement(self):
            return self.getTypedRuleContext(Cobol85Parser.DivideIntoGivingStatementContext,0)


        def divideByGivingStatement(self):
            return self.getTypedRuleContext(Cobol85Parser.DivideByGivingStatementContext,0)


        def divideRemainder(self):
            return self.getTypedRuleContext(Cobol85Parser.DivideRemainderContext,0)


        def onSizeErrorPhrase(self):
            return self.getTypedRuleContext(Cobol85Parser.OnSizeErrorPhraseContext,0)


        def notOnSizeErrorPhrase(self):
            return self.getTypedRuleContext(Cobol85Parser.NotOnSizeErrorPhraseContext,0)


        def END_DIVIDE(self):
            return self.getToken(Cobol85Parser.END_DIVIDE, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_divideStatement

        def enterRule(self, listener):
            if hasattr(listener, "enterDivideStatement"):
                listener.enterDivideStatement(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitDivideStatement"):
                listener.exitDivideStatement(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitDivideStatement"):
                return visitor.visitDivideStatement(self)
            else:
                return visitor.visitChildren(self)




    def divideStatement(self):

        localctx = Cobol85Parser.DivideStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 632, self.RULE_divideStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4090
            self.match(Cobol85Parser.DIVIDE)
            self.state = 4093
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,564,self._ctx)
            if la_ == 1:
                self.state = 4091
                self.identifier()
                pass

            elif la_ == 2:
                self.state = 4092
                self.literal()
                pass


            self.state = 4098
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,565,self._ctx)
            if la_ == 1:
                self.state = 4095
                self.divideIntoStatement()
                pass

            elif la_ == 2:
                self.state = 4096
                self.divideIntoGivingStatement()
                pass

            elif la_ == 3:
                self.state = 4097
                self.divideByGivingStatement()
                pass


            self.state = 4101
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.REMAINDER:
                self.state = 4100
                self.divideRemainder()


            self.state = 4104
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,567,self._ctx)
            if la_ == 1:
                self.state = 4103
                self.onSizeErrorPhrase()


            self.state = 4107
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,568,self._ctx)
            if la_ == 1:
                self.state = 4106
                self.notOnSizeErrorPhrase()


            self.state = 4110
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,569,self._ctx)
            if la_ == 1:
                self.state = 4109
                self.match(Cobol85Parser.END_DIVIDE)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DivideIntoStatementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.DivideIntoStatementContext, self).__init__(parent, invokingState)
            self.parser = parser

        def INTO(self):
            return self.getToken(Cobol85Parser.INTO, 0)

        def divideInto(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.DivideIntoContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.DivideIntoContext,i)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_divideIntoStatement

        def enterRule(self, listener):
            if hasattr(listener, "enterDivideIntoStatement"):
                listener.enterDivideIntoStatement(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitDivideIntoStatement"):
                listener.exitDivideIntoStatement(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitDivideIntoStatement"):
                return visitor.visitDivideIntoStatement(self)
            else:
                return visitor.visitChildren(self)




    def divideIntoStatement(self):

        localctx = Cobol85Parser.DivideIntoStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 634, self.RULE_divideIntoStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4112
            self.match(Cobol85Parser.INTO)
            self.state = 4114 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 4113
                self.divideInto()
                self.state = 4116 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.ADDRESS) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE) | (1 << Cobol85Parser.AUTO) | (1 << Cobol85Parser.AUTO_SKIP) | (1 << Cobol85Parser.BACKGROUND_COLOR) | (1 << Cobol85Parser.BACKGROUND_COLOUR) | (1 << Cobol85Parser.BEEP) | (1 << Cobol85Parser.BELL) | (1 << Cobol85Parser.BINARY) | (1 << Cobol85Parser.BIT) | (1 << Cobol85Parser.BLINK) | (1 << Cobol85Parser.BLOB) | (1 << Cobol85Parser.BOUNDS) | (1 << Cobol85Parser.CAPABLE) | (1 << Cobol85Parser.CCSVERSION) | (1 << Cobol85Parser.CHANGED) | (1 << Cobol85Parser.CHANNEL))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (Cobol85Parser.CLOB - 67)) | (1 << (Cobol85Parser.CLOSE_DISPOSITION - 67)) | (1 << (Cobol85Parser.COBOL - 67)) | (1 << (Cobol85Parser.COMMITMENT - 67)) | (1 << (Cobol85Parser.CONTROL_POINT - 67)) | (1 << (Cobol85Parser.CONVENTION - 67)) | (1 << (Cobol85Parser.CRUNCH - 67)) | (1 << (Cobol85Parser.CURSOR - 67)) | (1 << (Cobol85Parser.DATE - 67)) | (1 << (Cobol85Parser.DAY - 67)) | (1 << (Cobol85Parser.DAY_OF_WEEK - 67)) | (1 << (Cobol85Parser.DBCLOB - 67)) | (1 << (Cobol85Parser.DEBUG_CONTENTS - 67)) | (1 << (Cobol85Parser.DEBUG_ITEM - 67)) | (1 << (Cobol85Parser.DEBUG_LINE - 67)) | (1 << (Cobol85Parser.DEBUG_NAME - 67)) | (1 << (Cobol85Parser.DEBUG_SUB_1 - 67)) | (1 << (Cobol85Parser.DEBUG_SUB_2 - 67)) | (1 << (Cobol85Parser.DEBUG_SUB_3 - 67)))) != 0) or ((((_la - 131)) & ~0x3f) == 0 and ((1 << (_la - 131)) & ((1 << (Cobol85Parser.DEFAULT - 131)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 131)) | (1 << (Cobol85Parser.DEFINITION - 131)) | (1 << (Cobol85Parser.DFHRESP - 131)) | (1 << (Cobol85Parser.DFHVALUE - 131)) | (1 << (Cobol85Parser.DISK - 131)) | (1 << (Cobol85Parser.DONTCARE - 131)) | (1 << (Cobol85Parser.DOUBLE - 131)) | (1 << (Cobol85Parser.EBCDIC - 131)) | (1 << (Cobol85Parser.EMPTY_CHECK - 131)) | (1 << (Cobol85Parser.ENTER - 131)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 131)) | (1 << (Cobol85Parser.ERASE - 131)) | (1 << (Cobol85Parser.EOL - 131)) | (1 << (Cobol85Parser.EOS - 131)))) != 0) or ((((_la - 195)) & ~0x3f) == 0 and ((1 << (_la - 195)) & ((1 << (Cobol85Parser.ESCAPE - 195)) | (1 << (Cobol85Parser.EVENT - 195)) | (1 << (Cobol85Parser.EXCLUSIVE - 195)) | (1 << (Cobol85Parser.EXPORT - 195)) | (1 << (Cobol85Parser.EXTENDED - 195)) | (1 << (Cobol85Parser.FOREGROUND_COLOR - 195)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 195)) | (1 << (Cobol85Parser.FULL - 195)) | (1 << (Cobol85Parser.FUNCTION - 195)) | (1 << (Cobol85Parser.FUNCTIONNAME - 195)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 195)) | (1 << (Cobol85Parser.GRID - 195)) | (1 << (Cobol85Parser.HIGHLIGHT - 195)) | (1 << (Cobol85Parser.IMPLICIT - 195)) | (1 << (Cobol85Parser.IMPORT - 195)) | (1 << (Cobol85Parser.INTEGER - 195)))) != 0) or ((((_la - 262)) & ~0x3f) == 0 and ((1 << (_la - 262)) & ((1 << (Cobol85Parser.KEPT - 262)) | (1 << (Cobol85Parser.KEYBOARD - 262)) | (1 << (Cobol85Parser.LANGUAGE - 262)) | (1 << (Cobol85Parser.LB - 262)) | (1 << (Cobol85Parser.LD - 262)) | (1 << (Cobol85Parser.LEFTLINE - 262)) | (1 << (Cobol85Parser.LENGTH - 262)) | (1 << (Cobol85Parser.LENGTH_CHECK - 262)) | (1 << (Cobol85Parser.LIBACCESS - 262)) | (1 << (Cobol85Parser.LIBPARAMETER - 262)) | (1 << (Cobol85Parser.LIBRARY - 262)) | (1 << (Cobol85Parser.LINAGE_COUNTER - 262)) | (1 << (Cobol85Parser.LINE_COUNTER - 262)) | (1 << (Cobol85Parser.LIST - 262)) | (1 << (Cobol85Parser.LOCAL - 262)) | (1 << (Cobol85Parser.LONG_DATE - 262)) | (1 << (Cobol85Parser.LONG_TIME - 262)) | (1 << (Cobol85Parser.LOWER - 262)) | (1 << (Cobol85Parser.LOWLIGHT - 262)) | (1 << (Cobol85Parser.MMDDYYYY - 262)) | (1 << (Cobol85Parser.NAMED - 262)) | (1 << (Cobol85Parser.NATIONAL - 262)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 262)) | (1 << (Cobol85Parser.NETWORK - 262)) | (1 << (Cobol85Parser.NO_ECHO - 262)) | (1 << (Cobol85Parser.NUMERIC_DATE - 262)) | (1 << (Cobol85Parser.NUMERIC_TIME - 262)))) != 0) or ((((_la - 326)) & ~0x3f) == 0 and ((1 << (_la - 326)) & ((1 << (Cobol85Parser.ODT - 326)) | (1 << (Cobol85Parser.ORDERLY - 326)) | (1 << (Cobol85Parser.OVERLINE - 326)) | (1 << (Cobol85Parser.OWN - 326)) | (1 << (Cobol85Parser.PAGE_COUNTER - 326)) | (1 << (Cobol85Parser.PASSWORD - 326)) | (1 << (Cobol85Parser.PORT - 326)) | (1 << (Cobol85Parser.PRINTER - 326)) | (1 << (Cobol85Parser.PRIVATE - 326)) | (1 << (Cobol85Parser.PROCESS - 326)) | (1 << (Cobol85Parser.PROGRAM - 326)) | (1 << (Cobol85Parser.PROMPT - 326)) | (1 << (Cobol85Parser.READER - 326)) | (1 << (Cobol85Parser.REMOTE - 326)) | (1 << (Cobol85Parser.REAL - 326)) | (1 << (Cobol85Parser.RECEIVED - 326)) | (1 << (Cobol85Parser.RECURSIVE - 326)) | (1 << (Cobol85Parser.REF - 326)))) != 0) or ((((_la - 395)) & ~0x3f) == 0 and ((1 << (_la - 395)) & ((1 << (Cobol85Parser.REMOVE - 395)) | (1 << (Cobol85Parser.REQUIRED - 395)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 395)) | (1 << (Cobol85Parser.RETURN_CODE - 395)) | (1 << (Cobol85Parser.SAVE - 395)) | (1 << (Cobol85Parser.SECURE - 395)) | (1 << (Cobol85Parser.SHARED - 395)) | (1 << (Cobol85Parser.SHAREDBYALL - 395)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 395)) | (1 << (Cobol85Parser.SHARING - 395)) | (1 << (Cobol85Parser.SHIFT_IN - 395)) | (1 << (Cobol85Parser.SHIFT_OUT - 395)) | (1 << (Cobol85Parser.SHORT_DATE - 395)) | (1 << (Cobol85Parser.SORT_CONTROL - 395)) | (1 << (Cobol85Parser.SORT_CORE_SIZE - 395)) | (1 << (Cobol85Parser.SORT_FILE_SIZE - 395)) | (1 << (Cobol85Parser.SORT_MESSAGE - 395)) | (1 << (Cobol85Parser.SORT_MODE_SIZE - 395)) | (1 << (Cobol85Parser.SORT_RETURN - 395)) | (1 << (Cobol85Parser.SQL - 395)))) != 0) or ((((_la - 471)) & ~0x3f) == 0 and ((1 << (_la - 471)) & ((1 << (Cobol85Parser.SYMBOL - 471)) | (1 << (Cobol85Parser.TALLY - 471)) | (1 << (Cobol85Parser.TASK - 471)) | (1 << (Cobol85Parser.THREAD - 471)) | (1 << (Cobol85Parser.THREAD_LOCAL - 471)) | (1 << (Cobol85Parser.TIME - 471)) | (1 << (Cobol85Parser.TIMER - 471)) | (1 << (Cobol85Parser.TODAYS_DATE - 471)) | (1 << (Cobol85Parser.TODAYS_NAME - 471)) | (1 << (Cobol85Parser.TRUNCATED - 471)) | (1 << (Cobol85Parser.TYPEDEF - 471)) | (1 << (Cobol85Parser.UNDERLINE - 471)) | (1 << (Cobol85Parser.VIRTUAL - 471)) | (1 << (Cobol85Parser.WAIT - 471)) | (1 << (Cobol85Parser.WHEN_COMPILED - 471)) | (1 << (Cobol85Parser.YEAR - 471)) | (1 << (Cobol85Parser.YYYYMMDD - 471)) | (1 << (Cobol85Parser.YYYYDDD - 471)) | (1 << (Cobol85Parser.ZERO_FILL - 471)))) != 0) or ((((_la - 557)) & ~0x3f) == 0 and ((1 << (_la - 557)) & ((1 << (Cobol85Parser.LEVEL_NUMBER_66 - 557)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 557)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 557)) | (1 << (Cobol85Parser.INTEGERLITERAL - 557)) | (1 << (Cobol85Parser.IDENTIFIER - 557)))) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DivideIntoGivingStatementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.DivideIntoGivingStatementContext, self).__init__(parent, invokingState)
            self.parser = parser

        def INTO(self):
            return self.getToken(Cobol85Parser.INTO, 0)

        def identifier(self):
            return self.getTypedRuleContext(Cobol85Parser.IdentifierContext,0)


        def literal(self):
            return self.getTypedRuleContext(Cobol85Parser.LiteralContext,0)


        def divideGivingPhrase(self):
            return self.getTypedRuleContext(Cobol85Parser.DivideGivingPhraseContext,0)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_divideIntoGivingStatement

        def enterRule(self, listener):
            if hasattr(listener, "enterDivideIntoGivingStatement"):
                listener.enterDivideIntoGivingStatement(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitDivideIntoGivingStatement"):
                listener.exitDivideIntoGivingStatement(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitDivideIntoGivingStatement"):
                return visitor.visitDivideIntoGivingStatement(self)
            else:
                return visitor.visitChildren(self)




    def divideIntoGivingStatement(self):

        localctx = Cobol85Parser.DivideIntoGivingStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 636, self.RULE_divideIntoGivingStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4118
            self.match(Cobol85Parser.INTO)
            self.state = 4121
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,571,self._ctx)
            if la_ == 1:
                self.state = 4119
                self.identifier()
                pass

            elif la_ == 2:
                self.state = 4120
                self.literal()
                pass


            self.state = 4124
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.GIVING:
                self.state = 4123
                self.divideGivingPhrase()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DivideByGivingStatementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.DivideByGivingStatementContext, self).__init__(parent, invokingState)
            self.parser = parser

        def BY(self):
            return self.getToken(Cobol85Parser.BY, 0)

        def identifier(self):
            return self.getTypedRuleContext(Cobol85Parser.IdentifierContext,0)


        def literal(self):
            return self.getTypedRuleContext(Cobol85Parser.LiteralContext,0)


        def divideGivingPhrase(self):
            return self.getTypedRuleContext(Cobol85Parser.DivideGivingPhraseContext,0)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_divideByGivingStatement

        def enterRule(self, listener):
            if hasattr(listener, "enterDivideByGivingStatement"):
                listener.enterDivideByGivingStatement(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitDivideByGivingStatement"):
                listener.exitDivideByGivingStatement(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitDivideByGivingStatement"):
                return visitor.visitDivideByGivingStatement(self)
            else:
                return visitor.visitChildren(self)




    def divideByGivingStatement(self):

        localctx = Cobol85Parser.DivideByGivingStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 638, self.RULE_divideByGivingStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4126
            self.match(Cobol85Parser.BY)
            self.state = 4129
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,573,self._ctx)
            if la_ == 1:
                self.state = 4127
                self.identifier()
                pass

            elif la_ == 2:
                self.state = 4128
                self.literal()
                pass


            self.state = 4132
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.GIVING:
                self.state = 4131
                self.divideGivingPhrase()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DivideGivingPhraseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.DivideGivingPhraseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def GIVING(self):
            return self.getToken(Cobol85Parser.GIVING, 0)

        def divideGiving(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.DivideGivingContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.DivideGivingContext,i)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_divideGivingPhrase

        def enterRule(self, listener):
            if hasattr(listener, "enterDivideGivingPhrase"):
                listener.enterDivideGivingPhrase(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitDivideGivingPhrase"):
                listener.exitDivideGivingPhrase(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitDivideGivingPhrase"):
                return visitor.visitDivideGivingPhrase(self)
            else:
                return visitor.visitChildren(self)




    def divideGivingPhrase(self):

        localctx = Cobol85Parser.DivideGivingPhraseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 640, self.RULE_divideGivingPhrase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4134
            self.match(Cobol85Parser.GIVING)
            self.state = 4136 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 4135
                self.divideGiving()
                self.state = 4138 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.ADDRESS) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE) | (1 << Cobol85Parser.AUTO) | (1 << Cobol85Parser.AUTO_SKIP) | (1 << Cobol85Parser.BACKGROUND_COLOR) | (1 << Cobol85Parser.BACKGROUND_COLOUR) | (1 << Cobol85Parser.BEEP) | (1 << Cobol85Parser.BELL) | (1 << Cobol85Parser.BINARY) | (1 << Cobol85Parser.BIT) | (1 << Cobol85Parser.BLINK) | (1 << Cobol85Parser.BLOB) | (1 << Cobol85Parser.BOUNDS) | (1 << Cobol85Parser.CAPABLE) | (1 << Cobol85Parser.CCSVERSION) | (1 << Cobol85Parser.CHANGED) | (1 << Cobol85Parser.CHANNEL))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (Cobol85Parser.CLOB - 67)) | (1 << (Cobol85Parser.CLOSE_DISPOSITION - 67)) | (1 << (Cobol85Parser.COBOL - 67)) | (1 << (Cobol85Parser.COMMITMENT - 67)) | (1 << (Cobol85Parser.CONTROL_POINT - 67)) | (1 << (Cobol85Parser.CONVENTION - 67)) | (1 << (Cobol85Parser.CRUNCH - 67)) | (1 << (Cobol85Parser.CURSOR - 67)) | (1 << (Cobol85Parser.DATE - 67)) | (1 << (Cobol85Parser.DAY - 67)) | (1 << (Cobol85Parser.DAY_OF_WEEK - 67)) | (1 << (Cobol85Parser.DBCLOB - 67)) | (1 << (Cobol85Parser.DEBUG_CONTENTS - 67)) | (1 << (Cobol85Parser.DEBUG_ITEM - 67)) | (1 << (Cobol85Parser.DEBUG_LINE - 67)) | (1 << (Cobol85Parser.DEBUG_NAME - 67)) | (1 << (Cobol85Parser.DEBUG_SUB_1 - 67)) | (1 << (Cobol85Parser.DEBUG_SUB_2 - 67)) | (1 << (Cobol85Parser.DEBUG_SUB_3 - 67)))) != 0) or ((((_la - 131)) & ~0x3f) == 0 and ((1 << (_la - 131)) & ((1 << (Cobol85Parser.DEFAULT - 131)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 131)) | (1 << (Cobol85Parser.DEFINITION - 131)) | (1 << (Cobol85Parser.DFHRESP - 131)) | (1 << (Cobol85Parser.DFHVALUE - 131)) | (1 << (Cobol85Parser.DISK - 131)) | (1 << (Cobol85Parser.DONTCARE - 131)) | (1 << (Cobol85Parser.DOUBLE - 131)) | (1 << (Cobol85Parser.EBCDIC - 131)) | (1 << (Cobol85Parser.EMPTY_CHECK - 131)) | (1 << (Cobol85Parser.ENTER - 131)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 131)) | (1 << (Cobol85Parser.ERASE - 131)) | (1 << (Cobol85Parser.EOL - 131)) | (1 << (Cobol85Parser.EOS - 131)))) != 0) or ((((_la - 195)) & ~0x3f) == 0 and ((1 << (_la - 195)) & ((1 << (Cobol85Parser.ESCAPE - 195)) | (1 << (Cobol85Parser.EVENT - 195)) | (1 << (Cobol85Parser.EXCLUSIVE - 195)) | (1 << (Cobol85Parser.EXPORT - 195)) | (1 << (Cobol85Parser.EXTENDED - 195)) | (1 << (Cobol85Parser.FOREGROUND_COLOR - 195)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 195)) | (1 << (Cobol85Parser.FULL - 195)) | (1 << (Cobol85Parser.FUNCTION - 195)) | (1 << (Cobol85Parser.FUNCTIONNAME - 195)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 195)) | (1 << (Cobol85Parser.GRID - 195)) | (1 << (Cobol85Parser.HIGHLIGHT - 195)) | (1 << (Cobol85Parser.IMPLICIT - 195)) | (1 << (Cobol85Parser.IMPORT - 195)) | (1 << (Cobol85Parser.INTEGER - 195)))) != 0) or ((((_la - 262)) & ~0x3f) == 0 and ((1 << (_la - 262)) & ((1 << (Cobol85Parser.KEPT - 262)) | (1 << (Cobol85Parser.KEYBOARD - 262)) | (1 << (Cobol85Parser.LANGUAGE - 262)) | (1 << (Cobol85Parser.LB - 262)) | (1 << (Cobol85Parser.LD - 262)) | (1 << (Cobol85Parser.LEFTLINE - 262)) | (1 << (Cobol85Parser.LENGTH - 262)) | (1 << (Cobol85Parser.LENGTH_CHECK - 262)) | (1 << (Cobol85Parser.LIBACCESS - 262)) | (1 << (Cobol85Parser.LIBPARAMETER - 262)) | (1 << (Cobol85Parser.LIBRARY - 262)) | (1 << (Cobol85Parser.LINAGE_COUNTER - 262)) | (1 << (Cobol85Parser.LINE_COUNTER - 262)) | (1 << (Cobol85Parser.LIST - 262)) | (1 << (Cobol85Parser.LOCAL - 262)) | (1 << (Cobol85Parser.LONG_DATE - 262)) | (1 << (Cobol85Parser.LONG_TIME - 262)) | (1 << (Cobol85Parser.LOWER - 262)) | (1 << (Cobol85Parser.LOWLIGHT - 262)) | (1 << (Cobol85Parser.MMDDYYYY - 262)) | (1 << (Cobol85Parser.NAMED - 262)) | (1 << (Cobol85Parser.NATIONAL - 262)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 262)) | (1 << (Cobol85Parser.NETWORK - 262)) | (1 << (Cobol85Parser.NO_ECHO - 262)) | (1 << (Cobol85Parser.NUMERIC_DATE - 262)) | (1 << (Cobol85Parser.NUMERIC_TIME - 262)))) != 0) or ((((_la - 326)) & ~0x3f) == 0 and ((1 << (_la - 326)) & ((1 << (Cobol85Parser.ODT - 326)) | (1 << (Cobol85Parser.ORDERLY - 326)) | (1 << (Cobol85Parser.OVERLINE - 326)) | (1 << (Cobol85Parser.OWN - 326)) | (1 << (Cobol85Parser.PAGE_COUNTER - 326)) | (1 << (Cobol85Parser.PASSWORD - 326)) | (1 << (Cobol85Parser.PORT - 326)) | (1 << (Cobol85Parser.PRINTER - 326)) | (1 << (Cobol85Parser.PRIVATE - 326)) | (1 << (Cobol85Parser.PROCESS - 326)) | (1 << (Cobol85Parser.PROGRAM - 326)) | (1 << (Cobol85Parser.PROMPT - 326)) | (1 << (Cobol85Parser.READER - 326)) | (1 << (Cobol85Parser.REMOTE - 326)) | (1 << (Cobol85Parser.REAL - 326)) | (1 << (Cobol85Parser.RECEIVED - 326)) | (1 << (Cobol85Parser.RECURSIVE - 326)) | (1 << (Cobol85Parser.REF - 326)))) != 0) or ((((_la - 395)) & ~0x3f) == 0 and ((1 << (_la - 395)) & ((1 << (Cobol85Parser.REMOVE - 395)) | (1 << (Cobol85Parser.REQUIRED - 395)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 395)) | (1 << (Cobol85Parser.RETURN_CODE - 395)) | (1 << (Cobol85Parser.SAVE - 395)) | (1 << (Cobol85Parser.SECURE - 395)) | (1 << (Cobol85Parser.SHARED - 395)) | (1 << (Cobol85Parser.SHAREDBYALL - 395)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 395)) | (1 << (Cobol85Parser.SHARING - 395)) | (1 << (Cobol85Parser.SHIFT_IN - 395)) | (1 << (Cobol85Parser.SHIFT_OUT - 395)) | (1 << (Cobol85Parser.SHORT_DATE - 395)) | (1 << (Cobol85Parser.SORT_CONTROL - 395)) | (1 << (Cobol85Parser.SORT_CORE_SIZE - 395)) | (1 << (Cobol85Parser.SORT_FILE_SIZE - 395)) | (1 << (Cobol85Parser.SORT_MESSAGE - 395)) | (1 << (Cobol85Parser.SORT_MODE_SIZE - 395)) | (1 << (Cobol85Parser.SORT_RETURN - 395)) | (1 << (Cobol85Parser.SQL - 395)))) != 0) or ((((_la - 471)) & ~0x3f) == 0 and ((1 << (_la - 471)) & ((1 << (Cobol85Parser.SYMBOL - 471)) | (1 << (Cobol85Parser.TALLY - 471)) | (1 << (Cobol85Parser.TASK - 471)) | (1 << (Cobol85Parser.THREAD - 471)) | (1 << (Cobol85Parser.THREAD_LOCAL - 471)) | (1 << (Cobol85Parser.TIME - 471)) | (1 << (Cobol85Parser.TIMER - 471)) | (1 << (Cobol85Parser.TODAYS_DATE - 471)) | (1 << (Cobol85Parser.TODAYS_NAME - 471)) | (1 << (Cobol85Parser.TRUNCATED - 471)) | (1 << (Cobol85Parser.TYPEDEF - 471)) | (1 << (Cobol85Parser.UNDERLINE - 471)) | (1 << (Cobol85Parser.VIRTUAL - 471)) | (1 << (Cobol85Parser.WAIT - 471)) | (1 << (Cobol85Parser.WHEN_COMPILED - 471)) | (1 << (Cobol85Parser.YEAR - 471)) | (1 << (Cobol85Parser.YYYYMMDD - 471)) | (1 << (Cobol85Parser.YYYYDDD - 471)) | (1 << (Cobol85Parser.ZERO_FILL - 471)))) != 0) or ((((_la - 557)) & ~0x3f) == 0 and ((1 << (_la - 557)) & ((1 << (Cobol85Parser.LEVEL_NUMBER_66 - 557)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 557)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 557)) | (1 << (Cobol85Parser.INTEGERLITERAL - 557)) | (1 << (Cobol85Parser.IDENTIFIER - 557)))) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DivideIntoContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.DivideIntoContext, self).__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(Cobol85Parser.IdentifierContext,0)


        def ROUNDED(self):
            return self.getToken(Cobol85Parser.ROUNDED, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_divideInto

        def enterRule(self, listener):
            if hasattr(listener, "enterDivideInto"):
                listener.enterDivideInto(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitDivideInto"):
                listener.exitDivideInto(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitDivideInto"):
                return visitor.visitDivideInto(self)
            else:
                return visitor.visitChildren(self)




    def divideInto(self):

        localctx = Cobol85Parser.DivideIntoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 642, self.RULE_divideInto)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4140
            self.identifier()
            self.state = 4142
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.ROUNDED:
                self.state = 4141
                self.match(Cobol85Parser.ROUNDED)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DivideGivingContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.DivideGivingContext, self).__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(Cobol85Parser.IdentifierContext,0)


        def ROUNDED(self):
            return self.getToken(Cobol85Parser.ROUNDED, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_divideGiving

        def enterRule(self, listener):
            if hasattr(listener, "enterDivideGiving"):
                listener.enterDivideGiving(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitDivideGiving"):
                listener.exitDivideGiving(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitDivideGiving"):
                return visitor.visitDivideGiving(self)
            else:
                return visitor.visitChildren(self)




    def divideGiving(self):

        localctx = Cobol85Parser.DivideGivingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 644, self.RULE_divideGiving)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4144
            self.identifier()
            self.state = 4146
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.ROUNDED:
                self.state = 4145
                self.match(Cobol85Parser.ROUNDED)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DivideRemainderContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.DivideRemainderContext, self).__init__(parent, invokingState)
            self.parser = parser

        def REMAINDER(self):
            return self.getToken(Cobol85Parser.REMAINDER, 0)

        def identifier(self):
            return self.getTypedRuleContext(Cobol85Parser.IdentifierContext,0)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_divideRemainder

        def enterRule(self, listener):
            if hasattr(listener, "enterDivideRemainder"):
                listener.enterDivideRemainder(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitDivideRemainder"):
                listener.exitDivideRemainder(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitDivideRemainder"):
                return visitor.visitDivideRemainder(self)
            else:
                return visitor.visitChildren(self)




    def divideRemainder(self):

        localctx = Cobol85Parser.DivideRemainderContext(self, self._ctx, self.state)
        self.enterRule(localctx, 646, self.RULE_divideRemainder)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4148
            self.match(Cobol85Parser.REMAINDER)
            self.state = 4149
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EnableStatementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.EnableStatementContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ENABLE(self):
            return self.getToken(Cobol85Parser.ENABLE, 0)

        def cdName(self):
            return self.getTypedRuleContext(Cobol85Parser.CdNameContext,0)


        def KEY(self):
            return self.getToken(Cobol85Parser.KEY, 0)

        def INPUT(self):
            return self.getToken(Cobol85Parser.INPUT, 0)

        def I_O(self):
            return self.getToken(Cobol85Parser.I_O, 0)

        def TERMINAL(self):
            return self.getToken(Cobol85Parser.TERMINAL, 0)

        def OUTPUT(self):
            return self.getToken(Cobol85Parser.OUTPUT, 0)

        def literal(self):
            return self.getTypedRuleContext(Cobol85Parser.LiteralContext,0)


        def identifier(self):
            return self.getTypedRuleContext(Cobol85Parser.IdentifierContext,0)


        def WITH(self):
            return self.getToken(Cobol85Parser.WITH, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_enableStatement

        def enterRule(self, listener):
            if hasattr(listener, "enterEnableStatement"):
                listener.enterEnableStatement(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitEnableStatement"):
                listener.exitEnableStatement(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitEnableStatement"):
                return visitor.visitEnableStatement(self)
            else:
                return visitor.visitChildren(self)




    def enableStatement(self):

        localctx = Cobol85Parser.EnableStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 648, self.RULE_enableStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4151
            self.match(Cobol85Parser.ENABLE)
            self.state = 4159
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Cobol85Parser.INPUT]:
                self.state = 4152
                self.match(Cobol85Parser.INPUT)
                self.state = 4154
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Cobol85Parser.TERMINAL:
                    self.state = 4153
                    self.match(Cobol85Parser.TERMINAL)


                pass
            elif token in [Cobol85Parser.I_O]:
                self.state = 4156
                self.match(Cobol85Parser.I_O)
                self.state = 4157
                self.match(Cobol85Parser.TERMINAL)
                pass
            elif token in [Cobol85Parser.OUTPUT]:
                self.state = 4158
                self.match(Cobol85Parser.OUTPUT)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 4161
            self.cdName()
            self.state = 4163
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.WITH:
                self.state = 4162
                self.match(Cobol85Parser.WITH)


            self.state = 4165
            self.match(Cobol85Parser.KEY)
            self.state = 4168
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,581,self._ctx)
            if la_ == 1:
                self.state = 4166
                self.literal()
                pass

            elif la_ == 2:
                self.state = 4167
                self.identifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EntryStatementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.EntryStatementContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ENTRY(self):
            return self.getToken(Cobol85Parser.ENTRY, 0)

        def literal(self):
            return self.getTypedRuleContext(Cobol85Parser.LiteralContext,0)


        def USING(self):
            return self.getToken(Cobol85Parser.USING, 0)

        def identifier(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.IdentifierContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.IdentifierContext,i)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_entryStatement

        def enterRule(self, listener):
            if hasattr(listener, "enterEntryStatement"):
                listener.enterEntryStatement(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitEntryStatement"):
                listener.exitEntryStatement(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitEntryStatement"):
                return visitor.visitEntryStatement(self)
            else:
                return visitor.visitChildren(self)




    def entryStatement(self):

        localctx = Cobol85Parser.EntryStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 650, self.RULE_entryStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4170
            self.match(Cobol85Parser.ENTRY)
            self.state = 4171
            self.literal()
            self.state = 4178
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.USING:
                self.state = 4172
                self.match(Cobol85Parser.USING)
                self.state = 4174 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 4173
                    self.identifier()
                    self.state = 4176 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.ADDRESS) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE) | (1 << Cobol85Parser.AUTO) | (1 << Cobol85Parser.AUTO_SKIP) | (1 << Cobol85Parser.BACKGROUND_COLOR) | (1 << Cobol85Parser.BACKGROUND_COLOUR) | (1 << Cobol85Parser.BEEP) | (1 << Cobol85Parser.BELL) | (1 << Cobol85Parser.BINARY) | (1 << Cobol85Parser.BIT) | (1 << Cobol85Parser.BLINK) | (1 << Cobol85Parser.BLOB) | (1 << Cobol85Parser.BOUNDS) | (1 << Cobol85Parser.CAPABLE) | (1 << Cobol85Parser.CCSVERSION) | (1 << Cobol85Parser.CHANGED) | (1 << Cobol85Parser.CHANNEL))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (Cobol85Parser.CLOB - 67)) | (1 << (Cobol85Parser.CLOSE_DISPOSITION - 67)) | (1 << (Cobol85Parser.COBOL - 67)) | (1 << (Cobol85Parser.COMMITMENT - 67)) | (1 << (Cobol85Parser.CONTROL_POINT - 67)) | (1 << (Cobol85Parser.CONVENTION - 67)) | (1 << (Cobol85Parser.CRUNCH - 67)) | (1 << (Cobol85Parser.CURSOR - 67)) | (1 << (Cobol85Parser.DATE - 67)) | (1 << (Cobol85Parser.DAY - 67)) | (1 << (Cobol85Parser.DAY_OF_WEEK - 67)) | (1 << (Cobol85Parser.DBCLOB - 67)) | (1 << (Cobol85Parser.DEBUG_CONTENTS - 67)) | (1 << (Cobol85Parser.DEBUG_ITEM - 67)) | (1 << (Cobol85Parser.DEBUG_LINE - 67)) | (1 << (Cobol85Parser.DEBUG_NAME - 67)) | (1 << (Cobol85Parser.DEBUG_SUB_1 - 67)) | (1 << (Cobol85Parser.DEBUG_SUB_2 - 67)) | (1 << (Cobol85Parser.DEBUG_SUB_3 - 67)))) != 0) or ((((_la - 131)) & ~0x3f) == 0 and ((1 << (_la - 131)) & ((1 << (Cobol85Parser.DEFAULT - 131)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 131)) | (1 << (Cobol85Parser.DEFINITION - 131)) | (1 << (Cobol85Parser.DFHRESP - 131)) | (1 << (Cobol85Parser.DFHVALUE - 131)) | (1 << (Cobol85Parser.DISK - 131)) | (1 << (Cobol85Parser.DONTCARE - 131)) | (1 << (Cobol85Parser.DOUBLE - 131)) | (1 << (Cobol85Parser.EBCDIC - 131)) | (1 << (Cobol85Parser.EMPTY_CHECK - 131)) | (1 << (Cobol85Parser.ENTER - 131)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 131)) | (1 << (Cobol85Parser.ERASE - 131)) | (1 << (Cobol85Parser.EOL - 131)) | (1 << (Cobol85Parser.EOS - 131)))) != 0) or ((((_la - 195)) & ~0x3f) == 0 and ((1 << (_la - 195)) & ((1 << (Cobol85Parser.ESCAPE - 195)) | (1 << (Cobol85Parser.EVENT - 195)) | (1 << (Cobol85Parser.EXCLUSIVE - 195)) | (1 << (Cobol85Parser.EXPORT - 195)) | (1 << (Cobol85Parser.EXTENDED - 195)) | (1 << (Cobol85Parser.FOREGROUND_COLOR - 195)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 195)) | (1 << (Cobol85Parser.FULL - 195)) | (1 << (Cobol85Parser.FUNCTION - 195)) | (1 << (Cobol85Parser.FUNCTIONNAME - 195)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 195)) | (1 << (Cobol85Parser.GRID - 195)) | (1 << (Cobol85Parser.HIGHLIGHT - 195)) | (1 << (Cobol85Parser.IMPLICIT - 195)) | (1 << (Cobol85Parser.IMPORT - 195)) | (1 << (Cobol85Parser.INTEGER - 195)))) != 0) or ((((_la - 262)) & ~0x3f) == 0 and ((1 << (_la - 262)) & ((1 << (Cobol85Parser.KEPT - 262)) | (1 << (Cobol85Parser.KEYBOARD - 262)) | (1 << (Cobol85Parser.LANGUAGE - 262)) | (1 << (Cobol85Parser.LB - 262)) | (1 << (Cobol85Parser.LD - 262)) | (1 << (Cobol85Parser.LEFTLINE - 262)) | (1 << (Cobol85Parser.LENGTH - 262)) | (1 << (Cobol85Parser.LENGTH_CHECK - 262)) | (1 << (Cobol85Parser.LIBACCESS - 262)) | (1 << (Cobol85Parser.LIBPARAMETER - 262)) | (1 << (Cobol85Parser.LIBRARY - 262)) | (1 << (Cobol85Parser.LINAGE_COUNTER - 262)) | (1 << (Cobol85Parser.LINE_COUNTER - 262)) | (1 << (Cobol85Parser.LIST - 262)) | (1 << (Cobol85Parser.LOCAL - 262)) | (1 << (Cobol85Parser.LONG_DATE - 262)) | (1 << (Cobol85Parser.LONG_TIME - 262)) | (1 << (Cobol85Parser.LOWER - 262)) | (1 << (Cobol85Parser.LOWLIGHT - 262)) | (1 << (Cobol85Parser.MMDDYYYY - 262)) | (1 << (Cobol85Parser.NAMED - 262)) | (1 << (Cobol85Parser.NATIONAL - 262)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 262)) | (1 << (Cobol85Parser.NETWORK - 262)) | (1 << (Cobol85Parser.NO_ECHO - 262)) | (1 << (Cobol85Parser.NUMERIC_DATE - 262)) | (1 << (Cobol85Parser.NUMERIC_TIME - 262)))) != 0) or ((((_la - 326)) & ~0x3f) == 0 and ((1 << (_la - 326)) & ((1 << (Cobol85Parser.ODT - 326)) | (1 << (Cobol85Parser.ORDERLY - 326)) | (1 << (Cobol85Parser.OVERLINE - 326)) | (1 << (Cobol85Parser.OWN - 326)) | (1 << (Cobol85Parser.PAGE_COUNTER - 326)) | (1 << (Cobol85Parser.PASSWORD - 326)) | (1 << (Cobol85Parser.PORT - 326)) | (1 << (Cobol85Parser.PRINTER - 326)) | (1 << (Cobol85Parser.PRIVATE - 326)) | (1 << (Cobol85Parser.PROCESS - 326)) | (1 << (Cobol85Parser.PROGRAM - 326)) | (1 << (Cobol85Parser.PROMPT - 326)) | (1 << (Cobol85Parser.READER - 326)) | (1 << (Cobol85Parser.REMOTE - 326)) | (1 << (Cobol85Parser.REAL - 326)) | (1 << (Cobol85Parser.RECEIVED - 326)) | (1 << (Cobol85Parser.RECURSIVE - 326)) | (1 << (Cobol85Parser.REF - 326)))) != 0) or ((((_la - 395)) & ~0x3f) == 0 and ((1 << (_la - 395)) & ((1 << (Cobol85Parser.REMOVE - 395)) | (1 << (Cobol85Parser.REQUIRED - 395)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 395)) | (1 << (Cobol85Parser.RETURN_CODE - 395)) | (1 << (Cobol85Parser.SAVE - 395)) | (1 << (Cobol85Parser.SECURE - 395)) | (1 << (Cobol85Parser.SHARED - 395)) | (1 << (Cobol85Parser.SHAREDBYALL - 395)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 395)) | (1 << (Cobol85Parser.SHARING - 395)) | (1 << (Cobol85Parser.SHIFT_IN - 395)) | (1 << (Cobol85Parser.SHIFT_OUT - 395)) | (1 << (Cobol85Parser.SHORT_DATE - 395)) | (1 << (Cobol85Parser.SORT_CONTROL - 395)) | (1 << (Cobol85Parser.SORT_CORE_SIZE - 395)) | (1 << (Cobol85Parser.SORT_FILE_SIZE - 395)) | (1 << (Cobol85Parser.SORT_MESSAGE - 395)) | (1 << (Cobol85Parser.SORT_MODE_SIZE - 395)) | (1 << (Cobol85Parser.SORT_RETURN - 395)) | (1 << (Cobol85Parser.SQL - 395)))) != 0) or ((((_la - 471)) & ~0x3f) == 0 and ((1 << (_la - 471)) & ((1 << (Cobol85Parser.SYMBOL - 471)) | (1 << (Cobol85Parser.TALLY - 471)) | (1 << (Cobol85Parser.TASK - 471)) | (1 << (Cobol85Parser.THREAD - 471)) | (1 << (Cobol85Parser.THREAD_LOCAL - 471)) | (1 << (Cobol85Parser.TIME - 471)) | (1 << (Cobol85Parser.TIMER - 471)) | (1 << (Cobol85Parser.TODAYS_DATE - 471)) | (1 << (Cobol85Parser.TODAYS_NAME - 471)) | (1 << (Cobol85Parser.TRUNCATED - 471)) | (1 << (Cobol85Parser.TYPEDEF - 471)) | (1 << (Cobol85Parser.UNDERLINE - 471)) | (1 << (Cobol85Parser.VIRTUAL - 471)) | (1 << (Cobol85Parser.WAIT - 471)) | (1 << (Cobol85Parser.WHEN_COMPILED - 471)) | (1 << (Cobol85Parser.YEAR - 471)) | (1 << (Cobol85Parser.YYYYMMDD - 471)) | (1 << (Cobol85Parser.YYYYDDD - 471)) | (1 << (Cobol85Parser.ZERO_FILL - 471)))) != 0) or ((((_la - 557)) & ~0x3f) == 0 and ((1 << (_la - 557)) & ((1 << (Cobol85Parser.LEVEL_NUMBER_66 - 557)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 557)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 557)) | (1 << (Cobol85Parser.INTEGERLITERAL - 557)) | (1 << (Cobol85Parser.IDENTIFIER - 557)))) != 0)):
                        break



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EvaluateStatementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.EvaluateStatementContext, self).__init__(parent, invokingState)
            self.parser = parser

        def EVALUATE(self):
            return self.getToken(Cobol85Parser.EVALUATE, 0)

        def evaluateSelect(self):
            return self.getTypedRuleContext(Cobol85Parser.EvaluateSelectContext,0)


        def evaluateAlsoSelect(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.EvaluateAlsoSelectContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.EvaluateAlsoSelectContext,i)


        def evaluateWhenPhrase(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.EvaluateWhenPhraseContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.EvaluateWhenPhraseContext,i)


        def evaluateWhenOther(self):
            return self.getTypedRuleContext(Cobol85Parser.EvaluateWhenOtherContext,0)


        def END_EVALUATE(self):
            return self.getToken(Cobol85Parser.END_EVALUATE, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_evaluateStatement

        def enterRule(self, listener):
            if hasattr(listener, "enterEvaluateStatement"):
                listener.enterEvaluateStatement(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitEvaluateStatement"):
                listener.exitEvaluateStatement(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitEvaluateStatement"):
                return visitor.visitEvaluateStatement(self)
            else:
                return visitor.visitChildren(self)




    def evaluateStatement(self):

        localctx = Cobol85Parser.EvaluateStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 652, self.RULE_evaluateStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4180
            self.match(Cobol85Parser.EVALUATE)
            self.state = 4181
            self.evaluateSelect()
            self.state = 4185
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==Cobol85Parser.ALSO:
                self.state = 4182
                self.evaluateAlsoSelect()
                self.state = 4187
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 4189 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 4188
                    self.evaluateWhenPhrase()

                else:
                    raise NoViableAltException(self)
                self.state = 4191 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,585,self._ctx)

            self.state = 4194
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,586,self._ctx)
            if la_ == 1:
                self.state = 4193
                self.evaluateWhenOther()


            self.state = 4197
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,587,self._ctx)
            if la_ == 1:
                self.state = 4196
                self.match(Cobol85Parser.END_EVALUATE)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EvaluateSelectContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.EvaluateSelectContext, self).__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(Cobol85Parser.IdentifierContext,0)


        def literal(self):
            return self.getTypedRuleContext(Cobol85Parser.LiteralContext,0)


        def arithmeticExpression(self):
            return self.getTypedRuleContext(Cobol85Parser.ArithmeticExpressionContext,0)


        def condition(self):
            return self.getTypedRuleContext(Cobol85Parser.ConditionContext,0)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_evaluateSelect

        def enterRule(self, listener):
            if hasattr(listener, "enterEvaluateSelect"):
                listener.enterEvaluateSelect(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitEvaluateSelect"):
                listener.exitEvaluateSelect(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitEvaluateSelect"):
                return visitor.visitEvaluateSelect(self)
            else:
                return visitor.visitChildren(self)




    def evaluateSelect(self):

        localctx = Cobol85Parser.EvaluateSelectContext(self, self._ctx, self.state)
        self.enterRule(localctx, 654, self.RULE_evaluateSelect)
        try:
            self.state = 4203
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,588,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4199
                self.identifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4200
                self.literal()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 4201
                self.arithmeticExpression()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 4202
                self.condition()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EvaluateAlsoSelectContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.EvaluateAlsoSelectContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ALSO(self):
            return self.getToken(Cobol85Parser.ALSO, 0)

        def evaluateSelect(self):
            return self.getTypedRuleContext(Cobol85Parser.EvaluateSelectContext,0)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_evaluateAlsoSelect

        def enterRule(self, listener):
            if hasattr(listener, "enterEvaluateAlsoSelect"):
                listener.enterEvaluateAlsoSelect(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitEvaluateAlsoSelect"):
                listener.exitEvaluateAlsoSelect(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitEvaluateAlsoSelect"):
                return visitor.visitEvaluateAlsoSelect(self)
            else:
                return visitor.visitChildren(self)




    def evaluateAlsoSelect(self):

        localctx = Cobol85Parser.EvaluateAlsoSelectContext(self, self._ctx, self.state)
        self.enterRule(localctx, 656, self.RULE_evaluateAlsoSelect)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4205
            self.match(Cobol85Parser.ALSO)
            self.state = 4206
            self.evaluateSelect()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EvaluateWhenPhraseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.EvaluateWhenPhraseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def evaluateWhen(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.EvaluateWhenContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.EvaluateWhenContext,i)


        def statement(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.StatementContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.StatementContext,i)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_evaluateWhenPhrase

        def enterRule(self, listener):
            if hasattr(listener, "enterEvaluateWhenPhrase"):
                listener.enterEvaluateWhenPhrase(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitEvaluateWhenPhrase"):
                listener.exitEvaluateWhenPhrase(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitEvaluateWhenPhrase"):
                return visitor.visitEvaluateWhenPhrase(self)
            else:
                return visitor.visitChildren(self)




    def evaluateWhenPhrase(self):

        localctx = Cobol85Parser.EvaluateWhenPhraseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 658, self.RULE_evaluateWhenPhrase)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4209 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 4208
                    self.evaluateWhen()

                else:
                    raise NoViableAltException(self)
                self.state = 4211 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,589,self._ctx)

            self.state = 4216
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,590,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 4213
                    self.statement() 
                self.state = 4218
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,590,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EvaluateWhenContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.EvaluateWhenContext, self).__init__(parent, invokingState)
            self.parser = parser

        def WHEN(self):
            return self.getToken(Cobol85Parser.WHEN, 0)

        def evaluateCondition(self):
            return self.getTypedRuleContext(Cobol85Parser.EvaluateConditionContext,0)


        def evaluateAlsoCondition(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.EvaluateAlsoConditionContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.EvaluateAlsoConditionContext,i)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_evaluateWhen

        def enterRule(self, listener):
            if hasattr(listener, "enterEvaluateWhen"):
                listener.enterEvaluateWhen(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitEvaluateWhen"):
                listener.exitEvaluateWhen(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitEvaluateWhen"):
                return visitor.visitEvaluateWhen(self)
            else:
                return visitor.visitChildren(self)




    def evaluateWhen(self):

        localctx = Cobol85Parser.EvaluateWhenContext(self, self._ctx, self.state)
        self.enterRule(localctx, 660, self.RULE_evaluateWhen)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4219
            self.match(Cobol85Parser.WHEN)
            self.state = 4220
            self.evaluateCondition()
            self.state = 4224
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==Cobol85Parser.ALSO:
                self.state = 4221
                self.evaluateAlsoCondition()
                self.state = 4226
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EvaluateConditionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.EvaluateConditionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ANY(self):
            return self.getToken(Cobol85Parser.ANY, 0)

        def evaluateValue(self):
            return self.getTypedRuleContext(Cobol85Parser.EvaluateValueContext,0)


        def NOT(self):
            return self.getToken(Cobol85Parser.NOT, 0)

        def evaluateThrough(self):
            return self.getTypedRuleContext(Cobol85Parser.EvaluateThroughContext,0)


        def condition(self):
            return self.getTypedRuleContext(Cobol85Parser.ConditionContext,0)


        def booleanLiteral(self):
            return self.getTypedRuleContext(Cobol85Parser.BooleanLiteralContext,0)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_evaluateCondition

        def enterRule(self, listener):
            if hasattr(listener, "enterEvaluateCondition"):
                listener.enterEvaluateCondition(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitEvaluateCondition"):
                listener.exitEvaluateCondition(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitEvaluateCondition"):
                return visitor.visitEvaluateCondition(self)
            else:
                return visitor.visitChildren(self)




    def evaluateCondition(self):

        localctx = Cobol85Parser.EvaluateConditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 662, self.RULE_evaluateCondition)
        self._la = 0 # Token type
        try:
            self.state = 4237
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,594,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4227
                self.match(Cobol85Parser.ANY)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4229
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Cobol85Parser.NOT:
                    self.state = 4228
                    self.match(Cobol85Parser.NOT)


                self.state = 4231
                self.evaluateValue()
                self.state = 4233
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Cobol85Parser.THROUGH or _la==Cobol85Parser.THRU:
                    self.state = 4232
                    self.evaluateThrough()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 4235
                self.condition()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 4236
                self.booleanLiteral()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EvaluateThroughContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.EvaluateThroughContext, self).__init__(parent, invokingState)
            self.parser = parser

        def evaluateValue(self):
            return self.getTypedRuleContext(Cobol85Parser.EvaluateValueContext,0)


        def THROUGH(self):
            return self.getToken(Cobol85Parser.THROUGH, 0)

        def THRU(self):
            return self.getToken(Cobol85Parser.THRU, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_evaluateThrough

        def enterRule(self, listener):
            if hasattr(listener, "enterEvaluateThrough"):
                listener.enterEvaluateThrough(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitEvaluateThrough"):
                listener.exitEvaluateThrough(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitEvaluateThrough"):
                return visitor.visitEvaluateThrough(self)
            else:
                return visitor.visitChildren(self)




    def evaluateThrough(self):

        localctx = Cobol85Parser.EvaluateThroughContext(self, self._ctx, self.state)
        self.enterRule(localctx, 664, self.RULE_evaluateThrough)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4239
            _la = self._input.LA(1)
            if not(_la==Cobol85Parser.THROUGH or _la==Cobol85Parser.THRU):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 4240
            self.evaluateValue()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EvaluateAlsoConditionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.EvaluateAlsoConditionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ALSO(self):
            return self.getToken(Cobol85Parser.ALSO, 0)

        def evaluateCondition(self):
            return self.getTypedRuleContext(Cobol85Parser.EvaluateConditionContext,0)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_evaluateAlsoCondition

        def enterRule(self, listener):
            if hasattr(listener, "enterEvaluateAlsoCondition"):
                listener.enterEvaluateAlsoCondition(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitEvaluateAlsoCondition"):
                listener.exitEvaluateAlsoCondition(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitEvaluateAlsoCondition"):
                return visitor.visitEvaluateAlsoCondition(self)
            else:
                return visitor.visitChildren(self)




    def evaluateAlsoCondition(self):

        localctx = Cobol85Parser.EvaluateAlsoConditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 666, self.RULE_evaluateAlsoCondition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4242
            self.match(Cobol85Parser.ALSO)
            self.state = 4243
            self.evaluateCondition()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EvaluateWhenOtherContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.EvaluateWhenOtherContext, self).__init__(parent, invokingState)
            self.parser = parser

        def WHEN(self):
            return self.getToken(Cobol85Parser.WHEN, 0)

        def OTHER(self):
            return self.getToken(Cobol85Parser.OTHER, 0)

        def statement(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.StatementContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.StatementContext,i)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_evaluateWhenOther

        def enterRule(self, listener):
            if hasattr(listener, "enterEvaluateWhenOther"):
                listener.enterEvaluateWhenOther(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitEvaluateWhenOther"):
                listener.exitEvaluateWhenOther(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitEvaluateWhenOther"):
                return visitor.visitEvaluateWhenOther(self)
            else:
                return visitor.visitChildren(self)




    def evaluateWhenOther(self):

        localctx = Cobol85Parser.EvaluateWhenOtherContext(self, self._ctx, self.state)
        self.enterRule(localctx, 668, self.RULE_evaluateWhenOther)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4245
            self.match(Cobol85Parser.WHEN)
            self.state = 4246
            self.match(Cobol85Parser.OTHER)
            self.state = 4250
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,595,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 4247
                    self.statement() 
                self.state = 4252
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,595,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EvaluateValueContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.EvaluateValueContext, self).__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(Cobol85Parser.IdentifierContext,0)


        def literal(self):
            return self.getTypedRuleContext(Cobol85Parser.LiteralContext,0)


        def arithmeticExpression(self):
            return self.getTypedRuleContext(Cobol85Parser.ArithmeticExpressionContext,0)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_evaluateValue

        def enterRule(self, listener):
            if hasattr(listener, "enterEvaluateValue"):
                listener.enterEvaluateValue(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitEvaluateValue"):
                listener.exitEvaluateValue(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitEvaluateValue"):
                return visitor.visitEvaluateValue(self)
            else:
                return visitor.visitChildren(self)




    def evaluateValue(self):

        localctx = Cobol85Parser.EvaluateValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 670, self.RULE_evaluateValue)
        try:
            self.state = 4256
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,596,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4253
                self.identifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4254
                self.literal()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 4255
                self.arithmeticExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExecCicsStatementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.ExecCicsStatementContext, self).__init__(parent, invokingState)
            self.parser = parser

        def EXECCICSLINE(self, i=None):
            if i is None:
                return self.getTokens(Cobol85Parser.EXECCICSLINE)
            else:
                return self.getToken(Cobol85Parser.EXECCICSLINE, i)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_execCicsStatement

        def enterRule(self, listener):
            if hasattr(listener, "enterExecCicsStatement"):
                listener.enterExecCicsStatement(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitExecCicsStatement"):
                listener.exitExecCicsStatement(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitExecCicsStatement"):
                return visitor.visitExecCicsStatement(self)
            else:
                return visitor.visitChildren(self)




    def execCicsStatement(self):

        localctx = Cobol85Parser.ExecCicsStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 672, self.RULE_execCicsStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4259 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 4258
                    self.match(Cobol85Parser.EXECCICSLINE)

                else:
                    raise NoViableAltException(self)
                self.state = 4261 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,597,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExecSqlStatementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.ExecSqlStatementContext, self).__init__(parent, invokingState)
            self.parser = parser

        def EXECSQLLINE(self, i=None):
            if i is None:
                return self.getTokens(Cobol85Parser.EXECSQLLINE)
            else:
                return self.getToken(Cobol85Parser.EXECSQLLINE, i)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_execSqlStatement

        def enterRule(self, listener):
            if hasattr(listener, "enterExecSqlStatement"):
                listener.enterExecSqlStatement(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitExecSqlStatement"):
                listener.exitExecSqlStatement(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitExecSqlStatement"):
                return visitor.visitExecSqlStatement(self)
            else:
                return visitor.visitChildren(self)




    def execSqlStatement(self):

        localctx = Cobol85Parser.ExecSqlStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 674, self.RULE_execSqlStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4264 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 4263
                    self.match(Cobol85Parser.EXECSQLLINE)

                else:
                    raise NoViableAltException(self)
                self.state = 4266 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,598,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExecSqlImsStatementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.ExecSqlImsStatementContext, self).__init__(parent, invokingState)
            self.parser = parser

        def EXECSQLIMSLINE(self, i=None):
            if i is None:
                return self.getTokens(Cobol85Parser.EXECSQLIMSLINE)
            else:
                return self.getToken(Cobol85Parser.EXECSQLIMSLINE, i)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_execSqlImsStatement

        def enterRule(self, listener):
            if hasattr(listener, "enterExecSqlImsStatement"):
                listener.enterExecSqlImsStatement(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitExecSqlImsStatement"):
                listener.exitExecSqlImsStatement(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitExecSqlImsStatement"):
                return visitor.visitExecSqlImsStatement(self)
            else:
                return visitor.visitChildren(self)




    def execSqlImsStatement(self):

        localctx = Cobol85Parser.ExecSqlImsStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 676, self.RULE_execSqlImsStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4269 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 4268
                    self.match(Cobol85Parser.EXECSQLIMSLINE)

                else:
                    raise NoViableAltException(self)
                self.state = 4271 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,599,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExhibitStatementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.ExhibitStatementContext, self).__init__(parent, invokingState)
            self.parser = parser

        def EXHIBIT(self):
            return self.getToken(Cobol85Parser.EXHIBIT, 0)

        def NAMED(self):
            return self.getToken(Cobol85Parser.NAMED, 0)

        def CHANGED(self):
            return self.getToken(Cobol85Parser.CHANGED, 0)

        def exhibitOperand(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.ExhibitOperandContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.ExhibitOperandContext,i)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_exhibitStatement

        def enterRule(self, listener):
            if hasattr(listener, "enterExhibitStatement"):
                listener.enterExhibitStatement(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitExhibitStatement"):
                listener.exitExhibitStatement(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitExhibitStatement"):
                return visitor.visitExhibitStatement(self)
            else:
                return visitor.visitChildren(self)




    def exhibitStatement(self):

        localctx = Cobol85Parser.ExhibitStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 678, self.RULE_exhibitStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4273
            self.match(Cobol85Parser.EXHIBIT)
            self.state = 4275
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,600,self._ctx)
            if la_ == 1:
                self.state = 4274
                self.match(Cobol85Parser.NAMED)


            self.state = 4278
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,601,self._ctx)
            if la_ == 1:
                self.state = 4277
                self.match(Cobol85Parser.CHANGED)


            self.state = 4281 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 4280
                self.exhibitOperand()
                self.state = 4283 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.ADDRESS) | (1 << Cobol85Parser.ALL) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE) | (1 << Cobol85Parser.AUTO) | (1 << Cobol85Parser.AUTO_SKIP) | (1 << Cobol85Parser.BACKGROUND_COLOR) | (1 << Cobol85Parser.BACKGROUND_COLOUR) | (1 << Cobol85Parser.BEEP) | (1 << Cobol85Parser.BELL) | (1 << Cobol85Parser.BINARY) | (1 << Cobol85Parser.BIT) | (1 << Cobol85Parser.BLINK) | (1 << Cobol85Parser.BLOB) | (1 << Cobol85Parser.BOUNDS) | (1 << Cobol85Parser.CAPABLE) | (1 << Cobol85Parser.CCSVERSION) | (1 << Cobol85Parser.CHANGED) | (1 << Cobol85Parser.CHANNEL))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (Cobol85Parser.CLOB - 67)) | (1 << (Cobol85Parser.CLOSE_DISPOSITION - 67)) | (1 << (Cobol85Parser.COBOL - 67)) | (1 << (Cobol85Parser.COMMITMENT - 67)) | (1 << (Cobol85Parser.CONTROL_POINT - 67)) | (1 << (Cobol85Parser.CONVENTION - 67)) | (1 << (Cobol85Parser.CRUNCH - 67)) | (1 << (Cobol85Parser.CURSOR - 67)) | (1 << (Cobol85Parser.DATE - 67)) | (1 << (Cobol85Parser.DAY - 67)) | (1 << (Cobol85Parser.DAY_OF_WEEK - 67)) | (1 << (Cobol85Parser.DBCLOB - 67)) | (1 << (Cobol85Parser.DEBUG_CONTENTS - 67)) | (1 << (Cobol85Parser.DEBUG_ITEM - 67)) | (1 << (Cobol85Parser.DEBUG_LINE - 67)) | (1 << (Cobol85Parser.DEBUG_NAME - 67)) | (1 << (Cobol85Parser.DEBUG_SUB_1 - 67)) | (1 << (Cobol85Parser.DEBUG_SUB_2 - 67)) | (1 << (Cobol85Parser.DEBUG_SUB_3 - 67)))) != 0) or ((((_la - 131)) & ~0x3f) == 0 and ((1 << (_la - 131)) & ((1 << (Cobol85Parser.DEFAULT - 131)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 131)) | (1 << (Cobol85Parser.DEFINITION - 131)) | (1 << (Cobol85Parser.DFHRESP - 131)) | (1 << (Cobol85Parser.DFHVALUE - 131)) | (1 << (Cobol85Parser.DISK - 131)) | (1 << (Cobol85Parser.DONTCARE - 131)) | (1 << (Cobol85Parser.DOUBLE - 131)) | (1 << (Cobol85Parser.EBCDIC - 131)) | (1 << (Cobol85Parser.EMPTY_CHECK - 131)) | (1 << (Cobol85Parser.ENTER - 131)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 131)) | (1 << (Cobol85Parser.ERASE - 131)) | (1 << (Cobol85Parser.EOL - 131)) | (1 << (Cobol85Parser.EOS - 131)))) != 0) or ((((_la - 195)) & ~0x3f) == 0 and ((1 << (_la - 195)) & ((1 << (Cobol85Parser.ESCAPE - 195)) | (1 << (Cobol85Parser.EVENT - 195)) | (1 << (Cobol85Parser.EXCLUSIVE - 195)) | (1 << (Cobol85Parser.EXPORT - 195)) | (1 << (Cobol85Parser.EXTENDED - 195)) | (1 << (Cobol85Parser.FALSE - 195)) | (1 << (Cobol85Parser.FOREGROUND_COLOR - 195)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 195)) | (1 << (Cobol85Parser.FULL - 195)) | (1 << (Cobol85Parser.FUNCTION - 195)) | (1 << (Cobol85Parser.FUNCTIONNAME - 195)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 195)) | (1 << (Cobol85Parser.GRID - 195)) | (1 << (Cobol85Parser.HIGHLIGHT - 195)) | (1 << (Cobol85Parser.HIGH_VALUE - 195)) | (1 << (Cobol85Parser.HIGH_VALUES - 195)) | (1 << (Cobol85Parser.IMPLICIT - 195)) | (1 << (Cobol85Parser.IMPORT - 195)) | (1 << (Cobol85Parser.INTEGER - 195)))) != 0) or ((((_la - 262)) & ~0x3f) == 0 and ((1 << (_la - 262)) & ((1 << (Cobol85Parser.KEPT - 262)) | (1 << (Cobol85Parser.KEYBOARD - 262)) | (1 << (Cobol85Parser.LANGUAGE - 262)) | (1 << (Cobol85Parser.LB - 262)) | (1 << (Cobol85Parser.LD - 262)) | (1 << (Cobol85Parser.LEFTLINE - 262)) | (1 << (Cobol85Parser.LENGTH - 262)) | (1 << (Cobol85Parser.LENGTH_CHECK - 262)) | (1 << (Cobol85Parser.LIBACCESS - 262)) | (1 << (Cobol85Parser.LIBPARAMETER - 262)) | (1 << (Cobol85Parser.LIBRARY - 262)) | (1 << (Cobol85Parser.LINAGE_COUNTER - 262)) | (1 << (Cobol85Parser.LINE_COUNTER - 262)) | (1 << (Cobol85Parser.LIST - 262)) | (1 << (Cobol85Parser.LOCAL - 262)) | (1 << (Cobol85Parser.LONG_DATE - 262)) | (1 << (Cobol85Parser.LONG_TIME - 262)) | (1 << (Cobol85Parser.LOWER - 262)) | (1 << (Cobol85Parser.LOWLIGHT - 262)) | (1 << (Cobol85Parser.LOW_VALUE - 262)) | (1 << (Cobol85Parser.LOW_VALUES - 262)) | (1 << (Cobol85Parser.MMDDYYYY - 262)) | (1 << (Cobol85Parser.NAMED - 262)) | (1 << (Cobol85Parser.NATIONAL - 262)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 262)) | (1 << (Cobol85Parser.NETWORK - 262)) | (1 << (Cobol85Parser.NO_ECHO - 262)) | (1 << (Cobol85Parser.NULL - 262)) | (1 << (Cobol85Parser.NULLS - 262)) | (1 << (Cobol85Parser.NUMERIC_DATE - 262)) | (1 << (Cobol85Parser.NUMERIC_TIME - 262)))) != 0) or ((((_la - 326)) & ~0x3f) == 0 and ((1 << (_la - 326)) & ((1 << (Cobol85Parser.ODT - 326)) | (1 << (Cobol85Parser.ORDERLY - 326)) | (1 << (Cobol85Parser.OVERLINE - 326)) | (1 << (Cobol85Parser.OWN - 326)) | (1 << (Cobol85Parser.PAGE_COUNTER - 326)) | (1 << (Cobol85Parser.PASSWORD - 326)) | (1 << (Cobol85Parser.PORT - 326)) | (1 << (Cobol85Parser.PRINTER - 326)) | (1 << (Cobol85Parser.PRIVATE - 326)) | (1 << (Cobol85Parser.PROCESS - 326)) | (1 << (Cobol85Parser.PROGRAM - 326)) | (1 << (Cobol85Parser.PROMPT - 326)) | (1 << (Cobol85Parser.QUOTE - 326)) | (1 << (Cobol85Parser.QUOTES - 326)) | (1 << (Cobol85Parser.READER - 326)) | (1 << (Cobol85Parser.REMOTE - 326)) | (1 << (Cobol85Parser.REAL - 326)) | (1 << (Cobol85Parser.RECEIVED - 326)) | (1 << (Cobol85Parser.RECURSIVE - 326)) | (1 << (Cobol85Parser.REF - 326)))) != 0) or ((((_la - 395)) & ~0x3f) == 0 and ((1 << (_la - 395)) & ((1 << (Cobol85Parser.REMOVE - 395)) | (1 << (Cobol85Parser.REQUIRED - 395)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 395)) | (1 << (Cobol85Parser.RETURN_CODE - 395)) | (1 << (Cobol85Parser.SAVE - 395)) | (1 << (Cobol85Parser.SECURE - 395)) | (1 << (Cobol85Parser.SHARED - 395)) | (1 << (Cobol85Parser.SHAREDBYALL - 395)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 395)) | (1 << (Cobol85Parser.SHARING - 395)) | (1 << (Cobol85Parser.SHIFT_IN - 395)) | (1 << (Cobol85Parser.SHIFT_OUT - 395)) | (1 << (Cobol85Parser.SHORT_DATE - 395)) | (1 << (Cobol85Parser.SORT_CONTROL - 395)) | (1 << (Cobol85Parser.SORT_CORE_SIZE - 395)) | (1 << (Cobol85Parser.SORT_FILE_SIZE - 395)) | (1 << (Cobol85Parser.SORT_MESSAGE - 395)) | (1 << (Cobol85Parser.SORT_MODE_SIZE - 395)) | (1 << (Cobol85Parser.SORT_RETURN - 395)) | (1 << (Cobol85Parser.SPACE - 395)) | (1 << (Cobol85Parser.SPACES - 395)) | (1 << (Cobol85Parser.SQL - 395)))) != 0) or ((((_la - 471)) & ~0x3f) == 0 and ((1 << (_la - 471)) & ((1 << (Cobol85Parser.SYMBOL - 471)) | (1 << (Cobol85Parser.TALLY - 471)) | (1 << (Cobol85Parser.TASK - 471)) | (1 << (Cobol85Parser.THREAD - 471)) | (1 << (Cobol85Parser.THREAD_LOCAL - 471)) | (1 << (Cobol85Parser.TIME - 471)) | (1 << (Cobol85Parser.TIMER - 471)) | (1 << (Cobol85Parser.TODAYS_DATE - 471)) | (1 << (Cobol85Parser.TODAYS_NAME - 471)) | (1 << (Cobol85Parser.TRUE - 471)) | (1 << (Cobol85Parser.TRUNCATED - 471)) | (1 << (Cobol85Parser.TYPEDEF - 471)) | (1 << (Cobol85Parser.UNDERLINE - 471)) | (1 << (Cobol85Parser.VIRTUAL - 471)) | (1 << (Cobol85Parser.WAIT - 471)) | (1 << (Cobol85Parser.WHEN_COMPILED - 471)) | (1 << (Cobol85Parser.YEAR - 471)) | (1 << (Cobol85Parser.YYYYMMDD - 471)) | (1 << (Cobol85Parser.YYYYDDD - 471)) | (1 << (Cobol85Parser.ZERO - 471)) | (1 << (Cobol85Parser.ZERO_FILL - 471)) | (1 << (Cobol85Parser.ZEROS - 471)) | (1 << (Cobol85Parser.ZEROES - 471)))) != 0) or ((((_la - 556)) & ~0x3f) == 0 and ((1 << (_la - 556)) & ((1 << (Cobol85Parser.NONNUMERICLITERAL - 556)) | (1 << (Cobol85Parser.LEVEL_NUMBER_66 - 556)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 556)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 556)) | (1 << (Cobol85Parser.INTEGERLITERAL - 556)) | (1 << (Cobol85Parser.NUMERICLITERAL - 556)) | (1 << (Cobol85Parser.IDENTIFIER - 556)))) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExhibitOperandContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.ExhibitOperandContext, self).__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(Cobol85Parser.IdentifierContext,0)


        def literal(self):
            return self.getTypedRuleContext(Cobol85Parser.LiteralContext,0)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_exhibitOperand

        def enterRule(self, listener):
            if hasattr(listener, "enterExhibitOperand"):
                listener.enterExhibitOperand(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitExhibitOperand"):
                listener.exitExhibitOperand(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitExhibitOperand"):
                return visitor.visitExhibitOperand(self)
            else:
                return visitor.visitChildren(self)




    def exhibitOperand(self):

        localctx = Cobol85Parser.ExhibitOperandContext(self, self._ctx, self.state)
        self.enterRule(localctx, 680, self.RULE_exhibitOperand)
        try:
            self.state = 4287
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,603,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4285
                self.identifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4286
                self.literal()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExitStatementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.ExitStatementContext, self).__init__(parent, invokingState)
            self.parser = parser

        def EXIT(self):
            return self.getToken(Cobol85Parser.EXIT, 0)

        def PROGRAM(self):
            return self.getToken(Cobol85Parser.PROGRAM, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_exitStatement

        def enterRule(self, listener):
            if hasattr(listener, "enterExitStatement"):
                listener.enterExitStatement(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitExitStatement"):
                listener.exitExitStatement(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitExitStatement"):
                return visitor.visitExitStatement(self)
            else:
                return visitor.visitChildren(self)




    def exitStatement(self):

        localctx = Cobol85Parser.ExitStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 682, self.RULE_exitStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4289
            self.match(Cobol85Parser.EXIT)
            self.state = 4291
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.PROGRAM:
                self.state = 4290
                self.match(Cobol85Parser.PROGRAM)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GenerateStatementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.GenerateStatementContext, self).__init__(parent, invokingState)
            self.parser = parser

        def GENERATE(self):
            return self.getToken(Cobol85Parser.GENERATE, 0)

        def reportName(self):
            return self.getTypedRuleContext(Cobol85Parser.ReportNameContext,0)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_generateStatement

        def enterRule(self, listener):
            if hasattr(listener, "enterGenerateStatement"):
                listener.enterGenerateStatement(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitGenerateStatement"):
                listener.exitGenerateStatement(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitGenerateStatement"):
                return visitor.visitGenerateStatement(self)
            else:
                return visitor.visitChildren(self)




    def generateStatement(self):

        localctx = Cobol85Parser.GenerateStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 684, self.RULE_generateStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4293
            self.match(Cobol85Parser.GENERATE)
            self.state = 4294
            self.reportName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GobackStatementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.GobackStatementContext, self).__init__(parent, invokingState)
            self.parser = parser

        def GOBACK(self):
            return self.getToken(Cobol85Parser.GOBACK, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_gobackStatement

        def enterRule(self, listener):
            if hasattr(listener, "enterGobackStatement"):
                listener.enterGobackStatement(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitGobackStatement"):
                listener.exitGobackStatement(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitGobackStatement"):
                return visitor.visitGobackStatement(self)
            else:
                return visitor.visitChildren(self)




    def gobackStatement(self):

        localctx = Cobol85Parser.GobackStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 686, self.RULE_gobackStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4296
            self.match(Cobol85Parser.GOBACK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GoToStatementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.GoToStatementContext, self).__init__(parent, invokingState)
            self.parser = parser

        def GO(self):
            return self.getToken(Cobol85Parser.GO, 0)

        def goToStatementSimple(self):
            return self.getTypedRuleContext(Cobol85Parser.GoToStatementSimpleContext,0)


        def goToDependingOnStatement(self):
            return self.getTypedRuleContext(Cobol85Parser.GoToDependingOnStatementContext,0)


        def TO(self):
            return self.getToken(Cobol85Parser.TO, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_goToStatement

        def enterRule(self, listener):
            if hasattr(listener, "enterGoToStatement"):
                listener.enterGoToStatement(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitGoToStatement"):
                listener.exitGoToStatement(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitGoToStatement"):
                return visitor.visitGoToStatement(self)
            else:
                return visitor.visitChildren(self)




    def goToStatement(self):

        localctx = Cobol85Parser.GoToStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 688, self.RULE_goToStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4298
            self.match(Cobol85Parser.GO)
            self.state = 4300
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.TO:
                self.state = 4299
                self.match(Cobol85Parser.TO)


            self.state = 4304
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,606,self._ctx)
            if la_ == 1:
                self.state = 4302
                self.goToStatementSimple()
                pass

            elif la_ == 2:
                self.state = 4303
                self.goToDependingOnStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GoToStatementSimpleContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.GoToStatementSimpleContext, self).__init__(parent, invokingState)
            self.parser = parser

        def procedureName(self):
            return self.getTypedRuleContext(Cobol85Parser.ProcedureNameContext,0)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_goToStatementSimple

        def enterRule(self, listener):
            if hasattr(listener, "enterGoToStatementSimple"):
                listener.enterGoToStatementSimple(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitGoToStatementSimple"):
                listener.exitGoToStatementSimple(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitGoToStatementSimple"):
                return visitor.visitGoToStatementSimple(self)
            else:
                return visitor.visitChildren(self)




    def goToStatementSimple(self):

        localctx = Cobol85Parser.GoToStatementSimpleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 690, self.RULE_goToStatementSimple)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4306
            self.procedureName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GoToDependingOnStatementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.GoToDependingOnStatementContext, self).__init__(parent, invokingState)
            self.parser = parser

        def MORE_LABELS(self):
            return self.getToken(Cobol85Parser.MORE_LABELS, 0)

        def procedureName(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.ProcedureNameContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.ProcedureNameContext,i)


        def DEPENDING(self):
            return self.getToken(Cobol85Parser.DEPENDING, 0)

        def identifier(self):
            return self.getTypedRuleContext(Cobol85Parser.IdentifierContext,0)


        def ON(self):
            return self.getToken(Cobol85Parser.ON, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_goToDependingOnStatement

        def enterRule(self, listener):
            if hasattr(listener, "enterGoToDependingOnStatement"):
                listener.enterGoToDependingOnStatement(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitGoToDependingOnStatement"):
                listener.exitGoToDependingOnStatement(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitGoToDependingOnStatement"):
                return visitor.visitGoToDependingOnStatement(self)
            else:
                return visitor.visitChildren(self)




    def goToDependingOnStatement(self):

        localctx = Cobol85Parser.GoToDependingOnStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 692, self.RULE_goToDependingOnStatement)
        self._la = 0 # Token type
        try:
            self.state = 4321
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Cobol85Parser.MORE_LABELS]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4308
                self.match(Cobol85Parser.MORE_LABELS)
                pass
            elif token in [Cobol85Parser.ABORT, Cobol85Parser.AS, Cobol85Parser.ASCII, Cobol85Parser.ASSOCIATED_DATA, Cobol85Parser.ASSOCIATED_DATA_LENGTH, Cobol85Parser.ATTRIBUTE, Cobol85Parser.AUTO, Cobol85Parser.AUTO_SKIP, Cobol85Parser.BACKGROUND_COLOR, Cobol85Parser.BACKGROUND_COLOUR, Cobol85Parser.BEEP, Cobol85Parser.BELL, Cobol85Parser.BINARY, Cobol85Parser.BIT, Cobol85Parser.BLINK, Cobol85Parser.BLOB, Cobol85Parser.BOUNDS, Cobol85Parser.CAPABLE, Cobol85Parser.CCSVERSION, Cobol85Parser.CHANGED, Cobol85Parser.CHANNEL, Cobol85Parser.CLOB, Cobol85Parser.CLOSE_DISPOSITION, Cobol85Parser.COBOL, Cobol85Parser.COMMITMENT, Cobol85Parser.CONTROL_POINT, Cobol85Parser.CONVENTION, Cobol85Parser.CRUNCH, Cobol85Parser.CURSOR, Cobol85Parser.DBCLOB, Cobol85Parser.DEFAULT, Cobol85Parser.DEFAULT_DISPLAY, Cobol85Parser.DEFINITION, Cobol85Parser.DFHRESP, Cobol85Parser.DFHVALUE, Cobol85Parser.DISK, Cobol85Parser.DONTCARE, Cobol85Parser.DOUBLE, Cobol85Parser.EBCDIC, Cobol85Parser.EMPTY_CHECK, Cobol85Parser.ENTER, Cobol85Parser.ENTRY_PROCEDURE, Cobol85Parser.ERASE, Cobol85Parser.EOL, Cobol85Parser.EOS, Cobol85Parser.ESCAPE, Cobol85Parser.EVENT, Cobol85Parser.EXCLUSIVE, Cobol85Parser.EXPORT, Cobol85Parser.EXTENDED, Cobol85Parser.FOREGROUND_COLOR, Cobol85Parser.FOREGROUND_COLOUR, Cobol85Parser.FULL, Cobol85Parser.FUNCTIONNAME, Cobol85Parser.FUNCTION_POINTER, Cobol85Parser.GRID, Cobol85Parser.HIGHLIGHT, Cobol85Parser.IMPLICIT, Cobol85Parser.IMPORT, Cobol85Parser.INTEGER, Cobol85Parser.KEPT, Cobol85Parser.KEYBOARD, Cobol85Parser.LANGUAGE, Cobol85Parser.LB, Cobol85Parser.LD, Cobol85Parser.LEFTLINE, Cobol85Parser.LENGTH_CHECK, Cobol85Parser.LIBACCESS, Cobol85Parser.LIBPARAMETER, Cobol85Parser.LIBRARY, Cobol85Parser.LIST, Cobol85Parser.LOCAL, Cobol85Parser.LONG_DATE, Cobol85Parser.LONG_TIME, Cobol85Parser.LOWER, Cobol85Parser.LOWLIGHT, Cobol85Parser.MMDDYYYY, Cobol85Parser.NAMED, Cobol85Parser.NATIONAL, Cobol85Parser.NATIONAL_EDITED, Cobol85Parser.NETWORK, Cobol85Parser.NO_ECHO, Cobol85Parser.NUMERIC_DATE, Cobol85Parser.NUMERIC_TIME, Cobol85Parser.ODT, Cobol85Parser.ORDERLY, Cobol85Parser.OVERLINE, Cobol85Parser.OWN, Cobol85Parser.PASSWORD, Cobol85Parser.PORT, Cobol85Parser.PRINTER, Cobol85Parser.PRIVATE, Cobol85Parser.PROCESS, Cobol85Parser.PROGRAM, Cobol85Parser.PROMPT, Cobol85Parser.READER, Cobol85Parser.REMOTE, Cobol85Parser.REAL, Cobol85Parser.RECEIVED, Cobol85Parser.RECURSIVE, Cobol85Parser.REF, Cobol85Parser.REMOVE, Cobol85Parser.REQUIRED, Cobol85Parser.REVERSE_VIDEO, Cobol85Parser.SAVE, Cobol85Parser.SECURE, Cobol85Parser.SHARED, Cobol85Parser.SHAREDBYALL, Cobol85Parser.SHAREDBYRUNUNIT, Cobol85Parser.SHARING, Cobol85Parser.SHORT_DATE, Cobol85Parser.SQL, Cobol85Parser.SYMBOL, Cobol85Parser.TASK, Cobol85Parser.THREAD, Cobol85Parser.THREAD_LOCAL, Cobol85Parser.TIMER, Cobol85Parser.TODAYS_DATE, Cobol85Parser.TODAYS_NAME, Cobol85Parser.TRUNCATED, Cobol85Parser.TYPEDEF, Cobol85Parser.UNDERLINE, Cobol85Parser.VIRTUAL, Cobol85Parser.WAIT, Cobol85Parser.YEAR, Cobol85Parser.YYYYMMDD, Cobol85Parser.YYYYDDD, Cobol85Parser.ZERO_FILL, Cobol85Parser.LEVEL_NUMBER_66, Cobol85Parser.LEVEL_NUMBER_77, Cobol85Parser.LEVEL_NUMBER_88, Cobol85Parser.INTEGERLITERAL, Cobol85Parser.IDENTIFIER]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4310 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 4309
                    self.procedureName()
                    self.state = 4312 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE) | (1 << Cobol85Parser.AUTO) | (1 << Cobol85Parser.AUTO_SKIP) | (1 << Cobol85Parser.BACKGROUND_COLOR) | (1 << Cobol85Parser.BACKGROUND_COLOUR) | (1 << Cobol85Parser.BEEP) | (1 << Cobol85Parser.BELL) | (1 << Cobol85Parser.BINARY) | (1 << Cobol85Parser.BIT) | (1 << Cobol85Parser.BLINK) | (1 << Cobol85Parser.BLOB) | (1 << Cobol85Parser.BOUNDS) | (1 << Cobol85Parser.CAPABLE) | (1 << Cobol85Parser.CCSVERSION) | (1 << Cobol85Parser.CHANGED) | (1 << Cobol85Parser.CHANNEL))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (Cobol85Parser.CLOB - 67)) | (1 << (Cobol85Parser.CLOSE_DISPOSITION - 67)) | (1 << (Cobol85Parser.COBOL - 67)) | (1 << (Cobol85Parser.COMMITMENT - 67)) | (1 << (Cobol85Parser.CONTROL_POINT - 67)) | (1 << (Cobol85Parser.CONVENTION - 67)) | (1 << (Cobol85Parser.CRUNCH - 67)) | (1 << (Cobol85Parser.CURSOR - 67)) | (1 << (Cobol85Parser.DBCLOB - 67)))) != 0) or ((((_la - 131)) & ~0x3f) == 0 and ((1 << (_la - 131)) & ((1 << (Cobol85Parser.DEFAULT - 131)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 131)) | (1 << (Cobol85Parser.DEFINITION - 131)) | (1 << (Cobol85Parser.DFHRESP - 131)) | (1 << (Cobol85Parser.DFHVALUE - 131)) | (1 << (Cobol85Parser.DISK - 131)) | (1 << (Cobol85Parser.DONTCARE - 131)) | (1 << (Cobol85Parser.DOUBLE - 131)) | (1 << (Cobol85Parser.EBCDIC - 131)) | (1 << (Cobol85Parser.EMPTY_CHECK - 131)) | (1 << (Cobol85Parser.ENTER - 131)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 131)) | (1 << (Cobol85Parser.ERASE - 131)) | (1 << (Cobol85Parser.EOL - 131)) | (1 << (Cobol85Parser.EOS - 131)))) != 0) or ((((_la - 195)) & ~0x3f) == 0 and ((1 << (_la - 195)) & ((1 << (Cobol85Parser.ESCAPE - 195)) | (1 << (Cobol85Parser.EVENT - 195)) | (1 << (Cobol85Parser.EXCLUSIVE - 195)) | (1 << (Cobol85Parser.EXPORT - 195)) | (1 << (Cobol85Parser.EXTENDED - 195)) | (1 << (Cobol85Parser.FOREGROUND_COLOR - 195)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 195)) | (1 << (Cobol85Parser.FULL - 195)) | (1 << (Cobol85Parser.FUNCTIONNAME - 195)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 195)) | (1 << (Cobol85Parser.GRID - 195)) | (1 << (Cobol85Parser.HIGHLIGHT - 195)) | (1 << (Cobol85Parser.IMPLICIT - 195)) | (1 << (Cobol85Parser.IMPORT - 195)) | (1 << (Cobol85Parser.INTEGER - 195)))) != 0) or ((((_la - 262)) & ~0x3f) == 0 and ((1 << (_la - 262)) & ((1 << (Cobol85Parser.KEPT - 262)) | (1 << (Cobol85Parser.KEYBOARD - 262)) | (1 << (Cobol85Parser.LANGUAGE - 262)) | (1 << (Cobol85Parser.LB - 262)) | (1 << (Cobol85Parser.LD - 262)) | (1 << (Cobol85Parser.LEFTLINE - 262)) | (1 << (Cobol85Parser.LENGTH_CHECK - 262)) | (1 << (Cobol85Parser.LIBACCESS - 262)) | (1 << (Cobol85Parser.LIBPARAMETER - 262)) | (1 << (Cobol85Parser.LIBRARY - 262)) | (1 << (Cobol85Parser.LIST - 262)) | (1 << (Cobol85Parser.LOCAL - 262)) | (1 << (Cobol85Parser.LONG_DATE - 262)) | (1 << (Cobol85Parser.LONG_TIME - 262)) | (1 << (Cobol85Parser.LOWER - 262)) | (1 << (Cobol85Parser.LOWLIGHT - 262)) | (1 << (Cobol85Parser.MMDDYYYY - 262)) | (1 << (Cobol85Parser.NAMED - 262)) | (1 << (Cobol85Parser.NATIONAL - 262)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 262)) | (1 << (Cobol85Parser.NETWORK - 262)) | (1 << (Cobol85Parser.NO_ECHO - 262)) | (1 << (Cobol85Parser.NUMERIC_DATE - 262)) | (1 << (Cobol85Parser.NUMERIC_TIME - 262)))) != 0) or ((((_la - 326)) & ~0x3f) == 0 and ((1 << (_la - 326)) & ((1 << (Cobol85Parser.ODT - 326)) | (1 << (Cobol85Parser.ORDERLY - 326)) | (1 << (Cobol85Parser.OVERLINE - 326)) | (1 << (Cobol85Parser.OWN - 326)) | (1 << (Cobol85Parser.PASSWORD - 326)) | (1 << (Cobol85Parser.PORT - 326)) | (1 << (Cobol85Parser.PRINTER - 326)) | (1 << (Cobol85Parser.PRIVATE - 326)) | (1 << (Cobol85Parser.PROCESS - 326)) | (1 << (Cobol85Parser.PROGRAM - 326)) | (1 << (Cobol85Parser.PROMPT - 326)) | (1 << (Cobol85Parser.READER - 326)) | (1 << (Cobol85Parser.REMOTE - 326)) | (1 << (Cobol85Parser.REAL - 326)) | (1 << (Cobol85Parser.RECEIVED - 326)) | (1 << (Cobol85Parser.RECURSIVE - 326)) | (1 << (Cobol85Parser.REF - 326)))) != 0) or ((((_la - 395)) & ~0x3f) == 0 and ((1 << (_la - 395)) & ((1 << (Cobol85Parser.REMOVE - 395)) | (1 << (Cobol85Parser.REQUIRED - 395)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 395)) | (1 << (Cobol85Parser.SAVE - 395)) | (1 << (Cobol85Parser.SECURE - 395)) | (1 << (Cobol85Parser.SHARED - 395)) | (1 << (Cobol85Parser.SHAREDBYALL - 395)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 395)) | (1 << (Cobol85Parser.SHARING - 395)) | (1 << (Cobol85Parser.SHORT_DATE - 395)) | (1 << (Cobol85Parser.SQL - 395)))) != 0) or ((((_la - 471)) & ~0x3f) == 0 and ((1 << (_la - 471)) & ((1 << (Cobol85Parser.SYMBOL - 471)) | (1 << (Cobol85Parser.TASK - 471)) | (1 << (Cobol85Parser.THREAD - 471)) | (1 << (Cobol85Parser.THREAD_LOCAL - 471)) | (1 << (Cobol85Parser.TIMER - 471)) | (1 << (Cobol85Parser.TODAYS_DATE - 471)) | (1 << (Cobol85Parser.TODAYS_NAME - 471)) | (1 << (Cobol85Parser.TRUNCATED - 471)) | (1 << (Cobol85Parser.TYPEDEF - 471)) | (1 << (Cobol85Parser.UNDERLINE - 471)) | (1 << (Cobol85Parser.VIRTUAL - 471)) | (1 << (Cobol85Parser.WAIT - 471)) | (1 << (Cobol85Parser.YEAR - 471)) | (1 << (Cobol85Parser.YYYYMMDD - 471)) | (1 << (Cobol85Parser.YYYYDDD - 471)) | (1 << (Cobol85Parser.ZERO_FILL - 471)))) != 0) or ((((_la - 557)) & ~0x3f) == 0 and ((1 << (_la - 557)) & ((1 << (Cobol85Parser.LEVEL_NUMBER_66 - 557)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 557)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 557)) | (1 << (Cobol85Parser.INTEGERLITERAL - 557)) | (1 << (Cobol85Parser.IDENTIFIER - 557)))) != 0)):
                        break

                self.state = 4319
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Cobol85Parser.DEPENDING:
                    self.state = 4314
                    self.match(Cobol85Parser.DEPENDING)
                    self.state = 4316
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==Cobol85Parser.ON:
                        self.state = 4315
                        self.match(Cobol85Parser.ON)


                    self.state = 4318
                    self.identifier()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IfStatementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.IfStatementContext, self).__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(Cobol85Parser.IF, 0)

        def condition(self):
            return self.getTypedRuleContext(Cobol85Parser.ConditionContext,0)


        def ifThen(self):
            return self.getTypedRuleContext(Cobol85Parser.IfThenContext,0)


        def ifElse(self):
            return self.getTypedRuleContext(Cobol85Parser.IfElseContext,0)


        def END_IF(self):
            return self.getToken(Cobol85Parser.END_IF, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_ifStatement

        def enterRule(self, listener):
            if hasattr(listener, "enterIfStatement"):
                listener.enterIfStatement(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitIfStatement"):
                listener.exitIfStatement(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitIfStatement"):
                return visitor.visitIfStatement(self)
            else:
                return visitor.visitChildren(self)




    def ifStatement(self):

        localctx = Cobol85Parser.IfStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 694, self.RULE_ifStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4323
            self.match(Cobol85Parser.IF)
            self.state = 4324
            self.condition()
            self.state = 4325
            self.ifThen()
            self.state = 4327
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,611,self._ctx)
            if la_ == 1:
                self.state = 4326
                self.ifElse()


            self.state = 4330
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,612,self._ctx)
            if la_ == 1:
                self.state = 4329
                self.match(Cobol85Parser.END_IF)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IfThenContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.IfThenContext, self).__init__(parent, invokingState)
            self.parser = parser

        def NEXT(self):
            return self.getToken(Cobol85Parser.NEXT, 0)

        def SENTENCE(self):
            return self.getToken(Cobol85Parser.SENTENCE, 0)

        def THEN(self):
            return self.getToken(Cobol85Parser.THEN, 0)

        def statement(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.StatementContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.StatementContext,i)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_ifThen

        def enterRule(self, listener):
            if hasattr(listener, "enterIfThen"):
                listener.enterIfThen(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitIfThen"):
                listener.exitIfThen(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitIfThen"):
                return visitor.visitIfThen(self)
            else:
                return visitor.visitChildren(self)




    def ifThen(self):

        localctx = Cobol85Parser.IfThenContext(self, self._ctx, self.state)
        self.enterRule(localctx, 696, self.RULE_ifThen)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4333
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.THEN:
                self.state = 4332
                self.match(Cobol85Parser.THEN)


            self.state = 4343
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Cobol85Parser.NEXT]:
                self.state = 4335
                self.match(Cobol85Parser.NEXT)
                self.state = 4336
                self.match(Cobol85Parser.SENTENCE)
                pass
            elif token in [Cobol85Parser.ACCEPT, Cobol85Parser.ADD, Cobol85Parser.ALTER, Cobol85Parser.AT, Cobol85Parser.CALL, Cobol85Parser.CANCEL, Cobol85Parser.CLOSE, Cobol85Parser.COMPUTE, Cobol85Parser.CONTINUE, Cobol85Parser.DELETE, Cobol85Parser.DISABLE, Cobol85Parser.DISPLAY, Cobol85Parser.DIVIDE, Cobol85Parser.ELSE, Cobol85Parser.ENABLE, Cobol85Parser.END, Cobol85Parser.END_ACCEPT, Cobol85Parser.END_ADD, Cobol85Parser.END_CALL, Cobol85Parser.END_COMPUTE, Cobol85Parser.END_DELETE, Cobol85Parser.END_DIVIDE, Cobol85Parser.END_EVALUATE, Cobol85Parser.END_IF, Cobol85Parser.END_MULTIPLY, Cobol85Parser.END_PERFORM, Cobol85Parser.END_READ, Cobol85Parser.END_RECEIVE, Cobol85Parser.END_RETURN, Cobol85Parser.END_REWRITE, Cobol85Parser.END_SEARCH, Cobol85Parser.END_START, Cobol85Parser.END_STRING, Cobol85Parser.END_SUBTRACT, Cobol85Parser.END_UNSTRING, Cobol85Parser.END_WRITE, Cobol85Parser.ENTRY, Cobol85Parser.EVALUATE, Cobol85Parser.EXCEPTION, Cobol85Parser.EXHIBIT, Cobol85Parser.EXIT, Cobol85Parser.GENERATE, Cobol85Parser.GOBACK, Cobol85Parser.GO, Cobol85Parser.IF, Cobol85Parser.INITIALIZE, Cobol85Parser.INITIATE, Cobol85Parser.INSPECT, Cobol85Parser.INVALID, Cobol85Parser.MERGE, Cobol85Parser.MOVE, Cobol85Parser.MULTIPLY, Cobol85Parser.NOT, Cobol85Parser.ON, Cobol85Parser.OPEN, Cobol85Parser.PERFORM, Cobol85Parser.PURGE, Cobol85Parser.READ, Cobol85Parser.RECEIVE, Cobol85Parser.RELEASE, Cobol85Parser.RETURN, Cobol85Parser.REWRITE, Cobol85Parser.SEARCH, Cobol85Parser.SEND, Cobol85Parser.SET, Cobol85Parser.SORT, Cobol85Parser.START, Cobol85Parser.STOP, Cobol85Parser.STRING, Cobol85Parser.SUBTRACT, Cobol85Parser.TERMINATE, Cobol85Parser.UNSTRING, Cobol85Parser.WHEN, Cobol85Parser.WITH, Cobol85Parser.WRITE, Cobol85Parser.DOT_FS, Cobol85Parser.EXECCICSLINE, Cobol85Parser.EXECSQLIMSLINE, Cobol85Parser.EXECSQLLINE]:
                self.state = 4340
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,614,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 4337
                        self.statement() 
                    self.state = 4342
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,614,self._ctx)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IfElseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.IfElseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ELSE(self):
            return self.getToken(Cobol85Parser.ELSE, 0)

        def NEXT(self):
            return self.getToken(Cobol85Parser.NEXT, 0)

        def SENTENCE(self):
            return self.getToken(Cobol85Parser.SENTENCE, 0)

        def statement(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.StatementContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.StatementContext,i)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_ifElse

        def enterRule(self, listener):
            if hasattr(listener, "enterIfElse"):
                listener.enterIfElse(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitIfElse"):
                listener.exitIfElse(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitIfElse"):
                return visitor.visitIfElse(self)
            else:
                return visitor.visitChildren(self)




    def ifElse(self):

        localctx = Cobol85Parser.IfElseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 698, self.RULE_ifElse)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4345
            self.match(Cobol85Parser.ELSE)
            self.state = 4354
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Cobol85Parser.NEXT]:
                self.state = 4346
                self.match(Cobol85Parser.NEXT)
                self.state = 4347
                self.match(Cobol85Parser.SENTENCE)
                pass
            elif token in [Cobol85Parser.ACCEPT, Cobol85Parser.ADD, Cobol85Parser.ALTER, Cobol85Parser.AT, Cobol85Parser.CALL, Cobol85Parser.CANCEL, Cobol85Parser.CLOSE, Cobol85Parser.COMPUTE, Cobol85Parser.CONTINUE, Cobol85Parser.DELETE, Cobol85Parser.DISABLE, Cobol85Parser.DISPLAY, Cobol85Parser.DIVIDE, Cobol85Parser.ELSE, Cobol85Parser.ENABLE, Cobol85Parser.END, Cobol85Parser.END_ACCEPT, Cobol85Parser.END_ADD, Cobol85Parser.END_CALL, Cobol85Parser.END_COMPUTE, Cobol85Parser.END_DELETE, Cobol85Parser.END_DIVIDE, Cobol85Parser.END_EVALUATE, Cobol85Parser.END_IF, Cobol85Parser.END_MULTIPLY, Cobol85Parser.END_PERFORM, Cobol85Parser.END_READ, Cobol85Parser.END_RECEIVE, Cobol85Parser.END_RETURN, Cobol85Parser.END_REWRITE, Cobol85Parser.END_SEARCH, Cobol85Parser.END_START, Cobol85Parser.END_STRING, Cobol85Parser.END_SUBTRACT, Cobol85Parser.END_UNSTRING, Cobol85Parser.END_WRITE, Cobol85Parser.ENTRY, Cobol85Parser.EVALUATE, Cobol85Parser.EXCEPTION, Cobol85Parser.EXHIBIT, Cobol85Parser.EXIT, Cobol85Parser.GENERATE, Cobol85Parser.GOBACK, Cobol85Parser.GO, Cobol85Parser.IF, Cobol85Parser.INITIALIZE, Cobol85Parser.INITIATE, Cobol85Parser.INSPECT, Cobol85Parser.INVALID, Cobol85Parser.MERGE, Cobol85Parser.MOVE, Cobol85Parser.MULTIPLY, Cobol85Parser.NOT, Cobol85Parser.ON, Cobol85Parser.OPEN, Cobol85Parser.PERFORM, Cobol85Parser.PURGE, Cobol85Parser.READ, Cobol85Parser.RECEIVE, Cobol85Parser.RELEASE, Cobol85Parser.RETURN, Cobol85Parser.REWRITE, Cobol85Parser.SEARCH, Cobol85Parser.SEND, Cobol85Parser.SET, Cobol85Parser.SORT, Cobol85Parser.START, Cobol85Parser.STOP, Cobol85Parser.STRING, Cobol85Parser.SUBTRACT, Cobol85Parser.TERMINATE, Cobol85Parser.UNSTRING, Cobol85Parser.WHEN, Cobol85Parser.WITH, Cobol85Parser.WRITE, Cobol85Parser.DOT_FS, Cobol85Parser.EXECCICSLINE, Cobol85Parser.EXECSQLIMSLINE, Cobol85Parser.EXECSQLLINE]:
                self.state = 4351
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,616,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 4348
                        self.statement() 
                    self.state = 4353
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,616,self._ctx)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InitializeStatementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.InitializeStatementContext, self).__init__(parent, invokingState)
            self.parser = parser

        def INITIALIZE(self):
            return self.getToken(Cobol85Parser.INITIALIZE, 0)

        def identifier(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.IdentifierContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.IdentifierContext,i)


        def initializeReplacingPhrase(self):
            return self.getTypedRuleContext(Cobol85Parser.InitializeReplacingPhraseContext,0)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_initializeStatement

        def enterRule(self, listener):
            if hasattr(listener, "enterInitializeStatement"):
                listener.enterInitializeStatement(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitInitializeStatement"):
                listener.exitInitializeStatement(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitInitializeStatement"):
                return visitor.visitInitializeStatement(self)
            else:
                return visitor.visitChildren(self)




    def initializeStatement(self):

        localctx = Cobol85Parser.InitializeStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 700, self.RULE_initializeStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4356
            self.match(Cobol85Parser.INITIALIZE)
            self.state = 4358 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 4357
                self.identifier()
                self.state = 4360 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.ADDRESS) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE) | (1 << Cobol85Parser.AUTO) | (1 << Cobol85Parser.AUTO_SKIP) | (1 << Cobol85Parser.BACKGROUND_COLOR) | (1 << Cobol85Parser.BACKGROUND_COLOUR) | (1 << Cobol85Parser.BEEP) | (1 << Cobol85Parser.BELL) | (1 << Cobol85Parser.BINARY) | (1 << Cobol85Parser.BIT) | (1 << Cobol85Parser.BLINK) | (1 << Cobol85Parser.BLOB) | (1 << Cobol85Parser.BOUNDS) | (1 << Cobol85Parser.CAPABLE) | (1 << Cobol85Parser.CCSVERSION) | (1 << Cobol85Parser.CHANGED) | (1 << Cobol85Parser.CHANNEL))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (Cobol85Parser.CLOB - 67)) | (1 << (Cobol85Parser.CLOSE_DISPOSITION - 67)) | (1 << (Cobol85Parser.COBOL - 67)) | (1 << (Cobol85Parser.COMMITMENT - 67)) | (1 << (Cobol85Parser.CONTROL_POINT - 67)) | (1 << (Cobol85Parser.CONVENTION - 67)) | (1 << (Cobol85Parser.CRUNCH - 67)) | (1 << (Cobol85Parser.CURSOR - 67)) | (1 << (Cobol85Parser.DATE - 67)) | (1 << (Cobol85Parser.DAY - 67)) | (1 << (Cobol85Parser.DAY_OF_WEEK - 67)) | (1 << (Cobol85Parser.DBCLOB - 67)) | (1 << (Cobol85Parser.DEBUG_CONTENTS - 67)) | (1 << (Cobol85Parser.DEBUG_ITEM - 67)) | (1 << (Cobol85Parser.DEBUG_LINE - 67)) | (1 << (Cobol85Parser.DEBUG_NAME - 67)) | (1 << (Cobol85Parser.DEBUG_SUB_1 - 67)) | (1 << (Cobol85Parser.DEBUG_SUB_2 - 67)) | (1 << (Cobol85Parser.DEBUG_SUB_3 - 67)))) != 0) or ((((_la - 131)) & ~0x3f) == 0 and ((1 << (_la - 131)) & ((1 << (Cobol85Parser.DEFAULT - 131)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 131)) | (1 << (Cobol85Parser.DEFINITION - 131)) | (1 << (Cobol85Parser.DFHRESP - 131)) | (1 << (Cobol85Parser.DFHVALUE - 131)) | (1 << (Cobol85Parser.DISK - 131)) | (1 << (Cobol85Parser.DONTCARE - 131)) | (1 << (Cobol85Parser.DOUBLE - 131)) | (1 << (Cobol85Parser.EBCDIC - 131)) | (1 << (Cobol85Parser.EMPTY_CHECK - 131)) | (1 << (Cobol85Parser.ENTER - 131)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 131)) | (1 << (Cobol85Parser.ERASE - 131)) | (1 << (Cobol85Parser.EOL - 131)) | (1 << (Cobol85Parser.EOS - 131)))) != 0) or ((((_la - 195)) & ~0x3f) == 0 and ((1 << (_la - 195)) & ((1 << (Cobol85Parser.ESCAPE - 195)) | (1 << (Cobol85Parser.EVENT - 195)) | (1 << (Cobol85Parser.EXCLUSIVE - 195)) | (1 << (Cobol85Parser.EXPORT - 195)) | (1 << (Cobol85Parser.EXTENDED - 195)) | (1 << (Cobol85Parser.FOREGROUND_COLOR - 195)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 195)) | (1 << (Cobol85Parser.FULL - 195)) | (1 << (Cobol85Parser.FUNCTION - 195)) | (1 << (Cobol85Parser.FUNCTIONNAME - 195)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 195)) | (1 << (Cobol85Parser.GRID - 195)) | (1 << (Cobol85Parser.HIGHLIGHT - 195)) | (1 << (Cobol85Parser.IMPLICIT - 195)) | (1 << (Cobol85Parser.IMPORT - 195)) | (1 << (Cobol85Parser.INTEGER - 195)))) != 0) or ((((_la - 262)) & ~0x3f) == 0 and ((1 << (_la - 262)) & ((1 << (Cobol85Parser.KEPT - 262)) | (1 << (Cobol85Parser.KEYBOARD - 262)) | (1 << (Cobol85Parser.LANGUAGE - 262)) | (1 << (Cobol85Parser.LB - 262)) | (1 << (Cobol85Parser.LD - 262)) | (1 << (Cobol85Parser.LEFTLINE - 262)) | (1 << (Cobol85Parser.LENGTH - 262)) | (1 << (Cobol85Parser.LENGTH_CHECK - 262)) | (1 << (Cobol85Parser.LIBACCESS - 262)) | (1 << (Cobol85Parser.LIBPARAMETER - 262)) | (1 << (Cobol85Parser.LIBRARY - 262)) | (1 << (Cobol85Parser.LINAGE_COUNTER - 262)) | (1 << (Cobol85Parser.LINE_COUNTER - 262)) | (1 << (Cobol85Parser.LIST - 262)) | (1 << (Cobol85Parser.LOCAL - 262)) | (1 << (Cobol85Parser.LONG_DATE - 262)) | (1 << (Cobol85Parser.LONG_TIME - 262)) | (1 << (Cobol85Parser.LOWER - 262)) | (1 << (Cobol85Parser.LOWLIGHT - 262)) | (1 << (Cobol85Parser.MMDDYYYY - 262)) | (1 << (Cobol85Parser.NAMED - 262)) | (1 << (Cobol85Parser.NATIONAL - 262)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 262)) | (1 << (Cobol85Parser.NETWORK - 262)) | (1 << (Cobol85Parser.NO_ECHO - 262)) | (1 << (Cobol85Parser.NUMERIC_DATE - 262)) | (1 << (Cobol85Parser.NUMERIC_TIME - 262)))) != 0) or ((((_la - 326)) & ~0x3f) == 0 and ((1 << (_la - 326)) & ((1 << (Cobol85Parser.ODT - 326)) | (1 << (Cobol85Parser.ORDERLY - 326)) | (1 << (Cobol85Parser.OVERLINE - 326)) | (1 << (Cobol85Parser.OWN - 326)) | (1 << (Cobol85Parser.PAGE_COUNTER - 326)) | (1 << (Cobol85Parser.PASSWORD - 326)) | (1 << (Cobol85Parser.PORT - 326)) | (1 << (Cobol85Parser.PRINTER - 326)) | (1 << (Cobol85Parser.PRIVATE - 326)) | (1 << (Cobol85Parser.PROCESS - 326)) | (1 << (Cobol85Parser.PROGRAM - 326)) | (1 << (Cobol85Parser.PROMPT - 326)) | (1 << (Cobol85Parser.READER - 326)) | (1 << (Cobol85Parser.REMOTE - 326)) | (1 << (Cobol85Parser.REAL - 326)) | (1 << (Cobol85Parser.RECEIVED - 326)) | (1 << (Cobol85Parser.RECURSIVE - 326)) | (1 << (Cobol85Parser.REF - 326)))) != 0) or ((((_la - 395)) & ~0x3f) == 0 and ((1 << (_la - 395)) & ((1 << (Cobol85Parser.REMOVE - 395)) | (1 << (Cobol85Parser.REQUIRED - 395)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 395)) | (1 << (Cobol85Parser.RETURN_CODE - 395)) | (1 << (Cobol85Parser.SAVE - 395)) | (1 << (Cobol85Parser.SECURE - 395)) | (1 << (Cobol85Parser.SHARED - 395)) | (1 << (Cobol85Parser.SHAREDBYALL - 395)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 395)) | (1 << (Cobol85Parser.SHARING - 395)) | (1 << (Cobol85Parser.SHIFT_IN - 395)) | (1 << (Cobol85Parser.SHIFT_OUT - 395)) | (1 << (Cobol85Parser.SHORT_DATE - 395)) | (1 << (Cobol85Parser.SORT_CONTROL - 395)) | (1 << (Cobol85Parser.SORT_CORE_SIZE - 395)) | (1 << (Cobol85Parser.SORT_FILE_SIZE - 395)) | (1 << (Cobol85Parser.SORT_MESSAGE - 395)) | (1 << (Cobol85Parser.SORT_MODE_SIZE - 395)) | (1 << (Cobol85Parser.SORT_RETURN - 395)) | (1 << (Cobol85Parser.SQL - 395)))) != 0) or ((((_la - 471)) & ~0x3f) == 0 and ((1 << (_la - 471)) & ((1 << (Cobol85Parser.SYMBOL - 471)) | (1 << (Cobol85Parser.TALLY - 471)) | (1 << (Cobol85Parser.TASK - 471)) | (1 << (Cobol85Parser.THREAD - 471)) | (1 << (Cobol85Parser.THREAD_LOCAL - 471)) | (1 << (Cobol85Parser.TIME - 471)) | (1 << (Cobol85Parser.TIMER - 471)) | (1 << (Cobol85Parser.TODAYS_DATE - 471)) | (1 << (Cobol85Parser.TODAYS_NAME - 471)) | (1 << (Cobol85Parser.TRUNCATED - 471)) | (1 << (Cobol85Parser.TYPEDEF - 471)) | (1 << (Cobol85Parser.UNDERLINE - 471)) | (1 << (Cobol85Parser.VIRTUAL - 471)) | (1 << (Cobol85Parser.WAIT - 471)) | (1 << (Cobol85Parser.WHEN_COMPILED - 471)) | (1 << (Cobol85Parser.YEAR - 471)) | (1 << (Cobol85Parser.YYYYMMDD - 471)) | (1 << (Cobol85Parser.YYYYDDD - 471)) | (1 << (Cobol85Parser.ZERO_FILL - 471)))) != 0) or ((((_la - 557)) & ~0x3f) == 0 and ((1 << (_la - 557)) & ((1 << (Cobol85Parser.LEVEL_NUMBER_66 - 557)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 557)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 557)) | (1 << (Cobol85Parser.INTEGERLITERAL - 557)) | (1 << (Cobol85Parser.IDENTIFIER - 557)))) != 0)):
                    break

            self.state = 4363
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.REPLACING:
                self.state = 4362
                self.initializeReplacingPhrase()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InitializeReplacingPhraseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.InitializeReplacingPhraseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def REPLACING(self):
            return self.getToken(Cobol85Parser.REPLACING, 0)

        def initializeReplacingBy(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.InitializeReplacingByContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.InitializeReplacingByContext,i)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_initializeReplacingPhrase

        def enterRule(self, listener):
            if hasattr(listener, "enterInitializeReplacingPhrase"):
                listener.enterInitializeReplacingPhrase(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitInitializeReplacingPhrase"):
                listener.exitInitializeReplacingPhrase(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitInitializeReplacingPhrase"):
                return visitor.visitInitializeReplacingPhrase(self)
            else:
                return visitor.visitChildren(self)




    def initializeReplacingPhrase(self):

        localctx = Cobol85Parser.InitializeReplacingPhraseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 702, self.RULE_initializeReplacingPhrase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4365
            self.match(Cobol85Parser.REPLACING)
            self.state = 4367 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 4366
                self.initializeReplacingBy()
                self.state = 4369 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Cobol85Parser.ALPHABETIC) | (1 << Cobol85Parser.ALPHANUMERIC) | (1 << Cobol85Parser.ALPHANUMERIC_EDITED))) != 0) or _la==Cobol85Parser.DBCS or _la==Cobol85Parser.EGCS or ((((_la - 308)) & ~0x3f) == 0 and ((1 << (_la - 308)) & ((1 << (Cobol85Parser.NATIONAL - 308)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 308)) | (1 << (Cobol85Parser.NUMERIC - 308)) | (1 << (Cobol85Parser.NUMERIC_EDITED - 308)))) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InitializeReplacingByContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.InitializeReplacingByContext, self).__init__(parent, invokingState)
            self.parser = parser

        def BY(self):
            return self.getToken(Cobol85Parser.BY, 0)

        def ALPHABETIC(self):
            return self.getToken(Cobol85Parser.ALPHABETIC, 0)

        def ALPHANUMERIC(self):
            return self.getToken(Cobol85Parser.ALPHANUMERIC, 0)

        def ALPHANUMERIC_EDITED(self):
            return self.getToken(Cobol85Parser.ALPHANUMERIC_EDITED, 0)

        def NATIONAL(self):
            return self.getToken(Cobol85Parser.NATIONAL, 0)

        def NATIONAL_EDITED(self):
            return self.getToken(Cobol85Parser.NATIONAL_EDITED, 0)

        def NUMERIC(self):
            return self.getToken(Cobol85Parser.NUMERIC, 0)

        def NUMERIC_EDITED(self):
            return self.getToken(Cobol85Parser.NUMERIC_EDITED, 0)

        def DBCS(self):
            return self.getToken(Cobol85Parser.DBCS, 0)

        def EGCS(self):
            return self.getToken(Cobol85Parser.EGCS, 0)

        def identifier(self):
            return self.getTypedRuleContext(Cobol85Parser.IdentifierContext,0)


        def literal(self):
            return self.getTypedRuleContext(Cobol85Parser.LiteralContext,0)


        def DATA(self):
            return self.getToken(Cobol85Parser.DATA, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_initializeReplacingBy

        def enterRule(self, listener):
            if hasattr(listener, "enterInitializeReplacingBy"):
                listener.enterInitializeReplacingBy(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitInitializeReplacingBy"):
                listener.exitInitializeReplacingBy(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitInitializeReplacingBy"):
                return visitor.visitInitializeReplacingBy(self)
            else:
                return visitor.visitChildren(self)




    def initializeReplacingBy(self):

        localctx = Cobol85Parser.InitializeReplacingByContext(self, self._ctx, self.state)
        self.enterRule(localctx, 704, self.RULE_initializeReplacingBy)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4371
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Cobol85Parser.ALPHABETIC) | (1 << Cobol85Parser.ALPHANUMERIC) | (1 << Cobol85Parser.ALPHANUMERIC_EDITED))) != 0) or _la==Cobol85Parser.DBCS or _la==Cobol85Parser.EGCS or ((((_la - 308)) & ~0x3f) == 0 and ((1 << (_la - 308)) & ((1 << (Cobol85Parser.NATIONAL - 308)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 308)) | (1 << (Cobol85Parser.NUMERIC - 308)) | (1 << (Cobol85Parser.NUMERIC_EDITED - 308)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 4373
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.DATA:
                self.state = 4372
                self.match(Cobol85Parser.DATA)


            self.state = 4375
            self.match(Cobol85Parser.BY)
            self.state = 4378
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,622,self._ctx)
            if la_ == 1:
                self.state = 4376
                self.identifier()
                pass

            elif la_ == 2:
                self.state = 4377
                self.literal()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InitiateStatementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.InitiateStatementContext, self).__init__(parent, invokingState)
            self.parser = parser

        def INITIATE(self):
            return self.getToken(Cobol85Parser.INITIATE, 0)

        def reportName(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.ReportNameContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.ReportNameContext,i)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_initiateStatement

        def enterRule(self, listener):
            if hasattr(listener, "enterInitiateStatement"):
                listener.enterInitiateStatement(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitInitiateStatement"):
                listener.exitInitiateStatement(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitInitiateStatement"):
                return visitor.visitInitiateStatement(self)
            else:
                return visitor.visitChildren(self)




    def initiateStatement(self):

        localctx = Cobol85Parser.InitiateStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 706, self.RULE_initiateStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4380
            self.match(Cobol85Parser.INITIATE)
            self.state = 4382 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 4381
                self.reportName()
                self.state = 4384 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE) | (1 << Cobol85Parser.AUTO) | (1 << Cobol85Parser.AUTO_SKIP) | (1 << Cobol85Parser.BACKGROUND_COLOR) | (1 << Cobol85Parser.BACKGROUND_COLOUR) | (1 << Cobol85Parser.BEEP) | (1 << Cobol85Parser.BELL) | (1 << Cobol85Parser.BINARY) | (1 << Cobol85Parser.BIT) | (1 << Cobol85Parser.BLINK) | (1 << Cobol85Parser.BLOB) | (1 << Cobol85Parser.BOUNDS) | (1 << Cobol85Parser.CAPABLE) | (1 << Cobol85Parser.CCSVERSION) | (1 << Cobol85Parser.CHANGED) | (1 << Cobol85Parser.CHANNEL))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (Cobol85Parser.CLOB - 67)) | (1 << (Cobol85Parser.CLOSE_DISPOSITION - 67)) | (1 << (Cobol85Parser.COBOL - 67)) | (1 << (Cobol85Parser.COMMITMENT - 67)) | (1 << (Cobol85Parser.CONTROL_POINT - 67)) | (1 << (Cobol85Parser.CONVENTION - 67)) | (1 << (Cobol85Parser.CRUNCH - 67)) | (1 << (Cobol85Parser.CURSOR - 67)) | (1 << (Cobol85Parser.DBCLOB - 67)))) != 0) or ((((_la - 131)) & ~0x3f) == 0 and ((1 << (_la - 131)) & ((1 << (Cobol85Parser.DEFAULT - 131)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 131)) | (1 << (Cobol85Parser.DEFINITION - 131)) | (1 << (Cobol85Parser.DFHRESP - 131)) | (1 << (Cobol85Parser.DFHVALUE - 131)) | (1 << (Cobol85Parser.DISK - 131)) | (1 << (Cobol85Parser.DONTCARE - 131)) | (1 << (Cobol85Parser.DOUBLE - 131)) | (1 << (Cobol85Parser.EBCDIC - 131)) | (1 << (Cobol85Parser.EMPTY_CHECK - 131)) | (1 << (Cobol85Parser.ENTER - 131)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 131)) | (1 << (Cobol85Parser.ERASE - 131)) | (1 << (Cobol85Parser.EOL - 131)) | (1 << (Cobol85Parser.EOS - 131)))) != 0) or ((((_la - 195)) & ~0x3f) == 0 and ((1 << (_la - 195)) & ((1 << (Cobol85Parser.ESCAPE - 195)) | (1 << (Cobol85Parser.EVENT - 195)) | (1 << (Cobol85Parser.EXCLUSIVE - 195)) | (1 << (Cobol85Parser.EXPORT - 195)) | (1 << (Cobol85Parser.EXTENDED - 195)) | (1 << (Cobol85Parser.FOREGROUND_COLOR - 195)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 195)) | (1 << (Cobol85Parser.FULL - 195)) | (1 << (Cobol85Parser.FUNCTIONNAME - 195)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 195)) | (1 << (Cobol85Parser.GRID - 195)) | (1 << (Cobol85Parser.HIGHLIGHT - 195)) | (1 << (Cobol85Parser.IMPLICIT - 195)) | (1 << (Cobol85Parser.IMPORT - 195)) | (1 << (Cobol85Parser.INTEGER - 195)))) != 0) or ((((_la - 262)) & ~0x3f) == 0 and ((1 << (_la - 262)) & ((1 << (Cobol85Parser.KEPT - 262)) | (1 << (Cobol85Parser.KEYBOARD - 262)) | (1 << (Cobol85Parser.LANGUAGE - 262)) | (1 << (Cobol85Parser.LB - 262)) | (1 << (Cobol85Parser.LD - 262)) | (1 << (Cobol85Parser.LEFTLINE - 262)) | (1 << (Cobol85Parser.LENGTH_CHECK - 262)) | (1 << (Cobol85Parser.LIBACCESS - 262)) | (1 << (Cobol85Parser.LIBPARAMETER - 262)) | (1 << (Cobol85Parser.LIBRARY - 262)) | (1 << (Cobol85Parser.LINAGE_COUNTER - 262)) | (1 << (Cobol85Parser.LIST - 262)) | (1 << (Cobol85Parser.LOCAL - 262)) | (1 << (Cobol85Parser.LONG_DATE - 262)) | (1 << (Cobol85Parser.LONG_TIME - 262)) | (1 << (Cobol85Parser.LOWER - 262)) | (1 << (Cobol85Parser.LOWLIGHT - 262)) | (1 << (Cobol85Parser.MMDDYYYY - 262)) | (1 << (Cobol85Parser.NAMED - 262)) | (1 << (Cobol85Parser.NATIONAL - 262)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 262)) | (1 << (Cobol85Parser.NETWORK - 262)) | (1 << (Cobol85Parser.NO_ECHO - 262)) | (1 << (Cobol85Parser.NUMERIC_DATE - 262)) | (1 << (Cobol85Parser.NUMERIC_TIME - 262)))) != 0) or ((((_la - 326)) & ~0x3f) == 0 and ((1 << (_la - 326)) & ((1 << (Cobol85Parser.ODT - 326)) | (1 << (Cobol85Parser.ORDERLY - 326)) | (1 << (Cobol85Parser.OVERLINE - 326)) | (1 << (Cobol85Parser.OWN - 326)) | (1 << (Cobol85Parser.PASSWORD - 326)) | (1 << (Cobol85Parser.PORT - 326)) | (1 << (Cobol85Parser.PRINTER - 326)) | (1 << (Cobol85Parser.PRIVATE - 326)) | (1 << (Cobol85Parser.PROCESS - 326)) | (1 << (Cobol85Parser.PROGRAM - 326)) | (1 << (Cobol85Parser.PROMPT - 326)) | (1 << (Cobol85Parser.READER - 326)) | (1 << (Cobol85Parser.REMOTE - 326)) | (1 << (Cobol85Parser.REAL - 326)) | (1 << (Cobol85Parser.RECEIVED - 326)) | (1 << (Cobol85Parser.RECURSIVE - 326)) | (1 << (Cobol85Parser.REF - 326)))) != 0) or ((((_la - 395)) & ~0x3f) == 0 and ((1 << (_la - 395)) & ((1 << (Cobol85Parser.REMOVE - 395)) | (1 << (Cobol85Parser.REQUIRED - 395)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 395)) | (1 << (Cobol85Parser.SAVE - 395)) | (1 << (Cobol85Parser.SECURE - 395)) | (1 << (Cobol85Parser.SHARED - 395)) | (1 << (Cobol85Parser.SHAREDBYALL - 395)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 395)) | (1 << (Cobol85Parser.SHARING - 395)) | (1 << (Cobol85Parser.SHORT_DATE - 395)) | (1 << (Cobol85Parser.SQL - 395)))) != 0) or ((((_la - 471)) & ~0x3f) == 0 and ((1 << (_la - 471)) & ((1 << (Cobol85Parser.SYMBOL - 471)) | (1 << (Cobol85Parser.TASK - 471)) | (1 << (Cobol85Parser.THREAD - 471)) | (1 << (Cobol85Parser.THREAD_LOCAL - 471)) | (1 << (Cobol85Parser.TIMER - 471)) | (1 << (Cobol85Parser.TODAYS_DATE - 471)) | (1 << (Cobol85Parser.TODAYS_NAME - 471)) | (1 << (Cobol85Parser.TRUNCATED - 471)) | (1 << (Cobol85Parser.TYPEDEF - 471)) | (1 << (Cobol85Parser.UNDERLINE - 471)) | (1 << (Cobol85Parser.VIRTUAL - 471)) | (1 << (Cobol85Parser.WAIT - 471)) | (1 << (Cobol85Parser.YEAR - 471)) | (1 << (Cobol85Parser.YYYYMMDD - 471)) | (1 << (Cobol85Parser.YYYYDDD - 471)) | (1 << (Cobol85Parser.ZERO_FILL - 471)))) != 0) or ((((_la - 557)) & ~0x3f) == 0 and ((1 << (_la - 557)) & ((1 << (Cobol85Parser.LEVEL_NUMBER_66 - 557)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 557)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 557)) | (1 << (Cobol85Parser.INTEGERLITERAL - 557)) | (1 << (Cobol85Parser.IDENTIFIER - 557)))) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InspectStatementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.InspectStatementContext, self).__init__(parent, invokingState)
            self.parser = parser

        def INSPECT(self):
            return self.getToken(Cobol85Parser.INSPECT, 0)

        def identifier(self):
            return self.getTypedRuleContext(Cobol85Parser.IdentifierContext,0)


        def inspectTallyingPhrase(self):
            return self.getTypedRuleContext(Cobol85Parser.InspectTallyingPhraseContext,0)


        def inspectReplacingPhrase(self):
            return self.getTypedRuleContext(Cobol85Parser.InspectReplacingPhraseContext,0)


        def inspectTallyingReplacingPhrase(self):
            return self.getTypedRuleContext(Cobol85Parser.InspectTallyingReplacingPhraseContext,0)


        def inspectConvertingPhrase(self):
            return self.getTypedRuleContext(Cobol85Parser.InspectConvertingPhraseContext,0)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_inspectStatement

        def enterRule(self, listener):
            if hasattr(listener, "enterInspectStatement"):
                listener.enterInspectStatement(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitInspectStatement"):
                listener.exitInspectStatement(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitInspectStatement"):
                return visitor.visitInspectStatement(self)
            else:
                return visitor.visitChildren(self)




    def inspectStatement(self):

        localctx = Cobol85Parser.InspectStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 708, self.RULE_inspectStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4386
            self.match(Cobol85Parser.INSPECT)
            self.state = 4387
            self.identifier()
            self.state = 4392
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,624,self._ctx)
            if la_ == 1:
                self.state = 4388
                self.inspectTallyingPhrase()
                pass

            elif la_ == 2:
                self.state = 4389
                self.inspectReplacingPhrase()
                pass

            elif la_ == 3:
                self.state = 4390
                self.inspectTallyingReplacingPhrase()
                pass

            elif la_ == 4:
                self.state = 4391
                self.inspectConvertingPhrase()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InspectTallyingPhraseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.InspectTallyingPhraseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def TALLYING(self):
            return self.getToken(Cobol85Parser.TALLYING, 0)

        def inspectFor(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.InspectForContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.InspectForContext,i)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_inspectTallyingPhrase

        def enterRule(self, listener):
            if hasattr(listener, "enterInspectTallyingPhrase"):
                listener.enterInspectTallyingPhrase(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitInspectTallyingPhrase"):
                listener.exitInspectTallyingPhrase(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitInspectTallyingPhrase"):
                return visitor.visitInspectTallyingPhrase(self)
            else:
                return visitor.visitChildren(self)




    def inspectTallyingPhrase(self):

        localctx = Cobol85Parser.InspectTallyingPhraseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 710, self.RULE_inspectTallyingPhrase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4394
            self.match(Cobol85Parser.TALLYING)
            self.state = 4396 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 4395
                self.inspectFor()
                self.state = 4398 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.ADDRESS) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE) | (1 << Cobol85Parser.AUTO) | (1 << Cobol85Parser.AUTO_SKIP) | (1 << Cobol85Parser.BACKGROUND_COLOR) | (1 << Cobol85Parser.BACKGROUND_COLOUR) | (1 << Cobol85Parser.BEEP) | (1 << Cobol85Parser.BELL) | (1 << Cobol85Parser.BINARY) | (1 << Cobol85Parser.BIT) | (1 << Cobol85Parser.BLINK) | (1 << Cobol85Parser.BLOB) | (1 << Cobol85Parser.BOUNDS) | (1 << Cobol85Parser.CAPABLE) | (1 << Cobol85Parser.CCSVERSION) | (1 << Cobol85Parser.CHANGED) | (1 << Cobol85Parser.CHANNEL))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (Cobol85Parser.CLOB - 67)) | (1 << (Cobol85Parser.CLOSE_DISPOSITION - 67)) | (1 << (Cobol85Parser.COBOL - 67)) | (1 << (Cobol85Parser.COMMITMENT - 67)) | (1 << (Cobol85Parser.CONTROL_POINT - 67)) | (1 << (Cobol85Parser.CONVENTION - 67)) | (1 << (Cobol85Parser.CRUNCH - 67)) | (1 << (Cobol85Parser.CURSOR - 67)) | (1 << (Cobol85Parser.DATE - 67)) | (1 << (Cobol85Parser.DAY - 67)) | (1 << (Cobol85Parser.DAY_OF_WEEK - 67)) | (1 << (Cobol85Parser.DBCLOB - 67)) | (1 << (Cobol85Parser.DEBUG_CONTENTS - 67)) | (1 << (Cobol85Parser.DEBUG_ITEM - 67)) | (1 << (Cobol85Parser.DEBUG_LINE - 67)) | (1 << (Cobol85Parser.DEBUG_NAME - 67)) | (1 << (Cobol85Parser.DEBUG_SUB_1 - 67)) | (1 << (Cobol85Parser.DEBUG_SUB_2 - 67)) | (1 << (Cobol85Parser.DEBUG_SUB_3 - 67)))) != 0) or ((((_la - 131)) & ~0x3f) == 0 and ((1 << (_la - 131)) & ((1 << (Cobol85Parser.DEFAULT - 131)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 131)) | (1 << (Cobol85Parser.DEFINITION - 131)) | (1 << (Cobol85Parser.DFHRESP - 131)) | (1 << (Cobol85Parser.DFHVALUE - 131)) | (1 << (Cobol85Parser.DISK - 131)) | (1 << (Cobol85Parser.DONTCARE - 131)) | (1 << (Cobol85Parser.DOUBLE - 131)) | (1 << (Cobol85Parser.EBCDIC - 131)) | (1 << (Cobol85Parser.EMPTY_CHECK - 131)) | (1 << (Cobol85Parser.ENTER - 131)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 131)) | (1 << (Cobol85Parser.ERASE - 131)) | (1 << (Cobol85Parser.EOL - 131)) | (1 << (Cobol85Parser.EOS - 131)))) != 0) or ((((_la - 195)) & ~0x3f) == 0 and ((1 << (_la - 195)) & ((1 << (Cobol85Parser.ESCAPE - 195)) | (1 << (Cobol85Parser.EVENT - 195)) | (1 << (Cobol85Parser.EXCLUSIVE - 195)) | (1 << (Cobol85Parser.EXPORT - 195)) | (1 << (Cobol85Parser.EXTENDED - 195)) | (1 << (Cobol85Parser.FOREGROUND_COLOR - 195)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 195)) | (1 << (Cobol85Parser.FULL - 195)) | (1 << (Cobol85Parser.FUNCTION - 195)) | (1 << (Cobol85Parser.FUNCTIONNAME - 195)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 195)) | (1 << (Cobol85Parser.GRID - 195)) | (1 << (Cobol85Parser.HIGHLIGHT - 195)) | (1 << (Cobol85Parser.IMPLICIT - 195)) | (1 << (Cobol85Parser.IMPORT - 195)) | (1 << (Cobol85Parser.INTEGER - 195)))) != 0) or ((((_la - 262)) & ~0x3f) == 0 and ((1 << (_la - 262)) & ((1 << (Cobol85Parser.KEPT - 262)) | (1 << (Cobol85Parser.KEYBOARD - 262)) | (1 << (Cobol85Parser.LANGUAGE - 262)) | (1 << (Cobol85Parser.LB - 262)) | (1 << (Cobol85Parser.LD - 262)) | (1 << (Cobol85Parser.LEFTLINE - 262)) | (1 << (Cobol85Parser.LENGTH - 262)) | (1 << (Cobol85Parser.LENGTH_CHECK - 262)) | (1 << (Cobol85Parser.LIBACCESS - 262)) | (1 << (Cobol85Parser.LIBPARAMETER - 262)) | (1 << (Cobol85Parser.LIBRARY - 262)) | (1 << (Cobol85Parser.LINAGE_COUNTER - 262)) | (1 << (Cobol85Parser.LINE_COUNTER - 262)) | (1 << (Cobol85Parser.LIST - 262)) | (1 << (Cobol85Parser.LOCAL - 262)) | (1 << (Cobol85Parser.LONG_DATE - 262)) | (1 << (Cobol85Parser.LONG_TIME - 262)) | (1 << (Cobol85Parser.LOWER - 262)) | (1 << (Cobol85Parser.LOWLIGHT - 262)) | (1 << (Cobol85Parser.MMDDYYYY - 262)) | (1 << (Cobol85Parser.NAMED - 262)) | (1 << (Cobol85Parser.NATIONAL - 262)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 262)) | (1 << (Cobol85Parser.NETWORK - 262)) | (1 << (Cobol85Parser.NO_ECHO - 262)) | (1 << (Cobol85Parser.NUMERIC_DATE - 262)) | (1 << (Cobol85Parser.NUMERIC_TIME - 262)))) != 0) or ((((_la - 326)) & ~0x3f) == 0 and ((1 << (_la - 326)) & ((1 << (Cobol85Parser.ODT - 326)) | (1 << (Cobol85Parser.ORDERLY - 326)) | (1 << (Cobol85Parser.OVERLINE - 326)) | (1 << (Cobol85Parser.OWN - 326)) | (1 << (Cobol85Parser.PAGE_COUNTER - 326)) | (1 << (Cobol85Parser.PASSWORD - 326)) | (1 << (Cobol85Parser.PORT - 326)) | (1 << (Cobol85Parser.PRINTER - 326)) | (1 << (Cobol85Parser.PRIVATE - 326)) | (1 << (Cobol85Parser.PROCESS - 326)) | (1 << (Cobol85Parser.PROGRAM - 326)) | (1 << (Cobol85Parser.PROMPT - 326)) | (1 << (Cobol85Parser.READER - 326)) | (1 << (Cobol85Parser.REMOTE - 326)) | (1 << (Cobol85Parser.REAL - 326)) | (1 << (Cobol85Parser.RECEIVED - 326)) | (1 << (Cobol85Parser.RECURSIVE - 326)) | (1 << (Cobol85Parser.REF - 326)))) != 0) or ((((_la - 395)) & ~0x3f) == 0 and ((1 << (_la - 395)) & ((1 << (Cobol85Parser.REMOVE - 395)) | (1 << (Cobol85Parser.REQUIRED - 395)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 395)) | (1 << (Cobol85Parser.RETURN_CODE - 395)) | (1 << (Cobol85Parser.SAVE - 395)) | (1 << (Cobol85Parser.SECURE - 395)) | (1 << (Cobol85Parser.SHARED - 395)) | (1 << (Cobol85Parser.SHAREDBYALL - 395)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 395)) | (1 << (Cobol85Parser.SHARING - 395)) | (1 << (Cobol85Parser.SHIFT_IN - 395)) | (1 << (Cobol85Parser.SHIFT_OUT - 395)) | (1 << (Cobol85Parser.SHORT_DATE - 395)) | (1 << (Cobol85Parser.SORT_CONTROL - 395)) | (1 << (Cobol85Parser.SORT_CORE_SIZE - 395)) | (1 << (Cobol85Parser.SORT_FILE_SIZE - 395)) | (1 << (Cobol85Parser.SORT_MESSAGE - 395)) | (1 << (Cobol85Parser.SORT_MODE_SIZE - 395)) | (1 << (Cobol85Parser.SORT_RETURN - 395)) | (1 << (Cobol85Parser.SQL - 395)))) != 0) or ((((_la - 471)) & ~0x3f) == 0 and ((1 << (_la - 471)) & ((1 << (Cobol85Parser.SYMBOL - 471)) | (1 << (Cobol85Parser.TALLY - 471)) | (1 << (Cobol85Parser.TASK - 471)) | (1 << (Cobol85Parser.THREAD - 471)) | (1 << (Cobol85Parser.THREAD_LOCAL - 471)) | (1 << (Cobol85Parser.TIME - 471)) | (1 << (Cobol85Parser.TIMER - 471)) | (1 << (Cobol85Parser.TODAYS_DATE - 471)) | (1 << (Cobol85Parser.TODAYS_NAME - 471)) | (1 << (Cobol85Parser.TRUNCATED - 471)) | (1 << (Cobol85Parser.TYPEDEF - 471)) | (1 << (Cobol85Parser.UNDERLINE - 471)) | (1 << (Cobol85Parser.VIRTUAL - 471)) | (1 << (Cobol85Parser.WAIT - 471)) | (1 << (Cobol85Parser.WHEN_COMPILED - 471)) | (1 << (Cobol85Parser.YEAR - 471)) | (1 << (Cobol85Parser.YYYYMMDD - 471)) | (1 << (Cobol85Parser.YYYYDDD - 471)) | (1 << (Cobol85Parser.ZERO_FILL - 471)))) != 0) or ((((_la - 557)) & ~0x3f) == 0 and ((1 << (_la - 557)) & ((1 << (Cobol85Parser.LEVEL_NUMBER_66 - 557)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 557)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 557)) | (1 << (Cobol85Parser.INTEGERLITERAL - 557)) | (1 << (Cobol85Parser.IDENTIFIER - 557)))) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InspectReplacingPhraseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.InspectReplacingPhraseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def REPLACING(self):
            return self.getToken(Cobol85Parser.REPLACING, 0)

        def inspectReplacingCharacters(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.InspectReplacingCharactersContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.InspectReplacingCharactersContext,i)


        def inspectReplacingAllLeadings(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.InspectReplacingAllLeadingsContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.InspectReplacingAllLeadingsContext,i)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_inspectReplacingPhrase

        def enterRule(self, listener):
            if hasattr(listener, "enterInspectReplacingPhrase"):
                listener.enterInspectReplacingPhrase(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitInspectReplacingPhrase"):
                listener.exitInspectReplacingPhrase(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitInspectReplacingPhrase"):
                return visitor.visitInspectReplacingPhrase(self)
            else:
                return visitor.visitChildren(self)




    def inspectReplacingPhrase(self):

        localctx = Cobol85Parser.InspectReplacingPhraseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 712, self.RULE_inspectReplacingPhrase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4400
            self.match(Cobol85Parser.REPLACING)
            self.state = 4403 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 4403
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [Cobol85Parser.CHARACTERS]:
                    self.state = 4401
                    self.inspectReplacingCharacters()
                    pass
                elif token in [Cobol85Parser.ALL, Cobol85Parser.FIRST, Cobol85Parser.LEADING]:
                    self.state = 4402
                    self.inspectReplacingAllLeadings()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 4405 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==Cobol85Parser.ALL or _la==Cobol85Parser.CHARACTERS or _la==Cobol85Parser.FIRST or _la==Cobol85Parser.LEADING):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InspectTallyingReplacingPhraseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.InspectTallyingReplacingPhraseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def TALLYING(self):
            return self.getToken(Cobol85Parser.TALLYING, 0)

        def inspectFor(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.InspectForContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.InspectForContext,i)


        def inspectReplacingPhrase(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.InspectReplacingPhraseContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.InspectReplacingPhraseContext,i)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_inspectTallyingReplacingPhrase

        def enterRule(self, listener):
            if hasattr(listener, "enterInspectTallyingReplacingPhrase"):
                listener.enterInspectTallyingReplacingPhrase(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitInspectTallyingReplacingPhrase"):
                listener.exitInspectTallyingReplacingPhrase(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitInspectTallyingReplacingPhrase"):
                return visitor.visitInspectTallyingReplacingPhrase(self)
            else:
                return visitor.visitChildren(self)




    def inspectTallyingReplacingPhrase(self):

        localctx = Cobol85Parser.InspectTallyingReplacingPhraseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 714, self.RULE_inspectTallyingReplacingPhrase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4407
            self.match(Cobol85Parser.TALLYING)
            self.state = 4409 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 4408
                self.inspectFor()
                self.state = 4411 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.ADDRESS) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE) | (1 << Cobol85Parser.AUTO) | (1 << Cobol85Parser.AUTO_SKIP) | (1 << Cobol85Parser.BACKGROUND_COLOR) | (1 << Cobol85Parser.BACKGROUND_COLOUR) | (1 << Cobol85Parser.BEEP) | (1 << Cobol85Parser.BELL) | (1 << Cobol85Parser.BINARY) | (1 << Cobol85Parser.BIT) | (1 << Cobol85Parser.BLINK) | (1 << Cobol85Parser.BLOB) | (1 << Cobol85Parser.BOUNDS) | (1 << Cobol85Parser.CAPABLE) | (1 << Cobol85Parser.CCSVERSION) | (1 << Cobol85Parser.CHANGED) | (1 << Cobol85Parser.CHANNEL))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (Cobol85Parser.CLOB - 67)) | (1 << (Cobol85Parser.CLOSE_DISPOSITION - 67)) | (1 << (Cobol85Parser.COBOL - 67)) | (1 << (Cobol85Parser.COMMITMENT - 67)) | (1 << (Cobol85Parser.CONTROL_POINT - 67)) | (1 << (Cobol85Parser.CONVENTION - 67)) | (1 << (Cobol85Parser.CRUNCH - 67)) | (1 << (Cobol85Parser.CURSOR - 67)) | (1 << (Cobol85Parser.DATE - 67)) | (1 << (Cobol85Parser.DAY - 67)) | (1 << (Cobol85Parser.DAY_OF_WEEK - 67)) | (1 << (Cobol85Parser.DBCLOB - 67)) | (1 << (Cobol85Parser.DEBUG_CONTENTS - 67)) | (1 << (Cobol85Parser.DEBUG_ITEM - 67)) | (1 << (Cobol85Parser.DEBUG_LINE - 67)) | (1 << (Cobol85Parser.DEBUG_NAME - 67)) | (1 << (Cobol85Parser.DEBUG_SUB_1 - 67)) | (1 << (Cobol85Parser.DEBUG_SUB_2 - 67)) | (1 << (Cobol85Parser.DEBUG_SUB_3 - 67)))) != 0) or ((((_la - 131)) & ~0x3f) == 0 and ((1 << (_la - 131)) & ((1 << (Cobol85Parser.DEFAULT - 131)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 131)) | (1 << (Cobol85Parser.DEFINITION - 131)) | (1 << (Cobol85Parser.DFHRESP - 131)) | (1 << (Cobol85Parser.DFHVALUE - 131)) | (1 << (Cobol85Parser.DISK - 131)) | (1 << (Cobol85Parser.DONTCARE - 131)) | (1 << (Cobol85Parser.DOUBLE - 131)) | (1 << (Cobol85Parser.EBCDIC - 131)) | (1 << (Cobol85Parser.EMPTY_CHECK - 131)) | (1 << (Cobol85Parser.ENTER - 131)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 131)) | (1 << (Cobol85Parser.ERASE - 131)) | (1 << (Cobol85Parser.EOL - 131)) | (1 << (Cobol85Parser.EOS - 131)))) != 0) or ((((_la - 195)) & ~0x3f) == 0 and ((1 << (_la - 195)) & ((1 << (Cobol85Parser.ESCAPE - 195)) | (1 << (Cobol85Parser.EVENT - 195)) | (1 << (Cobol85Parser.EXCLUSIVE - 195)) | (1 << (Cobol85Parser.EXPORT - 195)) | (1 << (Cobol85Parser.EXTENDED - 195)) | (1 << (Cobol85Parser.FOREGROUND_COLOR - 195)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 195)) | (1 << (Cobol85Parser.FULL - 195)) | (1 << (Cobol85Parser.FUNCTION - 195)) | (1 << (Cobol85Parser.FUNCTIONNAME - 195)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 195)) | (1 << (Cobol85Parser.GRID - 195)) | (1 << (Cobol85Parser.HIGHLIGHT - 195)) | (1 << (Cobol85Parser.IMPLICIT - 195)) | (1 << (Cobol85Parser.IMPORT - 195)) | (1 << (Cobol85Parser.INTEGER - 195)))) != 0) or ((((_la - 262)) & ~0x3f) == 0 and ((1 << (_la - 262)) & ((1 << (Cobol85Parser.KEPT - 262)) | (1 << (Cobol85Parser.KEYBOARD - 262)) | (1 << (Cobol85Parser.LANGUAGE - 262)) | (1 << (Cobol85Parser.LB - 262)) | (1 << (Cobol85Parser.LD - 262)) | (1 << (Cobol85Parser.LEFTLINE - 262)) | (1 << (Cobol85Parser.LENGTH - 262)) | (1 << (Cobol85Parser.LENGTH_CHECK - 262)) | (1 << (Cobol85Parser.LIBACCESS - 262)) | (1 << (Cobol85Parser.LIBPARAMETER - 262)) | (1 << (Cobol85Parser.LIBRARY - 262)) | (1 << (Cobol85Parser.LINAGE_COUNTER - 262)) | (1 << (Cobol85Parser.LINE_COUNTER - 262)) | (1 << (Cobol85Parser.LIST - 262)) | (1 << (Cobol85Parser.LOCAL - 262)) | (1 << (Cobol85Parser.LONG_DATE - 262)) | (1 << (Cobol85Parser.LONG_TIME - 262)) | (1 << (Cobol85Parser.LOWER - 262)) | (1 << (Cobol85Parser.LOWLIGHT - 262)) | (1 << (Cobol85Parser.MMDDYYYY - 262)) | (1 << (Cobol85Parser.NAMED - 262)) | (1 << (Cobol85Parser.NATIONAL - 262)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 262)) | (1 << (Cobol85Parser.NETWORK - 262)) | (1 << (Cobol85Parser.NO_ECHO - 262)) | (1 << (Cobol85Parser.NUMERIC_DATE - 262)) | (1 << (Cobol85Parser.NUMERIC_TIME - 262)))) != 0) or ((((_la - 326)) & ~0x3f) == 0 and ((1 << (_la - 326)) & ((1 << (Cobol85Parser.ODT - 326)) | (1 << (Cobol85Parser.ORDERLY - 326)) | (1 << (Cobol85Parser.OVERLINE - 326)) | (1 << (Cobol85Parser.OWN - 326)) | (1 << (Cobol85Parser.PAGE_COUNTER - 326)) | (1 << (Cobol85Parser.PASSWORD - 326)) | (1 << (Cobol85Parser.PORT - 326)) | (1 << (Cobol85Parser.PRINTER - 326)) | (1 << (Cobol85Parser.PRIVATE - 326)) | (1 << (Cobol85Parser.PROCESS - 326)) | (1 << (Cobol85Parser.PROGRAM - 326)) | (1 << (Cobol85Parser.PROMPT - 326)) | (1 << (Cobol85Parser.READER - 326)) | (1 << (Cobol85Parser.REMOTE - 326)) | (1 << (Cobol85Parser.REAL - 326)) | (1 << (Cobol85Parser.RECEIVED - 326)) | (1 << (Cobol85Parser.RECURSIVE - 326)) | (1 << (Cobol85Parser.REF - 326)))) != 0) or ((((_la - 395)) & ~0x3f) == 0 and ((1 << (_la - 395)) & ((1 << (Cobol85Parser.REMOVE - 395)) | (1 << (Cobol85Parser.REQUIRED - 395)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 395)) | (1 << (Cobol85Parser.RETURN_CODE - 395)) | (1 << (Cobol85Parser.SAVE - 395)) | (1 << (Cobol85Parser.SECURE - 395)) | (1 << (Cobol85Parser.SHARED - 395)) | (1 << (Cobol85Parser.SHAREDBYALL - 395)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 395)) | (1 << (Cobol85Parser.SHARING - 395)) | (1 << (Cobol85Parser.SHIFT_IN - 395)) | (1 << (Cobol85Parser.SHIFT_OUT - 395)) | (1 << (Cobol85Parser.SHORT_DATE - 395)) | (1 << (Cobol85Parser.SORT_CONTROL - 395)) | (1 << (Cobol85Parser.SORT_CORE_SIZE - 395)) | (1 << (Cobol85Parser.SORT_FILE_SIZE - 395)) | (1 << (Cobol85Parser.SORT_MESSAGE - 395)) | (1 << (Cobol85Parser.SORT_MODE_SIZE - 395)) | (1 << (Cobol85Parser.SORT_RETURN - 395)) | (1 << (Cobol85Parser.SQL - 395)))) != 0) or ((((_la - 471)) & ~0x3f) == 0 and ((1 << (_la - 471)) & ((1 << (Cobol85Parser.SYMBOL - 471)) | (1 << (Cobol85Parser.TALLY - 471)) | (1 << (Cobol85Parser.TASK - 471)) | (1 << (Cobol85Parser.THREAD - 471)) | (1 << (Cobol85Parser.THREAD_LOCAL - 471)) | (1 << (Cobol85Parser.TIME - 471)) | (1 << (Cobol85Parser.TIMER - 471)) | (1 << (Cobol85Parser.TODAYS_DATE - 471)) | (1 << (Cobol85Parser.TODAYS_NAME - 471)) | (1 << (Cobol85Parser.TRUNCATED - 471)) | (1 << (Cobol85Parser.TYPEDEF - 471)) | (1 << (Cobol85Parser.UNDERLINE - 471)) | (1 << (Cobol85Parser.VIRTUAL - 471)) | (1 << (Cobol85Parser.WAIT - 471)) | (1 << (Cobol85Parser.WHEN_COMPILED - 471)) | (1 << (Cobol85Parser.YEAR - 471)) | (1 << (Cobol85Parser.YYYYMMDD - 471)) | (1 << (Cobol85Parser.YYYYDDD - 471)) | (1 << (Cobol85Parser.ZERO_FILL - 471)))) != 0) or ((((_la - 557)) & ~0x3f) == 0 and ((1 << (_la - 557)) & ((1 << (Cobol85Parser.LEVEL_NUMBER_66 - 557)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 557)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 557)) | (1 << (Cobol85Parser.INTEGERLITERAL - 557)) | (1 << (Cobol85Parser.IDENTIFIER - 557)))) != 0)):
                    break

            self.state = 4414 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 4413
                self.inspectReplacingPhrase()
                self.state = 4416 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==Cobol85Parser.REPLACING):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InspectConvertingPhraseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.InspectConvertingPhraseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def CONVERTING(self):
            return self.getToken(Cobol85Parser.CONVERTING, 0)

        def inspectTo(self):
            return self.getTypedRuleContext(Cobol85Parser.InspectToContext,0)


        def identifier(self):
            return self.getTypedRuleContext(Cobol85Parser.IdentifierContext,0)


        def literal(self):
            return self.getTypedRuleContext(Cobol85Parser.LiteralContext,0)


        def inspectBeforeAfter(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.InspectBeforeAfterContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.InspectBeforeAfterContext,i)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_inspectConvertingPhrase

        def enterRule(self, listener):
            if hasattr(listener, "enterInspectConvertingPhrase"):
                listener.enterInspectConvertingPhrase(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitInspectConvertingPhrase"):
                listener.exitInspectConvertingPhrase(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitInspectConvertingPhrase"):
                return visitor.visitInspectConvertingPhrase(self)
            else:
                return visitor.visitChildren(self)




    def inspectConvertingPhrase(self):

        localctx = Cobol85Parser.InspectConvertingPhraseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 716, self.RULE_inspectConvertingPhrase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4418
            self.match(Cobol85Parser.CONVERTING)
            self.state = 4421
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,630,self._ctx)
            if la_ == 1:
                self.state = 4419
                self.identifier()
                pass

            elif la_ == 2:
                self.state = 4420
                self.literal()
                pass


            self.state = 4423
            self.inspectTo()
            self.state = 4427
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==Cobol85Parser.AFTER or _la==Cobol85Parser.BEFORE:
                self.state = 4424
                self.inspectBeforeAfter()
                self.state = 4429
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InspectForContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.InspectForContext, self).__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(Cobol85Parser.IdentifierContext,0)


        def FOR(self):
            return self.getToken(Cobol85Parser.FOR, 0)

        def inspectCharacters(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.InspectCharactersContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.InspectCharactersContext,i)


        def inspectAllLeadings(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.InspectAllLeadingsContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.InspectAllLeadingsContext,i)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_inspectFor

        def enterRule(self, listener):
            if hasattr(listener, "enterInspectFor"):
                listener.enterInspectFor(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitInspectFor"):
                listener.exitInspectFor(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitInspectFor"):
                return visitor.visitInspectFor(self)
            else:
                return visitor.visitChildren(self)




    def inspectFor(self):

        localctx = Cobol85Parser.InspectForContext(self, self._ctx, self.state)
        self.enterRule(localctx, 718, self.RULE_inspectFor)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4430
            self.identifier()
            self.state = 4431
            self.match(Cobol85Parser.FOR)
            self.state = 4434 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 4434
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [Cobol85Parser.CHARACTERS]:
                    self.state = 4432
                    self.inspectCharacters()
                    pass
                elif token in [Cobol85Parser.ALL, Cobol85Parser.LEADING]:
                    self.state = 4433
                    self.inspectAllLeadings()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 4436 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==Cobol85Parser.ALL or _la==Cobol85Parser.CHARACTERS or _la==Cobol85Parser.LEADING):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InspectCharactersContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.InspectCharactersContext, self).__init__(parent, invokingState)
            self.parser = parser

        def CHARACTERS(self):
            return self.getToken(Cobol85Parser.CHARACTERS, 0)

        def inspectBeforeAfter(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.InspectBeforeAfterContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.InspectBeforeAfterContext,i)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_inspectCharacters

        def enterRule(self, listener):
            if hasattr(listener, "enterInspectCharacters"):
                listener.enterInspectCharacters(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitInspectCharacters"):
                listener.exitInspectCharacters(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitInspectCharacters"):
                return visitor.visitInspectCharacters(self)
            else:
                return visitor.visitChildren(self)




    def inspectCharacters(self):

        localctx = Cobol85Parser.InspectCharactersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 720, self.RULE_inspectCharacters)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4438
            self.match(Cobol85Parser.CHARACTERS)
            self.state = 4442
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==Cobol85Parser.AFTER or _la==Cobol85Parser.BEFORE:
                self.state = 4439
                self.inspectBeforeAfter()
                self.state = 4444
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InspectReplacingCharactersContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.InspectReplacingCharactersContext, self).__init__(parent, invokingState)
            self.parser = parser

        def CHARACTERS(self):
            return self.getToken(Cobol85Parser.CHARACTERS, 0)

        def inspectBy(self):
            return self.getTypedRuleContext(Cobol85Parser.InspectByContext,0)


        def inspectBeforeAfter(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.InspectBeforeAfterContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.InspectBeforeAfterContext,i)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_inspectReplacingCharacters

        def enterRule(self, listener):
            if hasattr(listener, "enterInspectReplacingCharacters"):
                listener.enterInspectReplacingCharacters(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitInspectReplacingCharacters"):
                listener.exitInspectReplacingCharacters(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitInspectReplacingCharacters"):
                return visitor.visitInspectReplacingCharacters(self)
            else:
                return visitor.visitChildren(self)




    def inspectReplacingCharacters(self):

        localctx = Cobol85Parser.InspectReplacingCharactersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 722, self.RULE_inspectReplacingCharacters)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4445
            self.match(Cobol85Parser.CHARACTERS)
            self.state = 4446
            self.inspectBy()
            self.state = 4450
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==Cobol85Parser.AFTER or _la==Cobol85Parser.BEFORE:
                self.state = 4447
                self.inspectBeforeAfter()
                self.state = 4452
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InspectAllLeadingsContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.InspectAllLeadingsContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ALL(self):
            return self.getToken(Cobol85Parser.ALL, 0)

        def LEADING(self):
            return self.getToken(Cobol85Parser.LEADING, 0)

        def inspectAllLeading(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.InspectAllLeadingContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.InspectAllLeadingContext,i)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_inspectAllLeadings

        def enterRule(self, listener):
            if hasattr(listener, "enterInspectAllLeadings"):
                listener.enterInspectAllLeadings(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitInspectAllLeadings"):
                listener.exitInspectAllLeadings(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitInspectAllLeadings"):
                return visitor.visitInspectAllLeadings(self)
            else:
                return visitor.visitChildren(self)




    def inspectAllLeadings(self):

        localctx = Cobol85Parser.InspectAllLeadingsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 724, self.RULE_inspectAllLeadings)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4453
            _la = self._input.LA(1)
            if not(_la==Cobol85Parser.ALL or _la==Cobol85Parser.LEADING):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 4455 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 4454
                    self.inspectAllLeading()

                else:
                    raise NoViableAltException(self)
                self.state = 4457 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,636,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InspectReplacingAllLeadingsContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.InspectReplacingAllLeadingsContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ALL(self):
            return self.getToken(Cobol85Parser.ALL, 0)

        def LEADING(self):
            return self.getToken(Cobol85Parser.LEADING, 0)

        def FIRST(self):
            return self.getToken(Cobol85Parser.FIRST, 0)

        def inspectReplacingAllLeading(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.InspectReplacingAllLeadingContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.InspectReplacingAllLeadingContext,i)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_inspectReplacingAllLeadings

        def enterRule(self, listener):
            if hasattr(listener, "enterInspectReplacingAllLeadings"):
                listener.enterInspectReplacingAllLeadings(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitInspectReplacingAllLeadings"):
                listener.exitInspectReplacingAllLeadings(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitInspectReplacingAllLeadings"):
                return visitor.visitInspectReplacingAllLeadings(self)
            else:
                return visitor.visitChildren(self)




    def inspectReplacingAllLeadings(self):

        localctx = Cobol85Parser.InspectReplacingAllLeadingsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 726, self.RULE_inspectReplacingAllLeadings)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4459
            _la = self._input.LA(1)
            if not(_la==Cobol85Parser.ALL or _la==Cobol85Parser.FIRST or _la==Cobol85Parser.LEADING):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 4461 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 4460
                    self.inspectReplacingAllLeading()

                else:
                    raise NoViableAltException(self)
                self.state = 4463 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,637,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InspectAllLeadingContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.InspectAllLeadingContext, self).__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(Cobol85Parser.IdentifierContext,0)


        def literal(self):
            return self.getTypedRuleContext(Cobol85Parser.LiteralContext,0)


        def inspectBeforeAfter(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.InspectBeforeAfterContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.InspectBeforeAfterContext,i)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_inspectAllLeading

        def enterRule(self, listener):
            if hasattr(listener, "enterInspectAllLeading"):
                listener.enterInspectAllLeading(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitInspectAllLeading"):
                listener.exitInspectAllLeading(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitInspectAllLeading"):
                return visitor.visitInspectAllLeading(self)
            else:
                return visitor.visitChildren(self)




    def inspectAllLeading(self):

        localctx = Cobol85Parser.InspectAllLeadingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 728, self.RULE_inspectAllLeading)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4467
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,638,self._ctx)
            if la_ == 1:
                self.state = 4465
                self.identifier()
                pass

            elif la_ == 2:
                self.state = 4466
                self.literal()
                pass


            self.state = 4472
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==Cobol85Parser.AFTER or _la==Cobol85Parser.BEFORE:
                self.state = 4469
                self.inspectBeforeAfter()
                self.state = 4474
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InspectReplacingAllLeadingContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.InspectReplacingAllLeadingContext, self).__init__(parent, invokingState)
            self.parser = parser

        def inspectBy(self):
            return self.getTypedRuleContext(Cobol85Parser.InspectByContext,0)


        def identifier(self):
            return self.getTypedRuleContext(Cobol85Parser.IdentifierContext,0)


        def literal(self):
            return self.getTypedRuleContext(Cobol85Parser.LiteralContext,0)


        def inspectBeforeAfter(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.InspectBeforeAfterContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.InspectBeforeAfterContext,i)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_inspectReplacingAllLeading

        def enterRule(self, listener):
            if hasattr(listener, "enterInspectReplacingAllLeading"):
                listener.enterInspectReplacingAllLeading(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitInspectReplacingAllLeading"):
                listener.exitInspectReplacingAllLeading(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitInspectReplacingAllLeading"):
                return visitor.visitInspectReplacingAllLeading(self)
            else:
                return visitor.visitChildren(self)




    def inspectReplacingAllLeading(self):

        localctx = Cobol85Parser.InspectReplacingAllLeadingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 730, self.RULE_inspectReplacingAllLeading)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4477
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,640,self._ctx)
            if la_ == 1:
                self.state = 4475
                self.identifier()
                pass

            elif la_ == 2:
                self.state = 4476
                self.literal()
                pass


            self.state = 4479
            self.inspectBy()
            self.state = 4483
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==Cobol85Parser.AFTER or _la==Cobol85Parser.BEFORE:
                self.state = 4480
                self.inspectBeforeAfter()
                self.state = 4485
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InspectByContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.InspectByContext, self).__init__(parent, invokingState)
            self.parser = parser

        def BY(self):
            return self.getToken(Cobol85Parser.BY, 0)

        def identifier(self):
            return self.getTypedRuleContext(Cobol85Parser.IdentifierContext,0)


        def literal(self):
            return self.getTypedRuleContext(Cobol85Parser.LiteralContext,0)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_inspectBy

        def enterRule(self, listener):
            if hasattr(listener, "enterInspectBy"):
                listener.enterInspectBy(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitInspectBy"):
                listener.exitInspectBy(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitInspectBy"):
                return visitor.visitInspectBy(self)
            else:
                return visitor.visitChildren(self)




    def inspectBy(self):

        localctx = Cobol85Parser.InspectByContext(self, self._ctx, self.state)
        self.enterRule(localctx, 732, self.RULE_inspectBy)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4486
            self.match(Cobol85Parser.BY)
            self.state = 4489
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,642,self._ctx)
            if la_ == 1:
                self.state = 4487
                self.identifier()
                pass

            elif la_ == 2:
                self.state = 4488
                self.literal()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InspectToContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.InspectToContext, self).__init__(parent, invokingState)
            self.parser = parser

        def TO(self):
            return self.getToken(Cobol85Parser.TO, 0)

        def identifier(self):
            return self.getTypedRuleContext(Cobol85Parser.IdentifierContext,0)


        def literal(self):
            return self.getTypedRuleContext(Cobol85Parser.LiteralContext,0)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_inspectTo

        def enterRule(self, listener):
            if hasattr(listener, "enterInspectTo"):
                listener.enterInspectTo(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitInspectTo"):
                listener.exitInspectTo(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitInspectTo"):
                return visitor.visitInspectTo(self)
            else:
                return visitor.visitChildren(self)




    def inspectTo(self):

        localctx = Cobol85Parser.InspectToContext(self, self._ctx, self.state)
        self.enterRule(localctx, 734, self.RULE_inspectTo)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4491
            self.match(Cobol85Parser.TO)
            self.state = 4494
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,643,self._ctx)
            if la_ == 1:
                self.state = 4492
                self.identifier()
                pass

            elif la_ == 2:
                self.state = 4493
                self.literal()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InspectBeforeAfterContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.InspectBeforeAfterContext, self).__init__(parent, invokingState)
            self.parser = parser

        def BEFORE(self):
            return self.getToken(Cobol85Parser.BEFORE, 0)

        def AFTER(self):
            return self.getToken(Cobol85Parser.AFTER, 0)

        def identifier(self):
            return self.getTypedRuleContext(Cobol85Parser.IdentifierContext,0)


        def literal(self):
            return self.getTypedRuleContext(Cobol85Parser.LiteralContext,0)


        def INITIAL(self):
            return self.getToken(Cobol85Parser.INITIAL, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_inspectBeforeAfter

        def enterRule(self, listener):
            if hasattr(listener, "enterInspectBeforeAfter"):
                listener.enterInspectBeforeAfter(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitInspectBeforeAfter"):
                listener.exitInspectBeforeAfter(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitInspectBeforeAfter"):
                return visitor.visitInspectBeforeAfter(self)
            else:
                return visitor.visitChildren(self)




    def inspectBeforeAfter(self):

        localctx = Cobol85Parser.InspectBeforeAfterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 736, self.RULE_inspectBeforeAfter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4496
            _la = self._input.LA(1)
            if not(_la==Cobol85Parser.AFTER or _la==Cobol85Parser.BEFORE):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 4498
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.INITIAL:
                self.state = 4497
                self.match(Cobol85Parser.INITIAL)


            self.state = 4502
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,645,self._ctx)
            if la_ == 1:
                self.state = 4500
                self.identifier()
                pass

            elif la_ == 2:
                self.state = 4501
                self.literal()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MergeStatementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.MergeStatementContext, self).__init__(parent, invokingState)
            self.parser = parser

        def MERGE(self):
            return self.getToken(Cobol85Parser.MERGE, 0)

        def fileName(self):
            return self.getTypedRuleContext(Cobol85Parser.FileNameContext,0)


        def mergeOnKeyClause(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.MergeOnKeyClauseContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.MergeOnKeyClauseContext,i)


        def mergeCollatingSequencePhrase(self):
            return self.getTypedRuleContext(Cobol85Parser.MergeCollatingSequencePhraseContext,0)


        def mergeUsing(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.MergeUsingContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.MergeUsingContext,i)


        def mergeOutputProcedurePhrase(self):
            return self.getTypedRuleContext(Cobol85Parser.MergeOutputProcedurePhraseContext,0)


        def mergeGivingPhrase(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.MergeGivingPhraseContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.MergeGivingPhraseContext,i)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_mergeStatement

        def enterRule(self, listener):
            if hasattr(listener, "enterMergeStatement"):
                listener.enterMergeStatement(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitMergeStatement"):
                listener.exitMergeStatement(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitMergeStatement"):
                return visitor.visitMergeStatement(self)
            else:
                return visitor.visitChildren(self)




    def mergeStatement(self):

        localctx = Cobol85Parser.MergeStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 738, self.RULE_mergeStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4504
            self.match(Cobol85Parser.MERGE)
            self.state = 4505
            self.fileName()
            self.state = 4507 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 4506
                    self.mergeOnKeyClause()

                else:
                    raise NoViableAltException(self)
                self.state = 4509 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,646,self._ctx)

            self.state = 4512
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.COLLATING or _la==Cobol85Parser.SEQUENCE:
                self.state = 4511
                self.mergeCollatingSequencePhrase()


            self.state = 4517
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==Cobol85Parser.USING:
                self.state = 4514
                self.mergeUsing()
                self.state = 4519
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 4521
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.OUTPUT:
                self.state = 4520
                self.mergeOutputProcedurePhrase()


            self.state = 4526
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==Cobol85Parser.GIVING:
                self.state = 4523
                self.mergeGivingPhrase()
                self.state = 4528
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MergeOnKeyClauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.MergeOnKeyClauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ASCENDING(self):
            return self.getToken(Cobol85Parser.ASCENDING, 0)

        def DESCENDING(self):
            return self.getToken(Cobol85Parser.DESCENDING, 0)

        def ON(self):
            return self.getToken(Cobol85Parser.ON, 0)

        def KEY(self):
            return self.getToken(Cobol85Parser.KEY, 0)

        def qualifiedDataName(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.QualifiedDataNameContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.QualifiedDataNameContext,i)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_mergeOnKeyClause

        def enterRule(self, listener):
            if hasattr(listener, "enterMergeOnKeyClause"):
                listener.enterMergeOnKeyClause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitMergeOnKeyClause"):
                listener.exitMergeOnKeyClause(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitMergeOnKeyClause"):
                return visitor.visitMergeOnKeyClause(self)
            else:
                return visitor.visitChildren(self)




    def mergeOnKeyClause(self):

        localctx = Cobol85Parser.MergeOnKeyClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 740, self.RULE_mergeOnKeyClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4530
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.ON:
                self.state = 4529
                self.match(Cobol85Parser.ON)


            self.state = 4532
            _la = self._input.LA(1)
            if not(_la==Cobol85Parser.ASCENDING or _la==Cobol85Parser.DESCENDING):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 4534
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.KEY:
                self.state = 4533
                self.match(Cobol85Parser.KEY)


            self.state = 4537 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 4536
                self.qualifiedDataName()
                self.state = 4539 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE) | (1 << Cobol85Parser.AUTO) | (1 << Cobol85Parser.AUTO_SKIP) | (1 << Cobol85Parser.BACKGROUND_COLOR) | (1 << Cobol85Parser.BACKGROUND_COLOUR) | (1 << Cobol85Parser.BEEP) | (1 << Cobol85Parser.BELL) | (1 << Cobol85Parser.BINARY) | (1 << Cobol85Parser.BIT) | (1 << Cobol85Parser.BLINK) | (1 << Cobol85Parser.BLOB) | (1 << Cobol85Parser.BOUNDS) | (1 << Cobol85Parser.CAPABLE) | (1 << Cobol85Parser.CCSVERSION) | (1 << Cobol85Parser.CHANGED) | (1 << Cobol85Parser.CHANNEL))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (Cobol85Parser.CLOB - 67)) | (1 << (Cobol85Parser.CLOSE_DISPOSITION - 67)) | (1 << (Cobol85Parser.COBOL - 67)) | (1 << (Cobol85Parser.COMMITMENT - 67)) | (1 << (Cobol85Parser.CONTROL_POINT - 67)) | (1 << (Cobol85Parser.CONVENTION - 67)) | (1 << (Cobol85Parser.CRUNCH - 67)) | (1 << (Cobol85Parser.CURSOR - 67)) | (1 << (Cobol85Parser.DBCLOB - 67)))) != 0) or ((((_la - 131)) & ~0x3f) == 0 and ((1 << (_la - 131)) & ((1 << (Cobol85Parser.DEFAULT - 131)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 131)) | (1 << (Cobol85Parser.DEFINITION - 131)) | (1 << (Cobol85Parser.DFHRESP - 131)) | (1 << (Cobol85Parser.DFHVALUE - 131)) | (1 << (Cobol85Parser.DISK - 131)) | (1 << (Cobol85Parser.DONTCARE - 131)) | (1 << (Cobol85Parser.DOUBLE - 131)) | (1 << (Cobol85Parser.EBCDIC - 131)) | (1 << (Cobol85Parser.EMPTY_CHECK - 131)) | (1 << (Cobol85Parser.ENTER - 131)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 131)) | (1 << (Cobol85Parser.ERASE - 131)) | (1 << (Cobol85Parser.EOL - 131)) | (1 << (Cobol85Parser.EOS - 131)))) != 0) or ((((_la - 195)) & ~0x3f) == 0 and ((1 << (_la - 195)) & ((1 << (Cobol85Parser.ESCAPE - 195)) | (1 << (Cobol85Parser.EVENT - 195)) | (1 << (Cobol85Parser.EXCLUSIVE - 195)) | (1 << (Cobol85Parser.EXPORT - 195)) | (1 << (Cobol85Parser.EXTENDED - 195)) | (1 << (Cobol85Parser.FOREGROUND_COLOR - 195)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 195)) | (1 << (Cobol85Parser.FULL - 195)) | (1 << (Cobol85Parser.FUNCTIONNAME - 195)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 195)) | (1 << (Cobol85Parser.GRID - 195)) | (1 << (Cobol85Parser.HIGHLIGHT - 195)) | (1 << (Cobol85Parser.IMPLICIT - 195)) | (1 << (Cobol85Parser.IMPORT - 195)) | (1 << (Cobol85Parser.INTEGER - 195)))) != 0) or ((((_la - 262)) & ~0x3f) == 0 and ((1 << (_la - 262)) & ((1 << (Cobol85Parser.KEPT - 262)) | (1 << (Cobol85Parser.KEYBOARD - 262)) | (1 << (Cobol85Parser.LANGUAGE - 262)) | (1 << (Cobol85Parser.LB - 262)) | (1 << (Cobol85Parser.LD - 262)) | (1 << (Cobol85Parser.LEFTLINE - 262)) | (1 << (Cobol85Parser.LENGTH_CHECK - 262)) | (1 << (Cobol85Parser.LIBACCESS - 262)) | (1 << (Cobol85Parser.LIBPARAMETER - 262)) | (1 << (Cobol85Parser.LIBRARY - 262)) | (1 << (Cobol85Parser.LINAGE_COUNTER - 262)) | (1 << (Cobol85Parser.LIST - 262)) | (1 << (Cobol85Parser.LOCAL - 262)) | (1 << (Cobol85Parser.LONG_DATE - 262)) | (1 << (Cobol85Parser.LONG_TIME - 262)) | (1 << (Cobol85Parser.LOWER - 262)) | (1 << (Cobol85Parser.LOWLIGHT - 262)) | (1 << (Cobol85Parser.MMDDYYYY - 262)) | (1 << (Cobol85Parser.NAMED - 262)) | (1 << (Cobol85Parser.NATIONAL - 262)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 262)) | (1 << (Cobol85Parser.NETWORK - 262)) | (1 << (Cobol85Parser.NO_ECHO - 262)) | (1 << (Cobol85Parser.NUMERIC_DATE - 262)) | (1 << (Cobol85Parser.NUMERIC_TIME - 262)))) != 0) or ((((_la - 326)) & ~0x3f) == 0 and ((1 << (_la - 326)) & ((1 << (Cobol85Parser.ODT - 326)) | (1 << (Cobol85Parser.ORDERLY - 326)) | (1 << (Cobol85Parser.OVERLINE - 326)) | (1 << (Cobol85Parser.OWN - 326)) | (1 << (Cobol85Parser.PASSWORD - 326)) | (1 << (Cobol85Parser.PORT - 326)) | (1 << (Cobol85Parser.PRINTER - 326)) | (1 << (Cobol85Parser.PRIVATE - 326)) | (1 << (Cobol85Parser.PROCESS - 326)) | (1 << (Cobol85Parser.PROGRAM - 326)) | (1 << (Cobol85Parser.PROMPT - 326)) | (1 << (Cobol85Parser.READER - 326)) | (1 << (Cobol85Parser.REMOTE - 326)) | (1 << (Cobol85Parser.REAL - 326)) | (1 << (Cobol85Parser.RECEIVED - 326)) | (1 << (Cobol85Parser.RECURSIVE - 326)) | (1 << (Cobol85Parser.REF - 326)))) != 0) or ((((_la - 395)) & ~0x3f) == 0 and ((1 << (_la - 395)) & ((1 << (Cobol85Parser.REMOVE - 395)) | (1 << (Cobol85Parser.REQUIRED - 395)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 395)) | (1 << (Cobol85Parser.SAVE - 395)) | (1 << (Cobol85Parser.SECURE - 395)) | (1 << (Cobol85Parser.SHARED - 395)) | (1 << (Cobol85Parser.SHAREDBYALL - 395)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 395)) | (1 << (Cobol85Parser.SHARING - 395)) | (1 << (Cobol85Parser.SHORT_DATE - 395)) | (1 << (Cobol85Parser.SQL - 395)))) != 0) or ((((_la - 471)) & ~0x3f) == 0 and ((1 << (_la - 471)) & ((1 << (Cobol85Parser.SYMBOL - 471)) | (1 << (Cobol85Parser.TASK - 471)) | (1 << (Cobol85Parser.THREAD - 471)) | (1 << (Cobol85Parser.THREAD_LOCAL - 471)) | (1 << (Cobol85Parser.TIMER - 471)) | (1 << (Cobol85Parser.TODAYS_DATE - 471)) | (1 << (Cobol85Parser.TODAYS_NAME - 471)) | (1 << (Cobol85Parser.TRUNCATED - 471)) | (1 << (Cobol85Parser.TYPEDEF - 471)) | (1 << (Cobol85Parser.UNDERLINE - 471)) | (1 << (Cobol85Parser.VIRTUAL - 471)) | (1 << (Cobol85Parser.WAIT - 471)) | (1 << (Cobol85Parser.YEAR - 471)) | (1 << (Cobol85Parser.YYYYMMDD - 471)) | (1 << (Cobol85Parser.YYYYDDD - 471)) | (1 << (Cobol85Parser.ZERO_FILL - 471)))) != 0) or ((((_la - 557)) & ~0x3f) == 0 and ((1 << (_la - 557)) & ((1 << (Cobol85Parser.LEVEL_NUMBER_66 - 557)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 557)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 557)) | (1 << (Cobol85Parser.INTEGERLITERAL - 557)) | (1 << (Cobol85Parser.IDENTIFIER - 557)))) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MergeCollatingSequencePhraseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.MergeCollatingSequencePhraseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def SEQUENCE(self):
            return self.getToken(Cobol85Parser.SEQUENCE, 0)

        def COLLATING(self):
            return self.getToken(Cobol85Parser.COLLATING, 0)

        def IS(self):
            return self.getToken(Cobol85Parser.IS, 0)

        def alphabetName(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.AlphabetNameContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.AlphabetNameContext,i)


        def mergeCollatingAlphanumeric(self):
            return self.getTypedRuleContext(Cobol85Parser.MergeCollatingAlphanumericContext,0)


        def mergeCollatingNational(self):
            return self.getTypedRuleContext(Cobol85Parser.MergeCollatingNationalContext,0)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_mergeCollatingSequencePhrase

        def enterRule(self, listener):
            if hasattr(listener, "enterMergeCollatingSequencePhrase"):
                listener.enterMergeCollatingSequencePhrase(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitMergeCollatingSequencePhrase"):
                listener.exitMergeCollatingSequencePhrase(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitMergeCollatingSequencePhrase"):
                return visitor.visitMergeCollatingSequencePhrase(self)
            else:
                return visitor.visitChildren(self)




    def mergeCollatingSequencePhrase(self):

        localctx = Cobol85Parser.MergeCollatingSequencePhraseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 742, self.RULE_mergeCollatingSequencePhrase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4542
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.COLLATING:
                self.state = 4541
                self.match(Cobol85Parser.COLLATING)


            self.state = 4544
            self.match(Cobol85Parser.SEQUENCE)
            self.state = 4546
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.IS:
                self.state = 4545
                self.match(Cobol85Parser.IS)


            self.state = 4549 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 4548
                    self.alphabetName()

                else:
                    raise NoViableAltException(self)
                self.state = 4551 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,656,self._ctx)

            self.state = 4554
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,657,self._ctx)
            if la_ == 1:
                self.state = 4553
                self.mergeCollatingAlphanumeric()


            self.state = 4557
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.FOR or _la==Cobol85Parser.NATIONAL:
                self.state = 4556
                self.mergeCollatingNational()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MergeCollatingAlphanumericContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.MergeCollatingAlphanumericContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ALPHANUMERIC(self):
            return self.getToken(Cobol85Parser.ALPHANUMERIC, 0)

        def IS(self):
            return self.getToken(Cobol85Parser.IS, 0)

        def alphabetName(self):
            return self.getTypedRuleContext(Cobol85Parser.AlphabetNameContext,0)


        def FOR(self):
            return self.getToken(Cobol85Parser.FOR, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_mergeCollatingAlphanumeric

        def enterRule(self, listener):
            if hasattr(listener, "enterMergeCollatingAlphanumeric"):
                listener.enterMergeCollatingAlphanumeric(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitMergeCollatingAlphanumeric"):
                listener.exitMergeCollatingAlphanumeric(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitMergeCollatingAlphanumeric"):
                return visitor.visitMergeCollatingAlphanumeric(self)
            else:
                return visitor.visitChildren(self)




    def mergeCollatingAlphanumeric(self):

        localctx = Cobol85Parser.MergeCollatingAlphanumericContext(self, self._ctx, self.state)
        self.enterRule(localctx, 744, self.RULE_mergeCollatingAlphanumeric)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4560
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.FOR:
                self.state = 4559
                self.match(Cobol85Parser.FOR)


            self.state = 4562
            self.match(Cobol85Parser.ALPHANUMERIC)
            self.state = 4563
            self.match(Cobol85Parser.IS)
            self.state = 4564
            self.alphabetName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MergeCollatingNationalContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.MergeCollatingNationalContext, self).__init__(parent, invokingState)
            self.parser = parser

        def NATIONAL(self):
            return self.getToken(Cobol85Parser.NATIONAL, 0)

        def alphabetName(self):
            return self.getTypedRuleContext(Cobol85Parser.AlphabetNameContext,0)


        def FOR(self):
            return self.getToken(Cobol85Parser.FOR, 0)

        def IS(self):
            return self.getToken(Cobol85Parser.IS, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_mergeCollatingNational

        def enterRule(self, listener):
            if hasattr(listener, "enterMergeCollatingNational"):
                listener.enterMergeCollatingNational(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitMergeCollatingNational"):
                listener.exitMergeCollatingNational(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitMergeCollatingNational"):
                return visitor.visitMergeCollatingNational(self)
            else:
                return visitor.visitChildren(self)




    def mergeCollatingNational(self):

        localctx = Cobol85Parser.MergeCollatingNationalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 746, self.RULE_mergeCollatingNational)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4567
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.FOR:
                self.state = 4566
                self.match(Cobol85Parser.FOR)


            self.state = 4569
            self.match(Cobol85Parser.NATIONAL)
            self.state = 4571
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.IS:
                self.state = 4570
                self.match(Cobol85Parser.IS)


            self.state = 4573
            self.alphabetName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MergeUsingContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.MergeUsingContext, self).__init__(parent, invokingState)
            self.parser = parser

        def USING(self):
            return self.getToken(Cobol85Parser.USING, 0)

        def fileName(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.FileNameContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.FileNameContext,i)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_mergeUsing

        def enterRule(self, listener):
            if hasattr(listener, "enterMergeUsing"):
                listener.enterMergeUsing(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitMergeUsing"):
                listener.exitMergeUsing(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitMergeUsing"):
                return visitor.visitMergeUsing(self)
            else:
                return visitor.visitChildren(self)




    def mergeUsing(self):

        localctx = Cobol85Parser.MergeUsingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 748, self.RULE_mergeUsing)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4575
            self.match(Cobol85Parser.USING)
            self.state = 4577 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 4576
                self.fileName()
                self.state = 4579 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE) | (1 << Cobol85Parser.AUTO) | (1 << Cobol85Parser.AUTO_SKIP) | (1 << Cobol85Parser.BACKGROUND_COLOR) | (1 << Cobol85Parser.BACKGROUND_COLOUR) | (1 << Cobol85Parser.BEEP) | (1 << Cobol85Parser.BELL) | (1 << Cobol85Parser.BINARY) | (1 << Cobol85Parser.BIT) | (1 << Cobol85Parser.BLINK) | (1 << Cobol85Parser.BLOB) | (1 << Cobol85Parser.BOUNDS) | (1 << Cobol85Parser.CAPABLE) | (1 << Cobol85Parser.CCSVERSION) | (1 << Cobol85Parser.CHANGED) | (1 << Cobol85Parser.CHANNEL))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (Cobol85Parser.CLOB - 67)) | (1 << (Cobol85Parser.CLOSE_DISPOSITION - 67)) | (1 << (Cobol85Parser.COBOL - 67)) | (1 << (Cobol85Parser.COMMITMENT - 67)) | (1 << (Cobol85Parser.CONTROL_POINT - 67)) | (1 << (Cobol85Parser.CONVENTION - 67)) | (1 << (Cobol85Parser.CRUNCH - 67)) | (1 << (Cobol85Parser.CURSOR - 67)) | (1 << (Cobol85Parser.DBCLOB - 67)))) != 0) or ((((_la - 131)) & ~0x3f) == 0 and ((1 << (_la - 131)) & ((1 << (Cobol85Parser.DEFAULT - 131)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 131)) | (1 << (Cobol85Parser.DEFINITION - 131)) | (1 << (Cobol85Parser.DFHRESP - 131)) | (1 << (Cobol85Parser.DFHVALUE - 131)) | (1 << (Cobol85Parser.DISK - 131)) | (1 << (Cobol85Parser.DONTCARE - 131)) | (1 << (Cobol85Parser.DOUBLE - 131)) | (1 << (Cobol85Parser.EBCDIC - 131)) | (1 << (Cobol85Parser.EMPTY_CHECK - 131)) | (1 << (Cobol85Parser.ENTER - 131)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 131)) | (1 << (Cobol85Parser.ERASE - 131)) | (1 << (Cobol85Parser.EOL - 131)) | (1 << (Cobol85Parser.EOS - 131)))) != 0) or ((((_la - 195)) & ~0x3f) == 0 and ((1 << (_la - 195)) & ((1 << (Cobol85Parser.ESCAPE - 195)) | (1 << (Cobol85Parser.EVENT - 195)) | (1 << (Cobol85Parser.EXCLUSIVE - 195)) | (1 << (Cobol85Parser.EXPORT - 195)) | (1 << (Cobol85Parser.EXTENDED - 195)) | (1 << (Cobol85Parser.FOREGROUND_COLOR - 195)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 195)) | (1 << (Cobol85Parser.FULL - 195)) | (1 << (Cobol85Parser.FUNCTIONNAME - 195)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 195)) | (1 << (Cobol85Parser.GRID - 195)) | (1 << (Cobol85Parser.HIGHLIGHT - 195)) | (1 << (Cobol85Parser.IMPLICIT - 195)) | (1 << (Cobol85Parser.IMPORT - 195)) | (1 << (Cobol85Parser.INTEGER - 195)))) != 0) or ((((_la - 262)) & ~0x3f) == 0 and ((1 << (_la - 262)) & ((1 << (Cobol85Parser.KEPT - 262)) | (1 << (Cobol85Parser.KEYBOARD - 262)) | (1 << (Cobol85Parser.LANGUAGE - 262)) | (1 << (Cobol85Parser.LB - 262)) | (1 << (Cobol85Parser.LD - 262)) | (1 << (Cobol85Parser.LEFTLINE - 262)) | (1 << (Cobol85Parser.LENGTH_CHECK - 262)) | (1 << (Cobol85Parser.LIBACCESS - 262)) | (1 << (Cobol85Parser.LIBPARAMETER - 262)) | (1 << (Cobol85Parser.LIBRARY - 262)) | (1 << (Cobol85Parser.LIST - 262)) | (1 << (Cobol85Parser.LOCAL - 262)) | (1 << (Cobol85Parser.LONG_DATE - 262)) | (1 << (Cobol85Parser.LONG_TIME - 262)) | (1 << (Cobol85Parser.LOWER - 262)) | (1 << (Cobol85Parser.LOWLIGHT - 262)) | (1 << (Cobol85Parser.MMDDYYYY - 262)) | (1 << (Cobol85Parser.NAMED - 262)) | (1 << (Cobol85Parser.NATIONAL - 262)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 262)) | (1 << (Cobol85Parser.NETWORK - 262)) | (1 << (Cobol85Parser.NO_ECHO - 262)) | (1 << (Cobol85Parser.NUMERIC_DATE - 262)) | (1 << (Cobol85Parser.NUMERIC_TIME - 262)))) != 0) or ((((_la - 326)) & ~0x3f) == 0 and ((1 << (_la - 326)) & ((1 << (Cobol85Parser.ODT - 326)) | (1 << (Cobol85Parser.ORDERLY - 326)) | (1 << (Cobol85Parser.OVERLINE - 326)) | (1 << (Cobol85Parser.OWN - 326)) | (1 << (Cobol85Parser.PASSWORD - 326)) | (1 << (Cobol85Parser.PORT - 326)) | (1 << (Cobol85Parser.PRINTER - 326)) | (1 << (Cobol85Parser.PRIVATE - 326)) | (1 << (Cobol85Parser.PROCESS - 326)) | (1 << (Cobol85Parser.PROGRAM - 326)) | (1 << (Cobol85Parser.PROMPT - 326)) | (1 << (Cobol85Parser.READER - 326)) | (1 << (Cobol85Parser.REMOTE - 326)) | (1 << (Cobol85Parser.REAL - 326)) | (1 << (Cobol85Parser.RECEIVED - 326)) | (1 << (Cobol85Parser.RECURSIVE - 326)) | (1 << (Cobol85Parser.REF - 326)))) != 0) or ((((_la - 395)) & ~0x3f) == 0 and ((1 << (_la - 395)) & ((1 << (Cobol85Parser.REMOVE - 395)) | (1 << (Cobol85Parser.REQUIRED - 395)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 395)) | (1 << (Cobol85Parser.SAVE - 395)) | (1 << (Cobol85Parser.SECURE - 395)) | (1 << (Cobol85Parser.SHARED - 395)) | (1 << (Cobol85Parser.SHAREDBYALL - 395)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 395)) | (1 << (Cobol85Parser.SHARING - 395)) | (1 << (Cobol85Parser.SHORT_DATE - 395)) | (1 << (Cobol85Parser.SQL - 395)))) != 0) or ((((_la - 471)) & ~0x3f) == 0 and ((1 << (_la - 471)) & ((1 << (Cobol85Parser.SYMBOL - 471)) | (1 << (Cobol85Parser.TASK - 471)) | (1 << (Cobol85Parser.THREAD - 471)) | (1 << (Cobol85Parser.THREAD_LOCAL - 471)) | (1 << (Cobol85Parser.TIMER - 471)) | (1 << (Cobol85Parser.TODAYS_DATE - 471)) | (1 << (Cobol85Parser.TODAYS_NAME - 471)) | (1 << (Cobol85Parser.TRUNCATED - 471)) | (1 << (Cobol85Parser.TYPEDEF - 471)) | (1 << (Cobol85Parser.UNDERLINE - 471)) | (1 << (Cobol85Parser.VIRTUAL - 471)) | (1 << (Cobol85Parser.WAIT - 471)) | (1 << (Cobol85Parser.YEAR - 471)) | (1 << (Cobol85Parser.YYYYMMDD - 471)) | (1 << (Cobol85Parser.YYYYDDD - 471)) | (1 << (Cobol85Parser.ZERO_FILL - 471)))) != 0) or _la==Cobol85Parser.IDENTIFIER):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MergeOutputProcedurePhraseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.MergeOutputProcedurePhraseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def OUTPUT(self):
            return self.getToken(Cobol85Parser.OUTPUT, 0)

        def PROCEDURE(self):
            return self.getToken(Cobol85Parser.PROCEDURE, 0)

        def procedureName(self):
            return self.getTypedRuleContext(Cobol85Parser.ProcedureNameContext,0)


        def IS(self):
            return self.getToken(Cobol85Parser.IS, 0)

        def mergeOutputThrough(self):
            return self.getTypedRuleContext(Cobol85Parser.MergeOutputThroughContext,0)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_mergeOutputProcedurePhrase

        def enterRule(self, listener):
            if hasattr(listener, "enterMergeOutputProcedurePhrase"):
                listener.enterMergeOutputProcedurePhrase(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitMergeOutputProcedurePhrase"):
                listener.exitMergeOutputProcedurePhrase(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitMergeOutputProcedurePhrase"):
                return visitor.visitMergeOutputProcedurePhrase(self)
            else:
                return visitor.visitChildren(self)




    def mergeOutputProcedurePhrase(self):

        localctx = Cobol85Parser.MergeOutputProcedurePhraseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 750, self.RULE_mergeOutputProcedurePhrase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4581
            self.match(Cobol85Parser.OUTPUT)
            self.state = 4582
            self.match(Cobol85Parser.PROCEDURE)
            self.state = 4584
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.IS:
                self.state = 4583
                self.match(Cobol85Parser.IS)


            self.state = 4586
            self.procedureName()
            self.state = 4588
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.THROUGH or _la==Cobol85Parser.THRU:
                self.state = 4587
                self.mergeOutputThrough()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MergeOutputThroughContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.MergeOutputThroughContext, self).__init__(parent, invokingState)
            self.parser = parser

        def procedureName(self):
            return self.getTypedRuleContext(Cobol85Parser.ProcedureNameContext,0)


        def THROUGH(self):
            return self.getToken(Cobol85Parser.THROUGH, 0)

        def THRU(self):
            return self.getToken(Cobol85Parser.THRU, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_mergeOutputThrough

        def enterRule(self, listener):
            if hasattr(listener, "enterMergeOutputThrough"):
                listener.enterMergeOutputThrough(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitMergeOutputThrough"):
                listener.exitMergeOutputThrough(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitMergeOutputThrough"):
                return visitor.visitMergeOutputThrough(self)
            else:
                return visitor.visitChildren(self)




    def mergeOutputThrough(self):

        localctx = Cobol85Parser.MergeOutputThroughContext(self, self._ctx, self.state)
        self.enterRule(localctx, 752, self.RULE_mergeOutputThrough)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4590
            _la = self._input.LA(1)
            if not(_la==Cobol85Parser.THROUGH or _la==Cobol85Parser.THRU):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 4591
            self.procedureName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MergeGivingPhraseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.MergeGivingPhraseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def GIVING(self):
            return self.getToken(Cobol85Parser.GIVING, 0)

        def mergeGiving(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.MergeGivingContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.MergeGivingContext,i)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_mergeGivingPhrase

        def enterRule(self, listener):
            if hasattr(listener, "enterMergeGivingPhrase"):
                listener.enterMergeGivingPhrase(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitMergeGivingPhrase"):
                listener.exitMergeGivingPhrase(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitMergeGivingPhrase"):
                return visitor.visitMergeGivingPhrase(self)
            else:
                return visitor.visitChildren(self)




    def mergeGivingPhrase(self):

        localctx = Cobol85Parser.MergeGivingPhraseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 754, self.RULE_mergeGivingPhrase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4593
            self.match(Cobol85Parser.GIVING)
            self.state = 4595 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 4594
                self.mergeGiving()
                self.state = 4597 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE) | (1 << Cobol85Parser.AUTO) | (1 << Cobol85Parser.AUTO_SKIP) | (1 << Cobol85Parser.BACKGROUND_COLOR) | (1 << Cobol85Parser.BACKGROUND_COLOUR) | (1 << Cobol85Parser.BEEP) | (1 << Cobol85Parser.BELL) | (1 << Cobol85Parser.BINARY) | (1 << Cobol85Parser.BIT) | (1 << Cobol85Parser.BLINK) | (1 << Cobol85Parser.BLOB) | (1 << Cobol85Parser.BOUNDS) | (1 << Cobol85Parser.CAPABLE) | (1 << Cobol85Parser.CCSVERSION) | (1 << Cobol85Parser.CHANGED) | (1 << Cobol85Parser.CHANNEL))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (Cobol85Parser.CLOB - 67)) | (1 << (Cobol85Parser.CLOSE_DISPOSITION - 67)) | (1 << (Cobol85Parser.COBOL - 67)) | (1 << (Cobol85Parser.COMMITMENT - 67)) | (1 << (Cobol85Parser.CONTROL_POINT - 67)) | (1 << (Cobol85Parser.CONVENTION - 67)) | (1 << (Cobol85Parser.CRUNCH - 67)) | (1 << (Cobol85Parser.CURSOR - 67)) | (1 << (Cobol85Parser.DBCLOB - 67)))) != 0) or ((((_la - 131)) & ~0x3f) == 0 and ((1 << (_la - 131)) & ((1 << (Cobol85Parser.DEFAULT - 131)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 131)) | (1 << (Cobol85Parser.DEFINITION - 131)) | (1 << (Cobol85Parser.DFHRESP - 131)) | (1 << (Cobol85Parser.DFHVALUE - 131)) | (1 << (Cobol85Parser.DISK - 131)) | (1 << (Cobol85Parser.DONTCARE - 131)) | (1 << (Cobol85Parser.DOUBLE - 131)) | (1 << (Cobol85Parser.EBCDIC - 131)) | (1 << (Cobol85Parser.EMPTY_CHECK - 131)) | (1 << (Cobol85Parser.ENTER - 131)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 131)) | (1 << (Cobol85Parser.ERASE - 131)) | (1 << (Cobol85Parser.EOL - 131)) | (1 << (Cobol85Parser.EOS - 131)))) != 0) or ((((_la - 195)) & ~0x3f) == 0 and ((1 << (_la - 195)) & ((1 << (Cobol85Parser.ESCAPE - 195)) | (1 << (Cobol85Parser.EVENT - 195)) | (1 << (Cobol85Parser.EXCLUSIVE - 195)) | (1 << (Cobol85Parser.EXPORT - 195)) | (1 << (Cobol85Parser.EXTENDED - 195)) | (1 << (Cobol85Parser.FOREGROUND_COLOR - 195)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 195)) | (1 << (Cobol85Parser.FULL - 195)) | (1 << (Cobol85Parser.FUNCTIONNAME - 195)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 195)) | (1 << (Cobol85Parser.GRID - 195)) | (1 << (Cobol85Parser.HIGHLIGHT - 195)) | (1 << (Cobol85Parser.IMPLICIT - 195)) | (1 << (Cobol85Parser.IMPORT - 195)) | (1 << (Cobol85Parser.INTEGER - 195)))) != 0) or ((((_la - 262)) & ~0x3f) == 0 and ((1 << (_la - 262)) & ((1 << (Cobol85Parser.KEPT - 262)) | (1 << (Cobol85Parser.KEYBOARD - 262)) | (1 << (Cobol85Parser.LANGUAGE - 262)) | (1 << (Cobol85Parser.LB - 262)) | (1 << (Cobol85Parser.LD - 262)) | (1 << (Cobol85Parser.LEFTLINE - 262)) | (1 << (Cobol85Parser.LENGTH_CHECK - 262)) | (1 << (Cobol85Parser.LIBACCESS - 262)) | (1 << (Cobol85Parser.LIBPARAMETER - 262)) | (1 << (Cobol85Parser.LIBRARY - 262)) | (1 << (Cobol85Parser.LIST - 262)) | (1 << (Cobol85Parser.LOCAL - 262)) | (1 << (Cobol85Parser.LONG_DATE - 262)) | (1 << (Cobol85Parser.LONG_TIME - 262)) | (1 << (Cobol85Parser.LOWER - 262)) | (1 << (Cobol85Parser.LOWLIGHT - 262)) | (1 << (Cobol85Parser.MMDDYYYY - 262)) | (1 << (Cobol85Parser.NAMED - 262)) | (1 << (Cobol85Parser.NATIONAL - 262)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 262)) | (1 << (Cobol85Parser.NETWORK - 262)) | (1 << (Cobol85Parser.NO_ECHO - 262)) | (1 << (Cobol85Parser.NUMERIC_DATE - 262)) | (1 << (Cobol85Parser.NUMERIC_TIME - 262)))) != 0) or ((((_la - 326)) & ~0x3f) == 0 and ((1 << (_la - 326)) & ((1 << (Cobol85Parser.ODT - 326)) | (1 << (Cobol85Parser.ORDERLY - 326)) | (1 << (Cobol85Parser.OVERLINE - 326)) | (1 << (Cobol85Parser.OWN - 326)) | (1 << (Cobol85Parser.PASSWORD - 326)) | (1 << (Cobol85Parser.PORT - 326)) | (1 << (Cobol85Parser.PRINTER - 326)) | (1 << (Cobol85Parser.PRIVATE - 326)) | (1 << (Cobol85Parser.PROCESS - 326)) | (1 << (Cobol85Parser.PROGRAM - 326)) | (1 << (Cobol85Parser.PROMPT - 326)) | (1 << (Cobol85Parser.READER - 326)) | (1 << (Cobol85Parser.REMOTE - 326)) | (1 << (Cobol85Parser.REAL - 326)) | (1 << (Cobol85Parser.RECEIVED - 326)) | (1 << (Cobol85Parser.RECURSIVE - 326)) | (1 << (Cobol85Parser.REF - 326)))) != 0) or ((((_la - 395)) & ~0x3f) == 0 and ((1 << (_la - 395)) & ((1 << (Cobol85Parser.REMOVE - 395)) | (1 << (Cobol85Parser.REQUIRED - 395)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 395)) | (1 << (Cobol85Parser.SAVE - 395)) | (1 << (Cobol85Parser.SECURE - 395)) | (1 << (Cobol85Parser.SHARED - 395)) | (1 << (Cobol85Parser.SHAREDBYALL - 395)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 395)) | (1 << (Cobol85Parser.SHARING - 395)) | (1 << (Cobol85Parser.SHORT_DATE - 395)) | (1 << (Cobol85Parser.SQL - 395)))) != 0) or ((((_la - 471)) & ~0x3f) == 0 and ((1 << (_la - 471)) & ((1 << (Cobol85Parser.SYMBOL - 471)) | (1 << (Cobol85Parser.TASK - 471)) | (1 << (Cobol85Parser.THREAD - 471)) | (1 << (Cobol85Parser.THREAD_LOCAL - 471)) | (1 << (Cobol85Parser.TIMER - 471)) | (1 << (Cobol85Parser.TODAYS_DATE - 471)) | (1 << (Cobol85Parser.TODAYS_NAME - 471)) | (1 << (Cobol85Parser.TRUNCATED - 471)) | (1 << (Cobol85Parser.TYPEDEF - 471)) | (1 << (Cobol85Parser.UNDERLINE - 471)) | (1 << (Cobol85Parser.VIRTUAL - 471)) | (1 << (Cobol85Parser.WAIT - 471)) | (1 << (Cobol85Parser.YEAR - 471)) | (1 << (Cobol85Parser.YYYYMMDD - 471)) | (1 << (Cobol85Parser.YYYYDDD - 471)) | (1 << (Cobol85Parser.ZERO_FILL - 471)))) != 0) or _la==Cobol85Parser.IDENTIFIER):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MergeGivingContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.MergeGivingContext, self).__init__(parent, invokingState)
            self.parser = parser

        def fileName(self):
            return self.getTypedRuleContext(Cobol85Parser.FileNameContext,0)


        def LOCK(self):
            return self.getToken(Cobol85Parser.LOCK, 0)

        def SAVE(self):
            return self.getToken(Cobol85Parser.SAVE, 0)

        def NO(self):
            return self.getToken(Cobol85Parser.NO, 0)

        def REWIND(self):
            return self.getToken(Cobol85Parser.REWIND, 0)

        def CRUNCH(self):
            return self.getToken(Cobol85Parser.CRUNCH, 0)

        def RELEASE(self):
            return self.getToken(Cobol85Parser.RELEASE, 0)

        def WITH(self):
            return self.getToken(Cobol85Parser.WITH, 0)

        def REMOVE(self):
            return self.getToken(Cobol85Parser.REMOVE, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_mergeGiving

        def enterRule(self, listener):
            if hasattr(listener, "enterMergeGiving"):
                listener.enterMergeGiving(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitMergeGiving"):
                listener.exitMergeGiving(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitMergeGiving"):
                return visitor.visitMergeGiving(self)
            else:
                return visitor.visitChildren(self)




    def mergeGiving(self):

        localctx = Cobol85Parser.MergeGivingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 756, self.RULE_mergeGiving)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4599
            self.fileName()
            self.state = 4609
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,666,self._ctx)
            if la_ == 1:
                self.state = 4600
                self.match(Cobol85Parser.LOCK)

            elif la_ == 2:
                self.state = 4601
                self.match(Cobol85Parser.SAVE)

            elif la_ == 3:
                self.state = 4602
                self.match(Cobol85Parser.NO)
                self.state = 4603
                self.match(Cobol85Parser.REWIND)

            elif la_ == 4:
                self.state = 4604
                self.match(Cobol85Parser.CRUNCH)

            elif la_ == 5:
                self.state = 4605
                self.match(Cobol85Parser.RELEASE)

            elif la_ == 6:
                self.state = 4606
                self.match(Cobol85Parser.WITH)
                self.state = 4607
                self.match(Cobol85Parser.REMOVE)
                self.state = 4608
                self.match(Cobol85Parser.CRUNCH)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MoveStatementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.MoveStatementContext, self).__init__(parent, invokingState)
            self.parser = parser

        def MOVE(self):
            return self.getToken(Cobol85Parser.MOVE, 0)

        def moveToStatement(self):
            return self.getTypedRuleContext(Cobol85Parser.MoveToStatementContext,0)


        def moveCorrespondingToStatement(self):
            return self.getTypedRuleContext(Cobol85Parser.MoveCorrespondingToStatementContext,0)


        def ALL(self):
            return self.getToken(Cobol85Parser.ALL, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_moveStatement

        def enterRule(self, listener):
            if hasattr(listener, "enterMoveStatement"):
                listener.enterMoveStatement(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitMoveStatement"):
                listener.exitMoveStatement(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitMoveStatement"):
                return visitor.visitMoveStatement(self)
            else:
                return visitor.visitChildren(self)




    def moveStatement(self):

        localctx = Cobol85Parser.MoveStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 758, self.RULE_moveStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4611
            self.match(Cobol85Parser.MOVE)
            self.state = 4613
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,667,self._ctx)
            if la_ == 1:
                self.state = 4612
                self.match(Cobol85Parser.ALL)


            self.state = 4617
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Cobol85Parser.ABORT, Cobol85Parser.ADDRESS, Cobol85Parser.ALL, Cobol85Parser.AS, Cobol85Parser.ASCII, Cobol85Parser.ASSOCIATED_DATA, Cobol85Parser.ASSOCIATED_DATA_LENGTH, Cobol85Parser.ATTRIBUTE, Cobol85Parser.AUTO, Cobol85Parser.AUTO_SKIP, Cobol85Parser.BACKGROUND_COLOR, Cobol85Parser.BACKGROUND_COLOUR, Cobol85Parser.BEEP, Cobol85Parser.BELL, Cobol85Parser.BINARY, Cobol85Parser.BIT, Cobol85Parser.BLINK, Cobol85Parser.BLOB, Cobol85Parser.BOUNDS, Cobol85Parser.CAPABLE, Cobol85Parser.CCSVERSION, Cobol85Parser.CHANGED, Cobol85Parser.CHANNEL, Cobol85Parser.CLOB, Cobol85Parser.CLOSE_DISPOSITION, Cobol85Parser.COBOL, Cobol85Parser.COMMITMENT, Cobol85Parser.CONTROL_POINT, Cobol85Parser.CONVENTION, Cobol85Parser.CRUNCH, Cobol85Parser.CURSOR, Cobol85Parser.DATE, Cobol85Parser.DAY, Cobol85Parser.DAY_OF_WEEK, Cobol85Parser.DBCLOB, Cobol85Parser.DEBUG_CONTENTS, Cobol85Parser.DEBUG_ITEM, Cobol85Parser.DEBUG_LINE, Cobol85Parser.DEBUG_NAME, Cobol85Parser.DEBUG_SUB_1, Cobol85Parser.DEBUG_SUB_2, Cobol85Parser.DEBUG_SUB_3, Cobol85Parser.DEFAULT, Cobol85Parser.DEFAULT_DISPLAY, Cobol85Parser.DEFINITION, Cobol85Parser.DFHRESP, Cobol85Parser.DFHVALUE, Cobol85Parser.DISK, Cobol85Parser.DONTCARE, Cobol85Parser.DOUBLE, Cobol85Parser.EBCDIC, Cobol85Parser.EMPTY_CHECK, Cobol85Parser.ENTER, Cobol85Parser.ENTRY_PROCEDURE, Cobol85Parser.ERASE, Cobol85Parser.EOL, Cobol85Parser.EOS, Cobol85Parser.ESCAPE, Cobol85Parser.EVENT, Cobol85Parser.EXCLUSIVE, Cobol85Parser.EXPORT, Cobol85Parser.EXTENDED, Cobol85Parser.FALSE, Cobol85Parser.FOREGROUND_COLOR, Cobol85Parser.FOREGROUND_COLOUR, Cobol85Parser.FULL, Cobol85Parser.FUNCTION, Cobol85Parser.FUNCTIONNAME, Cobol85Parser.FUNCTION_POINTER, Cobol85Parser.GRID, Cobol85Parser.HIGHLIGHT, Cobol85Parser.HIGH_VALUE, Cobol85Parser.HIGH_VALUES, Cobol85Parser.IMPLICIT, Cobol85Parser.IMPORT, Cobol85Parser.INTEGER, Cobol85Parser.KEPT, Cobol85Parser.KEYBOARD, Cobol85Parser.LANGUAGE, Cobol85Parser.LB, Cobol85Parser.LD, Cobol85Parser.LEFTLINE, Cobol85Parser.LENGTH, Cobol85Parser.LENGTH_CHECK, Cobol85Parser.LIBACCESS, Cobol85Parser.LIBPARAMETER, Cobol85Parser.LIBRARY, Cobol85Parser.LINAGE_COUNTER, Cobol85Parser.LINE_COUNTER, Cobol85Parser.LIST, Cobol85Parser.LOCAL, Cobol85Parser.LONG_DATE, Cobol85Parser.LONG_TIME, Cobol85Parser.LOWER, Cobol85Parser.LOWLIGHT, Cobol85Parser.LOW_VALUE, Cobol85Parser.LOW_VALUES, Cobol85Parser.MMDDYYYY, Cobol85Parser.NAMED, Cobol85Parser.NATIONAL, Cobol85Parser.NATIONAL_EDITED, Cobol85Parser.NETWORK, Cobol85Parser.NO_ECHO, Cobol85Parser.NULL, Cobol85Parser.NULLS, Cobol85Parser.NUMERIC_DATE, Cobol85Parser.NUMERIC_TIME, Cobol85Parser.ODT, Cobol85Parser.ORDERLY, Cobol85Parser.OVERLINE, Cobol85Parser.OWN, Cobol85Parser.PAGE_COUNTER, Cobol85Parser.PASSWORD, Cobol85Parser.PORT, Cobol85Parser.PRINTER, Cobol85Parser.PRIVATE, Cobol85Parser.PROCESS, Cobol85Parser.PROGRAM, Cobol85Parser.PROMPT, Cobol85Parser.QUOTE, Cobol85Parser.QUOTES, Cobol85Parser.READER, Cobol85Parser.REMOTE, Cobol85Parser.REAL, Cobol85Parser.RECEIVED, Cobol85Parser.RECURSIVE, Cobol85Parser.REF, Cobol85Parser.REMOVE, Cobol85Parser.REQUIRED, Cobol85Parser.REVERSE_VIDEO, Cobol85Parser.RETURN_CODE, Cobol85Parser.SAVE, Cobol85Parser.SECURE, Cobol85Parser.SHARED, Cobol85Parser.SHAREDBYALL, Cobol85Parser.SHAREDBYRUNUNIT, Cobol85Parser.SHARING, Cobol85Parser.SHIFT_IN, Cobol85Parser.SHIFT_OUT, Cobol85Parser.SHORT_DATE, Cobol85Parser.SORT_CONTROL, Cobol85Parser.SORT_CORE_SIZE, Cobol85Parser.SORT_FILE_SIZE, Cobol85Parser.SORT_MESSAGE, Cobol85Parser.SORT_MODE_SIZE, Cobol85Parser.SORT_RETURN, Cobol85Parser.SPACE, Cobol85Parser.SPACES, Cobol85Parser.SQL, Cobol85Parser.SYMBOL, Cobol85Parser.TALLY, Cobol85Parser.TASK, Cobol85Parser.THREAD, Cobol85Parser.THREAD_LOCAL, Cobol85Parser.TIME, Cobol85Parser.TIMER, Cobol85Parser.TODAYS_DATE, Cobol85Parser.TODAYS_NAME, Cobol85Parser.TRUE, Cobol85Parser.TRUNCATED, Cobol85Parser.TYPEDEF, Cobol85Parser.UNDERLINE, Cobol85Parser.VIRTUAL, Cobol85Parser.WAIT, Cobol85Parser.WHEN_COMPILED, Cobol85Parser.YEAR, Cobol85Parser.YYYYMMDD, Cobol85Parser.YYYYDDD, Cobol85Parser.ZERO, Cobol85Parser.ZERO_FILL, Cobol85Parser.ZEROS, Cobol85Parser.ZEROES, Cobol85Parser.NONNUMERICLITERAL, Cobol85Parser.LEVEL_NUMBER_66, Cobol85Parser.LEVEL_NUMBER_77, Cobol85Parser.LEVEL_NUMBER_88, Cobol85Parser.INTEGERLITERAL, Cobol85Parser.NUMERICLITERAL, Cobol85Parser.IDENTIFIER]:
                self.state = 4615
                self.moveToStatement()
                pass
            elif token in [Cobol85Parser.CORR, Cobol85Parser.CORRESPONDING]:
                self.state = 4616
                self.moveCorrespondingToStatement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MoveToStatementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.MoveToStatementContext, self).__init__(parent, invokingState)
            self.parser = parser

        def moveToSendingArea(self):
            return self.getTypedRuleContext(Cobol85Parser.MoveToSendingAreaContext,0)


        def TO(self):
            return self.getToken(Cobol85Parser.TO, 0)

        def identifier(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.IdentifierContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.IdentifierContext,i)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_moveToStatement

        def enterRule(self, listener):
            if hasattr(listener, "enterMoveToStatement"):
                listener.enterMoveToStatement(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitMoveToStatement"):
                listener.exitMoveToStatement(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitMoveToStatement"):
                return visitor.visitMoveToStatement(self)
            else:
                return visitor.visitChildren(self)




    def moveToStatement(self):

        localctx = Cobol85Parser.MoveToStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 760, self.RULE_moveToStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4619
            self.moveToSendingArea()
            self.state = 4620
            self.match(Cobol85Parser.TO)
            self.state = 4622 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 4621
                self.identifier()
                self.state = 4624 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.ADDRESS) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE) | (1 << Cobol85Parser.AUTO) | (1 << Cobol85Parser.AUTO_SKIP) | (1 << Cobol85Parser.BACKGROUND_COLOR) | (1 << Cobol85Parser.BACKGROUND_COLOUR) | (1 << Cobol85Parser.BEEP) | (1 << Cobol85Parser.BELL) | (1 << Cobol85Parser.BINARY) | (1 << Cobol85Parser.BIT) | (1 << Cobol85Parser.BLINK) | (1 << Cobol85Parser.BLOB) | (1 << Cobol85Parser.BOUNDS) | (1 << Cobol85Parser.CAPABLE) | (1 << Cobol85Parser.CCSVERSION) | (1 << Cobol85Parser.CHANGED) | (1 << Cobol85Parser.CHANNEL))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (Cobol85Parser.CLOB - 67)) | (1 << (Cobol85Parser.CLOSE_DISPOSITION - 67)) | (1 << (Cobol85Parser.COBOL - 67)) | (1 << (Cobol85Parser.COMMITMENT - 67)) | (1 << (Cobol85Parser.CONTROL_POINT - 67)) | (1 << (Cobol85Parser.CONVENTION - 67)) | (1 << (Cobol85Parser.CRUNCH - 67)) | (1 << (Cobol85Parser.CURSOR - 67)) | (1 << (Cobol85Parser.DATE - 67)) | (1 << (Cobol85Parser.DAY - 67)) | (1 << (Cobol85Parser.DAY_OF_WEEK - 67)) | (1 << (Cobol85Parser.DBCLOB - 67)) | (1 << (Cobol85Parser.DEBUG_CONTENTS - 67)) | (1 << (Cobol85Parser.DEBUG_ITEM - 67)) | (1 << (Cobol85Parser.DEBUG_LINE - 67)) | (1 << (Cobol85Parser.DEBUG_NAME - 67)) | (1 << (Cobol85Parser.DEBUG_SUB_1 - 67)) | (1 << (Cobol85Parser.DEBUG_SUB_2 - 67)) | (1 << (Cobol85Parser.DEBUG_SUB_3 - 67)))) != 0) or ((((_la - 131)) & ~0x3f) == 0 and ((1 << (_la - 131)) & ((1 << (Cobol85Parser.DEFAULT - 131)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 131)) | (1 << (Cobol85Parser.DEFINITION - 131)) | (1 << (Cobol85Parser.DFHRESP - 131)) | (1 << (Cobol85Parser.DFHVALUE - 131)) | (1 << (Cobol85Parser.DISK - 131)) | (1 << (Cobol85Parser.DONTCARE - 131)) | (1 << (Cobol85Parser.DOUBLE - 131)) | (1 << (Cobol85Parser.EBCDIC - 131)) | (1 << (Cobol85Parser.EMPTY_CHECK - 131)) | (1 << (Cobol85Parser.ENTER - 131)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 131)) | (1 << (Cobol85Parser.ERASE - 131)) | (1 << (Cobol85Parser.EOL - 131)) | (1 << (Cobol85Parser.EOS - 131)))) != 0) or ((((_la - 195)) & ~0x3f) == 0 and ((1 << (_la - 195)) & ((1 << (Cobol85Parser.ESCAPE - 195)) | (1 << (Cobol85Parser.EVENT - 195)) | (1 << (Cobol85Parser.EXCLUSIVE - 195)) | (1 << (Cobol85Parser.EXPORT - 195)) | (1 << (Cobol85Parser.EXTENDED - 195)) | (1 << (Cobol85Parser.FOREGROUND_COLOR - 195)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 195)) | (1 << (Cobol85Parser.FULL - 195)) | (1 << (Cobol85Parser.FUNCTION - 195)) | (1 << (Cobol85Parser.FUNCTIONNAME - 195)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 195)) | (1 << (Cobol85Parser.GRID - 195)) | (1 << (Cobol85Parser.HIGHLIGHT - 195)) | (1 << (Cobol85Parser.IMPLICIT - 195)) | (1 << (Cobol85Parser.IMPORT - 195)) | (1 << (Cobol85Parser.INTEGER - 195)))) != 0) or ((((_la - 262)) & ~0x3f) == 0 and ((1 << (_la - 262)) & ((1 << (Cobol85Parser.KEPT - 262)) | (1 << (Cobol85Parser.KEYBOARD - 262)) | (1 << (Cobol85Parser.LANGUAGE - 262)) | (1 << (Cobol85Parser.LB - 262)) | (1 << (Cobol85Parser.LD - 262)) | (1 << (Cobol85Parser.LEFTLINE - 262)) | (1 << (Cobol85Parser.LENGTH - 262)) | (1 << (Cobol85Parser.LENGTH_CHECK - 262)) | (1 << (Cobol85Parser.LIBACCESS - 262)) | (1 << (Cobol85Parser.LIBPARAMETER - 262)) | (1 << (Cobol85Parser.LIBRARY - 262)) | (1 << (Cobol85Parser.LINAGE_COUNTER - 262)) | (1 << (Cobol85Parser.LINE_COUNTER - 262)) | (1 << (Cobol85Parser.LIST - 262)) | (1 << (Cobol85Parser.LOCAL - 262)) | (1 << (Cobol85Parser.LONG_DATE - 262)) | (1 << (Cobol85Parser.LONG_TIME - 262)) | (1 << (Cobol85Parser.LOWER - 262)) | (1 << (Cobol85Parser.LOWLIGHT - 262)) | (1 << (Cobol85Parser.MMDDYYYY - 262)) | (1 << (Cobol85Parser.NAMED - 262)) | (1 << (Cobol85Parser.NATIONAL - 262)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 262)) | (1 << (Cobol85Parser.NETWORK - 262)) | (1 << (Cobol85Parser.NO_ECHO - 262)) | (1 << (Cobol85Parser.NUMERIC_DATE - 262)) | (1 << (Cobol85Parser.NUMERIC_TIME - 262)))) != 0) or ((((_la - 326)) & ~0x3f) == 0 and ((1 << (_la - 326)) & ((1 << (Cobol85Parser.ODT - 326)) | (1 << (Cobol85Parser.ORDERLY - 326)) | (1 << (Cobol85Parser.OVERLINE - 326)) | (1 << (Cobol85Parser.OWN - 326)) | (1 << (Cobol85Parser.PAGE_COUNTER - 326)) | (1 << (Cobol85Parser.PASSWORD - 326)) | (1 << (Cobol85Parser.PORT - 326)) | (1 << (Cobol85Parser.PRINTER - 326)) | (1 << (Cobol85Parser.PRIVATE - 326)) | (1 << (Cobol85Parser.PROCESS - 326)) | (1 << (Cobol85Parser.PROGRAM - 326)) | (1 << (Cobol85Parser.PROMPT - 326)) | (1 << (Cobol85Parser.READER - 326)) | (1 << (Cobol85Parser.REMOTE - 326)) | (1 << (Cobol85Parser.REAL - 326)) | (1 << (Cobol85Parser.RECEIVED - 326)) | (1 << (Cobol85Parser.RECURSIVE - 326)) | (1 << (Cobol85Parser.REF - 326)))) != 0) or ((((_la - 395)) & ~0x3f) == 0 and ((1 << (_la - 395)) & ((1 << (Cobol85Parser.REMOVE - 395)) | (1 << (Cobol85Parser.REQUIRED - 395)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 395)) | (1 << (Cobol85Parser.RETURN_CODE - 395)) | (1 << (Cobol85Parser.SAVE - 395)) | (1 << (Cobol85Parser.SECURE - 395)) | (1 << (Cobol85Parser.SHARED - 395)) | (1 << (Cobol85Parser.SHAREDBYALL - 395)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 395)) | (1 << (Cobol85Parser.SHARING - 395)) | (1 << (Cobol85Parser.SHIFT_IN - 395)) | (1 << (Cobol85Parser.SHIFT_OUT - 395)) | (1 << (Cobol85Parser.SHORT_DATE - 395)) | (1 << (Cobol85Parser.SORT_CONTROL - 395)) | (1 << (Cobol85Parser.SORT_CORE_SIZE - 395)) | (1 << (Cobol85Parser.SORT_FILE_SIZE - 395)) | (1 << (Cobol85Parser.SORT_MESSAGE - 395)) | (1 << (Cobol85Parser.SORT_MODE_SIZE - 395)) | (1 << (Cobol85Parser.SORT_RETURN - 395)) | (1 << (Cobol85Parser.SQL - 395)))) != 0) or ((((_la - 471)) & ~0x3f) == 0 and ((1 << (_la - 471)) & ((1 << (Cobol85Parser.SYMBOL - 471)) | (1 << (Cobol85Parser.TALLY - 471)) | (1 << (Cobol85Parser.TASK - 471)) | (1 << (Cobol85Parser.THREAD - 471)) | (1 << (Cobol85Parser.THREAD_LOCAL - 471)) | (1 << (Cobol85Parser.TIME - 471)) | (1 << (Cobol85Parser.TIMER - 471)) | (1 << (Cobol85Parser.TODAYS_DATE - 471)) | (1 << (Cobol85Parser.TODAYS_NAME - 471)) | (1 << (Cobol85Parser.TRUNCATED - 471)) | (1 << (Cobol85Parser.TYPEDEF - 471)) | (1 << (Cobol85Parser.UNDERLINE - 471)) | (1 << (Cobol85Parser.VIRTUAL - 471)) | (1 << (Cobol85Parser.WAIT - 471)) | (1 << (Cobol85Parser.WHEN_COMPILED - 471)) | (1 << (Cobol85Parser.YEAR - 471)) | (1 << (Cobol85Parser.YYYYMMDD - 471)) | (1 << (Cobol85Parser.YYYYDDD - 471)) | (1 << (Cobol85Parser.ZERO_FILL - 471)))) != 0) or ((((_la - 557)) & ~0x3f) == 0 and ((1 << (_la - 557)) & ((1 << (Cobol85Parser.LEVEL_NUMBER_66 - 557)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 557)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 557)) | (1 << (Cobol85Parser.INTEGERLITERAL - 557)) | (1 << (Cobol85Parser.IDENTIFIER - 557)))) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MoveToSendingAreaContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.MoveToSendingAreaContext, self).__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(Cobol85Parser.IdentifierContext,0)


        def literal(self):
            return self.getTypedRuleContext(Cobol85Parser.LiteralContext,0)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_moveToSendingArea

        def enterRule(self, listener):
            if hasattr(listener, "enterMoveToSendingArea"):
                listener.enterMoveToSendingArea(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitMoveToSendingArea"):
                listener.exitMoveToSendingArea(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitMoveToSendingArea"):
                return visitor.visitMoveToSendingArea(self)
            else:
                return visitor.visitChildren(self)




    def moveToSendingArea(self):

        localctx = Cobol85Parser.MoveToSendingAreaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 762, self.RULE_moveToSendingArea)
        try:
            self.state = 4628
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,670,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4626
                self.identifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4627
                self.literal()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MoveCorrespondingToStatementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.MoveCorrespondingToStatementContext, self).__init__(parent, invokingState)
            self.parser = parser

        def moveCorrespondingToSendingArea(self):
            return self.getTypedRuleContext(Cobol85Parser.MoveCorrespondingToSendingAreaContext,0)


        def TO(self):
            return self.getToken(Cobol85Parser.TO, 0)

        def CORRESPONDING(self):
            return self.getToken(Cobol85Parser.CORRESPONDING, 0)

        def CORR(self):
            return self.getToken(Cobol85Parser.CORR, 0)

        def identifier(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.IdentifierContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.IdentifierContext,i)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_moveCorrespondingToStatement

        def enterRule(self, listener):
            if hasattr(listener, "enterMoveCorrespondingToStatement"):
                listener.enterMoveCorrespondingToStatement(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitMoveCorrespondingToStatement"):
                listener.exitMoveCorrespondingToStatement(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitMoveCorrespondingToStatement"):
                return visitor.visitMoveCorrespondingToStatement(self)
            else:
                return visitor.visitChildren(self)




    def moveCorrespondingToStatement(self):

        localctx = Cobol85Parser.MoveCorrespondingToStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 764, self.RULE_moveCorrespondingToStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4630
            _la = self._input.LA(1)
            if not(_la==Cobol85Parser.CORR or _la==Cobol85Parser.CORRESPONDING):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 4631
            self.moveCorrespondingToSendingArea()
            self.state = 4632
            self.match(Cobol85Parser.TO)
            self.state = 4634 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 4633
                self.identifier()
                self.state = 4636 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.ADDRESS) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE) | (1 << Cobol85Parser.AUTO) | (1 << Cobol85Parser.AUTO_SKIP) | (1 << Cobol85Parser.BACKGROUND_COLOR) | (1 << Cobol85Parser.BACKGROUND_COLOUR) | (1 << Cobol85Parser.BEEP) | (1 << Cobol85Parser.BELL) | (1 << Cobol85Parser.BINARY) | (1 << Cobol85Parser.BIT) | (1 << Cobol85Parser.BLINK) | (1 << Cobol85Parser.BLOB) | (1 << Cobol85Parser.BOUNDS) | (1 << Cobol85Parser.CAPABLE) | (1 << Cobol85Parser.CCSVERSION) | (1 << Cobol85Parser.CHANGED) | (1 << Cobol85Parser.CHANNEL))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (Cobol85Parser.CLOB - 67)) | (1 << (Cobol85Parser.CLOSE_DISPOSITION - 67)) | (1 << (Cobol85Parser.COBOL - 67)) | (1 << (Cobol85Parser.COMMITMENT - 67)) | (1 << (Cobol85Parser.CONTROL_POINT - 67)) | (1 << (Cobol85Parser.CONVENTION - 67)) | (1 << (Cobol85Parser.CRUNCH - 67)) | (1 << (Cobol85Parser.CURSOR - 67)) | (1 << (Cobol85Parser.DATE - 67)) | (1 << (Cobol85Parser.DAY - 67)) | (1 << (Cobol85Parser.DAY_OF_WEEK - 67)) | (1 << (Cobol85Parser.DBCLOB - 67)) | (1 << (Cobol85Parser.DEBUG_CONTENTS - 67)) | (1 << (Cobol85Parser.DEBUG_ITEM - 67)) | (1 << (Cobol85Parser.DEBUG_LINE - 67)) | (1 << (Cobol85Parser.DEBUG_NAME - 67)) | (1 << (Cobol85Parser.DEBUG_SUB_1 - 67)) | (1 << (Cobol85Parser.DEBUG_SUB_2 - 67)) | (1 << (Cobol85Parser.DEBUG_SUB_3 - 67)))) != 0) or ((((_la - 131)) & ~0x3f) == 0 and ((1 << (_la - 131)) & ((1 << (Cobol85Parser.DEFAULT - 131)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 131)) | (1 << (Cobol85Parser.DEFINITION - 131)) | (1 << (Cobol85Parser.DFHRESP - 131)) | (1 << (Cobol85Parser.DFHVALUE - 131)) | (1 << (Cobol85Parser.DISK - 131)) | (1 << (Cobol85Parser.DONTCARE - 131)) | (1 << (Cobol85Parser.DOUBLE - 131)) | (1 << (Cobol85Parser.EBCDIC - 131)) | (1 << (Cobol85Parser.EMPTY_CHECK - 131)) | (1 << (Cobol85Parser.ENTER - 131)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 131)) | (1 << (Cobol85Parser.ERASE - 131)) | (1 << (Cobol85Parser.EOL - 131)) | (1 << (Cobol85Parser.EOS - 131)))) != 0) or ((((_la - 195)) & ~0x3f) == 0 and ((1 << (_la - 195)) & ((1 << (Cobol85Parser.ESCAPE - 195)) | (1 << (Cobol85Parser.EVENT - 195)) | (1 << (Cobol85Parser.EXCLUSIVE - 195)) | (1 << (Cobol85Parser.EXPORT - 195)) | (1 << (Cobol85Parser.EXTENDED - 195)) | (1 << (Cobol85Parser.FOREGROUND_COLOR - 195)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 195)) | (1 << (Cobol85Parser.FULL - 195)) | (1 << (Cobol85Parser.FUNCTION - 195)) | (1 << (Cobol85Parser.FUNCTIONNAME - 195)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 195)) | (1 << (Cobol85Parser.GRID - 195)) | (1 << (Cobol85Parser.HIGHLIGHT - 195)) | (1 << (Cobol85Parser.IMPLICIT - 195)) | (1 << (Cobol85Parser.IMPORT - 195)) | (1 << (Cobol85Parser.INTEGER - 195)))) != 0) or ((((_la - 262)) & ~0x3f) == 0 and ((1 << (_la - 262)) & ((1 << (Cobol85Parser.KEPT - 262)) | (1 << (Cobol85Parser.KEYBOARD - 262)) | (1 << (Cobol85Parser.LANGUAGE - 262)) | (1 << (Cobol85Parser.LB - 262)) | (1 << (Cobol85Parser.LD - 262)) | (1 << (Cobol85Parser.LEFTLINE - 262)) | (1 << (Cobol85Parser.LENGTH - 262)) | (1 << (Cobol85Parser.LENGTH_CHECK - 262)) | (1 << (Cobol85Parser.LIBACCESS - 262)) | (1 << (Cobol85Parser.LIBPARAMETER - 262)) | (1 << (Cobol85Parser.LIBRARY - 262)) | (1 << (Cobol85Parser.LINAGE_COUNTER - 262)) | (1 << (Cobol85Parser.LINE_COUNTER - 262)) | (1 << (Cobol85Parser.LIST - 262)) | (1 << (Cobol85Parser.LOCAL - 262)) | (1 << (Cobol85Parser.LONG_DATE - 262)) | (1 << (Cobol85Parser.LONG_TIME - 262)) | (1 << (Cobol85Parser.LOWER - 262)) | (1 << (Cobol85Parser.LOWLIGHT - 262)) | (1 << (Cobol85Parser.MMDDYYYY - 262)) | (1 << (Cobol85Parser.NAMED - 262)) | (1 << (Cobol85Parser.NATIONAL - 262)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 262)) | (1 << (Cobol85Parser.NETWORK - 262)) | (1 << (Cobol85Parser.NO_ECHO - 262)) | (1 << (Cobol85Parser.NUMERIC_DATE - 262)) | (1 << (Cobol85Parser.NUMERIC_TIME - 262)))) != 0) or ((((_la - 326)) & ~0x3f) == 0 and ((1 << (_la - 326)) & ((1 << (Cobol85Parser.ODT - 326)) | (1 << (Cobol85Parser.ORDERLY - 326)) | (1 << (Cobol85Parser.OVERLINE - 326)) | (1 << (Cobol85Parser.OWN - 326)) | (1 << (Cobol85Parser.PAGE_COUNTER - 326)) | (1 << (Cobol85Parser.PASSWORD - 326)) | (1 << (Cobol85Parser.PORT - 326)) | (1 << (Cobol85Parser.PRINTER - 326)) | (1 << (Cobol85Parser.PRIVATE - 326)) | (1 << (Cobol85Parser.PROCESS - 326)) | (1 << (Cobol85Parser.PROGRAM - 326)) | (1 << (Cobol85Parser.PROMPT - 326)) | (1 << (Cobol85Parser.READER - 326)) | (1 << (Cobol85Parser.REMOTE - 326)) | (1 << (Cobol85Parser.REAL - 326)) | (1 << (Cobol85Parser.RECEIVED - 326)) | (1 << (Cobol85Parser.RECURSIVE - 326)) | (1 << (Cobol85Parser.REF - 326)))) != 0) or ((((_la - 395)) & ~0x3f) == 0 and ((1 << (_la - 395)) & ((1 << (Cobol85Parser.REMOVE - 395)) | (1 << (Cobol85Parser.REQUIRED - 395)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 395)) | (1 << (Cobol85Parser.RETURN_CODE - 395)) | (1 << (Cobol85Parser.SAVE - 395)) | (1 << (Cobol85Parser.SECURE - 395)) | (1 << (Cobol85Parser.SHARED - 395)) | (1 << (Cobol85Parser.SHAREDBYALL - 395)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 395)) | (1 << (Cobol85Parser.SHARING - 395)) | (1 << (Cobol85Parser.SHIFT_IN - 395)) | (1 << (Cobol85Parser.SHIFT_OUT - 395)) | (1 << (Cobol85Parser.SHORT_DATE - 395)) | (1 << (Cobol85Parser.SORT_CONTROL - 395)) | (1 << (Cobol85Parser.SORT_CORE_SIZE - 395)) | (1 << (Cobol85Parser.SORT_FILE_SIZE - 395)) | (1 << (Cobol85Parser.SORT_MESSAGE - 395)) | (1 << (Cobol85Parser.SORT_MODE_SIZE - 395)) | (1 << (Cobol85Parser.SORT_RETURN - 395)) | (1 << (Cobol85Parser.SQL - 395)))) != 0) or ((((_la - 471)) & ~0x3f) == 0 and ((1 << (_la - 471)) & ((1 << (Cobol85Parser.SYMBOL - 471)) | (1 << (Cobol85Parser.TALLY - 471)) | (1 << (Cobol85Parser.TASK - 471)) | (1 << (Cobol85Parser.THREAD - 471)) | (1 << (Cobol85Parser.THREAD_LOCAL - 471)) | (1 << (Cobol85Parser.TIME - 471)) | (1 << (Cobol85Parser.TIMER - 471)) | (1 << (Cobol85Parser.TODAYS_DATE - 471)) | (1 << (Cobol85Parser.TODAYS_NAME - 471)) | (1 << (Cobol85Parser.TRUNCATED - 471)) | (1 << (Cobol85Parser.TYPEDEF - 471)) | (1 << (Cobol85Parser.UNDERLINE - 471)) | (1 << (Cobol85Parser.VIRTUAL - 471)) | (1 << (Cobol85Parser.WAIT - 471)) | (1 << (Cobol85Parser.WHEN_COMPILED - 471)) | (1 << (Cobol85Parser.YEAR - 471)) | (1 << (Cobol85Parser.YYYYMMDD - 471)) | (1 << (Cobol85Parser.YYYYDDD - 471)) | (1 << (Cobol85Parser.ZERO_FILL - 471)))) != 0) or ((((_la - 557)) & ~0x3f) == 0 and ((1 << (_la - 557)) & ((1 << (Cobol85Parser.LEVEL_NUMBER_66 - 557)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 557)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 557)) | (1 << (Cobol85Parser.INTEGERLITERAL - 557)) | (1 << (Cobol85Parser.IDENTIFIER - 557)))) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MoveCorrespondingToSendingAreaContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.MoveCorrespondingToSendingAreaContext, self).__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(Cobol85Parser.IdentifierContext,0)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_moveCorrespondingToSendingArea

        def enterRule(self, listener):
            if hasattr(listener, "enterMoveCorrespondingToSendingArea"):
                listener.enterMoveCorrespondingToSendingArea(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitMoveCorrespondingToSendingArea"):
                listener.exitMoveCorrespondingToSendingArea(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitMoveCorrespondingToSendingArea"):
                return visitor.visitMoveCorrespondingToSendingArea(self)
            else:
                return visitor.visitChildren(self)




    def moveCorrespondingToSendingArea(self):

        localctx = Cobol85Parser.MoveCorrespondingToSendingAreaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 766, self.RULE_moveCorrespondingToSendingArea)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4638
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MultiplyStatementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.MultiplyStatementContext, self).__init__(parent, invokingState)
            self.parser = parser

        def MULTIPLY(self):
            return self.getToken(Cobol85Parser.MULTIPLY, 0)

        def BY(self):
            return self.getToken(Cobol85Parser.BY, 0)

        def identifier(self):
            return self.getTypedRuleContext(Cobol85Parser.IdentifierContext,0)


        def literal(self):
            return self.getTypedRuleContext(Cobol85Parser.LiteralContext,0)


        def multiplyRegular(self):
            return self.getTypedRuleContext(Cobol85Parser.MultiplyRegularContext,0)


        def multiplyGiving(self):
            return self.getTypedRuleContext(Cobol85Parser.MultiplyGivingContext,0)


        def onSizeErrorPhrase(self):
            return self.getTypedRuleContext(Cobol85Parser.OnSizeErrorPhraseContext,0)


        def notOnSizeErrorPhrase(self):
            return self.getTypedRuleContext(Cobol85Parser.NotOnSizeErrorPhraseContext,0)


        def END_MULTIPLY(self):
            return self.getToken(Cobol85Parser.END_MULTIPLY, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_multiplyStatement

        def enterRule(self, listener):
            if hasattr(listener, "enterMultiplyStatement"):
                listener.enterMultiplyStatement(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitMultiplyStatement"):
                listener.exitMultiplyStatement(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitMultiplyStatement"):
                return visitor.visitMultiplyStatement(self)
            else:
                return visitor.visitChildren(self)




    def multiplyStatement(self):

        localctx = Cobol85Parser.MultiplyStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 768, self.RULE_multiplyStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4640
            self.match(Cobol85Parser.MULTIPLY)
            self.state = 4643
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,672,self._ctx)
            if la_ == 1:
                self.state = 4641
                self.identifier()
                pass

            elif la_ == 2:
                self.state = 4642
                self.literal()
                pass


            self.state = 4645
            self.match(Cobol85Parser.BY)
            self.state = 4648
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,673,self._ctx)
            if la_ == 1:
                self.state = 4646
                self.multiplyRegular()
                pass

            elif la_ == 2:
                self.state = 4647
                self.multiplyGiving()
                pass


            self.state = 4651
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,674,self._ctx)
            if la_ == 1:
                self.state = 4650
                self.onSizeErrorPhrase()


            self.state = 4654
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,675,self._ctx)
            if la_ == 1:
                self.state = 4653
                self.notOnSizeErrorPhrase()


            self.state = 4657
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,676,self._ctx)
            if la_ == 1:
                self.state = 4656
                self.match(Cobol85Parser.END_MULTIPLY)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MultiplyRegularContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.MultiplyRegularContext, self).__init__(parent, invokingState)
            self.parser = parser

        def multiplyRegularOperand(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.MultiplyRegularOperandContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.MultiplyRegularOperandContext,i)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_multiplyRegular

        def enterRule(self, listener):
            if hasattr(listener, "enterMultiplyRegular"):
                listener.enterMultiplyRegular(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitMultiplyRegular"):
                listener.exitMultiplyRegular(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitMultiplyRegular"):
                return visitor.visitMultiplyRegular(self)
            else:
                return visitor.visitChildren(self)




    def multiplyRegular(self):

        localctx = Cobol85Parser.MultiplyRegularContext(self, self._ctx, self.state)
        self.enterRule(localctx, 770, self.RULE_multiplyRegular)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4660 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 4659
                self.multiplyRegularOperand()
                self.state = 4662 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.ADDRESS) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE) | (1 << Cobol85Parser.AUTO) | (1 << Cobol85Parser.AUTO_SKIP) | (1 << Cobol85Parser.BACKGROUND_COLOR) | (1 << Cobol85Parser.BACKGROUND_COLOUR) | (1 << Cobol85Parser.BEEP) | (1 << Cobol85Parser.BELL) | (1 << Cobol85Parser.BINARY) | (1 << Cobol85Parser.BIT) | (1 << Cobol85Parser.BLINK) | (1 << Cobol85Parser.BLOB) | (1 << Cobol85Parser.BOUNDS) | (1 << Cobol85Parser.CAPABLE) | (1 << Cobol85Parser.CCSVERSION) | (1 << Cobol85Parser.CHANGED) | (1 << Cobol85Parser.CHANNEL))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (Cobol85Parser.CLOB - 67)) | (1 << (Cobol85Parser.CLOSE_DISPOSITION - 67)) | (1 << (Cobol85Parser.COBOL - 67)) | (1 << (Cobol85Parser.COMMITMENT - 67)) | (1 << (Cobol85Parser.CONTROL_POINT - 67)) | (1 << (Cobol85Parser.CONVENTION - 67)) | (1 << (Cobol85Parser.CRUNCH - 67)) | (1 << (Cobol85Parser.CURSOR - 67)) | (1 << (Cobol85Parser.DATE - 67)) | (1 << (Cobol85Parser.DAY - 67)) | (1 << (Cobol85Parser.DAY_OF_WEEK - 67)) | (1 << (Cobol85Parser.DBCLOB - 67)) | (1 << (Cobol85Parser.DEBUG_CONTENTS - 67)) | (1 << (Cobol85Parser.DEBUG_ITEM - 67)) | (1 << (Cobol85Parser.DEBUG_LINE - 67)) | (1 << (Cobol85Parser.DEBUG_NAME - 67)) | (1 << (Cobol85Parser.DEBUG_SUB_1 - 67)) | (1 << (Cobol85Parser.DEBUG_SUB_2 - 67)) | (1 << (Cobol85Parser.DEBUG_SUB_3 - 67)))) != 0) or ((((_la - 131)) & ~0x3f) == 0 and ((1 << (_la - 131)) & ((1 << (Cobol85Parser.DEFAULT - 131)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 131)) | (1 << (Cobol85Parser.DEFINITION - 131)) | (1 << (Cobol85Parser.DFHRESP - 131)) | (1 << (Cobol85Parser.DFHVALUE - 131)) | (1 << (Cobol85Parser.DISK - 131)) | (1 << (Cobol85Parser.DONTCARE - 131)) | (1 << (Cobol85Parser.DOUBLE - 131)) | (1 << (Cobol85Parser.EBCDIC - 131)) | (1 << (Cobol85Parser.EMPTY_CHECK - 131)) | (1 << (Cobol85Parser.ENTER - 131)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 131)) | (1 << (Cobol85Parser.ERASE - 131)) | (1 << (Cobol85Parser.EOL - 131)) | (1 << (Cobol85Parser.EOS - 131)))) != 0) or ((((_la - 195)) & ~0x3f) == 0 and ((1 << (_la - 195)) & ((1 << (Cobol85Parser.ESCAPE - 195)) | (1 << (Cobol85Parser.EVENT - 195)) | (1 << (Cobol85Parser.EXCLUSIVE - 195)) | (1 << (Cobol85Parser.EXPORT - 195)) | (1 << (Cobol85Parser.EXTENDED - 195)) | (1 << (Cobol85Parser.FOREGROUND_COLOR - 195)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 195)) | (1 << (Cobol85Parser.FULL - 195)) | (1 << (Cobol85Parser.FUNCTION - 195)) | (1 << (Cobol85Parser.FUNCTIONNAME - 195)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 195)) | (1 << (Cobol85Parser.GRID - 195)) | (1 << (Cobol85Parser.HIGHLIGHT - 195)) | (1 << (Cobol85Parser.IMPLICIT - 195)) | (1 << (Cobol85Parser.IMPORT - 195)) | (1 << (Cobol85Parser.INTEGER - 195)))) != 0) or ((((_la - 262)) & ~0x3f) == 0 and ((1 << (_la - 262)) & ((1 << (Cobol85Parser.KEPT - 262)) | (1 << (Cobol85Parser.KEYBOARD - 262)) | (1 << (Cobol85Parser.LANGUAGE - 262)) | (1 << (Cobol85Parser.LB - 262)) | (1 << (Cobol85Parser.LD - 262)) | (1 << (Cobol85Parser.LEFTLINE - 262)) | (1 << (Cobol85Parser.LENGTH - 262)) | (1 << (Cobol85Parser.LENGTH_CHECK - 262)) | (1 << (Cobol85Parser.LIBACCESS - 262)) | (1 << (Cobol85Parser.LIBPARAMETER - 262)) | (1 << (Cobol85Parser.LIBRARY - 262)) | (1 << (Cobol85Parser.LINAGE_COUNTER - 262)) | (1 << (Cobol85Parser.LINE_COUNTER - 262)) | (1 << (Cobol85Parser.LIST - 262)) | (1 << (Cobol85Parser.LOCAL - 262)) | (1 << (Cobol85Parser.LONG_DATE - 262)) | (1 << (Cobol85Parser.LONG_TIME - 262)) | (1 << (Cobol85Parser.LOWER - 262)) | (1 << (Cobol85Parser.LOWLIGHT - 262)) | (1 << (Cobol85Parser.MMDDYYYY - 262)) | (1 << (Cobol85Parser.NAMED - 262)) | (1 << (Cobol85Parser.NATIONAL - 262)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 262)) | (1 << (Cobol85Parser.NETWORK - 262)) | (1 << (Cobol85Parser.NO_ECHO - 262)) | (1 << (Cobol85Parser.NUMERIC_DATE - 262)) | (1 << (Cobol85Parser.NUMERIC_TIME - 262)))) != 0) or ((((_la - 326)) & ~0x3f) == 0 and ((1 << (_la - 326)) & ((1 << (Cobol85Parser.ODT - 326)) | (1 << (Cobol85Parser.ORDERLY - 326)) | (1 << (Cobol85Parser.OVERLINE - 326)) | (1 << (Cobol85Parser.OWN - 326)) | (1 << (Cobol85Parser.PAGE_COUNTER - 326)) | (1 << (Cobol85Parser.PASSWORD - 326)) | (1 << (Cobol85Parser.PORT - 326)) | (1 << (Cobol85Parser.PRINTER - 326)) | (1 << (Cobol85Parser.PRIVATE - 326)) | (1 << (Cobol85Parser.PROCESS - 326)) | (1 << (Cobol85Parser.PROGRAM - 326)) | (1 << (Cobol85Parser.PROMPT - 326)) | (1 << (Cobol85Parser.READER - 326)) | (1 << (Cobol85Parser.REMOTE - 326)) | (1 << (Cobol85Parser.REAL - 326)) | (1 << (Cobol85Parser.RECEIVED - 326)) | (1 << (Cobol85Parser.RECURSIVE - 326)) | (1 << (Cobol85Parser.REF - 326)))) != 0) or ((((_la - 395)) & ~0x3f) == 0 and ((1 << (_la - 395)) & ((1 << (Cobol85Parser.REMOVE - 395)) | (1 << (Cobol85Parser.REQUIRED - 395)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 395)) | (1 << (Cobol85Parser.RETURN_CODE - 395)) | (1 << (Cobol85Parser.SAVE - 395)) | (1 << (Cobol85Parser.SECURE - 395)) | (1 << (Cobol85Parser.SHARED - 395)) | (1 << (Cobol85Parser.SHAREDBYALL - 395)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 395)) | (1 << (Cobol85Parser.SHARING - 395)) | (1 << (Cobol85Parser.SHIFT_IN - 395)) | (1 << (Cobol85Parser.SHIFT_OUT - 395)) | (1 << (Cobol85Parser.SHORT_DATE - 395)) | (1 << (Cobol85Parser.SORT_CONTROL - 395)) | (1 << (Cobol85Parser.SORT_CORE_SIZE - 395)) | (1 << (Cobol85Parser.SORT_FILE_SIZE - 395)) | (1 << (Cobol85Parser.SORT_MESSAGE - 395)) | (1 << (Cobol85Parser.SORT_MODE_SIZE - 395)) | (1 << (Cobol85Parser.SORT_RETURN - 395)) | (1 << (Cobol85Parser.SQL - 395)))) != 0) or ((((_la - 471)) & ~0x3f) == 0 and ((1 << (_la - 471)) & ((1 << (Cobol85Parser.SYMBOL - 471)) | (1 << (Cobol85Parser.TALLY - 471)) | (1 << (Cobol85Parser.TASK - 471)) | (1 << (Cobol85Parser.THREAD - 471)) | (1 << (Cobol85Parser.THREAD_LOCAL - 471)) | (1 << (Cobol85Parser.TIME - 471)) | (1 << (Cobol85Parser.TIMER - 471)) | (1 << (Cobol85Parser.TODAYS_DATE - 471)) | (1 << (Cobol85Parser.TODAYS_NAME - 471)) | (1 << (Cobol85Parser.TRUNCATED - 471)) | (1 << (Cobol85Parser.TYPEDEF - 471)) | (1 << (Cobol85Parser.UNDERLINE - 471)) | (1 << (Cobol85Parser.VIRTUAL - 471)) | (1 << (Cobol85Parser.WAIT - 471)) | (1 << (Cobol85Parser.WHEN_COMPILED - 471)) | (1 << (Cobol85Parser.YEAR - 471)) | (1 << (Cobol85Parser.YYYYMMDD - 471)) | (1 << (Cobol85Parser.YYYYDDD - 471)) | (1 << (Cobol85Parser.ZERO_FILL - 471)))) != 0) or ((((_la - 557)) & ~0x3f) == 0 and ((1 << (_la - 557)) & ((1 << (Cobol85Parser.LEVEL_NUMBER_66 - 557)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 557)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 557)) | (1 << (Cobol85Parser.INTEGERLITERAL - 557)) | (1 << (Cobol85Parser.IDENTIFIER - 557)))) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MultiplyRegularOperandContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.MultiplyRegularOperandContext, self).__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(Cobol85Parser.IdentifierContext,0)


        def ROUNDED(self):
            return self.getToken(Cobol85Parser.ROUNDED, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_multiplyRegularOperand

        def enterRule(self, listener):
            if hasattr(listener, "enterMultiplyRegularOperand"):
                listener.enterMultiplyRegularOperand(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitMultiplyRegularOperand"):
                listener.exitMultiplyRegularOperand(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitMultiplyRegularOperand"):
                return visitor.visitMultiplyRegularOperand(self)
            else:
                return visitor.visitChildren(self)




    def multiplyRegularOperand(self):

        localctx = Cobol85Parser.MultiplyRegularOperandContext(self, self._ctx, self.state)
        self.enterRule(localctx, 772, self.RULE_multiplyRegularOperand)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4664
            self.identifier()
            self.state = 4666
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.ROUNDED:
                self.state = 4665
                self.match(Cobol85Parser.ROUNDED)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MultiplyGivingContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.MultiplyGivingContext, self).__init__(parent, invokingState)
            self.parser = parser

        def multiplyGivingOperand(self):
            return self.getTypedRuleContext(Cobol85Parser.MultiplyGivingOperandContext,0)


        def GIVING(self):
            return self.getToken(Cobol85Parser.GIVING, 0)

        def multiplyGivingResult(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.MultiplyGivingResultContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.MultiplyGivingResultContext,i)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_multiplyGiving

        def enterRule(self, listener):
            if hasattr(listener, "enterMultiplyGiving"):
                listener.enterMultiplyGiving(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitMultiplyGiving"):
                listener.exitMultiplyGiving(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitMultiplyGiving"):
                return visitor.visitMultiplyGiving(self)
            else:
                return visitor.visitChildren(self)




    def multiplyGiving(self):

        localctx = Cobol85Parser.MultiplyGivingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 774, self.RULE_multiplyGiving)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4668
            self.multiplyGivingOperand()
            self.state = 4669
            self.match(Cobol85Parser.GIVING)
            self.state = 4671 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 4670
                self.multiplyGivingResult()
                self.state = 4673 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.ADDRESS) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE) | (1 << Cobol85Parser.AUTO) | (1 << Cobol85Parser.AUTO_SKIP) | (1 << Cobol85Parser.BACKGROUND_COLOR) | (1 << Cobol85Parser.BACKGROUND_COLOUR) | (1 << Cobol85Parser.BEEP) | (1 << Cobol85Parser.BELL) | (1 << Cobol85Parser.BINARY) | (1 << Cobol85Parser.BIT) | (1 << Cobol85Parser.BLINK) | (1 << Cobol85Parser.BLOB) | (1 << Cobol85Parser.BOUNDS) | (1 << Cobol85Parser.CAPABLE) | (1 << Cobol85Parser.CCSVERSION) | (1 << Cobol85Parser.CHANGED) | (1 << Cobol85Parser.CHANNEL))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (Cobol85Parser.CLOB - 67)) | (1 << (Cobol85Parser.CLOSE_DISPOSITION - 67)) | (1 << (Cobol85Parser.COBOL - 67)) | (1 << (Cobol85Parser.COMMITMENT - 67)) | (1 << (Cobol85Parser.CONTROL_POINT - 67)) | (1 << (Cobol85Parser.CONVENTION - 67)) | (1 << (Cobol85Parser.CRUNCH - 67)) | (1 << (Cobol85Parser.CURSOR - 67)) | (1 << (Cobol85Parser.DATE - 67)) | (1 << (Cobol85Parser.DAY - 67)) | (1 << (Cobol85Parser.DAY_OF_WEEK - 67)) | (1 << (Cobol85Parser.DBCLOB - 67)) | (1 << (Cobol85Parser.DEBUG_CONTENTS - 67)) | (1 << (Cobol85Parser.DEBUG_ITEM - 67)) | (1 << (Cobol85Parser.DEBUG_LINE - 67)) | (1 << (Cobol85Parser.DEBUG_NAME - 67)) | (1 << (Cobol85Parser.DEBUG_SUB_1 - 67)) | (1 << (Cobol85Parser.DEBUG_SUB_2 - 67)) | (1 << (Cobol85Parser.DEBUG_SUB_3 - 67)))) != 0) or ((((_la - 131)) & ~0x3f) == 0 and ((1 << (_la - 131)) & ((1 << (Cobol85Parser.DEFAULT - 131)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 131)) | (1 << (Cobol85Parser.DEFINITION - 131)) | (1 << (Cobol85Parser.DFHRESP - 131)) | (1 << (Cobol85Parser.DFHVALUE - 131)) | (1 << (Cobol85Parser.DISK - 131)) | (1 << (Cobol85Parser.DONTCARE - 131)) | (1 << (Cobol85Parser.DOUBLE - 131)) | (1 << (Cobol85Parser.EBCDIC - 131)) | (1 << (Cobol85Parser.EMPTY_CHECK - 131)) | (1 << (Cobol85Parser.ENTER - 131)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 131)) | (1 << (Cobol85Parser.ERASE - 131)) | (1 << (Cobol85Parser.EOL - 131)) | (1 << (Cobol85Parser.EOS - 131)))) != 0) or ((((_la - 195)) & ~0x3f) == 0 and ((1 << (_la - 195)) & ((1 << (Cobol85Parser.ESCAPE - 195)) | (1 << (Cobol85Parser.EVENT - 195)) | (1 << (Cobol85Parser.EXCLUSIVE - 195)) | (1 << (Cobol85Parser.EXPORT - 195)) | (1 << (Cobol85Parser.EXTENDED - 195)) | (1 << (Cobol85Parser.FOREGROUND_COLOR - 195)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 195)) | (1 << (Cobol85Parser.FULL - 195)) | (1 << (Cobol85Parser.FUNCTION - 195)) | (1 << (Cobol85Parser.FUNCTIONNAME - 195)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 195)) | (1 << (Cobol85Parser.GRID - 195)) | (1 << (Cobol85Parser.HIGHLIGHT - 195)) | (1 << (Cobol85Parser.IMPLICIT - 195)) | (1 << (Cobol85Parser.IMPORT - 195)) | (1 << (Cobol85Parser.INTEGER - 195)))) != 0) or ((((_la - 262)) & ~0x3f) == 0 and ((1 << (_la - 262)) & ((1 << (Cobol85Parser.KEPT - 262)) | (1 << (Cobol85Parser.KEYBOARD - 262)) | (1 << (Cobol85Parser.LANGUAGE - 262)) | (1 << (Cobol85Parser.LB - 262)) | (1 << (Cobol85Parser.LD - 262)) | (1 << (Cobol85Parser.LEFTLINE - 262)) | (1 << (Cobol85Parser.LENGTH - 262)) | (1 << (Cobol85Parser.LENGTH_CHECK - 262)) | (1 << (Cobol85Parser.LIBACCESS - 262)) | (1 << (Cobol85Parser.LIBPARAMETER - 262)) | (1 << (Cobol85Parser.LIBRARY - 262)) | (1 << (Cobol85Parser.LINAGE_COUNTER - 262)) | (1 << (Cobol85Parser.LINE_COUNTER - 262)) | (1 << (Cobol85Parser.LIST - 262)) | (1 << (Cobol85Parser.LOCAL - 262)) | (1 << (Cobol85Parser.LONG_DATE - 262)) | (1 << (Cobol85Parser.LONG_TIME - 262)) | (1 << (Cobol85Parser.LOWER - 262)) | (1 << (Cobol85Parser.LOWLIGHT - 262)) | (1 << (Cobol85Parser.MMDDYYYY - 262)) | (1 << (Cobol85Parser.NAMED - 262)) | (1 << (Cobol85Parser.NATIONAL - 262)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 262)) | (1 << (Cobol85Parser.NETWORK - 262)) | (1 << (Cobol85Parser.NO_ECHO - 262)) | (1 << (Cobol85Parser.NUMERIC_DATE - 262)) | (1 << (Cobol85Parser.NUMERIC_TIME - 262)))) != 0) or ((((_la - 326)) & ~0x3f) == 0 and ((1 << (_la - 326)) & ((1 << (Cobol85Parser.ODT - 326)) | (1 << (Cobol85Parser.ORDERLY - 326)) | (1 << (Cobol85Parser.OVERLINE - 326)) | (1 << (Cobol85Parser.OWN - 326)) | (1 << (Cobol85Parser.PAGE_COUNTER - 326)) | (1 << (Cobol85Parser.PASSWORD - 326)) | (1 << (Cobol85Parser.PORT - 326)) | (1 << (Cobol85Parser.PRINTER - 326)) | (1 << (Cobol85Parser.PRIVATE - 326)) | (1 << (Cobol85Parser.PROCESS - 326)) | (1 << (Cobol85Parser.PROGRAM - 326)) | (1 << (Cobol85Parser.PROMPT - 326)) | (1 << (Cobol85Parser.READER - 326)) | (1 << (Cobol85Parser.REMOTE - 326)) | (1 << (Cobol85Parser.REAL - 326)) | (1 << (Cobol85Parser.RECEIVED - 326)) | (1 << (Cobol85Parser.RECURSIVE - 326)) | (1 << (Cobol85Parser.REF - 326)))) != 0) or ((((_la - 395)) & ~0x3f) == 0 and ((1 << (_la - 395)) & ((1 << (Cobol85Parser.REMOVE - 395)) | (1 << (Cobol85Parser.REQUIRED - 395)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 395)) | (1 << (Cobol85Parser.RETURN_CODE - 395)) | (1 << (Cobol85Parser.SAVE - 395)) | (1 << (Cobol85Parser.SECURE - 395)) | (1 << (Cobol85Parser.SHARED - 395)) | (1 << (Cobol85Parser.SHAREDBYALL - 395)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 395)) | (1 << (Cobol85Parser.SHARING - 395)) | (1 << (Cobol85Parser.SHIFT_IN - 395)) | (1 << (Cobol85Parser.SHIFT_OUT - 395)) | (1 << (Cobol85Parser.SHORT_DATE - 395)) | (1 << (Cobol85Parser.SORT_CONTROL - 395)) | (1 << (Cobol85Parser.SORT_CORE_SIZE - 395)) | (1 << (Cobol85Parser.SORT_FILE_SIZE - 395)) | (1 << (Cobol85Parser.SORT_MESSAGE - 395)) | (1 << (Cobol85Parser.SORT_MODE_SIZE - 395)) | (1 << (Cobol85Parser.SORT_RETURN - 395)) | (1 << (Cobol85Parser.SQL - 395)))) != 0) or ((((_la - 471)) & ~0x3f) == 0 and ((1 << (_la - 471)) & ((1 << (Cobol85Parser.SYMBOL - 471)) | (1 << (Cobol85Parser.TALLY - 471)) | (1 << (Cobol85Parser.TASK - 471)) | (1 << (Cobol85Parser.THREAD - 471)) | (1 << (Cobol85Parser.THREAD_LOCAL - 471)) | (1 << (Cobol85Parser.TIME - 471)) | (1 << (Cobol85Parser.TIMER - 471)) | (1 << (Cobol85Parser.TODAYS_DATE - 471)) | (1 << (Cobol85Parser.TODAYS_NAME - 471)) | (1 << (Cobol85Parser.TRUNCATED - 471)) | (1 << (Cobol85Parser.TYPEDEF - 471)) | (1 << (Cobol85Parser.UNDERLINE - 471)) | (1 << (Cobol85Parser.VIRTUAL - 471)) | (1 << (Cobol85Parser.WAIT - 471)) | (1 << (Cobol85Parser.WHEN_COMPILED - 471)) | (1 << (Cobol85Parser.YEAR - 471)) | (1 << (Cobol85Parser.YYYYMMDD - 471)) | (1 << (Cobol85Parser.YYYYDDD - 471)) | (1 << (Cobol85Parser.ZERO_FILL - 471)))) != 0) or ((((_la - 557)) & ~0x3f) == 0 and ((1 << (_la - 557)) & ((1 << (Cobol85Parser.LEVEL_NUMBER_66 - 557)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 557)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 557)) | (1 << (Cobol85Parser.INTEGERLITERAL - 557)) | (1 << (Cobol85Parser.IDENTIFIER - 557)))) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MultiplyGivingOperandContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.MultiplyGivingOperandContext, self).__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(Cobol85Parser.IdentifierContext,0)


        def literal(self):
            return self.getTypedRuleContext(Cobol85Parser.LiteralContext,0)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_multiplyGivingOperand

        def enterRule(self, listener):
            if hasattr(listener, "enterMultiplyGivingOperand"):
                listener.enterMultiplyGivingOperand(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitMultiplyGivingOperand"):
                listener.exitMultiplyGivingOperand(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitMultiplyGivingOperand"):
                return visitor.visitMultiplyGivingOperand(self)
            else:
                return visitor.visitChildren(self)




    def multiplyGivingOperand(self):

        localctx = Cobol85Parser.MultiplyGivingOperandContext(self, self._ctx, self.state)
        self.enterRule(localctx, 776, self.RULE_multiplyGivingOperand)
        try:
            self.state = 4677
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,680,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4675
                self.identifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4676
                self.literal()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MultiplyGivingResultContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.MultiplyGivingResultContext, self).__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(Cobol85Parser.IdentifierContext,0)


        def ROUNDED(self):
            return self.getToken(Cobol85Parser.ROUNDED, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_multiplyGivingResult

        def enterRule(self, listener):
            if hasattr(listener, "enterMultiplyGivingResult"):
                listener.enterMultiplyGivingResult(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitMultiplyGivingResult"):
                listener.exitMultiplyGivingResult(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitMultiplyGivingResult"):
                return visitor.visitMultiplyGivingResult(self)
            else:
                return visitor.visitChildren(self)




    def multiplyGivingResult(self):

        localctx = Cobol85Parser.MultiplyGivingResultContext(self, self._ctx, self.state)
        self.enterRule(localctx, 778, self.RULE_multiplyGivingResult)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4679
            self.identifier()
            self.state = 4681
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.ROUNDED:
                self.state = 4680
                self.match(Cobol85Parser.ROUNDED)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OpenStatementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.OpenStatementContext, self).__init__(parent, invokingState)
            self.parser = parser

        def OPEN(self):
            return self.getToken(Cobol85Parser.OPEN, 0)

        def openInputStatement(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.OpenInputStatementContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.OpenInputStatementContext,i)


        def openOutputStatement(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.OpenOutputStatementContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.OpenOutputStatementContext,i)


        def openIOStatement(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.OpenIOStatementContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.OpenIOStatementContext,i)


        def openExtendStatement(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.OpenExtendStatementContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.OpenExtendStatementContext,i)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_openStatement

        def enterRule(self, listener):
            if hasattr(listener, "enterOpenStatement"):
                listener.enterOpenStatement(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitOpenStatement"):
                listener.exitOpenStatement(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitOpenStatement"):
                return visitor.visitOpenStatement(self)
            else:
                return visitor.visitChildren(self)




    def openStatement(self):

        localctx = Cobol85Parser.OpenStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 780, self.RULE_openStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4683
            self.match(Cobol85Parser.OPEN)
            self.state = 4688 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 4688
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [Cobol85Parser.INPUT]:
                    self.state = 4684
                    self.openInputStatement()
                    pass
                elif token in [Cobol85Parser.OUTPUT]:
                    self.state = 4685
                    self.openOutputStatement()
                    pass
                elif token in [Cobol85Parser.I_O]:
                    self.state = 4686
                    self.openIOStatement()
                    pass
                elif token in [Cobol85Parser.EXTEND]:
                    self.state = 4687
                    self.openExtendStatement()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 4690 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 205)) & ~0x3f) == 0 and ((1 << (_la - 205)) & ((1 << (Cobol85Parser.EXTEND - 205)) | (1 << (Cobol85Parser.I_O - 205)) | (1 << (Cobol85Parser.INPUT - 205)))) != 0) or _la==Cobol85Parser.OUTPUT):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OpenInputStatementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.OpenInputStatementContext, self).__init__(parent, invokingState)
            self.parser = parser

        def INPUT(self):
            return self.getToken(Cobol85Parser.INPUT, 0)

        def openInput(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.OpenInputContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.OpenInputContext,i)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_openInputStatement

        def enterRule(self, listener):
            if hasattr(listener, "enterOpenInputStatement"):
                listener.enterOpenInputStatement(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitOpenInputStatement"):
                listener.exitOpenInputStatement(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitOpenInputStatement"):
                return visitor.visitOpenInputStatement(self)
            else:
                return visitor.visitChildren(self)




    def openInputStatement(self):

        localctx = Cobol85Parser.OpenInputStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 782, self.RULE_openInputStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4692
            self.match(Cobol85Parser.INPUT)
            self.state = 4694 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 4693
                self.openInput()
                self.state = 4696 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE) | (1 << Cobol85Parser.AUTO) | (1 << Cobol85Parser.AUTO_SKIP) | (1 << Cobol85Parser.BACKGROUND_COLOR) | (1 << Cobol85Parser.BACKGROUND_COLOUR) | (1 << Cobol85Parser.BEEP) | (1 << Cobol85Parser.BELL) | (1 << Cobol85Parser.BINARY) | (1 << Cobol85Parser.BIT) | (1 << Cobol85Parser.BLINK) | (1 << Cobol85Parser.BLOB) | (1 << Cobol85Parser.BOUNDS) | (1 << Cobol85Parser.CAPABLE) | (1 << Cobol85Parser.CCSVERSION) | (1 << Cobol85Parser.CHANGED) | (1 << Cobol85Parser.CHANNEL))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (Cobol85Parser.CLOB - 67)) | (1 << (Cobol85Parser.CLOSE_DISPOSITION - 67)) | (1 << (Cobol85Parser.COBOL - 67)) | (1 << (Cobol85Parser.COMMITMENT - 67)) | (1 << (Cobol85Parser.CONTROL_POINT - 67)) | (1 << (Cobol85Parser.CONVENTION - 67)) | (1 << (Cobol85Parser.CRUNCH - 67)) | (1 << (Cobol85Parser.CURSOR - 67)) | (1 << (Cobol85Parser.DBCLOB - 67)))) != 0) or ((((_la - 131)) & ~0x3f) == 0 and ((1 << (_la - 131)) & ((1 << (Cobol85Parser.DEFAULT - 131)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 131)) | (1 << (Cobol85Parser.DEFINITION - 131)) | (1 << (Cobol85Parser.DFHRESP - 131)) | (1 << (Cobol85Parser.DFHVALUE - 131)) | (1 << (Cobol85Parser.DISK - 131)) | (1 << (Cobol85Parser.DONTCARE - 131)) | (1 << (Cobol85Parser.DOUBLE - 131)) | (1 << (Cobol85Parser.EBCDIC - 131)) | (1 << (Cobol85Parser.EMPTY_CHECK - 131)) | (1 << (Cobol85Parser.ENTER - 131)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 131)) | (1 << (Cobol85Parser.ERASE - 131)) | (1 << (Cobol85Parser.EOL - 131)) | (1 << (Cobol85Parser.EOS - 131)))) != 0) or ((((_la - 195)) & ~0x3f) == 0 and ((1 << (_la - 195)) & ((1 << (Cobol85Parser.ESCAPE - 195)) | (1 << (Cobol85Parser.EVENT - 195)) | (1 << (Cobol85Parser.EXCLUSIVE - 195)) | (1 << (Cobol85Parser.EXPORT - 195)) | (1 << (Cobol85Parser.EXTENDED - 195)) | (1 << (Cobol85Parser.FOREGROUND_COLOR - 195)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 195)) | (1 << (Cobol85Parser.FULL - 195)) | (1 << (Cobol85Parser.FUNCTIONNAME - 195)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 195)) | (1 << (Cobol85Parser.GRID - 195)) | (1 << (Cobol85Parser.HIGHLIGHT - 195)) | (1 << (Cobol85Parser.IMPLICIT - 195)) | (1 << (Cobol85Parser.IMPORT - 195)) | (1 << (Cobol85Parser.INTEGER - 195)))) != 0) or ((((_la - 262)) & ~0x3f) == 0 and ((1 << (_la - 262)) & ((1 << (Cobol85Parser.KEPT - 262)) | (1 << (Cobol85Parser.KEYBOARD - 262)) | (1 << (Cobol85Parser.LANGUAGE - 262)) | (1 << (Cobol85Parser.LB - 262)) | (1 << (Cobol85Parser.LD - 262)) | (1 << (Cobol85Parser.LEFTLINE - 262)) | (1 << (Cobol85Parser.LENGTH_CHECK - 262)) | (1 << (Cobol85Parser.LIBACCESS - 262)) | (1 << (Cobol85Parser.LIBPARAMETER - 262)) | (1 << (Cobol85Parser.LIBRARY - 262)) | (1 << (Cobol85Parser.LIST - 262)) | (1 << (Cobol85Parser.LOCAL - 262)) | (1 << (Cobol85Parser.LONG_DATE - 262)) | (1 << (Cobol85Parser.LONG_TIME - 262)) | (1 << (Cobol85Parser.LOWER - 262)) | (1 << (Cobol85Parser.LOWLIGHT - 262)) | (1 << (Cobol85Parser.MMDDYYYY - 262)) | (1 << (Cobol85Parser.NAMED - 262)) | (1 << (Cobol85Parser.NATIONAL - 262)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 262)) | (1 << (Cobol85Parser.NETWORK - 262)) | (1 << (Cobol85Parser.NO_ECHO - 262)) | (1 << (Cobol85Parser.NUMERIC_DATE - 262)) | (1 << (Cobol85Parser.NUMERIC_TIME - 262)))) != 0) or ((((_la - 326)) & ~0x3f) == 0 and ((1 << (_la - 326)) & ((1 << (Cobol85Parser.ODT - 326)) | (1 << (Cobol85Parser.ORDERLY - 326)) | (1 << (Cobol85Parser.OVERLINE - 326)) | (1 << (Cobol85Parser.OWN - 326)) | (1 << (Cobol85Parser.PASSWORD - 326)) | (1 << (Cobol85Parser.PORT - 326)) | (1 << (Cobol85Parser.PRINTER - 326)) | (1 << (Cobol85Parser.PRIVATE - 326)) | (1 << (Cobol85Parser.PROCESS - 326)) | (1 << (Cobol85Parser.PROGRAM - 326)) | (1 << (Cobol85Parser.PROMPT - 326)) | (1 << (Cobol85Parser.READER - 326)) | (1 << (Cobol85Parser.REMOTE - 326)) | (1 << (Cobol85Parser.REAL - 326)) | (1 << (Cobol85Parser.RECEIVED - 326)) | (1 << (Cobol85Parser.RECURSIVE - 326)) | (1 << (Cobol85Parser.REF - 326)))) != 0) or ((((_la - 395)) & ~0x3f) == 0 and ((1 << (_la - 395)) & ((1 << (Cobol85Parser.REMOVE - 395)) | (1 << (Cobol85Parser.REQUIRED - 395)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 395)) | (1 << (Cobol85Parser.SAVE - 395)) | (1 << (Cobol85Parser.SECURE - 395)) | (1 << (Cobol85Parser.SHARED - 395)) | (1 << (Cobol85Parser.SHAREDBYALL - 395)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 395)) | (1 << (Cobol85Parser.SHARING - 395)) | (1 << (Cobol85Parser.SHORT_DATE - 395)) | (1 << (Cobol85Parser.SQL - 395)))) != 0) or ((((_la - 471)) & ~0x3f) == 0 and ((1 << (_la - 471)) & ((1 << (Cobol85Parser.SYMBOL - 471)) | (1 << (Cobol85Parser.TASK - 471)) | (1 << (Cobol85Parser.THREAD - 471)) | (1 << (Cobol85Parser.THREAD_LOCAL - 471)) | (1 << (Cobol85Parser.TIMER - 471)) | (1 << (Cobol85Parser.TODAYS_DATE - 471)) | (1 << (Cobol85Parser.TODAYS_NAME - 471)) | (1 << (Cobol85Parser.TRUNCATED - 471)) | (1 << (Cobol85Parser.TYPEDEF - 471)) | (1 << (Cobol85Parser.UNDERLINE - 471)) | (1 << (Cobol85Parser.VIRTUAL - 471)) | (1 << (Cobol85Parser.WAIT - 471)) | (1 << (Cobol85Parser.YEAR - 471)) | (1 << (Cobol85Parser.YYYYMMDD - 471)) | (1 << (Cobol85Parser.YYYYDDD - 471)) | (1 << (Cobol85Parser.ZERO_FILL - 471)))) != 0) or _la==Cobol85Parser.IDENTIFIER):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OpenInputContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.OpenInputContext, self).__init__(parent, invokingState)
            self.parser = parser

        def fileName(self):
            return self.getTypedRuleContext(Cobol85Parser.FileNameContext,0)


        def REVERSED(self):
            return self.getToken(Cobol85Parser.REVERSED, 0)

        def NO(self):
            return self.getToken(Cobol85Parser.NO, 0)

        def REWIND(self):
            return self.getToken(Cobol85Parser.REWIND, 0)

        def WITH(self):
            return self.getToken(Cobol85Parser.WITH, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_openInput

        def enterRule(self, listener):
            if hasattr(listener, "enterOpenInput"):
                listener.enterOpenInput(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitOpenInput"):
                listener.exitOpenInput(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitOpenInput"):
                return visitor.visitOpenInput(self)
            else:
                return visitor.visitChildren(self)




    def openInput(self):

        localctx = Cobol85Parser.OpenInputContext(self, self._ctx, self.state)
        self.enterRule(localctx, 784, self.RULE_openInput)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4698
            self.fileName()
            self.state = 4705
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,686,self._ctx)
            if la_ == 1:
                self.state = 4699
                self.match(Cobol85Parser.REVERSED)

            elif la_ == 2:
                self.state = 4701
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Cobol85Parser.WITH:
                    self.state = 4700
                    self.match(Cobol85Parser.WITH)


                self.state = 4703
                self.match(Cobol85Parser.NO)
                self.state = 4704
                self.match(Cobol85Parser.REWIND)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OpenOutputStatementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.OpenOutputStatementContext, self).__init__(parent, invokingState)
            self.parser = parser

        def OUTPUT(self):
            return self.getToken(Cobol85Parser.OUTPUT, 0)

        def openOutput(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.OpenOutputContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.OpenOutputContext,i)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_openOutputStatement

        def enterRule(self, listener):
            if hasattr(listener, "enterOpenOutputStatement"):
                listener.enterOpenOutputStatement(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitOpenOutputStatement"):
                listener.exitOpenOutputStatement(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitOpenOutputStatement"):
                return visitor.visitOpenOutputStatement(self)
            else:
                return visitor.visitChildren(self)




    def openOutputStatement(self):

        localctx = Cobol85Parser.OpenOutputStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 786, self.RULE_openOutputStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4707
            self.match(Cobol85Parser.OUTPUT)
            self.state = 4709 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 4708
                self.openOutput()
                self.state = 4711 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE) | (1 << Cobol85Parser.AUTO) | (1 << Cobol85Parser.AUTO_SKIP) | (1 << Cobol85Parser.BACKGROUND_COLOR) | (1 << Cobol85Parser.BACKGROUND_COLOUR) | (1 << Cobol85Parser.BEEP) | (1 << Cobol85Parser.BELL) | (1 << Cobol85Parser.BINARY) | (1 << Cobol85Parser.BIT) | (1 << Cobol85Parser.BLINK) | (1 << Cobol85Parser.BLOB) | (1 << Cobol85Parser.BOUNDS) | (1 << Cobol85Parser.CAPABLE) | (1 << Cobol85Parser.CCSVERSION) | (1 << Cobol85Parser.CHANGED) | (1 << Cobol85Parser.CHANNEL))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (Cobol85Parser.CLOB - 67)) | (1 << (Cobol85Parser.CLOSE_DISPOSITION - 67)) | (1 << (Cobol85Parser.COBOL - 67)) | (1 << (Cobol85Parser.COMMITMENT - 67)) | (1 << (Cobol85Parser.CONTROL_POINT - 67)) | (1 << (Cobol85Parser.CONVENTION - 67)) | (1 << (Cobol85Parser.CRUNCH - 67)) | (1 << (Cobol85Parser.CURSOR - 67)) | (1 << (Cobol85Parser.DBCLOB - 67)))) != 0) or ((((_la - 131)) & ~0x3f) == 0 and ((1 << (_la - 131)) & ((1 << (Cobol85Parser.DEFAULT - 131)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 131)) | (1 << (Cobol85Parser.DEFINITION - 131)) | (1 << (Cobol85Parser.DFHRESP - 131)) | (1 << (Cobol85Parser.DFHVALUE - 131)) | (1 << (Cobol85Parser.DISK - 131)) | (1 << (Cobol85Parser.DONTCARE - 131)) | (1 << (Cobol85Parser.DOUBLE - 131)) | (1 << (Cobol85Parser.EBCDIC - 131)) | (1 << (Cobol85Parser.EMPTY_CHECK - 131)) | (1 << (Cobol85Parser.ENTER - 131)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 131)) | (1 << (Cobol85Parser.ERASE - 131)) | (1 << (Cobol85Parser.EOL - 131)) | (1 << (Cobol85Parser.EOS - 131)))) != 0) or ((((_la - 195)) & ~0x3f) == 0 and ((1 << (_la - 195)) & ((1 << (Cobol85Parser.ESCAPE - 195)) | (1 << (Cobol85Parser.EVENT - 195)) | (1 << (Cobol85Parser.EXCLUSIVE - 195)) | (1 << (Cobol85Parser.EXPORT - 195)) | (1 << (Cobol85Parser.EXTENDED - 195)) | (1 << (Cobol85Parser.FOREGROUND_COLOR - 195)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 195)) | (1 << (Cobol85Parser.FULL - 195)) | (1 << (Cobol85Parser.FUNCTIONNAME - 195)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 195)) | (1 << (Cobol85Parser.GRID - 195)) | (1 << (Cobol85Parser.HIGHLIGHT - 195)) | (1 << (Cobol85Parser.IMPLICIT - 195)) | (1 << (Cobol85Parser.IMPORT - 195)) | (1 << (Cobol85Parser.INTEGER - 195)))) != 0) or ((((_la - 262)) & ~0x3f) == 0 and ((1 << (_la - 262)) & ((1 << (Cobol85Parser.KEPT - 262)) | (1 << (Cobol85Parser.KEYBOARD - 262)) | (1 << (Cobol85Parser.LANGUAGE - 262)) | (1 << (Cobol85Parser.LB - 262)) | (1 << (Cobol85Parser.LD - 262)) | (1 << (Cobol85Parser.LEFTLINE - 262)) | (1 << (Cobol85Parser.LENGTH_CHECK - 262)) | (1 << (Cobol85Parser.LIBACCESS - 262)) | (1 << (Cobol85Parser.LIBPARAMETER - 262)) | (1 << (Cobol85Parser.LIBRARY - 262)) | (1 << (Cobol85Parser.LIST - 262)) | (1 << (Cobol85Parser.LOCAL - 262)) | (1 << (Cobol85Parser.LONG_DATE - 262)) | (1 << (Cobol85Parser.LONG_TIME - 262)) | (1 << (Cobol85Parser.LOWER - 262)) | (1 << (Cobol85Parser.LOWLIGHT - 262)) | (1 << (Cobol85Parser.MMDDYYYY - 262)) | (1 << (Cobol85Parser.NAMED - 262)) | (1 << (Cobol85Parser.NATIONAL - 262)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 262)) | (1 << (Cobol85Parser.NETWORK - 262)) | (1 << (Cobol85Parser.NO_ECHO - 262)) | (1 << (Cobol85Parser.NUMERIC_DATE - 262)) | (1 << (Cobol85Parser.NUMERIC_TIME - 262)))) != 0) or ((((_la - 326)) & ~0x3f) == 0 and ((1 << (_la - 326)) & ((1 << (Cobol85Parser.ODT - 326)) | (1 << (Cobol85Parser.ORDERLY - 326)) | (1 << (Cobol85Parser.OVERLINE - 326)) | (1 << (Cobol85Parser.OWN - 326)) | (1 << (Cobol85Parser.PASSWORD - 326)) | (1 << (Cobol85Parser.PORT - 326)) | (1 << (Cobol85Parser.PRINTER - 326)) | (1 << (Cobol85Parser.PRIVATE - 326)) | (1 << (Cobol85Parser.PROCESS - 326)) | (1 << (Cobol85Parser.PROGRAM - 326)) | (1 << (Cobol85Parser.PROMPT - 326)) | (1 << (Cobol85Parser.READER - 326)) | (1 << (Cobol85Parser.REMOTE - 326)) | (1 << (Cobol85Parser.REAL - 326)) | (1 << (Cobol85Parser.RECEIVED - 326)) | (1 << (Cobol85Parser.RECURSIVE - 326)) | (1 << (Cobol85Parser.REF - 326)))) != 0) or ((((_la - 395)) & ~0x3f) == 0 and ((1 << (_la - 395)) & ((1 << (Cobol85Parser.REMOVE - 395)) | (1 << (Cobol85Parser.REQUIRED - 395)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 395)) | (1 << (Cobol85Parser.SAVE - 395)) | (1 << (Cobol85Parser.SECURE - 395)) | (1 << (Cobol85Parser.SHARED - 395)) | (1 << (Cobol85Parser.SHAREDBYALL - 395)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 395)) | (1 << (Cobol85Parser.SHARING - 395)) | (1 << (Cobol85Parser.SHORT_DATE - 395)) | (1 << (Cobol85Parser.SQL - 395)))) != 0) or ((((_la - 471)) & ~0x3f) == 0 and ((1 << (_la - 471)) & ((1 << (Cobol85Parser.SYMBOL - 471)) | (1 << (Cobol85Parser.TASK - 471)) | (1 << (Cobol85Parser.THREAD - 471)) | (1 << (Cobol85Parser.THREAD_LOCAL - 471)) | (1 << (Cobol85Parser.TIMER - 471)) | (1 << (Cobol85Parser.TODAYS_DATE - 471)) | (1 << (Cobol85Parser.TODAYS_NAME - 471)) | (1 << (Cobol85Parser.TRUNCATED - 471)) | (1 << (Cobol85Parser.TYPEDEF - 471)) | (1 << (Cobol85Parser.UNDERLINE - 471)) | (1 << (Cobol85Parser.VIRTUAL - 471)) | (1 << (Cobol85Parser.WAIT - 471)) | (1 << (Cobol85Parser.YEAR - 471)) | (1 << (Cobol85Parser.YYYYMMDD - 471)) | (1 << (Cobol85Parser.YYYYDDD - 471)) | (1 << (Cobol85Parser.ZERO_FILL - 471)))) != 0) or _la==Cobol85Parser.IDENTIFIER):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OpenOutputContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.OpenOutputContext, self).__init__(parent, invokingState)
            self.parser = parser

        def fileName(self):
            return self.getTypedRuleContext(Cobol85Parser.FileNameContext,0)


        def NO(self):
            return self.getToken(Cobol85Parser.NO, 0)

        def REWIND(self):
            return self.getToken(Cobol85Parser.REWIND, 0)

        def WITH(self):
            return self.getToken(Cobol85Parser.WITH, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_openOutput

        def enterRule(self, listener):
            if hasattr(listener, "enterOpenOutput"):
                listener.enterOpenOutput(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitOpenOutput"):
                listener.exitOpenOutput(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitOpenOutput"):
                return visitor.visitOpenOutput(self)
            else:
                return visitor.visitChildren(self)




    def openOutput(self):

        localctx = Cobol85Parser.OpenOutputContext(self, self._ctx, self.state)
        self.enterRule(localctx, 788, self.RULE_openOutput)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4713
            self.fileName()
            self.state = 4719
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,689,self._ctx)
            if la_ == 1:
                self.state = 4715
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Cobol85Parser.WITH:
                    self.state = 4714
                    self.match(Cobol85Parser.WITH)


                self.state = 4717
                self.match(Cobol85Parser.NO)
                self.state = 4718
                self.match(Cobol85Parser.REWIND)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OpenIOStatementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.OpenIOStatementContext, self).__init__(parent, invokingState)
            self.parser = parser

        def I_O(self):
            return self.getToken(Cobol85Parser.I_O, 0)

        def fileName(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.FileNameContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.FileNameContext,i)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_openIOStatement

        def enterRule(self, listener):
            if hasattr(listener, "enterOpenIOStatement"):
                listener.enterOpenIOStatement(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitOpenIOStatement"):
                listener.exitOpenIOStatement(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitOpenIOStatement"):
                return visitor.visitOpenIOStatement(self)
            else:
                return visitor.visitChildren(self)




    def openIOStatement(self):

        localctx = Cobol85Parser.OpenIOStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 790, self.RULE_openIOStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4721
            self.match(Cobol85Parser.I_O)
            self.state = 4723 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 4722
                self.fileName()
                self.state = 4725 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE) | (1 << Cobol85Parser.AUTO) | (1 << Cobol85Parser.AUTO_SKIP) | (1 << Cobol85Parser.BACKGROUND_COLOR) | (1 << Cobol85Parser.BACKGROUND_COLOUR) | (1 << Cobol85Parser.BEEP) | (1 << Cobol85Parser.BELL) | (1 << Cobol85Parser.BINARY) | (1 << Cobol85Parser.BIT) | (1 << Cobol85Parser.BLINK) | (1 << Cobol85Parser.BLOB) | (1 << Cobol85Parser.BOUNDS) | (1 << Cobol85Parser.CAPABLE) | (1 << Cobol85Parser.CCSVERSION) | (1 << Cobol85Parser.CHANGED) | (1 << Cobol85Parser.CHANNEL))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (Cobol85Parser.CLOB - 67)) | (1 << (Cobol85Parser.CLOSE_DISPOSITION - 67)) | (1 << (Cobol85Parser.COBOL - 67)) | (1 << (Cobol85Parser.COMMITMENT - 67)) | (1 << (Cobol85Parser.CONTROL_POINT - 67)) | (1 << (Cobol85Parser.CONVENTION - 67)) | (1 << (Cobol85Parser.CRUNCH - 67)) | (1 << (Cobol85Parser.CURSOR - 67)) | (1 << (Cobol85Parser.DBCLOB - 67)))) != 0) or ((((_la - 131)) & ~0x3f) == 0 and ((1 << (_la - 131)) & ((1 << (Cobol85Parser.DEFAULT - 131)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 131)) | (1 << (Cobol85Parser.DEFINITION - 131)) | (1 << (Cobol85Parser.DFHRESP - 131)) | (1 << (Cobol85Parser.DFHVALUE - 131)) | (1 << (Cobol85Parser.DISK - 131)) | (1 << (Cobol85Parser.DONTCARE - 131)) | (1 << (Cobol85Parser.DOUBLE - 131)) | (1 << (Cobol85Parser.EBCDIC - 131)) | (1 << (Cobol85Parser.EMPTY_CHECK - 131)) | (1 << (Cobol85Parser.ENTER - 131)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 131)) | (1 << (Cobol85Parser.ERASE - 131)) | (1 << (Cobol85Parser.EOL - 131)) | (1 << (Cobol85Parser.EOS - 131)))) != 0) or ((((_la - 195)) & ~0x3f) == 0 and ((1 << (_la - 195)) & ((1 << (Cobol85Parser.ESCAPE - 195)) | (1 << (Cobol85Parser.EVENT - 195)) | (1 << (Cobol85Parser.EXCLUSIVE - 195)) | (1 << (Cobol85Parser.EXPORT - 195)) | (1 << (Cobol85Parser.EXTENDED - 195)) | (1 << (Cobol85Parser.FOREGROUND_COLOR - 195)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 195)) | (1 << (Cobol85Parser.FULL - 195)) | (1 << (Cobol85Parser.FUNCTIONNAME - 195)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 195)) | (1 << (Cobol85Parser.GRID - 195)) | (1 << (Cobol85Parser.HIGHLIGHT - 195)) | (1 << (Cobol85Parser.IMPLICIT - 195)) | (1 << (Cobol85Parser.IMPORT - 195)) | (1 << (Cobol85Parser.INTEGER - 195)))) != 0) or ((((_la - 262)) & ~0x3f) == 0 and ((1 << (_la - 262)) & ((1 << (Cobol85Parser.KEPT - 262)) | (1 << (Cobol85Parser.KEYBOARD - 262)) | (1 << (Cobol85Parser.LANGUAGE - 262)) | (1 << (Cobol85Parser.LB - 262)) | (1 << (Cobol85Parser.LD - 262)) | (1 << (Cobol85Parser.LEFTLINE - 262)) | (1 << (Cobol85Parser.LENGTH_CHECK - 262)) | (1 << (Cobol85Parser.LIBACCESS - 262)) | (1 << (Cobol85Parser.LIBPARAMETER - 262)) | (1 << (Cobol85Parser.LIBRARY - 262)) | (1 << (Cobol85Parser.LIST - 262)) | (1 << (Cobol85Parser.LOCAL - 262)) | (1 << (Cobol85Parser.LONG_DATE - 262)) | (1 << (Cobol85Parser.LONG_TIME - 262)) | (1 << (Cobol85Parser.LOWER - 262)) | (1 << (Cobol85Parser.LOWLIGHT - 262)) | (1 << (Cobol85Parser.MMDDYYYY - 262)) | (1 << (Cobol85Parser.NAMED - 262)) | (1 << (Cobol85Parser.NATIONAL - 262)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 262)) | (1 << (Cobol85Parser.NETWORK - 262)) | (1 << (Cobol85Parser.NO_ECHO - 262)) | (1 << (Cobol85Parser.NUMERIC_DATE - 262)) | (1 << (Cobol85Parser.NUMERIC_TIME - 262)))) != 0) or ((((_la - 326)) & ~0x3f) == 0 and ((1 << (_la - 326)) & ((1 << (Cobol85Parser.ODT - 326)) | (1 << (Cobol85Parser.ORDERLY - 326)) | (1 << (Cobol85Parser.OVERLINE - 326)) | (1 << (Cobol85Parser.OWN - 326)) | (1 << (Cobol85Parser.PASSWORD - 326)) | (1 << (Cobol85Parser.PORT - 326)) | (1 << (Cobol85Parser.PRINTER - 326)) | (1 << (Cobol85Parser.PRIVATE - 326)) | (1 << (Cobol85Parser.PROCESS - 326)) | (1 << (Cobol85Parser.PROGRAM - 326)) | (1 << (Cobol85Parser.PROMPT - 326)) | (1 << (Cobol85Parser.READER - 326)) | (1 << (Cobol85Parser.REMOTE - 326)) | (1 << (Cobol85Parser.REAL - 326)) | (1 << (Cobol85Parser.RECEIVED - 326)) | (1 << (Cobol85Parser.RECURSIVE - 326)) | (1 << (Cobol85Parser.REF - 326)))) != 0) or ((((_la - 395)) & ~0x3f) == 0 and ((1 << (_la - 395)) & ((1 << (Cobol85Parser.REMOVE - 395)) | (1 << (Cobol85Parser.REQUIRED - 395)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 395)) | (1 << (Cobol85Parser.SAVE - 395)) | (1 << (Cobol85Parser.SECURE - 395)) | (1 << (Cobol85Parser.SHARED - 395)) | (1 << (Cobol85Parser.SHAREDBYALL - 395)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 395)) | (1 << (Cobol85Parser.SHARING - 395)) | (1 << (Cobol85Parser.SHORT_DATE - 395)) | (1 << (Cobol85Parser.SQL - 395)))) != 0) or ((((_la - 471)) & ~0x3f) == 0 and ((1 << (_la - 471)) & ((1 << (Cobol85Parser.SYMBOL - 471)) | (1 << (Cobol85Parser.TASK - 471)) | (1 << (Cobol85Parser.THREAD - 471)) | (1 << (Cobol85Parser.THREAD_LOCAL - 471)) | (1 << (Cobol85Parser.TIMER - 471)) | (1 << (Cobol85Parser.TODAYS_DATE - 471)) | (1 << (Cobol85Parser.TODAYS_NAME - 471)) | (1 << (Cobol85Parser.TRUNCATED - 471)) | (1 << (Cobol85Parser.TYPEDEF - 471)) | (1 << (Cobol85Parser.UNDERLINE - 471)) | (1 << (Cobol85Parser.VIRTUAL - 471)) | (1 << (Cobol85Parser.WAIT - 471)) | (1 << (Cobol85Parser.YEAR - 471)) | (1 << (Cobol85Parser.YYYYMMDD - 471)) | (1 << (Cobol85Parser.YYYYDDD - 471)) | (1 << (Cobol85Parser.ZERO_FILL - 471)))) != 0) or _la==Cobol85Parser.IDENTIFIER):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OpenExtendStatementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.OpenExtendStatementContext, self).__init__(parent, invokingState)
            self.parser = parser

        def EXTEND(self):
            return self.getToken(Cobol85Parser.EXTEND, 0)

        def fileName(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.FileNameContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.FileNameContext,i)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_openExtendStatement

        def enterRule(self, listener):
            if hasattr(listener, "enterOpenExtendStatement"):
                listener.enterOpenExtendStatement(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitOpenExtendStatement"):
                listener.exitOpenExtendStatement(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitOpenExtendStatement"):
                return visitor.visitOpenExtendStatement(self)
            else:
                return visitor.visitChildren(self)




    def openExtendStatement(self):

        localctx = Cobol85Parser.OpenExtendStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 792, self.RULE_openExtendStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4727
            self.match(Cobol85Parser.EXTEND)
            self.state = 4729 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 4728
                self.fileName()
                self.state = 4731 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE) | (1 << Cobol85Parser.AUTO) | (1 << Cobol85Parser.AUTO_SKIP) | (1 << Cobol85Parser.BACKGROUND_COLOR) | (1 << Cobol85Parser.BACKGROUND_COLOUR) | (1 << Cobol85Parser.BEEP) | (1 << Cobol85Parser.BELL) | (1 << Cobol85Parser.BINARY) | (1 << Cobol85Parser.BIT) | (1 << Cobol85Parser.BLINK) | (1 << Cobol85Parser.BLOB) | (1 << Cobol85Parser.BOUNDS) | (1 << Cobol85Parser.CAPABLE) | (1 << Cobol85Parser.CCSVERSION) | (1 << Cobol85Parser.CHANGED) | (1 << Cobol85Parser.CHANNEL))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (Cobol85Parser.CLOB - 67)) | (1 << (Cobol85Parser.CLOSE_DISPOSITION - 67)) | (1 << (Cobol85Parser.COBOL - 67)) | (1 << (Cobol85Parser.COMMITMENT - 67)) | (1 << (Cobol85Parser.CONTROL_POINT - 67)) | (1 << (Cobol85Parser.CONVENTION - 67)) | (1 << (Cobol85Parser.CRUNCH - 67)) | (1 << (Cobol85Parser.CURSOR - 67)) | (1 << (Cobol85Parser.DBCLOB - 67)))) != 0) or ((((_la - 131)) & ~0x3f) == 0 and ((1 << (_la - 131)) & ((1 << (Cobol85Parser.DEFAULT - 131)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 131)) | (1 << (Cobol85Parser.DEFINITION - 131)) | (1 << (Cobol85Parser.DFHRESP - 131)) | (1 << (Cobol85Parser.DFHVALUE - 131)) | (1 << (Cobol85Parser.DISK - 131)) | (1 << (Cobol85Parser.DONTCARE - 131)) | (1 << (Cobol85Parser.DOUBLE - 131)) | (1 << (Cobol85Parser.EBCDIC - 131)) | (1 << (Cobol85Parser.EMPTY_CHECK - 131)) | (1 << (Cobol85Parser.ENTER - 131)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 131)) | (1 << (Cobol85Parser.ERASE - 131)) | (1 << (Cobol85Parser.EOL - 131)) | (1 << (Cobol85Parser.EOS - 131)))) != 0) or ((((_la - 195)) & ~0x3f) == 0 and ((1 << (_la - 195)) & ((1 << (Cobol85Parser.ESCAPE - 195)) | (1 << (Cobol85Parser.EVENT - 195)) | (1 << (Cobol85Parser.EXCLUSIVE - 195)) | (1 << (Cobol85Parser.EXPORT - 195)) | (1 << (Cobol85Parser.EXTENDED - 195)) | (1 << (Cobol85Parser.FOREGROUND_COLOR - 195)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 195)) | (1 << (Cobol85Parser.FULL - 195)) | (1 << (Cobol85Parser.FUNCTIONNAME - 195)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 195)) | (1 << (Cobol85Parser.GRID - 195)) | (1 << (Cobol85Parser.HIGHLIGHT - 195)) | (1 << (Cobol85Parser.IMPLICIT - 195)) | (1 << (Cobol85Parser.IMPORT - 195)) | (1 << (Cobol85Parser.INTEGER - 195)))) != 0) or ((((_la - 262)) & ~0x3f) == 0 and ((1 << (_la - 262)) & ((1 << (Cobol85Parser.KEPT - 262)) | (1 << (Cobol85Parser.KEYBOARD - 262)) | (1 << (Cobol85Parser.LANGUAGE - 262)) | (1 << (Cobol85Parser.LB - 262)) | (1 << (Cobol85Parser.LD - 262)) | (1 << (Cobol85Parser.LEFTLINE - 262)) | (1 << (Cobol85Parser.LENGTH_CHECK - 262)) | (1 << (Cobol85Parser.LIBACCESS - 262)) | (1 << (Cobol85Parser.LIBPARAMETER - 262)) | (1 << (Cobol85Parser.LIBRARY - 262)) | (1 << (Cobol85Parser.LIST - 262)) | (1 << (Cobol85Parser.LOCAL - 262)) | (1 << (Cobol85Parser.LONG_DATE - 262)) | (1 << (Cobol85Parser.LONG_TIME - 262)) | (1 << (Cobol85Parser.LOWER - 262)) | (1 << (Cobol85Parser.LOWLIGHT - 262)) | (1 << (Cobol85Parser.MMDDYYYY - 262)) | (1 << (Cobol85Parser.NAMED - 262)) | (1 << (Cobol85Parser.NATIONAL - 262)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 262)) | (1 << (Cobol85Parser.NETWORK - 262)) | (1 << (Cobol85Parser.NO_ECHO - 262)) | (1 << (Cobol85Parser.NUMERIC_DATE - 262)) | (1 << (Cobol85Parser.NUMERIC_TIME - 262)))) != 0) or ((((_la - 326)) & ~0x3f) == 0 and ((1 << (_la - 326)) & ((1 << (Cobol85Parser.ODT - 326)) | (1 << (Cobol85Parser.ORDERLY - 326)) | (1 << (Cobol85Parser.OVERLINE - 326)) | (1 << (Cobol85Parser.OWN - 326)) | (1 << (Cobol85Parser.PASSWORD - 326)) | (1 << (Cobol85Parser.PORT - 326)) | (1 << (Cobol85Parser.PRINTER - 326)) | (1 << (Cobol85Parser.PRIVATE - 326)) | (1 << (Cobol85Parser.PROCESS - 326)) | (1 << (Cobol85Parser.PROGRAM - 326)) | (1 << (Cobol85Parser.PROMPT - 326)) | (1 << (Cobol85Parser.READER - 326)) | (1 << (Cobol85Parser.REMOTE - 326)) | (1 << (Cobol85Parser.REAL - 326)) | (1 << (Cobol85Parser.RECEIVED - 326)) | (1 << (Cobol85Parser.RECURSIVE - 326)) | (1 << (Cobol85Parser.REF - 326)))) != 0) or ((((_la - 395)) & ~0x3f) == 0 and ((1 << (_la - 395)) & ((1 << (Cobol85Parser.REMOVE - 395)) | (1 << (Cobol85Parser.REQUIRED - 395)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 395)) | (1 << (Cobol85Parser.SAVE - 395)) | (1 << (Cobol85Parser.SECURE - 395)) | (1 << (Cobol85Parser.SHARED - 395)) | (1 << (Cobol85Parser.SHAREDBYALL - 395)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 395)) | (1 << (Cobol85Parser.SHARING - 395)) | (1 << (Cobol85Parser.SHORT_DATE - 395)) | (1 << (Cobol85Parser.SQL - 395)))) != 0) or ((((_la - 471)) & ~0x3f) == 0 and ((1 << (_la - 471)) & ((1 << (Cobol85Parser.SYMBOL - 471)) | (1 << (Cobol85Parser.TASK - 471)) | (1 << (Cobol85Parser.THREAD - 471)) | (1 << (Cobol85Parser.THREAD_LOCAL - 471)) | (1 << (Cobol85Parser.TIMER - 471)) | (1 << (Cobol85Parser.TODAYS_DATE - 471)) | (1 << (Cobol85Parser.TODAYS_NAME - 471)) | (1 << (Cobol85Parser.TRUNCATED - 471)) | (1 << (Cobol85Parser.TYPEDEF - 471)) | (1 << (Cobol85Parser.UNDERLINE - 471)) | (1 << (Cobol85Parser.VIRTUAL - 471)) | (1 << (Cobol85Parser.WAIT - 471)) | (1 << (Cobol85Parser.YEAR - 471)) | (1 << (Cobol85Parser.YYYYMMDD - 471)) | (1 << (Cobol85Parser.YYYYDDD - 471)) | (1 << (Cobol85Parser.ZERO_FILL - 471)))) != 0) or _la==Cobol85Parser.IDENTIFIER):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PerformStatementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.PerformStatementContext, self).__init__(parent, invokingState)
            self.parser = parser

        def PERFORM(self):
            return self.getToken(Cobol85Parser.PERFORM, 0)

        def performInlineStatement(self):
            return self.getTypedRuleContext(Cobol85Parser.PerformInlineStatementContext,0)


        def performProcedureStatement(self):
            return self.getTypedRuleContext(Cobol85Parser.PerformProcedureStatementContext,0)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_performStatement

        def enterRule(self, listener):
            if hasattr(listener, "enterPerformStatement"):
                listener.enterPerformStatement(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitPerformStatement"):
                listener.exitPerformStatement(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitPerformStatement"):
                return visitor.visitPerformStatement(self)
            else:
                return visitor.visitChildren(self)




    def performStatement(self):

        localctx = Cobol85Parser.PerformStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 794, self.RULE_performStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4733
            self.match(Cobol85Parser.PERFORM)
            self.state = 4736
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,692,self._ctx)
            if la_ == 1:
                self.state = 4734
                self.performInlineStatement()
                pass

            elif la_ == 2:
                self.state = 4735
                self.performProcedureStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PerformInlineStatementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.PerformInlineStatementContext, self).__init__(parent, invokingState)
            self.parser = parser

        def END_PERFORM(self):
            return self.getToken(Cobol85Parser.END_PERFORM, 0)

        def performType(self):
            return self.getTypedRuleContext(Cobol85Parser.PerformTypeContext,0)


        def statement(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.StatementContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.StatementContext,i)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_performInlineStatement

        def enterRule(self, listener):
            if hasattr(listener, "enterPerformInlineStatement"):
                listener.enterPerformInlineStatement(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitPerformInlineStatement"):
                listener.exitPerformInlineStatement(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitPerformInlineStatement"):
                return visitor.visitPerformInlineStatement(self)
            else:
                return visitor.visitChildren(self)




    def performInlineStatement(self):

        localctx = Cobol85Parser.PerformInlineStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 796, self.RULE_performInlineStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4739
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.ADDRESS) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE) | (1 << Cobol85Parser.AUTO) | (1 << Cobol85Parser.AUTO_SKIP) | (1 << Cobol85Parser.BACKGROUND_COLOR) | (1 << Cobol85Parser.BACKGROUND_COLOUR) | (1 << Cobol85Parser.BEEP) | (1 << Cobol85Parser.BELL) | (1 << Cobol85Parser.BINARY) | (1 << Cobol85Parser.BIT) | (1 << Cobol85Parser.BLINK) | (1 << Cobol85Parser.BLOB) | (1 << Cobol85Parser.BOUNDS) | (1 << Cobol85Parser.CAPABLE) | (1 << Cobol85Parser.CCSVERSION) | (1 << Cobol85Parser.CHANGED) | (1 << Cobol85Parser.CHANNEL))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (Cobol85Parser.CLOB - 67)) | (1 << (Cobol85Parser.CLOSE_DISPOSITION - 67)) | (1 << (Cobol85Parser.COBOL - 67)) | (1 << (Cobol85Parser.COMMITMENT - 67)) | (1 << (Cobol85Parser.CONTROL_POINT - 67)) | (1 << (Cobol85Parser.CONVENTION - 67)) | (1 << (Cobol85Parser.CRUNCH - 67)) | (1 << (Cobol85Parser.CURSOR - 67)) | (1 << (Cobol85Parser.DATE - 67)) | (1 << (Cobol85Parser.DAY - 67)) | (1 << (Cobol85Parser.DAY_OF_WEEK - 67)) | (1 << (Cobol85Parser.DBCLOB - 67)) | (1 << (Cobol85Parser.DEBUG_CONTENTS - 67)) | (1 << (Cobol85Parser.DEBUG_ITEM - 67)) | (1 << (Cobol85Parser.DEBUG_LINE - 67)) | (1 << (Cobol85Parser.DEBUG_NAME - 67)) | (1 << (Cobol85Parser.DEBUG_SUB_1 - 67)) | (1 << (Cobol85Parser.DEBUG_SUB_2 - 67)) | (1 << (Cobol85Parser.DEBUG_SUB_3 - 67)))) != 0) or ((((_la - 131)) & ~0x3f) == 0 and ((1 << (_la - 131)) & ((1 << (Cobol85Parser.DEFAULT - 131)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 131)) | (1 << (Cobol85Parser.DEFINITION - 131)) | (1 << (Cobol85Parser.DFHRESP - 131)) | (1 << (Cobol85Parser.DFHVALUE - 131)) | (1 << (Cobol85Parser.DISK - 131)) | (1 << (Cobol85Parser.DONTCARE - 131)) | (1 << (Cobol85Parser.DOUBLE - 131)) | (1 << (Cobol85Parser.EBCDIC - 131)) | (1 << (Cobol85Parser.EMPTY_CHECK - 131)) | (1 << (Cobol85Parser.ENTER - 131)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 131)) | (1 << (Cobol85Parser.ERASE - 131)) | (1 << (Cobol85Parser.EOL - 131)) | (1 << (Cobol85Parser.EOS - 131)))) != 0) or ((((_la - 195)) & ~0x3f) == 0 and ((1 << (_la - 195)) & ((1 << (Cobol85Parser.ESCAPE - 195)) | (1 << (Cobol85Parser.EVENT - 195)) | (1 << (Cobol85Parser.EXCLUSIVE - 195)) | (1 << (Cobol85Parser.EXPORT - 195)) | (1 << (Cobol85Parser.EXTENDED - 195)) | (1 << (Cobol85Parser.FOREGROUND_COLOR - 195)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 195)) | (1 << (Cobol85Parser.FULL - 195)) | (1 << (Cobol85Parser.FUNCTION - 195)) | (1 << (Cobol85Parser.FUNCTIONNAME - 195)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 195)) | (1 << (Cobol85Parser.GRID - 195)) | (1 << (Cobol85Parser.HIGHLIGHT - 195)) | (1 << (Cobol85Parser.IMPLICIT - 195)) | (1 << (Cobol85Parser.IMPORT - 195)) | (1 << (Cobol85Parser.INTEGER - 195)))) != 0) or ((((_la - 262)) & ~0x3f) == 0 and ((1 << (_la - 262)) & ((1 << (Cobol85Parser.KEPT - 262)) | (1 << (Cobol85Parser.KEYBOARD - 262)) | (1 << (Cobol85Parser.LANGUAGE - 262)) | (1 << (Cobol85Parser.LB - 262)) | (1 << (Cobol85Parser.LD - 262)) | (1 << (Cobol85Parser.LEFTLINE - 262)) | (1 << (Cobol85Parser.LENGTH - 262)) | (1 << (Cobol85Parser.LENGTH_CHECK - 262)) | (1 << (Cobol85Parser.LIBACCESS - 262)) | (1 << (Cobol85Parser.LIBPARAMETER - 262)) | (1 << (Cobol85Parser.LIBRARY - 262)) | (1 << (Cobol85Parser.LINAGE_COUNTER - 262)) | (1 << (Cobol85Parser.LINE_COUNTER - 262)) | (1 << (Cobol85Parser.LIST - 262)) | (1 << (Cobol85Parser.LOCAL - 262)) | (1 << (Cobol85Parser.LONG_DATE - 262)) | (1 << (Cobol85Parser.LONG_TIME - 262)) | (1 << (Cobol85Parser.LOWER - 262)) | (1 << (Cobol85Parser.LOWLIGHT - 262)) | (1 << (Cobol85Parser.MMDDYYYY - 262)) | (1 << (Cobol85Parser.NAMED - 262)) | (1 << (Cobol85Parser.NATIONAL - 262)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 262)) | (1 << (Cobol85Parser.NETWORK - 262)) | (1 << (Cobol85Parser.NO_ECHO - 262)) | (1 << (Cobol85Parser.NUMERIC_DATE - 262)) | (1 << (Cobol85Parser.NUMERIC_TIME - 262)))) != 0) or ((((_la - 326)) & ~0x3f) == 0 and ((1 << (_la - 326)) & ((1 << (Cobol85Parser.ODT - 326)) | (1 << (Cobol85Parser.ORDERLY - 326)) | (1 << (Cobol85Parser.OVERLINE - 326)) | (1 << (Cobol85Parser.OWN - 326)) | (1 << (Cobol85Parser.PAGE_COUNTER - 326)) | (1 << (Cobol85Parser.PASSWORD - 326)) | (1 << (Cobol85Parser.PORT - 326)) | (1 << (Cobol85Parser.PRINTER - 326)) | (1 << (Cobol85Parser.PRIVATE - 326)) | (1 << (Cobol85Parser.PROCESS - 326)) | (1 << (Cobol85Parser.PROGRAM - 326)) | (1 << (Cobol85Parser.PROMPT - 326)) | (1 << (Cobol85Parser.READER - 326)) | (1 << (Cobol85Parser.REMOTE - 326)) | (1 << (Cobol85Parser.REAL - 326)) | (1 << (Cobol85Parser.RECEIVED - 326)) | (1 << (Cobol85Parser.RECURSIVE - 326)) | (1 << (Cobol85Parser.REF - 326)))) != 0) or ((((_la - 395)) & ~0x3f) == 0 and ((1 << (_la - 395)) & ((1 << (Cobol85Parser.REMOVE - 395)) | (1 << (Cobol85Parser.REQUIRED - 395)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 395)) | (1 << (Cobol85Parser.RETURN_CODE - 395)) | (1 << (Cobol85Parser.SAVE - 395)) | (1 << (Cobol85Parser.SECURE - 395)) | (1 << (Cobol85Parser.SHARED - 395)) | (1 << (Cobol85Parser.SHAREDBYALL - 395)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 395)) | (1 << (Cobol85Parser.SHARING - 395)) | (1 << (Cobol85Parser.SHIFT_IN - 395)) | (1 << (Cobol85Parser.SHIFT_OUT - 395)) | (1 << (Cobol85Parser.SHORT_DATE - 395)) | (1 << (Cobol85Parser.SORT_CONTROL - 395)) | (1 << (Cobol85Parser.SORT_CORE_SIZE - 395)) | (1 << (Cobol85Parser.SORT_FILE_SIZE - 395)) | (1 << (Cobol85Parser.SORT_MESSAGE - 395)) | (1 << (Cobol85Parser.SORT_MODE_SIZE - 395)) | (1 << (Cobol85Parser.SORT_RETURN - 395)) | (1 << (Cobol85Parser.SQL - 395)))) != 0) or ((((_la - 471)) & ~0x3f) == 0 and ((1 << (_la - 471)) & ((1 << (Cobol85Parser.SYMBOL - 471)) | (1 << (Cobol85Parser.TALLY - 471)) | (1 << (Cobol85Parser.TASK - 471)) | (1 << (Cobol85Parser.TEST - 471)) | (1 << (Cobol85Parser.THREAD - 471)) | (1 << (Cobol85Parser.THREAD_LOCAL - 471)) | (1 << (Cobol85Parser.TIME - 471)) | (1 << (Cobol85Parser.TIMER - 471)) | (1 << (Cobol85Parser.TODAYS_DATE - 471)) | (1 << (Cobol85Parser.TODAYS_NAME - 471)) | (1 << (Cobol85Parser.TRUNCATED - 471)) | (1 << (Cobol85Parser.TYPEDEF - 471)) | (1 << (Cobol85Parser.UNDERLINE - 471)) | (1 << (Cobol85Parser.UNTIL - 471)) | (1 << (Cobol85Parser.VARYING - 471)) | (1 << (Cobol85Parser.VIRTUAL - 471)) | (1 << (Cobol85Parser.WAIT - 471)) | (1 << (Cobol85Parser.WHEN_COMPILED - 471)) | (1 << (Cobol85Parser.WITH - 471)) | (1 << (Cobol85Parser.YEAR - 471)) | (1 << (Cobol85Parser.YYYYMMDD - 471)) | (1 << (Cobol85Parser.YYYYDDD - 471)) | (1 << (Cobol85Parser.ZERO_FILL - 471)))) != 0) or ((((_la - 557)) & ~0x3f) == 0 and ((1 << (_la - 557)) & ((1 << (Cobol85Parser.LEVEL_NUMBER_66 - 557)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 557)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 557)) | (1 << (Cobol85Parser.INTEGERLITERAL - 557)) | (1 << (Cobol85Parser.IDENTIFIER - 557)))) != 0):
                self.state = 4738
                self.performType()


            self.state = 4744
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Cobol85Parser.ACCEPT) | (1 << Cobol85Parser.ADD) | (1 << Cobol85Parser.ALTER) | (1 << Cobol85Parser.CALL) | (1 << Cobol85Parser.CANCEL))) != 0) or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & ((1 << (Cobol85Parser.CLOSE - 69)) | (1 << (Cobol85Parser.COMPUTE - 69)) | (1 << (Cobol85Parser.CONTINUE - 69)))) != 0) or ((((_la - 134)) & ~0x3f) == 0 and ((1 << (_la - 134)) & ((1 << (Cobol85Parser.DELETE - 134)) | (1 << (Cobol85Parser.DISABLE - 134)) | (1 << (Cobol85Parser.DISPLAY - 134)) | (1 << (Cobol85Parser.DIVIDE - 134)) | (1 << (Cobol85Parser.ENABLE - 134)) | (1 << (Cobol85Parser.ENTRY - 134)) | (1 << (Cobol85Parser.EVALUATE - 134)))) != 0) or ((((_la - 202)) & ~0x3f) == 0 and ((1 << (_la - 202)) & ((1 << (Cobol85Parser.EXHIBIT - 202)) | (1 << (Cobol85Parser.EXIT - 202)) | (1 << (Cobol85Parser.GENERATE - 202)) | (1 << (Cobol85Parser.GOBACK - 202)) | (1 << (Cobol85Parser.GO - 202)) | (1 << (Cobol85Parser.IF - 202)) | (1 << (Cobol85Parser.INITIALIZE - 202)) | (1 << (Cobol85Parser.INITIATE - 202)) | (1 << (Cobol85Parser.INSPECT - 202)))) != 0) or ((((_la - 298)) & ~0x3f) == 0 and ((1 << (_la - 298)) & ((1 << (Cobol85Parser.MERGE - 298)) | (1 << (Cobol85Parser.MOVE - 298)) | (1 << (Cobol85Parser.MULTIPLY - 298)) | (1 << (Cobol85Parser.OPEN - 298)) | (1 << (Cobol85Parser.PERFORM - 298)))) != 0) or ((((_la - 369)) & ~0x3f) == 0 and ((1 << (_la - 369)) & ((1 << (Cobol85Parser.PURGE - 369)) | (1 << (Cobol85Parser.READ - 369)) | (1 << (Cobol85Parser.RECEIVE - 369)) | (1 << (Cobol85Parser.RELEASE - 369)) | (1 << (Cobol85Parser.RETURN - 369)) | (1 << (Cobol85Parser.REWRITE - 369)) | (1 << (Cobol85Parser.SEARCH - 369)) | (1 << (Cobol85Parser.SEND - 369)))) != 0) or ((((_la - 434)) & ~0x3f) == 0 and ((1 << (_la - 434)) & ((1 << (Cobol85Parser.SET - 434)) | (1 << (Cobol85Parser.SORT - 434)) | (1 << (Cobol85Parser.START - 434)) | (1 << (Cobol85Parser.STOP - 434)) | (1 << (Cobol85Parser.STRING - 434)) | (1 << (Cobol85Parser.SUBTRACT - 434)) | (1 << (Cobol85Parser.TERMINATE - 434)))) != 0) or ((((_la - 505)) & ~0x3f) == 0 and ((1 << (_la - 505)) & ((1 << (Cobol85Parser.UNSTRING - 505)) | (1 << (Cobol85Parser.WRITE - 505)) | (1 << (Cobol85Parser.EXECCICSLINE - 505)) | (1 << (Cobol85Parser.EXECSQLIMSLINE - 505)) | (1 << (Cobol85Parser.EXECSQLLINE - 505)))) != 0):
                self.state = 4741
                self.statement()
                self.state = 4746
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 4747
            self.match(Cobol85Parser.END_PERFORM)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PerformProcedureStatementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.PerformProcedureStatementContext, self).__init__(parent, invokingState)
            self.parser = parser

        def procedureName(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.ProcedureNameContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.ProcedureNameContext,i)


        def performType(self):
            return self.getTypedRuleContext(Cobol85Parser.PerformTypeContext,0)


        def THROUGH(self):
            return self.getToken(Cobol85Parser.THROUGH, 0)

        def THRU(self):
            return self.getToken(Cobol85Parser.THRU, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_performProcedureStatement

        def enterRule(self, listener):
            if hasattr(listener, "enterPerformProcedureStatement"):
                listener.enterPerformProcedureStatement(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitPerformProcedureStatement"):
                listener.exitPerformProcedureStatement(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitPerformProcedureStatement"):
                return visitor.visitPerformProcedureStatement(self)
            else:
                return visitor.visitChildren(self)




    def performProcedureStatement(self):

        localctx = Cobol85Parser.PerformProcedureStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 798, self.RULE_performProcedureStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4749
            self.procedureName()
            self.state = 4752
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.THROUGH or _la==Cobol85Parser.THRU:
                self.state = 4750
                _la = self._input.LA(1)
                if not(_la==Cobol85Parser.THROUGH or _la==Cobol85Parser.THRU):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 4751
                self.procedureName()


            self.state = 4755
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,696,self._ctx)
            if la_ == 1:
                self.state = 4754
                self.performType()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PerformTypeContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.PerformTypeContext, self).__init__(parent, invokingState)
            self.parser = parser

        def performTimes(self):
            return self.getTypedRuleContext(Cobol85Parser.PerformTimesContext,0)


        def performUntil(self):
            return self.getTypedRuleContext(Cobol85Parser.PerformUntilContext,0)


        def performVarying(self):
            return self.getTypedRuleContext(Cobol85Parser.PerformVaryingContext,0)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_performType

        def enterRule(self, listener):
            if hasattr(listener, "enterPerformType"):
                listener.enterPerformType(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitPerformType"):
                listener.exitPerformType(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitPerformType"):
                return visitor.visitPerformType(self)
            else:
                return visitor.visitChildren(self)




    def performType(self):

        localctx = Cobol85Parser.PerformTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 800, self.RULE_performType)
        try:
            self.state = 4760
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,697,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4757
                self.performTimes()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4758
                self.performUntil()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 4759
                self.performVarying()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PerformTimesContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.PerformTimesContext, self).__init__(parent, invokingState)
            self.parser = parser

        def TIMES(self):
            return self.getToken(Cobol85Parser.TIMES, 0)

        def identifier(self):
            return self.getTypedRuleContext(Cobol85Parser.IdentifierContext,0)


        def integerLiteral(self):
            return self.getTypedRuleContext(Cobol85Parser.IntegerLiteralContext,0)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_performTimes

        def enterRule(self, listener):
            if hasattr(listener, "enterPerformTimes"):
                listener.enterPerformTimes(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitPerformTimes"):
                listener.exitPerformTimes(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitPerformTimes"):
                return visitor.visitPerformTimes(self)
            else:
                return visitor.visitChildren(self)




    def performTimes(self):

        localctx = Cobol85Parser.PerformTimesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 802, self.RULE_performTimes)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4764
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,698,self._ctx)
            if la_ == 1:
                self.state = 4762
                self.identifier()
                pass

            elif la_ == 2:
                self.state = 4763
                self.integerLiteral()
                pass


            self.state = 4766
            self.match(Cobol85Parser.TIMES)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PerformUntilContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.PerformUntilContext, self).__init__(parent, invokingState)
            self.parser = parser

        def UNTIL(self):
            return self.getToken(Cobol85Parser.UNTIL, 0)

        def condition(self):
            return self.getTypedRuleContext(Cobol85Parser.ConditionContext,0)


        def performTestClause(self):
            return self.getTypedRuleContext(Cobol85Parser.PerformTestClauseContext,0)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_performUntil

        def enterRule(self, listener):
            if hasattr(listener, "enterPerformUntil"):
                listener.enterPerformUntil(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitPerformUntil"):
                listener.exitPerformUntil(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitPerformUntil"):
                return visitor.visitPerformUntil(self)
            else:
                return visitor.visitChildren(self)




    def performUntil(self):

        localctx = Cobol85Parser.PerformUntilContext(self, self._ctx, self.state)
        self.enterRule(localctx, 804, self.RULE_performUntil)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4769
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.TEST or _la==Cobol85Parser.WITH:
                self.state = 4768
                self.performTestClause()


            self.state = 4771
            self.match(Cobol85Parser.UNTIL)
            self.state = 4772
            self.condition()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PerformVaryingContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.PerformVaryingContext, self).__init__(parent, invokingState)
            self.parser = parser

        def performTestClause(self):
            return self.getTypedRuleContext(Cobol85Parser.PerformTestClauseContext,0)


        def performVaryingClause(self):
            return self.getTypedRuleContext(Cobol85Parser.PerformVaryingClauseContext,0)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_performVarying

        def enterRule(self, listener):
            if hasattr(listener, "enterPerformVarying"):
                listener.enterPerformVarying(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitPerformVarying"):
                listener.exitPerformVarying(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitPerformVarying"):
                return visitor.visitPerformVarying(self)
            else:
                return visitor.visitChildren(self)




    def performVarying(self):

        localctx = Cobol85Parser.PerformVaryingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 806, self.RULE_performVarying)
        try:
            self.state = 4781
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Cobol85Parser.TEST, Cobol85Parser.WITH]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4774
                self.performTestClause()
                self.state = 4775
                self.performVaryingClause()
                pass
            elif token in [Cobol85Parser.VARYING]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4777
                self.performVaryingClause()
                self.state = 4779
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,700,self._ctx)
                if la_ == 1:
                    self.state = 4778
                    self.performTestClause()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PerformVaryingClauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.PerformVaryingClauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def VARYING(self):
            return self.getToken(Cobol85Parser.VARYING, 0)

        def performVaryingPhrase(self):
            return self.getTypedRuleContext(Cobol85Parser.PerformVaryingPhraseContext,0)


        def performAfter(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.PerformAfterContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.PerformAfterContext,i)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_performVaryingClause

        def enterRule(self, listener):
            if hasattr(listener, "enterPerformVaryingClause"):
                listener.enterPerformVaryingClause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitPerformVaryingClause"):
                listener.exitPerformVaryingClause(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitPerformVaryingClause"):
                return visitor.visitPerformVaryingClause(self)
            else:
                return visitor.visitChildren(self)




    def performVaryingClause(self):

        localctx = Cobol85Parser.PerformVaryingClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 808, self.RULE_performVaryingClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4783
            self.match(Cobol85Parser.VARYING)
            self.state = 4784
            self.performVaryingPhrase()
            self.state = 4788
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==Cobol85Parser.AFTER:
                self.state = 4785
                self.performAfter()
                self.state = 4790
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PerformVaryingPhraseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.PerformVaryingPhraseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def performFrom(self):
            return self.getTypedRuleContext(Cobol85Parser.PerformFromContext,0)


        def performBy(self):
            return self.getTypedRuleContext(Cobol85Parser.PerformByContext,0)


        def performUntil(self):
            return self.getTypedRuleContext(Cobol85Parser.PerformUntilContext,0)


        def identifier(self):
            return self.getTypedRuleContext(Cobol85Parser.IdentifierContext,0)


        def literal(self):
            return self.getTypedRuleContext(Cobol85Parser.LiteralContext,0)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_performVaryingPhrase

        def enterRule(self, listener):
            if hasattr(listener, "enterPerformVaryingPhrase"):
                listener.enterPerformVaryingPhrase(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitPerformVaryingPhrase"):
                listener.exitPerformVaryingPhrase(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitPerformVaryingPhrase"):
                return visitor.visitPerformVaryingPhrase(self)
            else:
                return visitor.visitChildren(self)




    def performVaryingPhrase(self):

        localctx = Cobol85Parser.PerformVaryingPhraseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 810, self.RULE_performVaryingPhrase)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4793
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,703,self._ctx)
            if la_ == 1:
                self.state = 4791
                self.identifier()
                pass

            elif la_ == 2:
                self.state = 4792
                self.literal()
                pass


            self.state = 4795
            self.performFrom()
            self.state = 4796
            self.performBy()
            self.state = 4797
            self.performUntil()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PerformAfterContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.PerformAfterContext, self).__init__(parent, invokingState)
            self.parser = parser

        def AFTER(self):
            return self.getToken(Cobol85Parser.AFTER, 0)

        def performVaryingPhrase(self):
            return self.getTypedRuleContext(Cobol85Parser.PerformVaryingPhraseContext,0)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_performAfter

        def enterRule(self, listener):
            if hasattr(listener, "enterPerformAfter"):
                listener.enterPerformAfter(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitPerformAfter"):
                listener.exitPerformAfter(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitPerformAfter"):
                return visitor.visitPerformAfter(self)
            else:
                return visitor.visitChildren(self)




    def performAfter(self):

        localctx = Cobol85Parser.PerformAfterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 812, self.RULE_performAfter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4799
            self.match(Cobol85Parser.AFTER)
            self.state = 4800
            self.performVaryingPhrase()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PerformFromContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.PerformFromContext, self).__init__(parent, invokingState)
            self.parser = parser

        def FROM(self):
            return self.getToken(Cobol85Parser.FROM, 0)

        def identifier(self):
            return self.getTypedRuleContext(Cobol85Parser.IdentifierContext,0)


        def literal(self):
            return self.getTypedRuleContext(Cobol85Parser.LiteralContext,0)


        def arithmeticExpression(self):
            return self.getTypedRuleContext(Cobol85Parser.ArithmeticExpressionContext,0)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_performFrom

        def enterRule(self, listener):
            if hasattr(listener, "enterPerformFrom"):
                listener.enterPerformFrom(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitPerformFrom"):
                listener.exitPerformFrom(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitPerformFrom"):
                return visitor.visitPerformFrom(self)
            else:
                return visitor.visitChildren(self)




    def performFrom(self):

        localctx = Cobol85Parser.PerformFromContext(self, self._ctx, self.state)
        self.enterRule(localctx, 814, self.RULE_performFrom)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4802
            self.match(Cobol85Parser.FROM)
            self.state = 4806
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,704,self._ctx)
            if la_ == 1:
                self.state = 4803
                self.identifier()
                pass

            elif la_ == 2:
                self.state = 4804
                self.literal()
                pass

            elif la_ == 3:
                self.state = 4805
                self.arithmeticExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PerformByContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.PerformByContext, self).__init__(parent, invokingState)
            self.parser = parser

        def BY(self):
            return self.getToken(Cobol85Parser.BY, 0)

        def identifier(self):
            return self.getTypedRuleContext(Cobol85Parser.IdentifierContext,0)


        def literal(self):
            return self.getTypedRuleContext(Cobol85Parser.LiteralContext,0)


        def arithmeticExpression(self):
            return self.getTypedRuleContext(Cobol85Parser.ArithmeticExpressionContext,0)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_performBy

        def enterRule(self, listener):
            if hasattr(listener, "enterPerformBy"):
                listener.enterPerformBy(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitPerformBy"):
                listener.exitPerformBy(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitPerformBy"):
                return visitor.visitPerformBy(self)
            else:
                return visitor.visitChildren(self)




    def performBy(self):

        localctx = Cobol85Parser.PerformByContext(self, self._ctx, self.state)
        self.enterRule(localctx, 816, self.RULE_performBy)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4808
            self.match(Cobol85Parser.BY)
            self.state = 4812
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,705,self._ctx)
            if la_ == 1:
                self.state = 4809
                self.identifier()
                pass

            elif la_ == 2:
                self.state = 4810
                self.literal()
                pass

            elif la_ == 3:
                self.state = 4811
                self.arithmeticExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PerformTestClauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.PerformTestClauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def TEST(self):
            return self.getToken(Cobol85Parser.TEST, 0)

        def BEFORE(self):
            return self.getToken(Cobol85Parser.BEFORE, 0)

        def AFTER(self):
            return self.getToken(Cobol85Parser.AFTER, 0)

        def WITH(self):
            return self.getToken(Cobol85Parser.WITH, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_performTestClause

        def enterRule(self, listener):
            if hasattr(listener, "enterPerformTestClause"):
                listener.enterPerformTestClause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitPerformTestClause"):
                listener.exitPerformTestClause(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitPerformTestClause"):
                return visitor.visitPerformTestClause(self)
            else:
                return visitor.visitChildren(self)




    def performTestClause(self):

        localctx = Cobol85Parser.PerformTestClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 818, self.RULE_performTestClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4815
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.WITH:
                self.state = 4814
                self.match(Cobol85Parser.WITH)


            self.state = 4817
            self.match(Cobol85Parser.TEST)
            self.state = 4818
            _la = self._input.LA(1)
            if not(_la==Cobol85Parser.AFTER or _la==Cobol85Parser.BEFORE):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PurgeStatementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.PurgeStatementContext, self).__init__(parent, invokingState)
            self.parser = parser

        def PURGE(self):
            return self.getToken(Cobol85Parser.PURGE, 0)

        def cdName(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.CdNameContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.CdNameContext,i)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_purgeStatement

        def enterRule(self, listener):
            if hasattr(listener, "enterPurgeStatement"):
                listener.enterPurgeStatement(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitPurgeStatement"):
                listener.exitPurgeStatement(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitPurgeStatement"):
                return visitor.visitPurgeStatement(self)
            else:
                return visitor.visitChildren(self)




    def purgeStatement(self):

        localctx = Cobol85Parser.PurgeStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 820, self.RULE_purgeStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4820
            self.match(Cobol85Parser.PURGE)
            self.state = 4822 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 4821
                self.cdName()
                self.state = 4824 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE) | (1 << Cobol85Parser.AUTO) | (1 << Cobol85Parser.AUTO_SKIP) | (1 << Cobol85Parser.BACKGROUND_COLOR) | (1 << Cobol85Parser.BACKGROUND_COLOUR) | (1 << Cobol85Parser.BEEP) | (1 << Cobol85Parser.BELL) | (1 << Cobol85Parser.BINARY) | (1 << Cobol85Parser.BIT) | (1 << Cobol85Parser.BLINK) | (1 << Cobol85Parser.BLOB) | (1 << Cobol85Parser.BOUNDS) | (1 << Cobol85Parser.CAPABLE) | (1 << Cobol85Parser.CCSVERSION) | (1 << Cobol85Parser.CHANGED) | (1 << Cobol85Parser.CHANNEL))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (Cobol85Parser.CLOB - 67)) | (1 << (Cobol85Parser.CLOSE_DISPOSITION - 67)) | (1 << (Cobol85Parser.COBOL - 67)) | (1 << (Cobol85Parser.COMMITMENT - 67)) | (1 << (Cobol85Parser.CONTROL_POINT - 67)) | (1 << (Cobol85Parser.CONVENTION - 67)) | (1 << (Cobol85Parser.CRUNCH - 67)) | (1 << (Cobol85Parser.CURSOR - 67)) | (1 << (Cobol85Parser.DBCLOB - 67)))) != 0) or ((((_la - 131)) & ~0x3f) == 0 and ((1 << (_la - 131)) & ((1 << (Cobol85Parser.DEFAULT - 131)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 131)) | (1 << (Cobol85Parser.DEFINITION - 131)) | (1 << (Cobol85Parser.DFHRESP - 131)) | (1 << (Cobol85Parser.DFHVALUE - 131)) | (1 << (Cobol85Parser.DISK - 131)) | (1 << (Cobol85Parser.DONTCARE - 131)) | (1 << (Cobol85Parser.DOUBLE - 131)) | (1 << (Cobol85Parser.EBCDIC - 131)) | (1 << (Cobol85Parser.EMPTY_CHECK - 131)) | (1 << (Cobol85Parser.ENTER - 131)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 131)) | (1 << (Cobol85Parser.ERASE - 131)) | (1 << (Cobol85Parser.EOL - 131)) | (1 << (Cobol85Parser.EOS - 131)))) != 0) or ((((_la - 195)) & ~0x3f) == 0 and ((1 << (_la - 195)) & ((1 << (Cobol85Parser.ESCAPE - 195)) | (1 << (Cobol85Parser.EVENT - 195)) | (1 << (Cobol85Parser.EXCLUSIVE - 195)) | (1 << (Cobol85Parser.EXPORT - 195)) | (1 << (Cobol85Parser.EXTENDED - 195)) | (1 << (Cobol85Parser.FOREGROUND_COLOR - 195)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 195)) | (1 << (Cobol85Parser.FULL - 195)) | (1 << (Cobol85Parser.FUNCTIONNAME - 195)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 195)) | (1 << (Cobol85Parser.GRID - 195)) | (1 << (Cobol85Parser.HIGHLIGHT - 195)) | (1 << (Cobol85Parser.IMPLICIT - 195)) | (1 << (Cobol85Parser.IMPORT - 195)) | (1 << (Cobol85Parser.INTEGER - 195)))) != 0) or ((((_la - 262)) & ~0x3f) == 0 and ((1 << (_la - 262)) & ((1 << (Cobol85Parser.KEPT - 262)) | (1 << (Cobol85Parser.KEYBOARD - 262)) | (1 << (Cobol85Parser.LANGUAGE - 262)) | (1 << (Cobol85Parser.LB - 262)) | (1 << (Cobol85Parser.LD - 262)) | (1 << (Cobol85Parser.LEFTLINE - 262)) | (1 << (Cobol85Parser.LENGTH_CHECK - 262)) | (1 << (Cobol85Parser.LIBACCESS - 262)) | (1 << (Cobol85Parser.LIBPARAMETER - 262)) | (1 << (Cobol85Parser.LIBRARY - 262)) | (1 << (Cobol85Parser.LIST - 262)) | (1 << (Cobol85Parser.LOCAL - 262)) | (1 << (Cobol85Parser.LONG_DATE - 262)) | (1 << (Cobol85Parser.LONG_TIME - 262)) | (1 << (Cobol85Parser.LOWER - 262)) | (1 << (Cobol85Parser.LOWLIGHT - 262)) | (1 << (Cobol85Parser.MMDDYYYY - 262)) | (1 << (Cobol85Parser.NAMED - 262)) | (1 << (Cobol85Parser.NATIONAL - 262)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 262)) | (1 << (Cobol85Parser.NETWORK - 262)) | (1 << (Cobol85Parser.NO_ECHO - 262)) | (1 << (Cobol85Parser.NUMERIC_DATE - 262)) | (1 << (Cobol85Parser.NUMERIC_TIME - 262)))) != 0) or ((((_la - 326)) & ~0x3f) == 0 and ((1 << (_la - 326)) & ((1 << (Cobol85Parser.ODT - 326)) | (1 << (Cobol85Parser.ORDERLY - 326)) | (1 << (Cobol85Parser.OVERLINE - 326)) | (1 << (Cobol85Parser.OWN - 326)) | (1 << (Cobol85Parser.PASSWORD - 326)) | (1 << (Cobol85Parser.PORT - 326)) | (1 << (Cobol85Parser.PRINTER - 326)) | (1 << (Cobol85Parser.PRIVATE - 326)) | (1 << (Cobol85Parser.PROCESS - 326)) | (1 << (Cobol85Parser.PROGRAM - 326)) | (1 << (Cobol85Parser.PROMPT - 326)) | (1 << (Cobol85Parser.READER - 326)) | (1 << (Cobol85Parser.REMOTE - 326)) | (1 << (Cobol85Parser.REAL - 326)) | (1 << (Cobol85Parser.RECEIVED - 326)) | (1 << (Cobol85Parser.RECURSIVE - 326)) | (1 << (Cobol85Parser.REF - 326)))) != 0) or ((((_la - 395)) & ~0x3f) == 0 and ((1 << (_la - 395)) & ((1 << (Cobol85Parser.REMOVE - 395)) | (1 << (Cobol85Parser.REQUIRED - 395)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 395)) | (1 << (Cobol85Parser.SAVE - 395)) | (1 << (Cobol85Parser.SECURE - 395)) | (1 << (Cobol85Parser.SHARED - 395)) | (1 << (Cobol85Parser.SHAREDBYALL - 395)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 395)) | (1 << (Cobol85Parser.SHARING - 395)) | (1 << (Cobol85Parser.SHORT_DATE - 395)) | (1 << (Cobol85Parser.SQL - 395)))) != 0) or ((((_la - 471)) & ~0x3f) == 0 and ((1 << (_la - 471)) & ((1 << (Cobol85Parser.SYMBOL - 471)) | (1 << (Cobol85Parser.TASK - 471)) | (1 << (Cobol85Parser.THREAD - 471)) | (1 << (Cobol85Parser.THREAD_LOCAL - 471)) | (1 << (Cobol85Parser.TIMER - 471)) | (1 << (Cobol85Parser.TODAYS_DATE - 471)) | (1 << (Cobol85Parser.TODAYS_NAME - 471)) | (1 << (Cobol85Parser.TRUNCATED - 471)) | (1 << (Cobol85Parser.TYPEDEF - 471)) | (1 << (Cobol85Parser.UNDERLINE - 471)) | (1 << (Cobol85Parser.VIRTUAL - 471)) | (1 << (Cobol85Parser.WAIT - 471)) | (1 << (Cobol85Parser.YEAR - 471)) | (1 << (Cobol85Parser.YYYYMMDD - 471)) | (1 << (Cobol85Parser.YYYYDDD - 471)) | (1 << (Cobol85Parser.ZERO_FILL - 471)))) != 0) or _la==Cobol85Parser.IDENTIFIER):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ReadStatementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.ReadStatementContext, self).__init__(parent, invokingState)
            self.parser = parser

        def READ(self):
            return self.getToken(Cobol85Parser.READ, 0)

        def fileName(self):
            return self.getTypedRuleContext(Cobol85Parser.FileNameContext,0)


        def NEXT(self):
            return self.getToken(Cobol85Parser.NEXT, 0)

        def RECORD(self):
            return self.getToken(Cobol85Parser.RECORD, 0)

        def readInto(self):
            return self.getTypedRuleContext(Cobol85Parser.ReadIntoContext,0)


        def readWith(self):
            return self.getTypedRuleContext(Cobol85Parser.ReadWithContext,0)


        def readKey(self):
            return self.getTypedRuleContext(Cobol85Parser.ReadKeyContext,0)


        def invalidKeyPhrase(self):
            return self.getTypedRuleContext(Cobol85Parser.InvalidKeyPhraseContext,0)


        def notInvalidKeyPhrase(self):
            return self.getTypedRuleContext(Cobol85Parser.NotInvalidKeyPhraseContext,0)


        def atEndPhrase(self):
            return self.getTypedRuleContext(Cobol85Parser.AtEndPhraseContext,0)


        def notAtEndPhrase(self):
            return self.getTypedRuleContext(Cobol85Parser.NotAtEndPhraseContext,0)


        def END_READ(self):
            return self.getToken(Cobol85Parser.END_READ, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_readStatement

        def enterRule(self, listener):
            if hasattr(listener, "enterReadStatement"):
                listener.enterReadStatement(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitReadStatement"):
                listener.exitReadStatement(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitReadStatement"):
                return visitor.visitReadStatement(self)
            else:
                return visitor.visitChildren(self)




    def readStatement(self):

        localctx = Cobol85Parser.ReadStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 822, self.RULE_readStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4826
            self.match(Cobol85Parser.READ)
            self.state = 4827
            self.fileName()
            self.state = 4829
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.NEXT:
                self.state = 4828
                self.match(Cobol85Parser.NEXT)


            self.state = 4832
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.RECORD:
                self.state = 4831
                self.match(Cobol85Parser.RECORD)


            self.state = 4835
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.INTO:
                self.state = 4834
                self.readInto()


            self.state = 4838
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,711,self._ctx)
            if la_ == 1:
                self.state = 4837
                self.readWith()


            self.state = 4841
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.KEY:
                self.state = 4840
                self.readKey()


            self.state = 4844
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,713,self._ctx)
            if la_ == 1:
                self.state = 4843
                self.invalidKeyPhrase()


            self.state = 4847
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,714,self._ctx)
            if la_ == 1:
                self.state = 4846
                self.notInvalidKeyPhrase()


            self.state = 4850
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,715,self._ctx)
            if la_ == 1:
                self.state = 4849
                self.atEndPhrase()


            self.state = 4853
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,716,self._ctx)
            if la_ == 1:
                self.state = 4852
                self.notAtEndPhrase()


            self.state = 4856
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,717,self._ctx)
            if la_ == 1:
                self.state = 4855
                self.match(Cobol85Parser.END_READ)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ReadIntoContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.ReadIntoContext, self).__init__(parent, invokingState)
            self.parser = parser

        def INTO(self):
            return self.getToken(Cobol85Parser.INTO, 0)

        def identifier(self):
            return self.getTypedRuleContext(Cobol85Parser.IdentifierContext,0)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_readInto

        def enterRule(self, listener):
            if hasattr(listener, "enterReadInto"):
                listener.enterReadInto(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitReadInto"):
                listener.exitReadInto(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitReadInto"):
                return visitor.visitReadInto(self)
            else:
                return visitor.visitChildren(self)




    def readInto(self):

        localctx = Cobol85Parser.ReadIntoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 824, self.RULE_readInto)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4858
            self.match(Cobol85Parser.INTO)
            self.state = 4859
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ReadWithContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.ReadWithContext, self).__init__(parent, invokingState)
            self.parser = parser

        def LOCK(self):
            return self.getToken(Cobol85Parser.LOCK, 0)

        def WAIT(self):
            return self.getToken(Cobol85Parser.WAIT, 0)

        def WITH(self):
            return self.getToken(Cobol85Parser.WITH, 0)

        def KEPT(self):
            return self.getToken(Cobol85Parser.KEPT, 0)

        def NO(self):
            return self.getToken(Cobol85Parser.NO, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_readWith

        def enterRule(self, listener):
            if hasattr(listener, "enterReadWith"):
                listener.enterReadWith(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitReadWith"):
                listener.exitReadWith(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitReadWith"):
                return visitor.visitReadWith(self)
            else:
                return visitor.visitChildren(self)




    def readWith(self):

        localctx = Cobol85Parser.ReadWithContext(self, self._ctx, self.state)
        self.enterRule(localctx, 826, self.RULE_readWith)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4862
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.WITH:
                self.state = 4861
                self.match(Cobol85Parser.WITH)


            self.state = 4867
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Cobol85Parser.KEPT, Cobol85Parser.NO]:
                self.state = 4864
                _la = self._input.LA(1)
                if not(_la==Cobol85Parser.KEPT or _la==Cobol85Parser.NO):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 4865
                self.match(Cobol85Parser.LOCK)
                pass
            elif token in [Cobol85Parser.WAIT]:
                self.state = 4866
                self.match(Cobol85Parser.WAIT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ReadKeyContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.ReadKeyContext, self).__init__(parent, invokingState)
            self.parser = parser

        def KEY(self):
            return self.getToken(Cobol85Parser.KEY, 0)

        def qualifiedDataName(self):
            return self.getTypedRuleContext(Cobol85Parser.QualifiedDataNameContext,0)


        def IS(self):
            return self.getToken(Cobol85Parser.IS, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_readKey

        def enterRule(self, listener):
            if hasattr(listener, "enterReadKey"):
                listener.enterReadKey(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitReadKey"):
                listener.exitReadKey(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitReadKey"):
                return visitor.visitReadKey(self)
            else:
                return visitor.visitChildren(self)




    def readKey(self):

        localctx = Cobol85Parser.ReadKeyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 828, self.RULE_readKey)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4869
            self.match(Cobol85Parser.KEY)
            self.state = 4871
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.IS:
                self.state = 4870
                self.match(Cobol85Parser.IS)


            self.state = 4873
            self.qualifiedDataName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ReceiveStatementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.ReceiveStatementContext, self).__init__(parent, invokingState)
            self.parser = parser

        def RECEIVE(self):
            return self.getToken(Cobol85Parser.RECEIVE, 0)

        def receiveFromStatement(self):
            return self.getTypedRuleContext(Cobol85Parser.ReceiveFromStatementContext,0)


        def receiveIntoStatement(self):
            return self.getTypedRuleContext(Cobol85Parser.ReceiveIntoStatementContext,0)


        def onExceptionClause(self):
            return self.getTypedRuleContext(Cobol85Parser.OnExceptionClauseContext,0)


        def notOnExceptionClause(self):
            return self.getTypedRuleContext(Cobol85Parser.NotOnExceptionClauseContext,0)


        def END_RECEIVE(self):
            return self.getToken(Cobol85Parser.END_RECEIVE, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_receiveStatement

        def enterRule(self, listener):
            if hasattr(listener, "enterReceiveStatement"):
                listener.enterReceiveStatement(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitReceiveStatement"):
                listener.exitReceiveStatement(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitReceiveStatement"):
                return visitor.visitReceiveStatement(self)
            else:
                return visitor.visitChildren(self)




    def receiveStatement(self):

        localctx = Cobol85Parser.ReceiveStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 830, self.RULE_receiveStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4875
            self.match(Cobol85Parser.RECEIVE)
            self.state = 4878
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,721,self._ctx)
            if la_ == 1:
                self.state = 4876
                self.receiveFromStatement()
                pass

            elif la_ == 2:
                self.state = 4877
                self.receiveIntoStatement()
                pass


            self.state = 4881
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,722,self._ctx)
            if la_ == 1:
                self.state = 4880
                self.onExceptionClause()


            self.state = 4884
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,723,self._ctx)
            if la_ == 1:
                self.state = 4883
                self.notOnExceptionClause()


            self.state = 4887
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,724,self._ctx)
            if la_ == 1:
                self.state = 4886
                self.match(Cobol85Parser.END_RECEIVE)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ReceiveFromStatementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.ReceiveFromStatementContext, self).__init__(parent, invokingState)
            self.parser = parser

        def dataName(self):
            return self.getTypedRuleContext(Cobol85Parser.DataNameContext,0)


        def FROM(self):
            return self.getToken(Cobol85Parser.FROM, 0)

        def receiveFrom(self):
            return self.getTypedRuleContext(Cobol85Parser.ReceiveFromContext,0)


        def receiveBefore(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.ReceiveBeforeContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.ReceiveBeforeContext,i)


        def receiveWith(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.ReceiveWithContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.ReceiveWithContext,i)


        def receiveThread(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.ReceiveThreadContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.ReceiveThreadContext,i)


        def receiveSize(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.ReceiveSizeContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.ReceiveSizeContext,i)


        def receiveStatus(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.ReceiveStatusContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.ReceiveStatusContext,i)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_receiveFromStatement

        def enterRule(self, listener):
            if hasattr(listener, "enterReceiveFromStatement"):
                listener.enterReceiveFromStatement(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitReceiveFromStatement"):
                listener.exitReceiveFromStatement(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitReceiveFromStatement"):
                return visitor.visitReceiveFromStatement(self)
            else:
                return visitor.visitChildren(self)




    def receiveFromStatement(self):

        localctx = Cobol85Parser.ReceiveFromStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 832, self.RULE_receiveFromStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4889
            self.dataName()
            self.state = 4890
            self.match(Cobol85Parser.FROM)
            self.state = 4891
            self.receiveFrom()
            self.state = 4899
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,726,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 4897
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [Cobol85Parser.BEFORE]:
                        self.state = 4892
                        self.receiveBefore()
                        pass
                    elif token in [Cobol85Parser.NO, Cobol85Parser.WITH]:
                        self.state = 4893
                        self.receiveWith()
                        pass
                    elif token in [Cobol85Parser.THREAD]:
                        self.state = 4894
                        self.receiveThread()
                        pass
                    elif token in [Cobol85Parser.SIZE]:
                        self.state = 4895
                        self.receiveSize()
                        pass
                    elif token in [Cobol85Parser.STATUS]:
                        self.state = 4896
                        self.receiveStatus()
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 4901
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,726,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ReceiveFromContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.ReceiveFromContext, self).__init__(parent, invokingState)
            self.parser = parser

        def THREAD(self):
            return self.getToken(Cobol85Parser.THREAD, 0)

        def dataName(self):
            return self.getTypedRuleContext(Cobol85Parser.DataNameContext,0)


        def LAST(self):
            return self.getToken(Cobol85Parser.LAST, 0)

        def ANY(self):
            return self.getToken(Cobol85Parser.ANY, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_receiveFrom

        def enterRule(self, listener):
            if hasattr(listener, "enterReceiveFrom"):
                listener.enterReceiveFrom(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitReceiveFrom"):
                listener.exitReceiveFrom(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitReceiveFrom"):
                return visitor.visitReceiveFrom(self)
            else:
                return visitor.visitChildren(self)




    def receiveFrom(self):

        localctx = Cobol85Parser.ReceiveFromContext(self, self._ctx, self.state)
        self.enterRule(localctx, 834, self.RULE_receiveFrom)
        try:
            self.state = 4908
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Cobol85Parser.THREAD]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4902
                self.match(Cobol85Parser.THREAD)
                self.state = 4903
                self.dataName()
                pass
            elif token in [Cobol85Parser.LAST]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4904
                self.match(Cobol85Parser.LAST)
                self.state = 4905
                self.match(Cobol85Parser.THREAD)
                pass
            elif token in [Cobol85Parser.ANY]:
                self.enterOuterAlt(localctx, 3)
                self.state = 4906
                self.match(Cobol85Parser.ANY)
                self.state = 4907
                self.match(Cobol85Parser.THREAD)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ReceiveIntoStatementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.ReceiveIntoStatementContext, self).__init__(parent, invokingState)
            self.parser = parser

        def cdName(self):
            return self.getTypedRuleContext(Cobol85Parser.CdNameContext,0)


        def identifier(self):
            return self.getTypedRuleContext(Cobol85Parser.IdentifierContext,0)


        def MESSAGE(self):
            return self.getToken(Cobol85Parser.MESSAGE, 0)

        def SEGMENT(self):
            return self.getToken(Cobol85Parser.SEGMENT, 0)

        def INTO(self):
            return self.getToken(Cobol85Parser.INTO, 0)

        def receiveNoData(self):
            return self.getTypedRuleContext(Cobol85Parser.ReceiveNoDataContext,0)


        def receiveWithData(self):
            return self.getTypedRuleContext(Cobol85Parser.ReceiveWithDataContext,0)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_receiveIntoStatement

        def enterRule(self, listener):
            if hasattr(listener, "enterReceiveIntoStatement"):
                listener.enterReceiveIntoStatement(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitReceiveIntoStatement"):
                listener.exitReceiveIntoStatement(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitReceiveIntoStatement"):
                return visitor.visitReceiveIntoStatement(self)
            else:
                return visitor.visitChildren(self)




    def receiveIntoStatement(self):

        localctx = Cobol85Parser.ReceiveIntoStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 836, self.RULE_receiveIntoStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4910
            self.cdName()
            self.state = 4911
            _la = self._input.LA(1)
            if not(_la==Cobol85Parser.MESSAGE or _la==Cobol85Parser.SEGMENT):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 4913
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.INTO:
                self.state = 4912
                self.match(Cobol85Parser.INTO)


            self.state = 4915
            self.identifier()
            self.state = 4917
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.NO:
                self.state = 4916
                self.receiveNoData()


            self.state = 4920
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,730,self._ctx)
            if la_ == 1:
                self.state = 4919
                self.receiveWithData()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ReceiveNoDataContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.ReceiveNoDataContext, self).__init__(parent, invokingState)
            self.parser = parser

        def NO(self):
            return self.getToken(Cobol85Parser.NO, 0)

        def DATA(self):
            return self.getToken(Cobol85Parser.DATA, 0)

        def statement(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.StatementContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.StatementContext,i)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_receiveNoData

        def enterRule(self, listener):
            if hasattr(listener, "enterReceiveNoData"):
                listener.enterReceiveNoData(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitReceiveNoData"):
                listener.exitReceiveNoData(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitReceiveNoData"):
                return visitor.visitReceiveNoData(self)
            else:
                return visitor.visitChildren(self)




    def receiveNoData(self):

        localctx = Cobol85Parser.ReceiveNoDataContext(self, self._ctx, self.state)
        self.enterRule(localctx, 838, self.RULE_receiveNoData)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4922
            self.match(Cobol85Parser.NO)
            self.state = 4923
            self.match(Cobol85Parser.DATA)
            self.state = 4927
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,731,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 4924
                    self.statement() 
                self.state = 4929
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,731,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ReceiveWithDataContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.ReceiveWithDataContext, self).__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(Cobol85Parser.WITH, 0)

        def DATA(self):
            return self.getToken(Cobol85Parser.DATA, 0)

        def statement(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.StatementContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.StatementContext,i)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_receiveWithData

        def enterRule(self, listener):
            if hasattr(listener, "enterReceiveWithData"):
                listener.enterReceiveWithData(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitReceiveWithData"):
                listener.exitReceiveWithData(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitReceiveWithData"):
                return visitor.visitReceiveWithData(self)
            else:
                return visitor.visitChildren(self)




    def receiveWithData(self):

        localctx = Cobol85Parser.ReceiveWithDataContext(self, self._ctx, self.state)
        self.enterRule(localctx, 840, self.RULE_receiveWithData)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4930
            self.match(Cobol85Parser.WITH)
            self.state = 4931
            self.match(Cobol85Parser.DATA)
            self.state = 4935
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,732,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 4932
                    self.statement() 
                self.state = 4937
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,732,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ReceiveBeforeContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.ReceiveBeforeContext, self).__init__(parent, invokingState)
            self.parser = parser

        def BEFORE(self):
            return self.getToken(Cobol85Parser.BEFORE, 0)

        def numericLiteral(self):
            return self.getTypedRuleContext(Cobol85Parser.NumericLiteralContext,0)


        def identifier(self):
            return self.getTypedRuleContext(Cobol85Parser.IdentifierContext,0)


        def TIME(self):
            return self.getToken(Cobol85Parser.TIME, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_receiveBefore

        def enterRule(self, listener):
            if hasattr(listener, "enterReceiveBefore"):
                listener.enterReceiveBefore(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitReceiveBefore"):
                listener.exitReceiveBefore(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitReceiveBefore"):
                return visitor.visitReceiveBefore(self)
            else:
                return visitor.visitChildren(self)




    def receiveBefore(self):

        localctx = Cobol85Parser.ReceiveBeforeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 842, self.RULE_receiveBefore)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4938
            self.match(Cobol85Parser.BEFORE)
            self.state = 4940
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,733,self._ctx)
            if la_ == 1:
                self.state = 4939
                self.match(Cobol85Parser.TIME)


            self.state = 4944
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,734,self._ctx)
            if la_ == 1:
                self.state = 4942
                self.numericLiteral()
                pass

            elif la_ == 2:
                self.state = 4943
                self.identifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ReceiveWithContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.ReceiveWithContext, self).__init__(parent, invokingState)
            self.parser = parser

        def NO(self):
            return self.getToken(Cobol85Parser.NO, 0)

        def WAIT(self):
            return self.getToken(Cobol85Parser.WAIT, 0)

        def WITH(self):
            return self.getToken(Cobol85Parser.WITH, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_receiveWith

        def enterRule(self, listener):
            if hasattr(listener, "enterReceiveWith"):
                listener.enterReceiveWith(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitReceiveWith"):
                listener.exitReceiveWith(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitReceiveWith"):
                return visitor.visitReceiveWith(self)
            else:
                return visitor.visitChildren(self)




    def receiveWith(self):

        localctx = Cobol85Parser.ReceiveWithContext(self, self._ctx, self.state)
        self.enterRule(localctx, 844, self.RULE_receiveWith)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4947
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.WITH:
                self.state = 4946
                self.match(Cobol85Parser.WITH)


            self.state = 4949
            self.match(Cobol85Parser.NO)
            self.state = 4950
            self.match(Cobol85Parser.WAIT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ReceiveThreadContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.ReceiveThreadContext, self).__init__(parent, invokingState)
            self.parser = parser

        def THREAD(self):
            return self.getToken(Cobol85Parser.THREAD, 0)

        def dataName(self):
            return self.getTypedRuleContext(Cobol85Parser.DataNameContext,0)


        def IN(self):
            return self.getToken(Cobol85Parser.IN, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_receiveThread

        def enterRule(self, listener):
            if hasattr(listener, "enterReceiveThread"):
                listener.enterReceiveThread(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitReceiveThread"):
                listener.exitReceiveThread(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitReceiveThread"):
                return visitor.visitReceiveThread(self)
            else:
                return visitor.visitChildren(self)




    def receiveThread(self):

        localctx = Cobol85Parser.ReceiveThreadContext(self, self._ctx, self.state)
        self.enterRule(localctx, 846, self.RULE_receiveThread)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4952
            self.match(Cobol85Parser.THREAD)
            self.state = 4954
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.IN:
                self.state = 4953
                self.match(Cobol85Parser.IN)


            self.state = 4956
            self.dataName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ReceiveSizeContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.ReceiveSizeContext, self).__init__(parent, invokingState)
            self.parser = parser

        def SIZE(self):
            return self.getToken(Cobol85Parser.SIZE, 0)

        def numericLiteral(self):
            return self.getTypedRuleContext(Cobol85Parser.NumericLiteralContext,0)


        def identifier(self):
            return self.getTypedRuleContext(Cobol85Parser.IdentifierContext,0)


        def IN(self):
            return self.getToken(Cobol85Parser.IN, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_receiveSize

        def enterRule(self, listener):
            if hasattr(listener, "enterReceiveSize"):
                listener.enterReceiveSize(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitReceiveSize"):
                listener.exitReceiveSize(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitReceiveSize"):
                return visitor.visitReceiveSize(self)
            else:
                return visitor.visitChildren(self)




    def receiveSize(self):

        localctx = Cobol85Parser.ReceiveSizeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 848, self.RULE_receiveSize)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4958
            self.match(Cobol85Parser.SIZE)
            self.state = 4960
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.IN:
                self.state = 4959
                self.match(Cobol85Parser.IN)


            self.state = 4964
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,738,self._ctx)
            if la_ == 1:
                self.state = 4962
                self.numericLiteral()
                pass

            elif la_ == 2:
                self.state = 4963
                self.identifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ReceiveStatusContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.ReceiveStatusContext, self).__init__(parent, invokingState)
            self.parser = parser

        def STATUS(self):
            return self.getToken(Cobol85Parser.STATUS, 0)

        def identifier(self):
            return self.getTypedRuleContext(Cobol85Parser.IdentifierContext,0)


        def IN(self):
            return self.getToken(Cobol85Parser.IN, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_receiveStatus

        def enterRule(self, listener):
            if hasattr(listener, "enterReceiveStatus"):
                listener.enterReceiveStatus(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitReceiveStatus"):
                listener.exitReceiveStatus(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitReceiveStatus"):
                return visitor.visitReceiveStatus(self)
            else:
                return visitor.visitChildren(self)




    def receiveStatus(self):

        localctx = Cobol85Parser.ReceiveStatusContext(self, self._ctx, self.state)
        self.enterRule(localctx, 850, self.RULE_receiveStatus)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4966
            self.match(Cobol85Parser.STATUS)
            self.state = 4968
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.IN:
                self.state = 4967
                self.match(Cobol85Parser.IN)


            self.state = 4970
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ReleaseStatementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.ReleaseStatementContext, self).__init__(parent, invokingState)
            self.parser = parser

        def RELEASE(self):
            return self.getToken(Cobol85Parser.RELEASE, 0)

        def recordName(self):
            return self.getTypedRuleContext(Cobol85Parser.RecordNameContext,0)


        def FROM(self):
            return self.getToken(Cobol85Parser.FROM, 0)

        def qualifiedDataName(self):
            return self.getTypedRuleContext(Cobol85Parser.QualifiedDataNameContext,0)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_releaseStatement

        def enterRule(self, listener):
            if hasattr(listener, "enterReleaseStatement"):
                listener.enterReleaseStatement(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitReleaseStatement"):
                listener.exitReleaseStatement(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitReleaseStatement"):
                return visitor.visitReleaseStatement(self)
            else:
                return visitor.visitChildren(self)




    def releaseStatement(self):

        localctx = Cobol85Parser.ReleaseStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 852, self.RULE_releaseStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4972
            self.match(Cobol85Parser.RELEASE)
            self.state = 4973
            self.recordName()
            self.state = 4976
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.FROM:
                self.state = 4974
                self.match(Cobol85Parser.FROM)
                self.state = 4975
                self.qualifiedDataName()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ReturnStatementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.ReturnStatementContext, self).__init__(parent, invokingState)
            self.parser = parser

        def RETURN(self):
            return self.getToken(Cobol85Parser.RETURN, 0)

        def fileName(self):
            return self.getTypedRuleContext(Cobol85Parser.FileNameContext,0)


        def atEndPhrase(self):
            return self.getTypedRuleContext(Cobol85Parser.AtEndPhraseContext,0)


        def RECORD(self):
            return self.getToken(Cobol85Parser.RECORD, 0)

        def returnInto(self):
            return self.getTypedRuleContext(Cobol85Parser.ReturnIntoContext,0)


        def notAtEndPhrase(self):
            return self.getTypedRuleContext(Cobol85Parser.NotAtEndPhraseContext,0)


        def END_RETURN(self):
            return self.getToken(Cobol85Parser.END_RETURN, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_returnStatement

        def enterRule(self, listener):
            if hasattr(listener, "enterReturnStatement"):
                listener.enterReturnStatement(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitReturnStatement"):
                listener.exitReturnStatement(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitReturnStatement"):
                return visitor.visitReturnStatement(self)
            else:
                return visitor.visitChildren(self)




    def returnStatement(self):

        localctx = Cobol85Parser.ReturnStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 854, self.RULE_returnStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4978
            self.match(Cobol85Parser.RETURN)
            self.state = 4979
            self.fileName()
            self.state = 4981
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.RECORD:
                self.state = 4980
                self.match(Cobol85Parser.RECORD)


            self.state = 4984
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.INTO:
                self.state = 4983
                self.returnInto()


            self.state = 4986
            self.atEndPhrase()
            self.state = 4988
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,743,self._ctx)
            if la_ == 1:
                self.state = 4987
                self.notAtEndPhrase()


            self.state = 4991
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,744,self._ctx)
            if la_ == 1:
                self.state = 4990
                self.match(Cobol85Parser.END_RETURN)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ReturnIntoContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.ReturnIntoContext, self).__init__(parent, invokingState)
            self.parser = parser

        def INTO(self):
            return self.getToken(Cobol85Parser.INTO, 0)

        def qualifiedDataName(self):
            return self.getTypedRuleContext(Cobol85Parser.QualifiedDataNameContext,0)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_returnInto

        def enterRule(self, listener):
            if hasattr(listener, "enterReturnInto"):
                listener.enterReturnInto(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitReturnInto"):
                listener.exitReturnInto(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitReturnInto"):
                return visitor.visitReturnInto(self)
            else:
                return visitor.visitChildren(self)




    def returnInto(self):

        localctx = Cobol85Parser.ReturnIntoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 856, self.RULE_returnInto)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4993
            self.match(Cobol85Parser.INTO)
            self.state = 4994
            self.qualifiedDataName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RewriteStatementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.RewriteStatementContext, self).__init__(parent, invokingState)
            self.parser = parser

        def REWRITE(self):
            return self.getToken(Cobol85Parser.REWRITE, 0)

        def recordName(self):
            return self.getTypedRuleContext(Cobol85Parser.RecordNameContext,0)


        def rewriteFrom(self):
            return self.getTypedRuleContext(Cobol85Parser.RewriteFromContext,0)


        def invalidKeyPhrase(self):
            return self.getTypedRuleContext(Cobol85Parser.InvalidKeyPhraseContext,0)


        def notInvalidKeyPhrase(self):
            return self.getTypedRuleContext(Cobol85Parser.NotInvalidKeyPhraseContext,0)


        def END_REWRITE(self):
            return self.getToken(Cobol85Parser.END_REWRITE, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_rewriteStatement

        def enterRule(self, listener):
            if hasattr(listener, "enterRewriteStatement"):
                listener.enterRewriteStatement(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitRewriteStatement"):
                listener.exitRewriteStatement(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitRewriteStatement"):
                return visitor.visitRewriteStatement(self)
            else:
                return visitor.visitChildren(self)




    def rewriteStatement(self):

        localctx = Cobol85Parser.RewriteStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 858, self.RULE_rewriteStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4996
            self.match(Cobol85Parser.REWRITE)
            self.state = 4997
            self.recordName()
            self.state = 4999
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.FROM:
                self.state = 4998
                self.rewriteFrom()


            self.state = 5002
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,746,self._ctx)
            if la_ == 1:
                self.state = 5001
                self.invalidKeyPhrase()


            self.state = 5005
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,747,self._ctx)
            if la_ == 1:
                self.state = 5004
                self.notInvalidKeyPhrase()


            self.state = 5008
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,748,self._ctx)
            if la_ == 1:
                self.state = 5007
                self.match(Cobol85Parser.END_REWRITE)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RewriteFromContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.RewriteFromContext, self).__init__(parent, invokingState)
            self.parser = parser

        def FROM(self):
            return self.getToken(Cobol85Parser.FROM, 0)

        def identifier(self):
            return self.getTypedRuleContext(Cobol85Parser.IdentifierContext,0)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_rewriteFrom

        def enterRule(self, listener):
            if hasattr(listener, "enterRewriteFrom"):
                listener.enterRewriteFrom(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitRewriteFrom"):
                listener.exitRewriteFrom(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitRewriteFrom"):
                return visitor.visitRewriteFrom(self)
            else:
                return visitor.visitChildren(self)




    def rewriteFrom(self):

        localctx = Cobol85Parser.RewriteFromContext(self, self._ctx, self.state)
        self.enterRule(localctx, 860, self.RULE_rewriteFrom)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5010
            self.match(Cobol85Parser.FROM)
            self.state = 5011
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SearchStatementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.SearchStatementContext, self).__init__(parent, invokingState)
            self.parser = parser

        def SEARCH(self):
            return self.getToken(Cobol85Parser.SEARCH, 0)

        def qualifiedDataName(self):
            return self.getTypedRuleContext(Cobol85Parser.QualifiedDataNameContext,0)


        def ALL(self):
            return self.getToken(Cobol85Parser.ALL, 0)

        def searchVarying(self):
            return self.getTypedRuleContext(Cobol85Parser.SearchVaryingContext,0)


        def atEndPhrase(self):
            return self.getTypedRuleContext(Cobol85Parser.AtEndPhraseContext,0)


        def searchWhen(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.SearchWhenContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.SearchWhenContext,i)


        def END_SEARCH(self):
            return self.getToken(Cobol85Parser.END_SEARCH, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_searchStatement

        def enterRule(self, listener):
            if hasattr(listener, "enterSearchStatement"):
                listener.enterSearchStatement(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSearchStatement"):
                listener.exitSearchStatement(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitSearchStatement"):
                return visitor.visitSearchStatement(self)
            else:
                return visitor.visitChildren(self)




    def searchStatement(self):

        localctx = Cobol85Parser.SearchStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 862, self.RULE_searchStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5013
            self.match(Cobol85Parser.SEARCH)
            self.state = 5015
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.ALL:
                self.state = 5014
                self.match(Cobol85Parser.ALL)


            self.state = 5017
            self.qualifiedDataName()
            self.state = 5019
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.VARYING:
                self.state = 5018
                self.searchVarying()


            self.state = 5022
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.AT or _la==Cobol85Parser.END:
                self.state = 5021
                self.atEndPhrase()


            self.state = 5025 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 5024
                    self.searchWhen()

                else:
                    raise NoViableAltException(self)
                self.state = 5027 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,752,self._ctx)

            self.state = 5030
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,753,self._ctx)
            if la_ == 1:
                self.state = 5029
                self.match(Cobol85Parser.END_SEARCH)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SearchVaryingContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.SearchVaryingContext, self).__init__(parent, invokingState)
            self.parser = parser

        def VARYING(self):
            return self.getToken(Cobol85Parser.VARYING, 0)

        def qualifiedDataName(self):
            return self.getTypedRuleContext(Cobol85Parser.QualifiedDataNameContext,0)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_searchVarying

        def enterRule(self, listener):
            if hasattr(listener, "enterSearchVarying"):
                listener.enterSearchVarying(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSearchVarying"):
                listener.exitSearchVarying(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitSearchVarying"):
                return visitor.visitSearchVarying(self)
            else:
                return visitor.visitChildren(self)




    def searchVarying(self):

        localctx = Cobol85Parser.SearchVaryingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 864, self.RULE_searchVarying)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5032
            self.match(Cobol85Parser.VARYING)
            self.state = 5033
            self.qualifiedDataName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SearchWhenContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.SearchWhenContext, self).__init__(parent, invokingState)
            self.parser = parser

        def WHEN(self):
            return self.getToken(Cobol85Parser.WHEN, 0)

        def condition(self):
            return self.getTypedRuleContext(Cobol85Parser.ConditionContext,0)


        def NEXT(self):
            return self.getToken(Cobol85Parser.NEXT, 0)

        def SENTENCE(self):
            return self.getToken(Cobol85Parser.SENTENCE, 0)

        def statement(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.StatementContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.StatementContext,i)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_searchWhen

        def enterRule(self, listener):
            if hasattr(listener, "enterSearchWhen"):
                listener.enterSearchWhen(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSearchWhen"):
                listener.exitSearchWhen(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitSearchWhen"):
                return visitor.visitSearchWhen(self)
            else:
                return visitor.visitChildren(self)




    def searchWhen(self):

        localctx = Cobol85Parser.SearchWhenContext(self, self._ctx, self.state)
        self.enterRule(localctx, 866, self.RULE_searchWhen)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5035
            self.match(Cobol85Parser.WHEN)
            self.state = 5036
            self.condition()
            self.state = 5045
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Cobol85Parser.NEXT]:
                self.state = 5037
                self.match(Cobol85Parser.NEXT)
                self.state = 5038
                self.match(Cobol85Parser.SENTENCE)
                pass
            elif token in [Cobol85Parser.ACCEPT, Cobol85Parser.ADD, Cobol85Parser.ALTER, Cobol85Parser.AT, Cobol85Parser.CALL, Cobol85Parser.CANCEL, Cobol85Parser.CLOSE, Cobol85Parser.COMPUTE, Cobol85Parser.CONTINUE, Cobol85Parser.DELETE, Cobol85Parser.DISABLE, Cobol85Parser.DISPLAY, Cobol85Parser.DIVIDE, Cobol85Parser.ELSE, Cobol85Parser.ENABLE, Cobol85Parser.END, Cobol85Parser.END_ACCEPT, Cobol85Parser.END_ADD, Cobol85Parser.END_CALL, Cobol85Parser.END_COMPUTE, Cobol85Parser.END_DELETE, Cobol85Parser.END_DIVIDE, Cobol85Parser.END_EVALUATE, Cobol85Parser.END_IF, Cobol85Parser.END_MULTIPLY, Cobol85Parser.END_PERFORM, Cobol85Parser.END_READ, Cobol85Parser.END_RECEIVE, Cobol85Parser.END_RETURN, Cobol85Parser.END_REWRITE, Cobol85Parser.END_SEARCH, Cobol85Parser.END_START, Cobol85Parser.END_STRING, Cobol85Parser.END_SUBTRACT, Cobol85Parser.END_UNSTRING, Cobol85Parser.END_WRITE, Cobol85Parser.ENTRY, Cobol85Parser.EVALUATE, Cobol85Parser.EXCEPTION, Cobol85Parser.EXHIBIT, Cobol85Parser.EXIT, Cobol85Parser.GENERATE, Cobol85Parser.GOBACK, Cobol85Parser.GO, Cobol85Parser.IF, Cobol85Parser.INITIALIZE, Cobol85Parser.INITIATE, Cobol85Parser.INSPECT, Cobol85Parser.INVALID, Cobol85Parser.MERGE, Cobol85Parser.MOVE, Cobol85Parser.MULTIPLY, Cobol85Parser.NOT, Cobol85Parser.ON, Cobol85Parser.OPEN, Cobol85Parser.PERFORM, Cobol85Parser.PURGE, Cobol85Parser.READ, Cobol85Parser.RECEIVE, Cobol85Parser.RELEASE, Cobol85Parser.RETURN, Cobol85Parser.REWRITE, Cobol85Parser.SEARCH, Cobol85Parser.SEND, Cobol85Parser.SET, Cobol85Parser.SORT, Cobol85Parser.START, Cobol85Parser.STOP, Cobol85Parser.STRING, Cobol85Parser.SUBTRACT, Cobol85Parser.TERMINATE, Cobol85Parser.UNSTRING, Cobol85Parser.WHEN, Cobol85Parser.WITH, Cobol85Parser.WRITE, Cobol85Parser.DOT_FS, Cobol85Parser.EXECCICSLINE, Cobol85Parser.EXECSQLIMSLINE, Cobol85Parser.EXECSQLLINE]:
                self.state = 5042
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,754,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 5039
                        self.statement() 
                    self.state = 5044
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,754,self._ctx)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SendStatementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.SendStatementContext, self).__init__(parent, invokingState)
            self.parser = parser

        def SEND(self):
            return self.getToken(Cobol85Parser.SEND, 0)

        def sendStatementSync(self):
            return self.getTypedRuleContext(Cobol85Parser.SendStatementSyncContext,0)


        def sendStatementAsync(self):
            return self.getTypedRuleContext(Cobol85Parser.SendStatementAsyncContext,0)


        def onExceptionClause(self):
            return self.getTypedRuleContext(Cobol85Parser.OnExceptionClauseContext,0)


        def notOnExceptionClause(self):
            return self.getTypedRuleContext(Cobol85Parser.NotOnExceptionClauseContext,0)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_sendStatement

        def enterRule(self, listener):
            if hasattr(listener, "enterSendStatement"):
                listener.enterSendStatement(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSendStatement"):
                listener.exitSendStatement(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitSendStatement"):
                return visitor.visitSendStatement(self)
            else:
                return visitor.visitChildren(self)




    def sendStatement(self):

        localctx = Cobol85Parser.SendStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 868, self.RULE_sendStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5047
            self.match(Cobol85Parser.SEND)
            self.state = 5050
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Cobol85Parser.ABORT, Cobol85Parser.ADDRESS, Cobol85Parser.ALL, Cobol85Parser.AS, Cobol85Parser.ASCII, Cobol85Parser.ASSOCIATED_DATA, Cobol85Parser.ASSOCIATED_DATA_LENGTH, Cobol85Parser.ATTRIBUTE, Cobol85Parser.AUTO, Cobol85Parser.AUTO_SKIP, Cobol85Parser.BACKGROUND_COLOR, Cobol85Parser.BACKGROUND_COLOUR, Cobol85Parser.BEEP, Cobol85Parser.BELL, Cobol85Parser.BINARY, Cobol85Parser.BIT, Cobol85Parser.BLINK, Cobol85Parser.BLOB, Cobol85Parser.BOUNDS, Cobol85Parser.CAPABLE, Cobol85Parser.CCSVERSION, Cobol85Parser.CHANGED, Cobol85Parser.CHANNEL, Cobol85Parser.CLOB, Cobol85Parser.CLOSE_DISPOSITION, Cobol85Parser.COBOL, Cobol85Parser.COMMITMENT, Cobol85Parser.CONTROL_POINT, Cobol85Parser.CONVENTION, Cobol85Parser.CRUNCH, Cobol85Parser.CURSOR, Cobol85Parser.DATE, Cobol85Parser.DAY, Cobol85Parser.DAY_OF_WEEK, Cobol85Parser.DBCLOB, Cobol85Parser.DEBUG_CONTENTS, Cobol85Parser.DEBUG_ITEM, Cobol85Parser.DEBUG_LINE, Cobol85Parser.DEBUG_NAME, Cobol85Parser.DEBUG_SUB_1, Cobol85Parser.DEBUG_SUB_2, Cobol85Parser.DEBUG_SUB_3, Cobol85Parser.DEFAULT, Cobol85Parser.DEFAULT_DISPLAY, Cobol85Parser.DEFINITION, Cobol85Parser.DFHRESP, Cobol85Parser.DFHVALUE, Cobol85Parser.DISK, Cobol85Parser.DONTCARE, Cobol85Parser.DOUBLE, Cobol85Parser.EBCDIC, Cobol85Parser.EMPTY_CHECK, Cobol85Parser.ENTER, Cobol85Parser.ENTRY_PROCEDURE, Cobol85Parser.ERASE, Cobol85Parser.EOL, Cobol85Parser.EOS, Cobol85Parser.ESCAPE, Cobol85Parser.EVENT, Cobol85Parser.EXCLUSIVE, Cobol85Parser.EXPORT, Cobol85Parser.EXTENDED, Cobol85Parser.FALSE, Cobol85Parser.FOREGROUND_COLOR, Cobol85Parser.FOREGROUND_COLOUR, Cobol85Parser.FULL, Cobol85Parser.FUNCTION, Cobol85Parser.FUNCTIONNAME, Cobol85Parser.FUNCTION_POINTER, Cobol85Parser.GRID, Cobol85Parser.HIGHLIGHT, Cobol85Parser.HIGH_VALUE, Cobol85Parser.HIGH_VALUES, Cobol85Parser.IMPLICIT, Cobol85Parser.IMPORT, Cobol85Parser.INTEGER, Cobol85Parser.KEPT, Cobol85Parser.KEYBOARD, Cobol85Parser.LANGUAGE, Cobol85Parser.LB, Cobol85Parser.LD, Cobol85Parser.LEFTLINE, Cobol85Parser.LENGTH, Cobol85Parser.LENGTH_CHECK, Cobol85Parser.LIBACCESS, Cobol85Parser.LIBPARAMETER, Cobol85Parser.LIBRARY, Cobol85Parser.LINAGE_COUNTER, Cobol85Parser.LINE_COUNTER, Cobol85Parser.LIST, Cobol85Parser.LOCAL, Cobol85Parser.LONG_DATE, Cobol85Parser.LONG_TIME, Cobol85Parser.LOWER, Cobol85Parser.LOWLIGHT, Cobol85Parser.LOW_VALUE, Cobol85Parser.LOW_VALUES, Cobol85Parser.MMDDYYYY, Cobol85Parser.NAMED, Cobol85Parser.NATIONAL, Cobol85Parser.NATIONAL_EDITED, Cobol85Parser.NETWORK, Cobol85Parser.NO_ECHO, Cobol85Parser.NULL, Cobol85Parser.NULLS, Cobol85Parser.NUMERIC_DATE, Cobol85Parser.NUMERIC_TIME, Cobol85Parser.ODT, Cobol85Parser.ORDERLY, Cobol85Parser.OVERLINE, Cobol85Parser.OWN, Cobol85Parser.PAGE_COUNTER, Cobol85Parser.PASSWORD, Cobol85Parser.PORT, Cobol85Parser.PRINTER, Cobol85Parser.PRIVATE, Cobol85Parser.PROCESS, Cobol85Parser.PROGRAM, Cobol85Parser.PROMPT, Cobol85Parser.QUOTE, Cobol85Parser.QUOTES, Cobol85Parser.READER, Cobol85Parser.REMOTE, Cobol85Parser.REAL, Cobol85Parser.RECEIVED, Cobol85Parser.RECURSIVE, Cobol85Parser.REF, Cobol85Parser.REMOVE, Cobol85Parser.REQUIRED, Cobol85Parser.REVERSE_VIDEO, Cobol85Parser.RETURN_CODE, Cobol85Parser.SAVE, Cobol85Parser.SECURE, Cobol85Parser.SHARED, Cobol85Parser.SHAREDBYALL, Cobol85Parser.SHAREDBYRUNUNIT, Cobol85Parser.SHARING, Cobol85Parser.SHIFT_IN, Cobol85Parser.SHIFT_OUT, Cobol85Parser.SHORT_DATE, Cobol85Parser.SORT_CONTROL, Cobol85Parser.SORT_CORE_SIZE, Cobol85Parser.SORT_FILE_SIZE, Cobol85Parser.SORT_MESSAGE, Cobol85Parser.SORT_MODE_SIZE, Cobol85Parser.SORT_RETURN, Cobol85Parser.SPACE, Cobol85Parser.SPACES, Cobol85Parser.SQL, Cobol85Parser.SYMBOL, Cobol85Parser.TALLY, Cobol85Parser.TASK, Cobol85Parser.THREAD, Cobol85Parser.THREAD_LOCAL, Cobol85Parser.TIME, Cobol85Parser.TIMER, Cobol85Parser.TODAYS_DATE, Cobol85Parser.TODAYS_NAME, Cobol85Parser.TRUE, Cobol85Parser.TRUNCATED, Cobol85Parser.TYPEDEF, Cobol85Parser.UNDERLINE, Cobol85Parser.VIRTUAL, Cobol85Parser.WAIT, Cobol85Parser.WHEN_COMPILED, Cobol85Parser.YEAR, Cobol85Parser.YYYYMMDD, Cobol85Parser.YYYYDDD, Cobol85Parser.ZERO, Cobol85Parser.ZERO_FILL, Cobol85Parser.ZEROS, Cobol85Parser.ZEROES, Cobol85Parser.NONNUMERICLITERAL, Cobol85Parser.LEVEL_NUMBER_66, Cobol85Parser.LEVEL_NUMBER_77, Cobol85Parser.LEVEL_NUMBER_88, Cobol85Parser.INTEGERLITERAL, Cobol85Parser.NUMERICLITERAL, Cobol85Parser.IDENTIFIER]:
                self.state = 5048
                self.sendStatementSync()
                pass
            elif token in [Cobol85Parser.TO]:
                self.state = 5049
                self.sendStatementAsync()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 5053
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,757,self._ctx)
            if la_ == 1:
                self.state = 5052
                self.onExceptionClause()


            self.state = 5056
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,758,self._ctx)
            if la_ == 1:
                self.state = 5055
                self.notOnExceptionClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SendStatementSyncContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.SendStatementSyncContext, self).__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(Cobol85Parser.IdentifierContext,0)


        def literal(self):
            return self.getTypedRuleContext(Cobol85Parser.LiteralContext,0)


        def sendFromPhrase(self):
            return self.getTypedRuleContext(Cobol85Parser.SendFromPhraseContext,0)


        def sendWithPhrase(self):
            return self.getTypedRuleContext(Cobol85Parser.SendWithPhraseContext,0)


        def sendReplacingPhrase(self):
            return self.getTypedRuleContext(Cobol85Parser.SendReplacingPhraseContext,0)


        def sendAdvancingPhrase(self):
            return self.getTypedRuleContext(Cobol85Parser.SendAdvancingPhraseContext,0)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_sendStatementSync

        def enterRule(self, listener):
            if hasattr(listener, "enterSendStatementSync"):
                listener.enterSendStatementSync(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSendStatementSync"):
                listener.exitSendStatementSync(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitSendStatementSync"):
                return visitor.visitSendStatementSync(self)
            else:
                return visitor.visitChildren(self)




    def sendStatementSync(self):

        localctx = Cobol85Parser.SendStatementSyncContext(self, self._ctx, self.state)
        self.enterRule(localctx, 870, self.RULE_sendStatementSync)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5060
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,759,self._ctx)
            if la_ == 1:
                self.state = 5058
                self.identifier()
                pass

            elif la_ == 2:
                self.state = 5059
                self.literal()
                pass


            self.state = 5063
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.FROM:
                self.state = 5062
                self.sendFromPhrase()


            self.state = 5066
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,761,self._ctx)
            if la_ == 1:
                self.state = 5065
                self.sendWithPhrase()


            self.state = 5069
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.REPLACING:
                self.state = 5068
                self.sendReplacingPhrase()


            self.state = 5072
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.AFTER or _la==Cobol85Parser.BEFORE:
                self.state = 5071
                self.sendAdvancingPhrase()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SendStatementAsyncContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.SendStatementAsyncContext, self).__init__(parent, invokingState)
            self.parser = parser

        def TO(self):
            return self.getToken(Cobol85Parser.TO, 0)

        def identifier(self):
            return self.getTypedRuleContext(Cobol85Parser.IdentifierContext,0)


        def TOP(self):
            return self.getToken(Cobol85Parser.TOP, 0)

        def BOTTOM(self):
            return self.getToken(Cobol85Parser.BOTTOM, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_sendStatementAsync

        def enterRule(self, listener):
            if hasattr(listener, "enterSendStatementAsync"):
                listener.enterSendStatementAsync(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSendStatementAsync"):
                listener.exitSendStatementAsync(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitSendStatementAsync"):
                return visitor.visitSendStatementAsync(self)
            else:
                return visitor.visitChildren(self)




    def sendStatementAsync(self):

        localctx = Cobol85Parser.SendStatementAsyncContext(self, self._ctx, self.state)
        self.enterRule(localctx, 872, self.RULE_sendStatementAsync)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5074
            self.match(Cobol85Parser.TO)
            self.state = 5075
            _la = self._input.LA(1)
            if not(_la==Cobol85Parser.BOTTOM or _la==Cobol85Parser.TOP):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 5076
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SendFromPhraseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.SendFromPhraseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def FROM(self):
            return self.getToken(Cobol85Parser.FROM, 0)

        def identifier(self):
            return self.getTypedRuleContext(Cobol85Parser.IdentifierContext,0)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_sendFromPhrase

        def enterRule(self, listener):
            if hasattr(listener, "enterSendFromPhrase"):
                listener.enterSendFromPhrase(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSendFromPhrase"):
                listener.exitSendFromPhrase(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitSendFromPhrase"):
                return visitor.visitSendFromPhrase(self)
            else:
                return visitor.visitChildren(self)




    def sendFromPhrase(self):

        localctx = Cobol85Parser.SendFromPhraseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 874, self.RULE_sendFromPhrase)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5078
            self.match(Cobol85Parser.FROM)
            self.state = 5079
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SendWithPhraseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.SendWithPhraseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(Cobol85Parser.WITH, 0)

        def EGI(self):
            return self.getToken(Cobol85Parser.EGI, 0)

        def EMI(self):
            return self.getToken(Cobol85Parser.EMI, 0)

        def ESI(self):
            return self.getToken(Cobol85Parser.ESI, 0)

        def identifier(self):
            return self.getTypedRuleContext(Cobol85Parser.IdentifierContext,0)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_sendWithPhrase

        def enterRule(self, listener):
            if hasattr(listener, "enterSendWithPhrase"):
                listener.enterSendWithPhrase(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSendWithPhrase"):
                listener.exitSendWithPhrase(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitSendWithPhrase"):
                return visitor.visitSendWithPhrase(self)
            else:
                return visitor.visitChildren(self)




    def sendWithPhrase(self):

        localctx = Cobol85Parser.SendWithPhraseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 876, self.RULE_sendWithPhrase)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5081
            self.match(Cobol85Parser.WITH)
            self.state = 5086
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Cobol85Parser.EGI]:
                self.state = 5082
                self.match(Cobol85Parser.EGI)
                pass
            elif token in [Cobol85Parser.EMI]:
                self.state = 5083
                self.match(Cobol85Parser.EMI)
                pass
            elif token in [Cobol85Parser.ESI]:
                self.state = 5084
                self.match(Cobol85Parser.ESI)
                pass
            elif token in [Cobol85Parser.ABORT, Cobol85Parser.ADDRESS, Cobol85Parser.AS, Cobol85Parser.ASCII, Cobol85Parser.ASSOCIATED_DATA, Cobol85Parser.ASSOCIATED_DATA_LENGTH, Cobol85Parser.ATTRIBUTE, Cobol85Parser.AUTO, Cobol85Parser.AUTO_SKIP, Cobol85Parser.BACKGROUND_COLOR, Cobol85Parser.BACKGROUND_COLOUR, Cobol85Parser.BEEP, Cobol85Parser.BELL, Cobol85Parser.BINARY, Cobol85Parser.BIT, Cobol85Parser.BLINK, Cobol85Parser.BLOB, Cobol85Parser.BOUNDS, Cobol85Parser.CAPABLE, Cobol85Parser.CCSVERSION, Cobol85Parser.CHANGED, Cobol85Parser.CHANNEL, Cobol85Parser.CLOB, Cobol85Parser.CLOSE_DISPOSITION, Cobol85Parser.COBOL, Cobol85Parser.COMMITMENT, Cobol85Parser.CONTROL_POINT, Cobol85Parser.CONVENTION, Cobol85Parser.CRUNCH, Cobol85Parser.CURSOR, Cobol85Parser.DATE, Cobol85Parser.DAY, Cobol85Parser.DAY_OF_WEEK, Cobol85Parser.DBCLOB, Cobol85Parser.DEBUG_CONTENTS, Cobol85Parser.DEBUG_ITEM, Cobol85Parser.DEBUG_LINE, Cobol85Parser.DEBUG_NAME, Cobol85Parser.DEBUG_SUB_1, Cobol85Parser.DEBUG_SUB_2, Cobol85Parser.DEBUG_SUB_3, Cobol85Parser.DEFAULT, Cobol85Parser.DEFAULT_DISPLAY, Cobol85Parser.DEFINITION, Cobol85Parser.DFHRESP, Cobol85Parser.DFHVALUE, Cobol85Parser.DISK, Cobol85Parser.DONTCARE, Cobol85Parser.DOUBLE, Cobol85Parser.EBCDIC, Cobol85Parser.EMPTY_CHECK, Cobol85Parser.ENTER, Cobol85Parser.ENTRY_PROCEDURE, Cobol85Parser.ERASE, Cobol85Parser.EOL, Cobol85Parser.EOS, Cobol85Parser.ESCAPE, Cobol85Parser.EVENT, Cobol85Parser.EXCLUSIVE, Cobol85Parser.EXPORT, Cobol85Parser.EXTENDED, Cobol85Parser.FOREGROUND_COLOR, Cobol85Parser.FOREGROUND_COLOUR, Cobol85Parser.FULL, Cobol85Parser.FUNCTION, Cobol85Parser.FUNCTIONNAME, Cobol85Parser.FUNCTION_POINTER, Cobol85Parser.GRID, Cobol85Parser.HIGHLIGHT, Cobol85Parser.IMPLICIT, Cobol85Parser.IMPORT, Cobol85Parser.INTEGER, Cobol85Parser.KEPT, Cobol85Parser.KEYBOARD, Cobol85Parser.LANGUAGE, Cobol85Parser.LB, Cobol85Parser.LD, Cobol85Parser.LEFTLINE, Cobol85Parser.LENGTH, Cobol85Parser.LENGTH_CHECK, Cobol85Parser.LIBACCESS, Cobol85Parser.LIBPARAMETER, Cobol85Parser.LIBRARY, Cobol85Parser.LINAGE_COUNTER, Cobol85Parser.LINE_COUNTER, Cobol85Parser.LIST, Cobol85Parser.LOCAL, Cobol85Parser.LONG_DATE, Cobol85Parser.LONG_TIME, Cobol85Parser.LOWER, Cobol85Parser.LOWLIGHT, Cobol85Parser.MMDDYYYY, Cobol85Parser.NAMED, Cobol85Parser.NATIONAL, Cobol85Parser.NATIONAL_EDITED, Cobol85Parser.NETWORK, Cobol85Parser.NO_ECHO, Cobol85Parser.NUMERIC_DATE, Cobol85Parser.NUMERIC_TIME, Cobol85Parser.ODT, Cobol85Parser.ORDERLY, Cobol85Parser.OVERLINE, Cobol85Parser.OWN, Cobol85Parser.PAGE_COUNTER, Cobol85Parser.PASSWORD, Cobol85Parser.PORT, Cobol85Parser.PRINTER, Cobol85Parser.PRIVATE, Cobol85Parser.PROCESS, Cobol85Parser.PROGRAM, Cobol85Parser.PROMPT, Cobol85Parser.READER, Cobol85Parser.REMOTE, Cobol85Parser.REAL, Cobol85Parser.RECEIVED, Cobol85Parser.RECURSIVE, Cobol85Parser.REF, Cobol85Parser.REMOVE, Cobol85Parser.REQUIRED, Cobol85Parser.REVERSE_VIDEO, Cobol85Parser.RETURN_CODE, Cobol85Parser.SAVE, Cobol85Parser.SECURE, Cobol85Parser.SHARED, Cobol85Parser.SHAREDBYALL, Cobol85Parser.SHAREDBYRUNUNIT, Cobol85Parser.SHARING, Cobol85Parser.SHIFT_IN, Cobol85Parser.SHIFT_OUT, Cobol85Parser.SHORT_DATE, Cobol85Parser.SORT_CONTROL, Cobol85Parser.SORT_CORE_SIZE, Cobol85Parser.SORT_FILE_SIZE, Cobol85Parser.SORT_MESSAGE, Cobol85Parser.SORT_MODE_SIZE, Cobol85Parser.SORT_RETURN, Cobol85Parser.SQL, Cobol85Parser.SYMBOL, Cobol85Parser.TALLY, Cobol85Parser.TASK, Cobol85Parser.THREAD, Cobol85Parser.THREAD_LOCAL, Cobol85Parser.TIME, Cobol85Parser.TIMER, Cobol85Parser.TODAYS_DATE, Cobol85Parser.TODAYS_NAME, Cobol85Parser.TRUNCATED, Cobol85Parser.TYPEDEF, Cobol85Parser.UNDERLINE, Cobol85Parser.VIRTUAL, Cobol85Parser.WAIT, Cobol85Parser.WHEN_COMPILED, Cobol85Parser.YEAR, Cobol85Parser.YYYYMMDD, Cobol85Parser.YYYYDDD, Cobol85Parser.ZERO_FILL, Cobol85Parser.LEVEL_NUMBER_66, Cobol85Parser.LEVEL_NUMBER_77, Cobol85Parser.LEVEL_NUMBER_88, Cobol85Parser.INTEGERLITERAL, Cobol85Parser.IDENTIFIER]:
                self.state = 5085
                self.identifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SendReplacingPhraseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.SendReplacingPhraseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def REPLACING(self):
            return self.getToken(Cobol85Parser.REPLACING, 0)

        def LINE(self):
            return self.getToken(Cobol85Parser.LINE, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_sendReplacingPhrase

        def enterRule(self, listener):
            if hasattr(listener, "enterSendReplacingPhrase"):
                listener.enterSendReplacingPhrase(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSendReplacingPhrase"):
                listener.exitSendReplacingPhrase(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitSendReplacingPhrase"):
                return visitor.visitSendReplacingPhrase(self)
            else:
                return visitor.visitChildren(self)




    def sendReplacingPhrase(self):

        localctx = Cobol85Parser.SendReplacingPhraseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 878, self.RULE_sendReplacingPhrase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5088
            self.match(Cobol85Parser.REPLACING)
            self.state = 5090
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.LINE:
                self.state = 5089
                self.match(Cobol85Parser.LINE)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SendAdvancingPhraseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.SendAdvancingPhraseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def BEFORE(self):
            return self.getToken(Cobol85Parser.BEFORE, 0)

        def AFTER(self):
            return self.getToken(Cobol85Parser.AFTER, 0)

        def sendAdvancingPage(self):
            return self.getTypedRuleContext(Cobol85Parser.SendAdvancingPageContext,0)


        def sendAdvancingLines(self):
            return self.getTypedRuleContext(Cobol85Parser.SendAdvancingLinesContext,0)


        def sendAdvancingMnemonic(self):
            return self.getTypedRuleContext(Cobol85Parser.SendAdvancingMnemonicContext,0)


        def ADVANCING(self):
            return self.getToken(Cobol85Parser.ADVANCING, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_sendAdvancingPhrase

        def enterRule(self, listener):
            if hasattr(listener, "enterSendAdvancingPhrase"):
                listener.enterSendAdvancingPhrase(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSendAdvancingPhrase"):
                listener.exitSendAdvancingPhrase(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitSendAdvancingPhrase"):
                return visitor.visitSendAdvancingPhrase(self)
            else:
                return visitor.visitChildren(self)




    def sendAdvancingPhrase(self):

        localctx = Cobol85Parser.SendAdvancingPhraseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 880, self.RULE_sendAdvancingPhrase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5092
            _la = self._input.LA(1)
            if not(_la==Cobol85Parser.AFTER or _la==Cobol85Parser.BEFORE):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 5094
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.ADVANCING:
                self.state = 5093
                self.match(Cobol85Parser.ADVANCING)


            self.state = 5099
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,767,self._ctx)
            if la_ == 1:
                self.state = 5096
                self.sendAdvancingPage()
                pass

            elif la_ == 2:
                self.state = 5097
                self.sendAdvancingLines()
                pass

            elif la_ == 3:
                self.state = 5098
                self.sendAdvancingMnemonic()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SendAdvancingPageContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.SendAdvancingPageContext, self).__init__(parent, invokingState)
            self.parser = parser

        def PAGE(self):
            return self.getToken(Cobol85Parser.PAGE, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_sendAdvancingPage

        def enterRule(self, listener):
            if hasattr(listener, "enterSendAdvancingPage"):
                listener.enterSendAdvancingPage(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSendAdvancingPage"):
                listener.exitSendAdvancingPage(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitSendAdvancingPage"):
                return visitor.visitSendAdvancingPage(self)
            else:
                return visitor.visitChildren(self)




    def sendAdvancingPage(self):

        localctx = Cobol85Parser.SendAdvancingPageContext(self, self._ctx, self.state)
        self.enterRule(localctx, 882, self.RULE_sendAdvancingPage)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5101
            self.match(Cobol85Parser.PAGE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SendAdvancingLinesContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.SendAdvancingLinesContext, self).__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(Cobol85Parser.IdentifierContext,0)


        def literal(self):
            return self.getTypedRuleContext(Cobol85Parser.LiteralContext,0)


        def LINE(self):
            return self.getToken(Cobol85Parser.LINE, 0)

        def LINES(self):
            return self.getToken(Cobol85Parser.LINES, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_sendAdvancingLines

        def enterRule(self, listener):
            if hasattr(listener, "enterSendAdvancingLines"):
                listener.enterSendAdvancingLines(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSendAdvancingLines"):
                listener.exitSendAdvancingLines(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitSendAdvancingLines"):
                return visitor.visitSendAdvancingLines(self)
            else:
                return visitor.visitChildren(self)




    def sendAdvancingLines(self):

        localctx = Cobol85Parser.SendAdvancingLinesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 884, self.RULE_sendAdvancingLines)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5105
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,768,self._ctx)
            if la_ == 1:
                self.state = 5103
                self.identifier()
                pass

            elif la_ == 2:
                self.state = 5104
                self.literal()
                pass


            self.state = 5108
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.LINE or _la==Cobol85Parser.LINES:
                self.state = 5107
                _la = self._input.LA(1)
                if not(_la==Cobol85Parser.LINE or _la==Cobol85Parser.LINES):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SendAdvancingMnemonicContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.SendAdvancingMnemonicContext, self).__init__(parent, invokingState)
            self.parser = parser

        def mnemonicName(self):
            return self.getTypedRuleContext(Cobol85Parser.MnemonicNameContext,0)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_sendAdvancingMnemonic

        def enterRule(self, listener):
            if hasattr(listener, "enterSendAdvancingMnemonic"):
                listener.enterSendAdvancingMnemonic(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSendAdvancingMnemonic"):
                listener.exitSendAdvancingMnemonic(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitSendAdvancingMnemonic"):
                return visitor.visitSendAdvancingMnemonic(self)
            else:
                return visitor.visitChildren(self)




    def sendAdvancingMnemonic(self):

        localctx = Cobol85Parser.SendAdvancingMnemonicContext(self, self._ctx, self.state)
        self.enterRule(localctx, 886, self.RULE_sendAdvancingMnemonic)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5110
            self.mnemonicName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SetStatementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.SetStatementContext, self).__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(Cobol85Parser.SET, 0)

        def setUpDownByStatement(self):
            return self.getTypedRuleContext(Cobol85Parser.SetUpDownByStatementContext,0)


        def setToStatement(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.SetToStatementContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.SetToStatementContext,i)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_setStatement

        def enterRule(self, listener):
            if hasattr(listener, "enterSetStatement"):
                listener.enterSetStatement(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSetStatement"):
                listener.exitSetStatement(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitSetStatement"):
                return visitor.visitSetStatement(self)
            else:
                return visitor.visitChildren(self)




    def setStatement(self):

        localctx = Cobol85Parser.SetStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 888, self.RULE_setStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5112
            self.match(Cobol85Parser.SET)
            self.state = 5119
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,771,self._ctx)
            if la_ == 1:
                self.state = 5114 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 5113
                    self.setToStatement()
                    self.state = 5116 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.ADDRESS) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE) | (1 << Cobol85Parser.AUTO) | (1 << Cobol85Parser.AUTO_SKIP) | (1 << Cobol85Parser.BACKGROUND_COLOR) | (1 << Cobol85Parser.BACKGROUND_COLOUR) | (1 << Cobol85Parser.BEEP) | (1 << Cobol85Parser.BELL) | (1 << Cobol85Parser.BINARY) | (1 << Cobol85Parser.BIT) | (1 << Cobol85Parser.BLINK) | (1 << Cobol85Parser.BLOB) | (1 << Cobol85Parser.BOUNDS) | (1 << Cobol85Parser.CAPABLE) | (1 << Cobol85Parser.CCSVERSION) | (1 << Cobol85Parser.CHANGED) | (1 << Cobol85Parser.CHANNEL))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (Cobol85Parser.CLOB - 67)) | (1 << (Cobol85Parser.CLOSE_DISPOSITION - 67)) | (1 << (Cobol85Parser.COBOL - 67)) | (1 << (Cobol85Parser.COMMITMENT - 67)) | (1 << (Cobol85Parser.CONTROL_POINT - 67)) | (1 << (Cobol85Parser.CONVENTION - 67)) | (1 << (Cobol85Parser.CRUNCH - 67)) | (1 << (Cobol85Parser.CURSOR - 67)) | (1 << (Cobol85Parser.DATE - 67)) | (1 << (Cobol85Parser.DAY - 67)) | (1 << (Cobol85Parser.DAY_OF_WEEK - 67)) | (1 << (Cobol85Parser.DBCLOB - 67)) | (1 << (Cobol85Parser.DEBUG_CONTENTS - 67)) | (1 << (Cobol85Parser.DEBUG_ITEM - 67)) | (1 << (Cobol85Parser.DEBUG_LINE - 67)) | (1 << (Cobol85Parser.DEBUG_NAME - 67)) | (1 << (Cobol85Parser.DEBUG_SUB_1 - 67)) | (1 << (Cobol85Parser.DEBUG_SUB_2 - 67)) | (1 << (Cobol85Parser.DEBUG_SUB_3 - 67)))) != 0) or ((((_la - 131)) & ~0x3f) == 0 and ((1 << (_la - 131)) & ((1 << (Cobol85Parser.DEFAULT - 131)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 131)) | (1 << (Cobol85Parser.DEFINITION - 131)) | (1 << (Cobol85Parser.DFHRESP - 131)) | (1 << (Cobol85Parser.DFHVALUE - 131)) | (1 << (Cobol85Parser.DISK - 131)) | (1 << (Cobol85Parser.DONTCARE - 131)) | (1 << (Cobol85Parser.DOUBLE - 131)) | (1 << (Cobol85Parser.EBCDIC - 131)) | (1 << (Cobol85Parser.EMPTY_CHECK - 131)) | (1 << (Cobol85Parser.ENTER - 131)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 131)) | (1 << (Cobol85Parser.ERASE - 131)) | (1 << (Cobol85Parser.EOL - 131)) | (1 << (Cobol85Parser.EOS - 131)))) != 0) or ((((_la - 195)) & ~0x3f) == 0 and ((1 << (_la - 195)) & ((1 << (Cobol85Parser.ESCAPE - 195)) | (1 << (Cobol85Parser.EVENT - 195)) | (1 << (Cobol85Parser.EXCLUSIVE - 195)) | (1 << (Cobol85Parser.EXPORT - 195)) | (1 << (Cobol85Parser.EXTENDED - 195)) | (1 << (Cobol85Parser.FOREGROUND_COLOR - 195)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 195)) | (1 << (Cobol85Parser.FULL - 195)) | (1 << (Cobol85Parser.FUNCTION - 195)) | (1 << (Cobol85Parser.FUNCTIONNAME - 195)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 195)) | (1 << (Cobol85Parser.GRID - 195)) | (1 << (Cobol85Parser.HIGHLIGHT - 195)) | (1 << (Cobol85Parser.IMPLICIT - 195)) | (1 << (Cobol85Parser.IMPORT - 195)) | (1 << (Cobol85Parser.INTEGER - 195)))) != 0) or ((((_la - 262)) & ~0x3f) == 0 and ((1 << (_la - 262)) & ((1 << (Cobol85Parser.KEPT - 262)) | (1 << (Cobol85Parser.KEYBOARD - 262)) | (1 << (Cobol85Parser.LANGUAGE - 262)) | (1 << (Cobol85Parser.LB - 262)) | (1 << (Cobol85Parser.LD - 262)) | (1 << (Cobol85Parser.LEFTLINE - 262)) | (1 << (Cobol85Parser.LENGTH - 262)) | (1 << (Cobol85Parser.LENGTH_CHECK - 262)) | (1 << (Cobol85Parser.LIBACCESS - 262)) | (1 << (Cobol85Parser.LIBPARAMETER - 262)) | (1 << (Cobol85Parser.LIBRARY - 262)) | (1 << (Cobol85Parser.LINAGE_COUNTER - 262)) | (1 << (Cobol85Parser.LINE_COUNTER - 262)) | (1 << (Cobol85Parser.LIST - 262)) | (1 << (Cobol85Parser.LOCAL - 262)) | (1 << (Cobol85Parser.LONG_DATE - 262)) | (1 << (Cobol85Parser.LONG_TIME - 262)) | (1 << (Cobol85Parser.LOWER - 262)) | (1 << (Cobol85Parser.LOWLIGHT - 262)) | (1 << (Cobol85Parser.MMDDYYYY - 262)) | (1 << (Cobol85Parser.NAMED - 262)) | (1 << (Cobol85Parser.NATIONAL - 262)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 262)) | (1 << (Cobol85Parser.NETWORK - 262)) | (1 << (Cobol85Parser.NO_ECHO - 262)) | (1 << (Cobol85Parser.NUMERIC_DATE - 262)) | (1 << (Cobol85Parser.NUMERIC_TIME - 262)))) != 0) or ((((_la - 326)) & ~0x3f) == 0 and ((1 << (_la - 326)) & ((1 << (Cobol85Parser.ODT - 326)) | (1 << (Cobol85Parser.ORDERLY - 326)) | (1 << (Cobol85Parser.OVERLINE - 326)) | (1 << (Cobol85Parser.OWN - 326)) | (1 << (Cobol85Parser.PAGE_COUNTER - 326)) | (1 << (Cobol85Parser.PASSWORD - 326)) | (1 << (Cobol85Parser.PORT - 326)) | (1 << (Cobol85Parser.PRINTER - 326)) | (1 << (Cobol85Parser.PRIVATE - 326)) | (1 << (Cobol85Parser.PROCESS - 326)) | (1 << (Cobol85Parser.PROGRAM - 326)) | (1 << (Cobol85Parser.PROMPT - 326)) | (1 << (Cobol85Parser.READER - 326)) | (1 << (Cobol85Parser.REMOTE - 326)) | (1 << (Cobol85Parser.REAL - 326)) | (1 << (Cobol85Parser.RECEIVED - 326)) | (1 << (Cobol85Parser.RECURSIVE - 326)) | (1 << (Cobol85Parser.REF - 326)))) != 0) or ((((_la - 395)) & ~0x3f) == 0 and ((1 << (_la - 395)) & ((1 << (Cobol85Parser.REMOVE - 395)) | (1 << (Cobol85Parser.REQUIRED - 395)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 395)) | (1 << (Cobol85Parser.RETURN_CODE - 395)) | (1 << (Cobol85Parser.SAVE - 395)) | (1 << (Cobol85Parser.SECURE - 395)) | (1 << (Cobol85Parser.SHARED - 395)) | (1 << (Cobol85Parser.SHAREDBYALL - 395)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 395)) | (1 << (Cobol85Parser.SHARING - 395)) | (1 << (Cobol85Parser.SHIFT_IN - 395)) | (1 << (Cobol85Parser.SHIFT_OUT - 395)) | (1 << (Cobol85Parser.SHORT_DATE - 395)) | (1 << (Cobol85Parser.SORT_CONTROL - 395)) | (1 << (Cobol85Parser.SORT_CORE_SIZE - 395)) | (1 << (Cobol85Parser.SORT_FILE_SIZE - 395)) | (1 << (Cobol85Parser.SORT_MESSAGE - 395)) | (1 << (Cobol85Parser.SORT_MODE_SIZE - 395)) | (1 << (Cobol85Parser.SORT_RETURN - 395)) | (1 << (Cobol85Parser.SQL - 395)))) != 0) or ((((_la - 471)) & ~0x3f) == 0 and ((1 << (_la - 471)) & ((1 << (Cobol85Parser.SYMBOL - 471)) | (1 << (Cobol85Parser.TALLY - 471)) | (1 << (Cobol85Parser.TASK - 471)) | (1 << (Cobol85Parser.THREAD - 471)) | (1 << (Cobol85Parser.THREAD_LOCAL - 471)) | (1 << (Cobol85Parser.TIME - 471)) | (1 << (Cobol85Parser.TIMER - 471)) | (1 << (Cobol85Parser.TODAYS_DATE - 471)) | (1 << (Cobol85Parser.TODAYS_NAME - 471)) | (1 << (Cobol85Parser.TRUNCATED - 471)) | (1 << (Cobol85Parser.TYPEDEF - 471)) | (1 << (Cobol85Parser.UNDERLINE - 471)) | (1 << (Cobol85Parser.VIRTUAL - 471)) | (1 << (Cobol85Parser.WAIT - 471)) | (1 << (Cobol85Parser.WHEN_COMPILED - 471)) | (1 << (Cobol85Parser.YEAR - 471)) | (1 << (Cobol85Parser.YYYYMMDD - 471)) | (1 << (Cobol85Parser.YYYYDDD - 471)) | (1 << (Cobol85Parser.ZERO_FILL - 471)))) != 0) or ((((_la - 557)) & ~0x3f) == 0 and ((1 << (_la - 557)) & ((1 << (Cobol85Parser.LEVEL_NUMBER_66 - 557)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 557)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 557)) | (1 << (Cobol85Parser.INTEGERLITERAL - 557)) | (1 << (Cobol85Parser.IDENTIFIER - 557)))) != 0)):
                        break

                pass

            elif la_ == 2:
                self.state = 5118
                self.setUpDownByStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SetToStatementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.SetToStatementContext, self).__init__(parent, invokingState)
            self.parser = parser

        def TO(self):
            return self.getToken(Cobol85Parser.TO, 0)

        def setTo(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.SetToContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.SetToContext,i)


        def setToValue(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.SetToValueContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.SetToValueContext,i)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_setToStatement

        def enterRule(self, listener):
            if hasattr(listener, "enterSetToStatement"):
                listener.enterSetToStatement(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSetToStatement"):
                listener.exitSetToStatement(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitSetToStatement"):
                return visitor.visitSetToStatement(self)
            else:
                return visitor.visitChildren(self)




    def setToStatement(self):

        localctx = Cobol85Parser.SetToStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 890, self.RULE_setToStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5122 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 5121
                self.setTo()
                self.state = 5124 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.ADDRESS) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE) | (1 << Cobol85Parser.AUTO) | (1 << Cobol85Parser.AUTO_SKIP) | (1 << Cobol85Parser.BACKGROUND_COLOR) | (1 << Cobol85Parser.BACKGROUND_COLOUR) | (1 << Cobol85Parser.BEEP) | (1 << Cobol85Parser.BELL) | (1 << Cobol85Parser.BINARY) | (1 << Cobol85Parser.BIT) | (1 << Cobol85Parser.BLINK) | (1 << Cobol85Parser.BLOB) | (1 << Cobol85Parser.BOUNDS) | (1 << Cobol85Parser.CAPABLE) | (1 << Cobol85Parser.CCSVERSION) | (1 << Cobol85Parser.CHANGED) | (1 << Cobol85Parser.CHANNEL))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (Cobol85Parser.CLOB - 67)) | (1 << (Cobol85Parser.CLOSE_DISPOSITION - 67)) | (1 << (Cobol85Parser.COBOL - 67)) | (1 << (Cobol85Parser.COMMITMENT - 67)) | (1 << (Cobol85Parser.CONTROL_POINT - 67)) | (1 << (Cobol85Parser.CONVENTION - 67)) | (1 << (Cobol85Parser.CRUNCH - 67)) | (1 << (Cobol85Parser.CURSOR - 67)) | (1 << (Cobol85Parser.DATE - 67)) | (1 << (Cobol85Parser.DAY - 67)) | (1 << (Cobol85Parser.DAY_OF_WEEK - 67)) | (1 << (Cobol85Parser.DBCLOB - 67)) | (1 << (Cobol85Parser.DEBUG_CONTENTS - 67)) | (1 << (Cobol85Parser.DEBUG_ITEM - 67)) | (1 << (Cobol85Parser.DEBUG_LINE - 67)) | (1 << (Cobol85Parser.DEBUG_NAME - 67)) | (1 << (Cobol85Parser.DEBUG_SUB_1 - 67)) | (1 << (Cobol85Parser.DEBUG_SUB_2 - 67)) | (1 << (Cobol85Parser.DEBUG_SUB_3 - 67)))) != 0) or ((((_la - 131)) & ~0x3f) == 0 and ((1 << (_la - 131)) & ((1 << (Cobol85Parser.DEFAULT - 131)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 131)) | (1 << (Cobol85Parser.DEFINITION - 131)) | (1 << (Cobol85Parser.DFHRESP - 131)) | (1 << (Cobol85Parser.DFHVALUE - 131)) | (1 << (Cobol85Parser.DISK - 131)) | (1 << (Cobol85Parser.DONTCARE - 131)) | (1 << (Cobol85Parser.DOUBLE - 131)) | (1 << (Cobol85Parser.EBCDIC - 131)) | (1 << (Cobol85Parser.EMPTY_CHECK - 131)) | (1 << (Cobol85Parser.ENTER - 131)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 131)) | (1 << (Cobol85Parser.ERASE - 131)) | (1 << (Cobol85Parser.EOL - 131)) | (1 << (Cobol85Parser.EOS - 131)))) != 0) or ((((_la - 195)) & ~0x3f) == 0 and ((1 << (_la - 195)) & ((1 << (Cobol85Parser.ESCAPE - 195)) | (1 << (Cobol85Parser.EVENT - 195)) | (1 << (Cobol85Parser.EXCLUSIVE - 195)) | (1 << (Cobol85Parser.EXPORT - 195)) | (1 << (Cobol85Parser.EXTENDED - 195)) | (1 << (Cobol85Parser.FOREGROUND_COLOR - 195)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 195)) | (1 << (Cobol85Parser.FULL - 195)) | (1 << (Cobol85Parser.FUNCTION - 195)) | (1 << (Cobol85Parser.FUNCTIONNAME - 195)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 195)) | (1 << (Cobol85Parser.GRID - 195)) | (1 << (Cobol85Parser.HIGHLIGHT - 195)) | (1 << (Cobol85Parser.IMPLICIT - 195)) | (1 << (Cobol85Parser.IMPORT - 195)) | (1 << (Cobol85Parser.INTEGER - 195)))) != 0) or ((((_la - 262)) & ~0x3f) == 0 and ((1 << (_la - 262)) & ((1 << (Cobol85Parser.KEPT - 262)) | (1 << (Cobol85Parser.KEYBOARD - 262)) | (1 << (Cobol85Parser.LANGUAGE - 262)) | (1 << (Cobol85Parser.LB - 262)) | (1 << (Cobol85Parser.LD - 262)) | (1 << (Cobol85Parser.LEFTLINE - 262)) | (1 << (Cobol85Parser.LENGTH - 262)) | (1 << (Cobol85Parser.LENGTH_CHECK - 262)) | (1 << (Cobol85Parser.LIBACCESS - 262)) | (1 << (Cobol85Parser.LIBPARAMETER - 262)) | (1 << (Cobol85Parser.LIBRARY - 262)) | (1 << (Cobol85Parser.LINAGE_COUNTER - 262)) | (1 << (Cobol85Parser.LINE_COUNTER - 262)) | (1 << (Cobol85Parser.LIST - 262)) | (1 << (Cobol85Parser.LOCAL - 262)) | (1 << (Cobol85Parser.LONG_DATE - 262)) | (1 << (Cobol85Parser.LONG_TIME - 262)) | (1 << (Cobol85Parser.LOWER - 262)) | (1 << (Cobol85Parser.LOWLIGHT - 262)) | (1 << (Cobol85Parser.MMDDYYYY - 262)) | (1 << (Cobol85Parser.NAMED - 262)) | (1 << (Cobol85Parser.NATIONAL - 262)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 262)) | (1 << (Cobol85Parser.NETWORK - 262)) | (1 << (Cobol85Parser.NO_ECHO - 262)) | (1 << (Cobol85Parser.NUMERIC_DATE - 262)) | (1 << (Cobol85Parser.NUMERIC_TIME - 262)))) != 0) or ((((_la - 326)) & ~0x3f) == 0 and ((1 << (_la - 326)) & ((1 << (Cobol85Parser.ODT - 326)) | (1 << (Cobol85Parser.ORDERLY - 326)) | (1 << (Cobol85Parser.OVERLINE - 326)) | (1 << (Cobol85Parser.OWN - 326)) | (1 << (Cobol85Parser.PAGE_COUNTER - 326)) | (1 << (Cobol85Parser.PASSWORD - 326)) | (1 << (Cobol85Parser.PORT - 326)) | (1 << (Cobol85Parser.PRINTER - 326)) | (1 << (Cobol85Parser.PRIVATE - 326)) | (1 << (Cobol85Parser.PROCESS - 326)) | (1 << (Cobol85Parser.PROGRAM - 326)) | (1 << (Cobol85Parser.PROMPT - 326)) | (1 << (Cobol85Parser.READER - 326)) | (1 << (Cobol85Parser.REMOTE - 326)) | (1 << (Cobol85Parser.REAL - 326)) | (1 << (Cobol85Parser.RECEIVED - 326)) | (1 << (Cobol85Parser.RECURSIVE - 326)) | (1 << (Cobol85Parser.REF - 326)))) != 0) or ((((_la - 395)) & ~0x3f) == 0 and ((1 << (_la - 395)) & ((1 << (Cobol85Parser.REMOVE - 395)) | (1 << (Cobol85Parser.REQUIRED - 395)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 395)) | (1 << (Cobol85Parser.RETURN_CODE - 395)) | (1 << (Cobol85Parser.SAVE - 395)) | (1 << (Cobol85Parser.SECURE - 395)) | (1 << (Cobol85Parser.SHARED - 395)) | (1 << (Cobol85Parser.SHAREDBYALL - 395)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 395)) | (1 << (Cobol85Parser.SHARING - 395)) | (1 << (Cobol85Parser.SHIFT_IN - 395)) | (1 << (Cobol85Parser.SHIFT_OUT - 395)) | (1 << (Cobol85Parser.SHORT_DATE - 395)) | (1 << (Cobol85Parser.SORT_CONTROL - 395)) | (1 << (Cobol85Parser.SORT_CORE_SIZE - 395)) | (1 << (Cobol85Parser.SORT_FILE_SIZE - 395)) | (1 << (Cobol85Parser.SORT_MESSAGE - 395)) | (1 << (Cobol85Parser.SORT_MODE_SIZE - 395)) | (1 << (Cobol85Parser.SORT_RETURN - 395)) | (1 << (Cobol85Parser.SQL - 395)))) != 0) or ((((_la - 471)) & ~0x3f) == 0 and ((1 << (_la - 471)) & ((1 << (Cobol85Parser.SYMBOL - 471)) | (1 << (Cobol85Parser.TALLY - 471)) | (1 << (Cobol85Parser.TASK - 471)) | (1 << (Cobol85Parser.THREAD - 471)) | (1 << (Cobol85Parser.THREAD_LOCAL - 471)) | (1 << (Cobol85Parser.TIME - 471)) | (1 << (Cobol85Parser.TIMER - 471)) | (1 << (Cobol85Parser.TODAYS_DATE - 471)) | (1 << (Cobol85Parser.TODAYS_NAME - 471)) | (1 << (Cobol85Parser.TRUNCATED - 471)) | (1 << (Cobol85Parser.TYPEDEF - 471)) | (1 << (Cobol85Parser.UNDERLINE - 471)) | (1 << (Cobol85Parser.VIRTUAL - 471)) | (1 << (Cobol85Parser.WAIT - 471)) | (1 << (Cobol85Parser.WHEN_COMPILED - 471)) | (1 << (Cobol85Parser.YEAR - 471)) | (1 << (Cobol85Parser.YYYYMMDD - 471)) | (1 << (Cobol85Parser.YYYYDDD - 471)) | (1 << (Cobol85Parser.ZERO_FILL - 471)))) != 0) or ((((_la - 557)) & ~0x3f) == 0 and ((1 << (_la - 557)) & ((1 << (Cobol85Parser.LEVEL_NUMBER_66 - 557)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 557)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 557)) | (1 << (Cobol85Parser.INTEGERLITERAL - 557)) | (1 << (Cobol85Parser.IDENTIFIER - 557)))) != 0)):
                    break

            self.state = 5126
            self.match(Cobol85Parser.TO)
            self.state = 5128 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 5127
                    self.setToValue()

                else:
                    raise NoViableAltException(self)
                self.state = 5130 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,773,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SetUpDownByStatementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.SetUpDownByStatementContext, self).__init__(parent, invokingState)
            self.parser = parser

        def setByValue(self):
            return self.getTypedRuleContext(Cobol85Parser.SetByValueContext,0)


        def UP(self):
            return self.getToken(Cobol85Parser.UP, 0)

        def BY(self):
            return self.getToken(Cobol85Parser.BY, 0)

        def DOWN(self):
            return self.getToken(Cobol85Parser.DOWN, 0)

        def setTo(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.SetToContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.SetToContext,i)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_setUpDownByStatement

        def enterRule(self, listener):
            if hasattr(listener, "enterSetUpDownByStatement"):
                listener.enterSetUpDownByStatement(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSetUpDownByStatement"):
                listener.exitSetUpDownByStatement(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitSetUpDownByStatement"):
                return visitor.visitSetUpDownByStatement(self)
            else:
                return visitor.visitChildren(self)




    def setUpDownByStatement(self):

        localctx = Cobol85Parser.SetUpDownByStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 892, self.RULE_setUpDownByStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5133 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 5132
                self.setTo()
                self.state = 5135 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.ADDRESS) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE) | (1 << Cobol85Parser.AUTO) | (1 << Cobol85Parser.AUTO_SKIP) | (1 << Cobol85Parser.BACKGROUND_COLOR) | (1 << Cobol85Parser.BACKGROUND_COLOUR) | (1 << Cobol85Parser.BEEP) | (1 << Cobol85Parser.BELL) | (1 << Cobol85Parser.BINARY) | (1 << Cobol85Parser.BIT) | (1 << Cobol85Parser.BLINK) | (1 << Cobol85Parser.BLOB) | (1 << Cobol85Parser.BOUNDS) | (1 << Cobol85Parser.CAPABLE) | (1 << Cobol85Parser.CCSVERSION) | (1 << Cobol85Parser.CHANGED) | (1 << Cobol85Parser.CHANNEL))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (Cobol85Parser.CLOB - 67)) | (1 << (Cobol85Parser.CLOSE_DISPOSITION - 67)) | (1 << (Cobol85Parser.COBOL - 67)) | (1 << (Cobol85Parser.COMMITMENT - 67)) | (1 << (Cobol85Parser.CONTROL_POINT - 67)) | (1 << (Cobol85Parser.CONVENTION - 67)) | (1 << (Cobol85Parser.CRUNCH - 67)) | (1 << (Cobol85Parser.CURSOR - 67)) | (1 << (Cobol85Parser.DATE - 67)) | (1 << (Cobol85Parser.DAY - 67)) | (1 << (Cobol85Parser.DAY_OF_WEEK - 67)) | (1 << (Cobol85Parser.DBCLOB - 67)) | (1 << (Cobol85Parser.DEBUG_CONTENTS - 67)) | (1 << (Cobol85Parser.DEBUG_ITEM - 67)) | (1 << (Cobol85Parser.DEBUG_LINE - 67)) | (1 << (Cobol85Parser.DEBUG_NAME - 67)) | (1 << (Cobol85Parser.DEBUG_SUB_1 - 67)) | (1 << (Cobol85Parser.DEBUG_SUB_2 - 67)) | (1 << (Cobol85Parser.DEBUG_SUB_3 - 67)))) != 0) or ((((_la - 131)) & ~0x3f) == 0 and ((1 << (_la - 131)) & ((1 << (Cobol85Parser.DEFAULT - 131)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 131)) | (1 << (Cobol85Parser.DEFINITION - 131)) | (1 << (Cobol85Parser.DFHRESP - 131)) | (1 << (Cobol85Parser.DFHVALUE - 131)) | (1 << (Cobol85Parser.DISK - 131)) | (1 << (Cobol85Parser.DONTCARE - 131)) | (1 << (Cobol85Parser.DOUBLE - 131)) | (1 << (Cobol85Parser.EBCDIC - 131)) | (1 << (Cobol85Parser.EMPTY_CHECK - 131)) | (1 << (Cobol85Parser.ENTER - 131)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 131)) | (1 << (Cobol85Parser.ERASE - 131)) | (1 << (Cobol85Parser.EOL - 131)) | (1 << (Cobol85Parser.EOS - 131)))) != 0) or ((((_la - 195)) & ~0x3f) == 0 and ((1 << (_la - 195)) & ((1 << (Cobol85Parser.ESCAPE - 195)) | (1 << (Cobol85Parser.EVENT - 195)) | (1 << (Cobol85Parser.EXCLUSIVE - 195)) | (1 << (Cobol85Parser.EXPORT - 195)) | (1 << (Cobol85Parser.EXTENDED - 195)) | (1 << (Cobol85Parser.FOREGROUND_COLOR - 195)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 195)) | (1 << (Cobol85Parser.FULL - 195)) | (1 << (Cobol85Parser.FUNCTION - 195)) | (1 << (Cobol85Parser.FUNCTIONNAME - 195)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 195)) | (1 << (Cobol85Parser.GRID - 195)) | (1 << (Cobol85Parser.HIGHLIGHT - 195)) | (1 << (Cobol85Parser.IMPLICIT - 195)) | (1 << (Cobol85Parser.IMPORT - 195)) | (1 << (Cobol85Parser.INTEGER - 195)))) != 0) or ((((_la - 262)) & ~0x3f) == 0 and ((1 << (_la - 262)) & ((1 << (Cobol85Parser.KEPT - 262)) | (1 << (Cobol85Parser.KEYBOARD - 262)) | (1 << (Cobol85Parser.LANGUAGE - 262)) | (1 << (Cobol85Parser.LB - 262)) | (1 << (Cobol85Parser.LD - 262)) | (1 << (Cobol85Parser.LEFTLINE - 262)) | (1 << (Cobol85Parser.LENGTH - 262)) | (1 << (Cobol85Parser.LENGTH_CHECK - 262)) | (1 << (Cobol85Parser.LIBACCESS - 262)) | (1 << (Cobol85Parser.LIBPARAMETER - 262)) | (1 << (Cobol85Parser.LIBRARY - 262)) | (1 << (Cobol85Parser.LINAGE_COUNTER - 262)) | (1 << (Cobol85Parser.LINE_COUNTER - 262)) | (1 << (Cobol85Parser.LIST - 262)) | (1 << (Cobol85Parser.LOCAL - 262)) | (1 << (Cobol85Parser.LONG_DATE - 262)) | (1 << (Cobol85Parser.LONG_TIME - 262)) | (1 << (Cobol85Parser.LOWER - 262)) | (1 << (Cobol85Parser.LOWLIGHT - 262)) | (1 << (Cobol85Parser.MMDDYYYY - 262)) | (1 << (Cobol85Parser.NAMED - 262)) | (1 << (Cobol85Parser.NATIONAL - 262)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 262)) | (1 << (Cobol85Parser.NETWORK - 262)) | (1 << (Cobol85Parser.NO_ECHO - 262)) | (1 << (Cobol85Parser.NUMERIC_DATE - 262)) | (1 << (Cobol85Parser.NUMERIC_TIME - 262)))) != 0) or ((((_la - 326)) & ~0x3f) == 0 and ((1 << (_la - 326)) & ((1 << (Cobol85Parser.ODT - 326)) | (1 << (Cobol85Parser.ORDERLY - 326)) | (1 << (Cobol85Parser.OVERLINE - 326)) | (1 << (Cobol85Parser.OWN - 326)) | (1 << (Cobol85Parser.PAGE_COUNTER - 326)) | (1 << (Cobol85Parser.PASSWORD - 326)) | (1 << (Cobol85Parser.PORT - 326)) | (1 << (Cobol85Parser.PRINTER - 326)) | (1 << (Cobol85Parser.PRIVATE - 326)) | (1 << (Cobol85Parser.PROCESS - 326)) | (1 << (Cobol85Parser.PROGRAM - 326)) | (1 << (Cobol85Parser.PROMPT - 326)) | (1 << (Cobol85Parser.READER - 326)) | (1 << (Cobol85Parser.REMOTE - 326)) | (1 << (Cobol85Parser.REAL - 326)) | (1 << (Cobol85Parser.RECEIVED - 326)) | (1 << (Cobol85Parser.RECURSIVE - 326)) | (1 << (Cobol85Parser.REF - 326)))) != 0) or ((((_la - 395)) & ~0x3f) == 0 and ((1 << (_la - 395)) & ((1 << (Cobol85Parser.REMOVE - 395)) | (1 << (Cobol85Parser.REQUIRED - 395)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 395)) | (1 << (Cobol85Parser.RETURN_CODE - 395)) | (1 << (Cobol85Parser.SAVE - 395)) | (1 << (Cobol85Parser.SECURE - 395)) | (1 << (Cobol85Parser.SHARED - 395)) | (1 << (Cobol85Parser.SHAREDBYALL - 395)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 395)) | (1 << (Cobol85Parser.SHARING - 395)) | (1 << (Cobol85Parser.SHIFT_IN - 395)) | (1 << (Cobol85Parser.SHIFT_OUT - 395)) | (1 << (Cobol85Parser.SHORT_DATE - 395)) | (1 << (Cobol85Parser.SORT_CONTROL - 395)) | (1 << (Cobol85Parser.SORT_CORE_SIZE - 395)) | (1 << (Cobol85Parser.SORT_FILE_SIZE - 395)) | (1 << (Cobol85Parser.SORT_MESSAGE - 395)) | (1 << (Cobol85Parser.SORT_MODE_SIZE - 395)) | (1 << (Cobol85Parser.SORT_RETURN - 395)) | (1 << (Cobol85Parser.SQL - 395)))) != 0) or ((((_la - 471)) & ~0x3f) == 0 and ((1 << (_la - 471)) & ((1 << (Cobol85Parser.SYMBOL - 471)) | (1 << (Cobol85Parser.TALLY - 471)) | (1 << (Cobol85Parser.TASK - 471)) | (1 << (Cobol85Parser.THREAD - 471)) | (1 << (Cobol85Parser.THREAD_LOCAL - 471)) | (1 << (Cobol85Parser.TIME - 471)) | (1 << (Cobol85Parser.TIMER - 471)) | (1 << (Cobol85Parser.TODAYS_DATE - 471)) | (1 << (Cobol85Parser.TODAYS_NAME - 471)) | (1 << (Cobol85Parser.TRUNCATED - 471)) | (1 << (Cobol85Parser.TYPEDEF - 471)) | (1 << (Cobol85Parser.UNDERLINE - 471)) | (1 << (Cobol85Parser.VIRTUAL - 471)) | (1 << (Cobol85Parser.WAIT - 471)) | (1 << (Cobol85Parser.WHEN_COMPILED - 471)) | (1 << (Cobol85Parser.YEAR - 471)) | (1 << (Cobol85Parser.YYYYMMDD - 471)) | (1 << (Cobol85Parser.YYYYDDD - 471)) | (1 << (Cobol85Parser.ZERO_FILL - 471)))) != 0) or ((((_la - 557)) & ~0x3f) == 0 and ((1 << (_la - 557)) & ((1 << (Cobol85Parser.LEVEL_NUMBER_66 - 557)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 557)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 557)) | (1 << (Cobol85Parser.INTEGERLITERAL - 557)) | (1 << (Cobol85Parser.IDENTIFIER - 557)))) != 0)):
                    break

            self.state = 5141
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Cobol85Parser.UP]:
                self.state = 5137
                self.match(Cobol85Parser.UP)
                self.state = 5138
                self.match(Cobol85Parser.BY)
                pass
            elif token in [Cobol85Parser.DOWN]:
                self.state = 5139
                self.match(Cobol85Parser.DOWN)
                self.state = 5140
                self.match(Cobol85Parser.BY)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 5143
            self.setByValue()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SetToContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.SetToContext, self).__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(Cobol85Parser.IdentifierContext,0)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_setTo

        def enterRule(self, listener):
            if hasattr(listener, "enterSetTo"):
                listener.enterSetTo(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSetTo"):
                listener.exitSetTo(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitSetTo"):
                return visitor.visitSetTo(self)
            else:
                return visitor.visitChildren(self)




    def setTo(self):

        localctx = Cobol85Parser.SetToContext(self, self._ctx, self.state)
        self.enterRule(localctx, 894, self.RULE_setTo)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5145
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SetToValueContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.SetToValueContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(Cobol85Parser.ON, 0)

        def OFF(self):
            return self.getToken(Cobol85Parser.OFF, 0)

        def ENTRY(self):
            return self.getToken(Cobol85Parser.ENTRY, 0)

        def identifier(self):
            return self.getTypedRuleContext(Cobol85Parser.IdentifierContext,0)


        def literal(self):
            return self.getTypedRuleContext(Cobol85Parser.LiteralContext,0)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_setToValue

        def enterRule(self, listener):
            if hasattr(listener, "enterSetToValue"):
                listener.enterSetToValue(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSetToValue"):
                listener.exitSetToValue(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitSetToValue"):
                return visitor.visitSetToValue(self)
            else:
                return visitor.visitChildren(self)




    def setToValue(self):

        localctx = Cobol85Parser.SetToValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 896, self.RULE_setToValue)
        try:
            self.state = 5156
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,777,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5147
                self.match(Cobol85Parser.ON)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5148
                self.match(Cobol85Parser.OFF)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 5149
                self.match(Cobol85Parser.ENTRY)
                self.state = 5152
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,776,self._ctx)
                if la_ == 1:
                    self.state = 5150
                    self.identifier()
                    pass

                elif la_ == 2:
                    self.state = 5151
                    self.literal()
                    pass


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 5154
                self.identifier()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 5155
                self.literal()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SetByValueContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.SetByValueContext, self).__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(Cobol85Parser.IdentifierContext,0)


        def literal(self):
            return self.getTypedRuleContext(Cobol85Parser.LiteralContext,0)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_setByValue

        def enterRule(self, listener):
            if hasattr(listener, "enterSetByValue"):
                listener.enterSetByValue(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSetByValue"):
                listener.exitSetByValue(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitSetByValue"):
                return visitor.visitSetByValue(self)
            else:
                return visitor.visitChildren(self)




    def setByValue(self):

        localctx = Cobol85Parser.SetByValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 898, self.RULE_setByValue)
        try:
            self.state = 5160
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,778,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5158
                self.identifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5159
                self.literal()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SortStatementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.SortStatementContext, self).__init__(parent, invokingState)
            self.parser = parser

        def SORT(self):
            return self.getToken(Cobol85Parser.SORT, 0)

        def fileName(self):
            return self.getTypedRuleContext(Cobol85Parser.FileNameContext,0)


        def sortOnKeyClause(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.SortOnKeyClauseContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.SortOnKeyClauseContext,i)


        def sortDuplicatesPhrase(self):
            return self.getTypedRuleContext(Cobol85Parser.SortDuplicatesPhraseContext,0)


        def sortCollatingSequencePhrase(self):
            return self.getTypedRuleContext(Cobol85Parser.SortCollatingSequencePhraseContext,0)


        def sortInputProcedurePhrase(self):
            return self.getTypedRuleContext(Cobol85Parser.SortInputProcedurePhraseContext,0)


        def sortUsing(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.SortUsingContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.SortUsingContext,i)


        def sortOutputProcedurePhrase(self):
            return self.getTypedRuleContext(Cobol85Parser.SortOutputProcedurePhraseContext,0)


        def sortGivingPhrase(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.SortGivingPhraseContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.SortGivingPhraseContext,i)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_sortStatement

        def enterRule(self, listener):
            if hasattr(listener, "enterSortStatement"):
                listener.enterSortStatement(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSortStatement"):
                listener.exitSortStatement(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitSortStatement"):
                return visitor.visitSortStatement(self)
            else:
                return visitor.visitChildren(self)




    def sortStatement(self):

        localctx = Cobol85Parser.SortStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 900, self.RULE_sortStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5162
            self.match(Cobol85Parser.SORT)
            self.state = 5163
            self.fileName()
            self.state = 5165 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 5164
                    self.sortOnKeyClause()

                else:
                    raise NoViableAltException(self)
                self.state = 5167 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,779,self._ctx)

            self.state = 5170
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,780,self._ctx)
            if la_ == 1:
                self.state = 5169
                self.sortDuplicatesPhrase()


            self.state = 5173
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.COLLATING or _la==Cobol85Parser.SEQUENCE:
                self.state = 5172
                self.sortCollatingSequencePhrase()


            self.state = 5176
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.INPUT:
                self.state = 5175
                self.sortInputProcedurePhrase()


            self.state = 5181
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==Cobol85Parser.USING:
                self.state = 5178
                self.sortUsing()
                self.state = 5183
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 5185
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.OUTPUT:
                self.state = 5184
                self.sortOutputProcedurePhrase()


            self.state = 5190
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==Cobol85Parser.GIVING:
                self.state = 5187
                self.sortGivingPhrase()
                self.state = 5192
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SortOnKeyClauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.SortOnKeyClauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ASCENDING(self):
            return self.getToken(Cobol85Parser.ASCENDING, 0)

        def DESCENDING(self):
            return self.getToken(Cobol85Parser.DESCENDING, 0)

        def ON(self):
            return self.getToken(Cobol85Parser.ON, 0)

        def KEY(self):
            return self.getToken(Cobol85Parser.KEY, 0)

        def qualifiedDataName(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.QualifiedDataNameContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.QualifiedDataNameContext,i)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_sortOnKeyClause

        def enterRule(self, listener):
            if hasattr(listener, "enterSortOnKeyClause"):
                listener.enterSortOnKeyClause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSortOnKeyClause"):
                listener.exitSortOnKeyClause(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitSortOnKeyClause"):
                return visitor.visitSortOnKeyClause(self)
            else:
                return visitor.visitChildren(self)




    def sortOnKeyClause(self):

        localctx = Cobol85Parser.SortOnKeyClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 902, self.RULE_sortOnKeyClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5194
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.ON:
                self.state = 5193
                self.match(Cobol85Parser.ON)


            self.state = 5196
            _la = self._input.LA(1)
            if not(_la==Cobol85Parser.ASCENDING or _la==Cobol85Parser.DESCENDING):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 5198
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.KEY:
                self.state = 5197
                self.match(Cobol85Parser.KEY)


            self.state = 5201 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 5200
                self.qualifiedDataName()
                self.state = 5203 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE) | (1 << Cobol85Parser.AUTO) | (1 << Cobol85Parser.AUTO_SKIP) | (1 << Cobol85Parser.BACKGROUND_COLOR) | (1 << Cobol85Parser.BACKGROUND_COLOUR) | (1 << Cobol85Parser.BEEP) | (1 << Cobol85Parser.BELL) | (1 << Cobol85Parser.BINARY) | (1 << Cobol85Parser.BIT) | (1 << Cobol85Parser.BLINK) | (1 << Cobol85Parser.BLOB) | (1 << Cobol85Parser.BOUNDS) | (1 << Cobol85Parser.CAPABLE) | (1 << Cobol85Parser.CCSVERSION) | (1 << Cobol85Parser.CHANGED) | (1 << Cobol85Parser.CHANNEL))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (Cobol85Parser.CLOB - 67)) | (1 << (Cobol85Parser.CLOSE_DISPOSITION - 67)) | (1 << (Cobol85Parser.COBOL - 67)) | (1 << (Cobol85Parser.COMMITMENT - 67)) | (1 << (Cobol85Parser.CONTROL_POINT - 67)) | (1 << (Cobol85Parser.CONVENTION - 67)) | (1 << (Cobol85Parser.CRUNCH - 67)) | (1 << (Cobol85Parser.CURSOR - 67)) | (1 << (Cobol85Parser.DBCLOB - 67)))) != 0) or ((((_la - 131)) & ~0x3f) == 0 and ((1 << (_la - 131)) & ((1 << (Cobol85Parser.DEFAULT - 131)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 131)) | (1 << (Cobol85Parser.DEFINITION - 131)) | (1 << (Cobol85Parser.DFHRESP - 131)) | (1 << (Cobol85Parser.DFHVALUE - 131)) | (1 << (Cobol85Parser.DISK - 131)) | (1 << (Cobol85Parser.DONTCARE - 131)) | (1 << (Cobol85Parser.DOUBLE - 131)) | (1 << (Cobol85Parser.EBCDIC - 131)) | (1 << (Cobol85Parser.EMPTY_CHECK - 131)) | (1 << (Cobol85Parser.ENTER - 131)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 131)) | (1 << (Cobol85Parser.ERASE - 131)) | (1 << (Cobol85Parser.EOL - 131)) | (1 << (Cobol85Parser.EOS - 131)))) != 0) or ((((_la - 195)) & ~0x3f) == 0 and ((1 << (_la - 195)) & ((1 << (Cobol85Parser.ESCAPE - 195)) | (1 << (Cobol85Parser.EVENT - 195)) | (1 << (Cobol85Parser.EXCLUSIVE - 195)) | (1 << (Cobol85Parser.EXPORT - 195)) | (1 << (Cobol85Parser.EXTENDED - 195)) | (1 << (Cobol85Parser.FOREGROUND_COLOR - 195)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 195)) | (1 << (Cobol85Parser.FULL - 195)) | (1 << (Cobol85Parser.FUNCTIONNAME - 195)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 195)) | (1 << (Cobol85Parser.GRID - 195)) | (1 << (Cobol85Parser.HIGHLIGHT - 195)) | (1 << (Cobol85Parser.IMPLICIT - 195)) | (1 << (Cobol85Parser.IMPORT - 195)) | (1 << (Cobol85Parser.INTEGER - 195)))) != 0) or ((((_la - 262)) & ~0x3f) == 0 and ((1 << (_la - 262)) & ((1 << (Cobol85Parser.KEPT - 262)) | (1 << (Cobol85Parser.KEYBOARD - 262)) | (1 << (Cobol85Parser.LANGUAGE - 262)) | (1 << (Cobol85Parser.LB - 262)) | (1 << (Cobol85Parser.LD - 262)) | (1 << (Cobol85Parser.LEFTLINE - 262)) | (1 << (Cobol85Parser.LENGTH_CHECK - 262)) | (1 << (Cobol85Parser.LIBACCESS - 262)) | (1 << (Cobol85Parser.LIBPARAMETER - 262)) | (1 << (Cobol85Parser.LIBRARY - 262)) | (1 << (Cobol85Parser.LINAGE_COUNTER - 262)) | (1 << (Cobol85Parser.LIST - 262)) | (1 << (Cobol85Parser.LOCAL - 262)) | (1 << (Cobol85Parser.LONG_DATE - 262)) | (1 << (Cobol85Parser.LONG_TIME - 262)) | (1 << (Cobol85Parser.LOWER - 262)) | (1 << (Cobol85Parser.LOWLIGHT - 262)) | (1 << (Cobol85Parser.MMDDYYYY - 262)) | (1 << (Cobol85Parser.NAMED - 262)) | (1 << (Cobol85Parser.NATIONAL - 262)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 262)) | (1 << (Cobol85Parser.NETWORK - 262)) | (1 << (Cobol85Parser.NO_ECHO - 262)) | (1 << (Cobol85Parser.NUMERIC_DATE - 262)) | (1 << (Cobol85Parser.NUMERIC_TIME - 262)))) != 0) or ((((_la - 326)) & ~0x3f) == 0 and ((1 << (_la - 326)) & ((1 << (Cobol85Parser.ODT - 326)) | (1 << (Cobol85Parser.ORDERLY - 326)) | (1 << (Cobol85Parser.OVERLINE - 326)) | (1 << (Cobol85Parser.OWN - 326)) | (1 << (Cobol85Parser.PASSWORD - 326)) | (1 << (Cobol85Parser.PORT - 326)) | (1 << (Cobol85Parser.PRINTER - 326)) | (1 << (Cobol85Parser.PRIVATE - 326)) | (1 << (Cobol85Parser.PROCESS - 326)) | (1 << (Cobol85Parser.PROGRAM - 326)) | (1 << (Cobol85Parser.PROMPT - 326)) | (1 << (Cobol85Parser.READER - 326)) | (1 << (Cobol85Parser.REMOTE - 326)) | (1 << (Cobol85Parser.REAL - 326)) | (1 << (Cobol85Parser.RECEIVED - 326)) | (1 << (Cobol85Parser.RECURSIVE - 326)) | (1 << (Cobol85Parser.REF - 326)))) != 0) or ((((_la - 395)) & ~0x3f) == 0 and ((1 << (_la - 395)) & ((1 << (Cobol85Parser.REMOVE - 395)) | (1 << (Cobol85Parser.REQUIRED - 395)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 395)) | (1 << (Cobol85Parser.SAVE - 395)) | (1 << (Cobol85Parser.SECURE - 395)) | (1 << (Cobol85Parser.SHARED - 395)) | (1 << (Cobol85Parser.SHAREDBYALL - 395)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 395)) | (1 << (Cobol85Parser.SHARING - 395)) | (1 << (Cobol85Parser.SHORT_DATE - 395)) | (1 << (Cobol85Parser.SQL - 395)))) != 0) or ((((_la - 471)) & ~0x3f) == 0 and ((1 << (_la - 471)) & ((1 << (Cobol85Parser.SYMBOL - 471)) | (1 << (Cobol85Parser.TASK - 471)) | (1 << (Cobol85Parser.THREAD - 471)) | (1 << (Cobol85Parser.THREAD_LOCAL - 471)) | (1 << (Cobol85Parser.TIMER - 471)) | (1 << (Cobol85Parser.TODAYS_DATE - 471)) | (1 << (Cobol85Parser.TODAYS_NAME - 471)) | (1 << (Cobol85Parser.TRUNCATED - 471)) | (1 << (Cobol85Parser.TYPEDEF - 471)) | (1 << (Cobol85Parser.UNDERLINE - 471)) | (1 << (Cobol85Parser.VIRTUAL - 471)) | (1 << (Cobol85Parser.WAIT - 471)) | (1 << (Cobol85Parser.YEAR - 471)) | (1 << (Cobol85Parser.YYYYMMDD - 471)) | (1 << (Cobol85Parser.YYYYDDD - 471)) | (1 << (Cobol85Parser.ZERO_FILL - 471)))) != 0) or ((((_la - 557)) & ~0x3f) == 0 and ((1 << (_la - 557)) & ((1 << (Cobol85Parser.LEVEL_NUMBER_66 - 557)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 557)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 557)) | (1 << (Cobol85Parser.INTEGERLITERAL - 557)) | (1 << (Cobol85Parser.IDENTIFIER - 557)))) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SortDuplicatesPhraseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.SortDuplicatesPhraseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def DUPLICATES(self):
            return self.getToken(Cobol85Parser.DUPLICATES, 0)

        def WITH(self):
            return self.getToken(Cobol85Parser.WITH, 0)

        def IN(self):
            return self.getToken(Cobol85Parser.IN, 0)

        def ORDER(self):
            return self.getToken(Cobol85Parser.ORDER, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_sortDuplicatesPhrase

        def enterRule(self, listener):
            if hasattr(listener, "enterSortDuplicatesPhrase"):
                listener.enterSortDuplicatesPhrase(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSortDuplicatesPhrase"):
                listener.exitSortDuplicatesPhrase(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitSortDuplicatesPhrase"):
                return visitor.visitSortDuplicatesPhrase(self)
            else:
                return visitor.visitChildren(self)




    def sortDuplicatesPhrase(self):

        localctx = Cobol85Parser.SortDuplicatesPhraseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 904, self.RULE_sortDuplicatesPhrase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5206
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.WITH:
                self.state = 5205
                self.match(Cobol85Parser.WITH)


            self.state = 5208
            self.match(Cobol85Parser.DUPLICATES)
            self.state = 5210
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.IN:
                self.state = 5209
                self.match(Cobol85Parser.IN)


            self.state = 5213
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.ORDER:
                self.state = 5212
                self.match(Cobol85Parser.ORDER)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SortCollatingSequencePhraseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.SortCollatingSequencePhraseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def SEQUENCE(self):
            return self.getToken(Cobol85Parser.SEQUENCE, 0)

        def COLLATING(self):
            return self.getToken(Cobol85Parser.COLLATING, 0)

        def IS(self):
            return self.getToken(Cobol85Parser.IS, 0)

        def alphabetName(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.AlphabetNameContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.AlphabetNameContext,i)


        def sortCollatingAlphanumeric(self):
            return self.getTypedRuleContext(Cobol85Parser.SortCollatingAlphanumericContext,0)


        def sortCollatingNational(self):
            return self.getTypedRuleContext(Cobol85Parser.SortCollatingNationalContext,0)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_sortCollatingSequencePhrase

        def enterRule(self, listener):
            if hasattr(listener, "enterSortCollatingSequencePhrase"):
                listener.enterSortCollatingSequencePhrase(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSortCollatingSequencePhrase"):
                listener.exitSortCollatingSequencePhrase(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitSortCollatingSequencePhrase"):
                return visitor.visitSortCollatingSequencePhrase(self)
            else:
                return visitor.visitChildren(self)




    def sortCollatingSequencePhrase(self):

        localctx = Cobol85Parser.SortCollatingSequencePhraseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 906, self.RULE_sortCollatingSequencePhrase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5216
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.COLLATING:
                self.state = 5215
                self.match(Cobol85Parser.COLLATING)


            self.state = 5218
            self.match(Cobol85Parser.SEQUENCE)
            self.state = 5220
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.IS:
                self.state = 5219
                self.match(Cobol85Parser.IS)


            self.state = 5223 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 5222
                    self.alphabetName()

                else:
                    raise NoViableAltException(self)
                self.state = 5225 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,794,self._ctx)

            self.state = 5228
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,795,self._ctx)
            if la_ == 1:
                self.state = 5227
                self.sortCollatingAlphanumeric()


            self.state = 5231
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.FOR or _la==Cobol85Parser.NATIONAL:
                self.state = 5230
                self.sortCollatingNational()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SortCollatingAlphanumericContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.SortCollatingAlphanumericContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ALPHANUMERIC(self):
            return self.getToken(Cobol85Parser.ALPHANUMERIC, 0)

        def IS(self):
            return self.getToken(Cobol85Parser.IS, 0)

        def alphabetName(self):
            return self.getTypedRuleContext(Cobol85Parser.AlphabetNameContext,0)


        def FOR(self):
            return self.getToken(Cobol85Parser.FOR, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_sortCollatingAlphanumeric

        def enterRule(self, listener):
            if hasattr(listener, "enterSortCollatingAlphanumeric"):
                listener.enterSortCollatingAlphanumeric(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSortCollatingAlphanumeric"):
                listener.exitSortCollatingAlphanumeric(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitSortCollatingAlphanumeric"):
                return visitor.visitSortCollatingAlphanumeric(self)
            else:
                return visitor.visitChildren(self)




    def sortCollatingAlphanumeric(self):

        localctx = Cobol85Parser.SortCollatingAlphanumericContext(self, self._ctx, self.state)
        self.enterRule(localctx, 908, self.RULE_sortCollatingAlphanumeric)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5234
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.FOR:
                self.state = 5233
                self.match(Cobol85Parser.FOR)


            self.state = 5236
            self.match(Cobol85Parser.ALPHANUMERIC)
            self.state = 5237
            self.match(Cobol85Parser.IS)
            self.state = 5238
            self.alphabetName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SortCollatingNationalContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.SortCollatingNationalContext, self).__init__(parent, invokingState)
            self.parser = parser

        def NATIONAL(self):
            return self.getToken(Cobol85Parser.NATIONAL, 0)

        def alphabetName(self):
            return self.getTypedRuleContext(Cobol85Parser.AlphabetNameContext,0)


        def FOR(self):
            return self.getToken(Cobol85Parser.FOR, 0)

        def IS(self):
            return self.getToken(Cobol85Parser.IS, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_sortCollatingNational

        def enterRule(self, listener):
            if hasattr(listener, "enterSortCollatingNational"):
                listener.enterSortCollatingNational(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSortCollatingNational"):
                listener.exitSortCollatingNational(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitSortCollatingNational"):
                return visitor.visitSortCollatingNational(self)
            else:
                return visitor.visitChildren(self)




    def sortCollatingNational(self):

        localctx = Cobol85Parser.SortCollatingNationalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 910, self.RULE_sortCollatingNational)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5241
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.FOR:
                self.state = 5240
                self.match(Cobol85Parser.FOR)


            self.state = 5243
            self.match(Cobol85Parser.NATIONAL)
            self.state = 5245
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.IS:
                self.state = 5244
                self.match(Cobol85Parser.IS)


            self.state = 5247
            self.alphabetName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SortInputProcedurePhraseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.SortInputProcedurePhraseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def INPUT(self):
            return self.getToken(Cobol85Parser.INPUT, 0)

        def PROCEDURE(self):
            return self.getToken(Cobol85Parser.PROCEDURE, 0)

        def procedureName(self):
            return self.getTypedRuleContext(Cobol85Parser.ProcedureNameContext,0)


        def IS(self):
            return self.getToken(Cobol85Parser.IS, 0)

        def sortInputThrough(self):
            return self.getTypedRuleContext(Cobol85Parser.SortInputThroughContext,0)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_sortInputProcedurePhrase

        def enterRule(self, listener):
            if hasattr(listener, "enterSortInputProcedurePhrase"):
                listener.enterSortInputProcedurePhrase(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSortInputProcedurePhrase"):
                listener.exitSortInputProcedurePhrase(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitSortInputProcedurePhrase"):
                return visitor.visitSortInputProcedurePhrase(self)
            else:
                return visitor.visitChildren(self)




    def sortInputProcedurePhrase(self):

        localctx = Cobol85Parser.SortInputProcedurePhraseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 912, self.RULE_sortInputProcedurePhrase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5249
            self.match(Cobol85Parser.INPUT)
            self.state = 5250
            self.match(Cobol85Parser.PROCEDURE)
            self.state = 5252
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.IS:
                self.state = 5251
                self.match(Cobol85Parser.IS)


            self.state = 5254
            self.procedureName()
            self.state = 5256
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.THROUGH or _la==Cobol85Parser.THRU:
                self.state = 5255
                self.sortInputThrough()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SortInputThroughContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.SortInputThroughContext, self).__init__(parent, invokingState)
            self.parser = parser

        def procedureName(self):
            return self.getTypedRuleContext(Cobol85Parser.ProcedureNameContext,0)


        def THROUGH(self):
            return self.getToken(Cobol85Parser.THROUGH, 0)

        def THRU(self):
            return self.getToken(Cobol85Parser.THRU, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_sortInputThrough

        def enterRule(self, listener):
            if hasattr(listener, "enterSortInputThrough"):
                listener.enterSortInputThrough(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSortInputThrough"):
                listener.exitSortInputThrough(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitSortInputThrough"):
                return visitor.visitSortInputThrough(self)
            else:
                return visitor.visitChildren(self)




    def sortInputThrough(self):

        localctx = Cobol85Parser.SortInputThroughContext(self, self._ctx, self.state)
        self.enterRule(localctx, 914, self.RULE_sortInputThrough)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5258
            _la = self._input.LA(1)
            if not(_la==Cobol85Parser.THROUGH or _la==Cobol85Parser.THRU):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 5259
            self.procedureName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SortUsingContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.SortUsingContext, self).__init__(parent, invokingState)
            self.parser = parser

        def USING(self):
            return self.getToken(Cobol85Parser.USING, 0)

        def fileName(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.FileNameContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.FileNameContext,i)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_sortUsing

        def enterRule(self, listener):
            if hasattr(listener, "enterSortUsing"):
                listener.enterSortUsing(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSortUsing"):
                listener.exitSortUsing(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitSortUsing"):
                return visitor.visitSortUsing(self)
            else:
                return visitor.visitChildren(self)




    def sortUsing(self):

        localctx = Cobol85Parser.SortUsingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 916, self.RULE_sortUsing)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5261
            self.match(Cobol85Parser.USING)
            self.state = 5263 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 5262
                self.fileName()
                self.state = 5265 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE) | (1 << Cobol85Parser.AUTO) | (1 << Cobol85Parser.AUTO_SKIP) | (1 << Cobol85Parser.BACKGROUND_COLOR) | (1 << Cobol85Parser.BACKGROUND_COLOUR) | (1 << Cobol85Parser.BEEP) | (1 << Cobol85Parser.BELL) | (1 << Cobol85Parser.BINARY) | (1 << Cobol85Parser.BIT) | (1 << Cobol85Parser.BLINK) | (1 << Cobol85Parser.BLOB) | (1 << Cobol85Parser.BOUNDS) | (1 << Cobol85Parser.CAPABLE) | (1 << Cobol85Parser.CCSVERSION) | (1 << Cobol85Parser.CHANGED) | (1 << Cobol85Parser.CHANNEL))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (Cobol85Parser.CLOB - 67)) | (1 << (Cobol85Parser.CLOSE_DISPOSITION - 67)) | (1 << (Cobol85Parser.COBOL - 67)) | (1 << (Cobol85Parser.COMMITMENT - 67)) | (1 << (Cobol85Parser.CONTROL_POINT - 67)) | (1 << (Cobol85Parser.CONVENTION - 67)) | (1 << (Cobol85Parser.CRUNCH - 67)) | (1 << (Cobol85Parser.CURSOR - 67)) | (1 << (Cobol85Parser.DBCLOB - 67)))) != 0) or ((((_la - 131)) & ~0x3f) == 0 and ((1 << (_la - 131)) & ((1 << (Cobol85Parser.DEFAULT - 131)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 131)) | (1 << (Cobol85Parser.DEFINITION - 131)) | (1 << (Cobol85Parser.DFHRESP - 131)) | (1 << (Cobol85Parser.DFHVALUE - 131)) | (1 << (Cobol85Parser.DISK - 131)) | (1 << (Cobol85Parser.DONTCARE - 131)) | (1 << (Cobol85Parser.DOUBLE - 131)) | (1 << (Cobol85Parser.EBCDIC - 131)) | (1 << (Cobol85Parser.EMPTY_CHECK - 131)) | (1 << (Cobol85Parser.ENTER - 131)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 131)) | (1 << (Cobol85Parser.ERASE - 131)) | (1 << (Cobol85Parser.EOL - 131)) | (1 << (Cobol85Parser.EOS - 131)))) != 0) or ((((_la - 195)) & ~0x3f) == 0 and ((1 << (_la - 195)) & ((1 << (Cobol85Parser.ESCAPE - 195)) | (1 << (Cobol85Parser.EVENT - 195)) | (1 << (Cobol85Parser.EXCLUSIVE - 195)) | (1 << (Cobol85Parser.EXPORT - 195)) | (1 << (Cobol85Parser.EXTENDED - 195)) | (1 << (Cobol85Parser.FOREGROUND_COLOR - 195)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 195)) | (1 << (Cobol85Parser.FULL - 195)) | (1 << (Cobol85Parser.FUNCTIONNAME - 195)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 195)) | (1 << (Cobol85Parser.GRID - 195)) | (1 << (Cobol85Parser.HIGHLIGHT - 195)) | (1 << (Cobol85Parser.IMPLICIT - 195)) | (1 << (Cobol85Parser.IMPORT - 195)) | (1 << (Cobol85Parser.INTEGER - 195)))) != 0) or ((((_la - 262)) & ~0x3f) == 0 and ((1 << (_la - 262)) & ((1 << (Cobol85Parser.KEPT - 262)) | (1 << (Cobol85Parser.KEYBOARD - 262)) | (1 << (Cobol85Parser.LANGUAGE - 262)) | (1 << (Cobol85Parser.LB - 262)) | (1 << (Cobol85Parser.LD - 262)) | (1 << (Cobol85Parser.LEFTLINE - 262)) | (1 << (Cobol85Parser.LENGTH_CHECK - 262)) | (1 << (Cobol85Parser.LIBACCESS - 262)) | (1 << (Cobol85Parser.LIBPARAMETER - 262)) | (1 << (Cobol85Parser.LIBRARY - 262)) | (1 << (Cobol85Parser.LIST - 262)) | (1 << (Cobol85Parser.LOCAL - 262)) | (1 << (Cobol85Parser.LONG_DATE - 262)) | (1 << (Cobol85Parser.LONG_TIME - 262)) | (1 << (Cobol85Parser.LOWER - 262)) | (1 << (Cobol85Parser.LOWLIGHT - 262)) | (1 << (Cobol85Parser.MMDDYYYY - 262)) | (1 << (Cobol85Parser.NAMED - 262)) | (1 << (Cobol85Parser.NATIONAL - 262)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 262)) | (1 << (Cobol85Parser.NETWORK - 262)) | (1 << (Cobol85Parser.NO_ECHO - 262)) | (1 << (Cobol85Parser.NUMERIC_DATE - 262)) | (1 << (Cobol85Parser.NUMERIC_TIME - 262)))) != 0) or ((((_la - 326)) & ~0x3f) == 0 and ((1 << (_la - 326)) & ((1 << (Cobol85Parser.ODT - 326)) | (1 << (Cobol85Parser.ORDERLY - 326)) | (1 << (Cobol85Parser.OVERLINE - 326)) | (1 << (Cobol85Parser.OWN - 326)) | (1 << (Cobol85Parser.PASSWORD - 326)) | (1 << (Cobol85Parser.PORT - 326)) | (1 << (Cobol85Parser.PRINTER - 326)) | (1 << (Cobol85Parser.PRIVATE - 326)) | (1 << (Cobol85Parser.PROCESS - 326)) | (1 << (Cobol85Parser.PROGRAM - 326)) | (1 << (Cobol85Parser.PROMPT - 326)) | (1 << (Cobol85Parser.READER - 326)) | (1 << (Cobol85Parser.REMOTE - 326)) | (1 << (Cobol85Parser.REAL - 326)) | (1 << (Cobol85Parser.RECEIVED - 326)) | (1 << (Cobol85Parser.RECURSIVE - 326)) | (1 << (Cobol85Parser.REF - 326)))) != 0) or ((((_la - 395)) & ~0x3f) == 0 and ((1 << (_la - 395)) & ((1 << (Cobol85Parser.REMOVE - 395)) | (1 << (Cobol85Parser.REQUIRED - 395)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 395)) | (1 << (Cobol85Parser.SAVE - 395)) | (1 << (Cobol85Parser.SECURE - 395)) | (1 << (Cobol85Parser.SHARED - 395)) | (1 << (Cobol85Parser.SHAREDBYALL - 395)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 395)) | (1 << (Cobol85Parser.SHARING - 395)) | (1 << (Cobol85Parser.SHORT_DATE - 395)) | (1 << (Cobol85Parser.SQL - 395)))) != 0) or ((((_la - 471)) & ~0x3f) == 0 and ((1 << (_la - 471)) & ((1 << (Cobol85Parser.SYMBOL - 471)) | (1 << (Cobol85Parser.TASK - 471)) | (1 << (Cobol85Parser.THREAD - 471)) | (1 << (Cobol85Parser.THREAD_LOCAL - 471)) | (1 << (Cobol85Parser.TIMER - 471)) | (1 << (Cobol85Parser.TODAYS_DATE - 471)) | (1 << (Cobol85Parser.TODAYS_NAME - 471)) | (1 << (Cobol85Parser.TRUNCATED - 471)) | (1 << (Cobol85Parser.TYPEDEF - 471)) | (1 << (Cobol85Parser.UNDERLINE - 471)) | (1 << (Cobol85Parser.VIRTUAL - 471)) | (1 << (Cobol85Parser.WAIT - 471)) | (1 << (Cobol85Parser.YEAR - 471)) | (1 << (Cobol85Parser.YYYYMMDD - 471)) | (1 << (Cobol85Parser.YYYYDDD - 471)) | (1 << (Cobol85Parser.ZERO_FILL - 471)))) != 0) or _la==Cobol85Parser.IDENTIFIER):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SortOutputProcedurePhraseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.SortOutputProcedurePhraseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def OUTPUT(self):
            return self.getToken(Cobol85Parser.OUTPUT, 0)

        def PROCEDURE(self):
            return self.getToken(Cobol85Parser.PROCEDURE, 0)

        def procedureName(self):
            return self.getTypedRuleContext(Cobol85Parser.ProcedureNameContext,0)


        def IS(self):
            return self.getToken(Cobol85Parser.IS, 0)

        def sortOutputThrough(self):
            return self.getTypedRuleContext(Cobol85Parser.SortOutputThroughContext,0)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_sortOutputProcedurePhrase

        def enterRule(self, listener):
            if hasattr(listener, "enterSortOutputProcedurePhrase"):
                listener.enterSortOutputProcedurePhrase(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSortOutputProcedurePhrase"):
                listener.exitSortOutputProcedurePhrase(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitSortOutputProcedurePhrase"):
                return visitor.visitSortOutputProcedurePhrase(self)
            else:
                return visitor.visitChildren(self)




    def sortOutputProcedurePhrase(self):

        localctx = Cobol85Parser.SortOutputProcedurePhraseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 918, self.RULE_sortOutputProcedurePhrase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5267
            self.match(Cobol85Parser.OUTPUT)
            self.state = 5268
            self.match(Cobol85Parser.PROCEDURE)
            self.state = 5270
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.IS:
                self.state = 5269
                self.match(Cobol85Parser.IS)


            self.state = 5272
            self.procedureName()
            self.state = 5274
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.THROUGH or _la==Cobol85Parser.THRU:
                self.state = 5273
                self.sortOutputThrough()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SortOutputThroughContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.SortOutputThroughContext, self).__init__(parent, invokingState)
            self.parser = parser

        def procedureName(self):
            return self.getTypedRuleContext(Cobol85Parser.ProcedureNameContext,0)


        def THROUGH(self):
            return self.getToken(Cobol85Parser.THROUGH, 0)

        def THRU(self):
            return self.getToken(Cobol85Parser.THRU, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_sortOutputThrough

        def enterRule(self, listener):
            if hasattr(listener, "enterSortOutputThrough"):
                listener.enterSortOutputThrough(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSortOutputThrough"):
                listener.exitSortOutputThrough(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitSortOutputThrough"):
                return visitor.visitSortOutputThrough(self)
            else:
                return visitor.visitChildren(self)




    def sortOutputThrough(self):

        localctx = Cobol85Parser.SortOutputThroughContext(self, self._ctx, self.state)
        self.enterRule(localctx, 920, self.RULE_sortOutputThrough)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5276
            _la = self._input.LA(1)
            if not(_la==Cobol85Parser.THROUGH or _la==Cobol85Parser.THRU):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 5277
            self.procedureName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SortGivingPhraseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.SortGivingPhraseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def GIVING(self):
            return self.getToken(Cobol85Parser.GIVING, 0)

        def sortGiving(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.SortGivingContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.SortGivingContext,i)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_sortGivingPhrase

        def enterRule(self, listener):
            if hasattr(listener, "enterSortGivingPhrase"):
                listener.enterSortGivingPhrase(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSortGivingPhrase"):
                listener.exitSortGivingPhrase(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitSortGivingPhrase"):
                return visitor.visitSortGivingPhrase(self)
            else:
                return visitor.visitChildren(self)




    def sortGivingPhrase(self):

        localctx = Cobol85Parser.SortGivingPhraseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 922, self.RULE_sortGivingPhrase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5279
            self.match(Cobol85Parser.GIVING)
            self.state = 5281 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 5280
                self.sortGiving()
                self.state = 5283 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE) | (1 << Cobol85Parser.AUTO) | (1 << Cobol85Parser.AUTO_SKIP) | (1 << Cobol85Parser.BACKGROUND_COLOR) | (1 << Cobol85Parser.BACKGROUND_COLOUR) | (1 << Cobol85Parser.BEEP) | (1 << Cobol85Parser.BELL) | (1 << Cobol85Parser.BINARY) | (1 << Cobol85Parser.BIT) | (1 << Cobol85Parser.BLINK) | (1 << Cobol85Parser.BLOB) | (1 << Cobol85Parser.BOUNDS) | (1 << Cobol85Parser.CAPABLE) | (1 << Cobol85Parser.CCSVERSION) | (1 << Cobol85Parser.CHANGED) | (1 << Cobol85Parser.CHANNEL))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (Cobol85Parser.CLOB - 67)) | (1 << (Cobol85Parser.CLOSE_DISPOSITION - 67)) | (1 << (Cobol85Parser.COBOL - 67)) | (1 << (Cobol85Parser.COMMITMENT - 67)) | (1 << (Cobol85Parser.CONTROL_POINT - 67)) | (1 << (Cobol85Parser.CONVENTION - 67)) | (1 << (Cobol85Parser.CRUNCH - 67)) | (1 << (Cobol85Parser.CURSOR - 67)) | (1 << (Cobol85Parser.DBCLOB - 67)))) != 0) or ((((_la - 131)) & ~0x3f) == 0 and ((1 << (_la - 131)) & ((1 << (Cobol85Parser.DEFAULT - 131)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 131)) | (1 << (Cobol85Parser.DEFINITION - 131)) | (1 << (Cobol85Parser.DFHRESP - 131)) | (1 << (Cobol85Parser.DFHVALUE - 131)) | (1 << (Cobol85Parser.DISK - 131)) | (1 << (Cobol85Parser.DONTCARE - 131)) | (1 << (Cobol85Parser.DOUBLE - 131)) | (1 << (Cobol85Parser.EBCDIC - 131)) | (1 << (Cobol85Parser.EMPTY_CHECK - 131)) | (1 << (Cobol85Parser.ENTER - 131)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 131)) | (1 << (Cobol85Parser.ERASE - 131)) | (1 << (Cobol85Parser.EOL - 131)) | (1 << (Cobol85Parser.EOS - 131)))) != 0) or ((((_la - 195)) & ~0x3f) == 0 and ((1 << (_la - 195)) & ((1 << (Cobol85Parser.ESCAPE - 195)) | (1 << (Cobol85Parser.EVENT - 195)) | (1 << (Cobol85Parser.EXCLUSIVE - 195)) | (1 << (Cobol85Parser.EXPORT - 195)) | (1 << (Cobol85Parser.EXTENDED - 195)) | (1 << (Cobol85Parser.FOREGROUND_COLOR - 195)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 195)) | (1 << (Cobol85Parser.FULL - 195)) | (1 << (Cobol85Parser.FUNCTIONNAME - 195)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 195)) | (1 << (Cobol85Parser.GRID - 195)) | (1 << (Cobol85Parser.HIGHLIGHT - 195)) | (1 << (Cobol85Parser.IMPLICIT - 195)) | (1 << (Cobol85Parser.IMPORT - 195)) | (1 << (Cobol85Parser.INTEGER - 195)))) != 0) or ((((_la - 262)) & ~0x3f) == 0 and ((1 << (_la - 262)) & ((1 << (Cobol85Parser.KEPT - 262)) | (1 << (Cobol85Parser.KEYBOARD - 262)) | (1 << (Cobol85Parser.LANGUAGE - 262)) | (1 << (Cobol85Parser.LB - 262)) | (1 << (Cobol85Parser.LD - 262)) | (1 << (Cobol85Parser.LEFTLINE - 262)) | (1 << (Cobol85Parser.LENGTH_CHECK - 262)) | (1 << (Cobol85Parser.LIBACCESS - 262)) | (1 << (Cobol85Parser.LIBPARAMETER - 262)) | (1 << (Cobol85Parser.LIBRARY - 262)) | (1 << (Cobol85Parser.LIST - 262)) | (1 << (Cobol85Parser.LOCAL - 262)) | (1 << (Cobol85Parser.LONG_DATE - 262)) | (1 << (Cobol85Parser.LONG_TIME - 262)) | (1 << (Cobol85Parser.LOWER - 262)) | (1 << (Cobol85Parser.LOWLIGHT - 262)) | (1 << (Cobol85Parser.MMDDYYYY - 262)) | (1 << (Cobol85Parser.NAMED - 262)) | (1 << (Cobol85Parser.NATIONAL - 262)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 262)) | (1 << (Cobol85Parser.NETWORK - 262)) | (1 << (Cobol85Parser.NO_ECHO - 262)) | (1 << (Cobol85Parser.NUMERIC_DATE - 262)) | (1 << (Cobol85Parser.NUMERIC_TIME - 262)))) != 0) or ((((_la - 326)) & ~0x3f) == 0 and ((1 << (_la - 326)) & ((1 << (Cobol85Parser.ODT - 326)) | (1 << (Cobol85Parser.ORDERLY - 326)) | (1 << (Cobol85Parser.OVERLINE - 326)) | (1 << (Cobol85Parser.OWN - 326)) | (1 << (Cobol85Parser.PASSWORD - 326)) | (1 << (Cobol85Parser.PORT - 326)) | (1 << (Cobol85Parser.PRINTER - 326)) | (1 << (Cobol85Parser.PRIVATE - 326)) | (1 << (Cobol85Parser.PROCESS - 326)) | (1 << (Cobol85Parser.PROGRAM - 326)) | (1 << (Cobol85Parser.PROMPT - 326)) | (1 << (Cobol85Parser.READER - 326)) | (1 << (Cobol85Parser.REMOTE - 326)) | (1 << (Cobol85Parser.REAL - 326)) | (1 << (Cobol85Parser.RECEIVED - 326)) | (1 << (Cobol85Parser.RECURSIVE - 326)) | (1 << (Cobol85Parser.REF - 326)))) != 0) or ((((_la - 395)) & ~0x3f) == 0 and ((1 << (_la - 395)) & ((1 << (Cobol85Parser.REMOVE - 395)) | (1 << (Cobol85Parser.REQUIRED - 395)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 395)) | (1 << (Cobol85Parser.SAVE - 395)) | (1 << (Cobol85Parser.SECURE - 395)) | (1 << (Cobol85Parser.SHARED - 395)) | (1 << (Cobol85Parser.SHAREDBYALL - 395)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 395)) | (1 << (Cobol85Parser.SHARING - 395)) | (1 << (Cobol85Parser.SHORT_DATE - 395)) | (1 << (Cobol85Parser.SQL - 395)))) != 0) or ((((_la - 471)) & ~0x3f) == 0 and ((1 << (_la - 471)) & ((1 << (Cobol85Parser.SYMBOL - 471)) | (1 << (Cobol85Parser.TASK - 471)) | (1 << (Cobol85Parser.THREAD - 471)) | (1 << (Cobol85Parser.THREAD_LOCAL - 471)) | (1 << (Cobol85Parser.TIMER - 471)) | (1 << (Cobol85Parser.TODAYS_DATE - 471)) | (1 << (Cobol85Parser.TODAYS_NAME - 471)) | (1 << (Cobol85Parser.TRUNCATED - 471)) | (1 << (Cobol85Parser.TYPEDEF - 471)) | (1 << (Cobol85Parser.UNDERLINE - 471)) | (1 << (Cobol85Parser.VIRTUAL - 471)) | (1 << (Cobol85Parser.WAIT - 471)) | (1 << (Cobol85Parser.YEAR - 471)) | (1 << (Cobol85Parser.YYYYMMDD - 471)) | (1 << (Cobol85Parser.YYYYDDD - 471)) | (1 << (Cobol85Parser.ZERO_FILL - 471)))) != 0) or _la==Cobol85Parser.IDENTIFIER):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SortGivingContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.SortGivingContext, self).__init__(parent, invokingState)
            self.parser = parser

        def fileName(self):
            return self.getTypedRuleContext(Cobol85Parser.FileNameContext,0)


        def LOCK(self):
            return self.getToken(Cobol85Parser.LOCK, 0)

        def SAVE(self):
            return self.getToken(Cobol85Parser.SAVE, 0)

        def NO(self):
            return self.getToken(Cobol85Parser.NO, 0)

        def REWIND(self):
            return self.getToken(Cobol85Parser.REWIND, 0)

        def CRUNCH(self):
            return self.getToken(Cobol85Parser.CRUNCH, 0)

        def RELEASE(self):
            return self.getToken(Cobol85Parser.RELEASE, 0)

        def WITH(self):
            return self.getToken(Cobol85Parser.WITH, 0)

        def REMOVE(self):
            return self.getToken(Cobol85Parser.REMOVE, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_sortGiving

        def enterRule(self, listener):
            if hasattr(listener, "enterSortGiving"):
                listener.enterSortGiving(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSortGiving"):
                listener.exitSortGiving(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitSortGiving"):
                return visitor.visitSortGiving(self)
            else:
                return visitor.visitChildren(self)




    def sortGiving(self):

        localctx = Cobol85Parser.SortGivingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 924, self.RULE_sortGiving)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5285
            self.fileName()
            self.state = 5295
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,806,self._ctx)
            if la_ == 1:
                self.state = 5286
                self.match(Cobol85Parser.LOCK)

            elif la_ == 2:
                self.state = 5287
                self.match(Cobol85Parser.SAVE)

            elif la_ == 3:
                self.state = 5288
                self.match(Cobol85Parser.NO)
                self.state = 5289
                self.match(Cobol85Parser.REWIND)

            elif la_ == 4:
                self.state = 5290
                self.match(Cobol85Parser.CRUNCH)

            elif la_ == 5:
                self.state = 5291
                self.match(Cobol85Parser.RELEASE)

            elif la_ == 6:
                self.state = 5292
                self.match(Cobol85Parser.WITH)
                self.state = 5293
                self.match(Cobol85Parser.REMOVE)
                self.state = 5294
                self.match(Cobol85Parser.CRUNCH)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StartStatementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.StartStatementContext, self).__init__(parent, invokingState)
            self.parser = parser

        def START(self):
            return self.getToken(Cobol85Parser.START, 0)

        def fileName(self):
            return self.getTypedRuleContext(Cobol85Parser.FileNameContext,0)


        def startKey(self):
            return self.getTypedRuleContext(Cobol85Parser.StartKeyContext,0)


        def invalidKeyPhrase(self):
            return self.getTypedRuleContext(Cobol85Parser.InvalidKeyPhraseContext,0)


        def notInvalidKeyPhrase(self):
            return self.getTypedRuleContext(Cobol85Parser.NotInvalidKeyPhraseContext,0)


        def END_START(self):
            return self.getToken(Cobol85Parser.END_START, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_startStatement

        def enterRule(self, listener):
            if hasattr(listener, "enterStartStatement"):
                listener.enterStartStatement(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitStartStatement"):
                listener.exitStartStatement(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitStartStatement"):
                return visitor.visitStartStatement(self)
            else:
                return visitor.visitChildren(self)




    def startStatement(self):

        localctx = Cobol85Parser.StartStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 926, self.RULE_startStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5297
            self.match(Cobol85Parser.START)
            self.state = 5298
            self.fileName()
            self.state = 5300
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.KEY:
                self.state = 5299
                self.startKey()


            self.state = 5303
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,808,self._ctx)
            if la_ == 1:
                self.state = 5302
                self.invalidKeyPhrase()


            self.state = 5306
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,809,self._ctx)
            if la_ == 1:
                self.state = 5305
                self.notInvalidKeyPhrase()


            self.state = 5309
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,810,self._ctx)
            if la_ == 1:
                self.state = 5308
                self.match(Cobol85Parser.END_START)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StartKeyContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.StartKeyContext, self).__init__(parent, invokingState)
            self.parser = parser

        def KEY(self):
            return self.getToken(Cobol85Parser.KEY, 0)

        def qualifiedDataName(self):
            return self.getTypedRuleContext(Cobol85Parser.QualifiedDataNameContext,0)


        def EQUAL(self):
            return self.getToken(Cobol85Parser.EQUAL, 0)

        def EQUALCHAR(self):
            return self.getToken(Cobol85Parser.EQUALCHAR, 0)

        def GREATER(self):
            return self.getToken(Cobol85Parser.GREATER, 0)

        def MORETHANCHAR(self):
            return self.getToken(Cobol85Parser.MORETHANCHAR, 0)

        def NOT(self):
            return self.getToken(Cobol85Parser.NOT, 0)

        def LESS(self):
            return self.getToken(Cobol85Parser.LESS, 0)

        def LESSTHANCHAR(self):
            return self.getToken(Cobol85Parser.LESSTHANCHAR, 0)

        def OR(self):
            return self.getToken(Cobol85Parser.OR, 0)

        def MORETHANOREQUAL(self):
            return self.getToken(Cobol85Parser.MORETHANOREQUAL, 0)

        def IS(self):
            return self.getToken(Cobol85Parser.IS, 0)

        def TO(self):
            return self.getToken(Cobol85Parser.TO, 0)

        def THAN(self):
            return self.getToken(Cobol85Parser.THAN, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_startKey

        def enterRule(self, listener):
            if hasattr(listener, "enterStartKey"):
                listener.enterStartKey(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitStartKey"):
                listener.exitStartKey(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitStartKey"):
                return visitor.visitStartKey(self)
            else:
                return visitor.visitChildren(self)




    def startKey(self):

        localctx = Cobol85Parser.StartKeyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 928, self.RULE_startKey)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5311
            self.match(Cobol85Parser.KEY)
            self.state = 5313
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.IS:
                self.state = 5312
                self.match(Cobol85Parser.IS)


            self.state = 5342
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,817,self._ctx)
            if la_ == 1:
                self.state = 5315
                self.match(Cobol85Parser.EQUAL)
                self.state = 5317
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Cobol85Parser.TO:
                    self.state = 5316
                    self.match(Cobol85Parser.TO)


                pass

            elif la_ == 2:
                self.state = 5319
                self.match(Cobol85Parser.EQUALCHAR)
                pass

            elif la_ == 3:
                self.state = 5320
                self.match(Cobol85Parser.GREATER)
                self.state = 5322
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Cobol85Parser.THAN:
                    self.state = 5321
                    self.match(Cobol85Parser.THAN)


                pass

            elif la_ == 4:
                self.state = 5324
                self.match(Cobol85Parser.MORETHANCHAR)
                pass

            elif la_ == 5:
                self.state = 5325
                self.match(Cobol85Parser.NOT)
                self.state = 5326
                self.match(Cobol85Parser.LESS)
                self.state = 5328
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Cobol85Parser.THAN:
                    self.state = 5327
                    self.match(Cobol85Parser.THAN)


                pass

            elif la_ == 6:
                self.state = 5330
                self.match(Cobol85Parser.NOT)
                self.state = 5331
                self.match(Cobol85Parser.LESSTHANCHAR)
                pass

            elif la_ == 7:
                self.state = 5332
                self.match(Cobol85Parser.GREATER)
                self.state = 5334
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Cobol85Parser.THAN:
                    self.state = 5333
                    self.match(Cobol85Parser.THAN)


                self.state = 5336
                self.match(Cobol85Parser.OR)
                self.state = 5337
                self.match(Cobol85Parser.EQUAL)
                self.state = 5339
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Cobol85Parser.TO:
                    self.state = 5338
                    self.match(Cobol85Parser.TO)


                pass

            elif la_ == 8:
                self.state = 5341
                self.match(Cobol85Parser.MORETHANOREQUAL)
                pass


            self.state = 5344
            self.qualifiedDataName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StopStatementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.StopStatementContext, self).__init__(parent, invokingState)
            self.parser = parser

        def STOP(self):
            return self.getToken(Cobol85Parser.STOP, 0)

        def RUN(self):
            return self.getToken(Cobol85Parser.RUN, 0)

        def literal(self):
            return self.getTypedRuleContext(Cobol85Parser.LiteralContext,0)


        def stopStatementGiving(self):
            return self.getTypedRuleContext(Cobol85Parser.StopStatementGivingContext,0)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_stopStatement

        def enterRule(self, listener):
            if hasattr(listener, "enterStopStatement"):
                listener.enterStopStatement(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitStopStatement"):
                listener.exitStopStatement(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitStopStatement"):
                return visitor.visitStopStatement(self)
            else:
                return visitor.visitChildren(self)




    def stopStatement(self):

        localctx = Cobol85Parser.StopStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 930, self.RULE_stopStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5346
            self.match(Cobol85Parser.STOP)
            self.state = 5350
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,818,self._ctx)
            if la_ == 1:
                self.state = 5347
                self.match(Cobol85Parser.RUN)
                pass

            elif la_ == 2:
                self.state = 5348
                self.literal()
                pass

            elif la_ == 3:
                self.state = 5349
                self.stopStatementGiving()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StopStatementGivingContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.StopStatementGivingContext, self).__init__(parent, invokingState)
            self.parser = parser

        def RUN(self):
            return self.getToken(Cobol85Parser.RUN, 0)

        def GIVING(self):
            return self.getToken(Cobol85Parser.GIVING, 0)

        def RETURNING(self):
            return self.getToken(Cobol85Parser.RETURNING, 0)

        def identifier(self):
            return self.getTypedRuleContext(Cobol85Parser.IdentifierContext,0)


        def integerLiteral(self):
            return self.getTypedRuleContext(Cobol85Parser.IntegerLiteralContext,0)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_stopStatementGiving

        def enterRule(self, listener):
            if hasattr(listener, "enterStopStatementGiving"):
                listener.enterStopStatementGiving(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitStopStatementGiving"):
                listener.exitStopStatementGiving(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitStopStatementGiving"):
                return visitor.visitStopStatementGiving(self)
            else:
                return visitor.visitChildren(self)




    def stopStatementGiving(self):

        localctx = Cobol85Parser.StopStatementGivingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 932, self.RULE_stopStatementGiving)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5352
            self.match(Cobol85Parser.RUN)
            self.state = 5353
            _la = self._input.LA(1)
            if not(_la==Cobol85Parser.GIVING or _la==Cobol85Parser.RETURNING):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 5356
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,819,self._ctx)
            if la_ == 1:
                self.state = 5354
                self.identifier()
                pass

            elif la_ == 2:
                self.state = 5355
                self.integerLiteral()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StringStatementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.StringStatementContext, self).__init__(parent, invokingState)
            self.parser = parser

        def STRING(self):
            return self.getToken(Cobol85Parser.STRING, 0)

        def stringIntoPhrase(self):
            return self.getTypedRuleContext(Cobol85Parser.StringIntoPhraseContext,0)


        def stringSendingPhrase(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.StringSendingPhraseContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.StringSendingPhraseContext,i)


        def stringWithPointerPhrase(self):
            return self.getTypedRuleContext(Cobol85Parser.StringWithPointerPhraseContext,0)


        def onOverflowPhrase(self):
            return self.getTypedRuleContext(Cobol85Parser.OnOverflowPhraseContext,0)


        def notOnOverflowPhrase(self):
            return self.getTypedRuleContext(Cobol85Parser.NotOnOverflowPhraseContext,0)


        def END_STRING(self):
            return self.getToken(Cobol85Parser.END_STRING, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_stringStatement

        def enterRule(self, listener):
            if hasattr(listener, "enterStringStatement"):
                listener.enterStringStatement(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitStringStatement"):
                listener.exitStringStatement(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitStringStatement"):
                return visitor.visitStringStatement(self)
            else:
                return visitor.visitChildren(self)




    def stringStatement(self):

        localctx = Cobol85Parser.StringStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 934, self.RULE_stringStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5358
            self.match(Cobol85Parser.STRING)
            self.state = 5360 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 5359
                self.stringSendingPhrase()
                self.state = 5362 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.ADDRESS) | (1 << Cobol85Parser.ALL) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE) | (1 << Cobol85Parser.AUTO) | (1 << Cobol85Parser.AUTO_SKIP) | (1 << Cobol85Parser.BACKGROUND_COLOR) | (1 << Cobol85Parser.BACKGROUND_COLOUR) | (1 << Cobol85Parser.BEEP) | (1 << Cobol85Parser.BELL) | (1 << Cobol85Parser.BINARY) | (1 << Cobol85Parser.BIT) | (1 << Cobol85Parser.BLINK) | (1 << Cobol85Parser.BLOB) | (1 << Cobol85Parser.BOUNDS) | (1 << Cobol85Parser.CAPABLE) | (1 << Cobol85Parser.CCSVERSION) | (1 << Cobol85Parser.CHANGED) | (1 << Cobol85Parser.CHANNEL))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (Cobol85Parser.CLOB - 67)) | (1 << (Cobol85Parser.CLOSE_DISPOSITION - 67)) | (1 << (Cobol85Parser.COBOL - 67)) | (1 << (Cobol85Parser.COMMITMENT - 67)) | (1 << (Cobol85Parser.CONTROL_POINT - 67)) | (1 << (Cobol85Parser.CONVENTION - 67)) | (1 << (Cobol85Parser.CRUNCH - 67)) | (1 << (Cobol85Parser.CURSOR - 67)) | (1 << (Cobol85Parser.DATE - 67)) | (1 << (Cobol85Parser.DAY - 67)) | (1 << (Cobol85Parser.DAY_OF_WEEK - 67)) | (1 << (Cobol85Parser.DBCLOB - 67)) | (1 << (Cobol85Parser.DEBUG_CONTENTS - 67)) | (1 << (Cobol85Parser.DEBUG_ITEM - 67)) | (1 << (Cobol85Parser.DEBUG_LINE - 67)) | (1 << (Cobol85Parser.DEBUG_NAME - 67)) | (1 << (Cobol85Parser.DEBUG_SUB_1 - 67)) | (1 << (Cobol85Parser.DEBUG_SUB_2 - 67)) | (1 << (Cobol85Parser.DEBUG_SUB_3 - 67)))) != 0) or ((((_la - 131)) & ~0x3f) == 0 and ((1 << (_la - 131)) & ((1 << (Cobol85Parser.DEFAULT - 131)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 131)) | (1 << (Cobol85Parser.DEFINITION - 131)) | (1 << (Cobol85Parser.DFHRESP - 131)) | (1 << (Cobol85Parser.DFHVALUE - 131)) | (1 << (Cobol85Parser.DISK - 131)) | (1 << (Cobol85Parser.DONTCARE - 131)) | (1 << (Cobol85Parser.DOUBLE - 131)) | (1 << (Cobol85Parser.EBCDIC - 131)) | (1 << (Cobol85Parser.EMPTY_CHECK - 131)) | (1 << (Cobol85Parser.ENTER - 131)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 131)) | (1 << (Cobol85Parser.ERASE - 131)) | (1 << (Cobol85Parser.EOL - 131)) | (1 << (Cobol85Parser.EOS - 131)))) != 0) or ((((_la - 195)) & ~0x3f) == 0 and ((1 << (_la - 195)) & ((1 << (Cobol85Parser.ESCAPE - 195)) | (1 << (Cobol85Parser.EVENT - 195)) | (1 << (Cobol85Parser.EXCLUSIVE - 195)) | (1 << (Cobol85Parser.EXPORT - 195)) | (1 << (Cobol85Parser.EXTENDED - 195)) | (1 << (Cobol85Parser.FALSE - 195)) | (1 << (Cobol85Parser.FOREGROUND_COLOR - 195)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 195)) | (1 << (Cobol85Parser.FULL - 195)) | (1 << (Cobol85Parser.FUNCTION - 195)) | (1 << (Cobol85Parser.FUNCTIONNAME - 195)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 195)) | (1 << (Cobol85Parser.GRID - 195)) | (1 << (Cobol85Parser.HIGHLIGHT - 195)) | (1 << (Cobol85Parser.HIGH_VALUE - 195)) | (1 << (Cobol85Parser.HIGH_VALUES - 195)) | (1 << (Cobol85Parser.IMPLICIT - 195)) | (1 << (Cobol85Parser.IMPORT - 195)) | (1 << (Cobol85Parser.INTEGER - 195)))) != 0) or ((((_la - 262)) & ~0x3f) == 0 and ((1 << (_la - 262)) & ((1 << (Cobol85Parser.KEPT - 262)) | (1 << (Cobol85Parser.KEYBOARD - 262)) | (1 << (Cobol85Parser.LANGUAGE - 262)) | (1 << (Cobol85Parser.LB - 262)) | (1 << (Cobol85Parser.LD - 262)) | (1 << (Cobol85Parser.LEFTLINE - 262)) | (1 << (Cobol85Parser.LENGTH - 262)) | (1 << (Cobol85Parser.LENGTH_CHECK - 262)) | (1 << (Cobol85Parser.LIBACCESS - 262)) | (1 << (Cobol85Parser.LIBPARAMETER - 262)) | (1 << (Cobol85Parser.LIBRARY - 262)) | (1 << (Cobol85Parser.LINAGE_COUNTER - 262)) | (1 << (Cobol85Parser.LINE_COUNTER - 262)) | (1 << (Cobol85Parser.LIST - 262)) | (1 << (Cobol85Parser.LOCAL - 262)) | (1 << (Cobol85Parser.LONG_DATE - 262)) | (1 << (Cobol85Parser.LONG_TIME - 262)) | (1 << (Cobol85Parser.LOWER - 262)) | (1 << (Cobol85Parser.LOWLIGHT - 262)) | (1 << (Cobol85Parser.LOW_VALUE - 262)) | (1 << (Cobol85Parser.LOW_VALUES - 262)) | (1 << (Cobol85Parser.MMDDYYYY - 262)) | (1 << (Cobol85Parser.NAMED - 262)) | (1 << (Cobol85Parser.NATIONAL - 262)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 262)) | (1 << (Cobol85Parser.NETWORK - 262)) | (1 << (Cobol85Parser.NO_ECHO - 262)) | (1 << (Cobol85Parser.NULL - 262)) | (1 << (Cobol85Parser.NULLS - 262)) | (1 << (Cobol85Parser.NUMERIC_DATE - 262)) | (1 << (Cobol85Parser.NUMERIC_TIME - 262)))) != 0) or ((((_la - 326)) & ~0x3f) == 0 and ((1 << (_la - 326)) & ((1 << (Cobol85Parser.ODT - 326)) | (1 << (Cobol85Parser.ORDERLY - 326)) | (1 << (Cobol85Parser.OVERLINE - 326)) | (1 << (Cobol85Parser.OWN - 326)) | (1 << (Cobol85Parser.PAGE_COUNTER - 326)) | (1 << (Cobol85Parser.PASSWORD - 326)) | (1 << (Cobol85Parser.PORT - 326)) | (1 << (Cobol85Parser.PRINTER - 326)) | (1 << (Cobol85Parser.PRIVATE - 326)) | (1 << (Cobol85Parser.PROCESS - 326)) | (1 << (Cobol85Parser.PROGRAM - 326)) | (1 << (Cobol85Parser.PROMPT - 326)) | (1 << (Cobol85Parser.QUOTE - 326)) | (1 << (Cobol85Parser.QUOTES - 326)) | (1 << (Cobol85Parser.READER - 326)) | (1 << (Cobol85Parser.REMOTE - 326)) | (1 << (Cobol85Parser.REAL - 326)) | (1 << (Cobol85Parser.RECEIVED - 326)) | (1 << (Cobol85Parser.RECURSIVE - 326)) | (1 << (Cobol85Parser.REF - 326)))) != 0) or ((((_la - 395)) & ~0x3f) == 0 and ((1 << (_la - 395)) & ((1 << (Cobol85Parser.REMOVE - 395)) | (1 << (Cobol85Parser.REQUIRED - 395)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 395)) | (1 << (Cobol85Parser.RETURN_CODE - 395)) | (1 << (Cobol85Parser.SAVE - 395)) | (1 << (Cobol85Parser.SECURE - 395)) | (1 << (Cobol85Parser.SHARED - 395)) | (1 << (Cobol85Parser.SHAREDBYALL - 395)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 395)) | (1 << (Cobol85Parser.SHARING - 395)) | (1 << (Cobol85Parser.SHIFT_IN - 395)) | (1 << (Cobol85Parser.SHIFT_OUT - 395)) | (1 << (Cobol85Parser.SHORT_DATE - 395)) | (1 << (Cobol85Parser.SORT_CONTROL - 395)) | (1 << (Cobol85Parser.SORT_CORE_SIZE - 395)) | (1 << (Cobol85Parser.SORT_FILE_SIZE - 395)) | (1 << (Cobol85Parser.SORT_MESSAGE - 395)) | (1 << (Cobol85Parser.SORT_MODE_SIZE - 395)) | (1 << (Cobol85Parser.SORT_RETURN - 395)) | (1 << (Cobol85Parser.SPACE - 395)) | (1 << (Cobol85Parser.SPACES - 395)) | (1 << (Cobol85Parser.SQL - 395)))) != 0) or ((((_la - 471)) & ~0x3f) == 0 and ((1 << (_la - 471)) & ((1 << (Cobol85Parser.SYMBOL - 471)) | (1 << (Cobol85Parser.TALLY - 471)) | (1 << (Cobol85Parser.TASK - 471)) | (1 << (Cobol85Parser.THREAD - 471)) | (1 << (Cobol85Parser.THREAD_LOCAL - 471)) | (1 << (Cobol85Parser.TIME - 471)) | (1 << (Cobol85Parser.TIMER - 471)) | (1 << (Cobol85Parser.TODAYS_DATE - 471)) | (1 << (Cobol85Parser.TODAYS_NAME - 471)) | (1 << (Cobol85Parser.TRUE - 471)) | (1 << (Cobol85Parser.TRUNCATED - 471)) | (1 << (Cobol85Parser.TYPEDEF - 471)) | (1 << (Cobol85Parser.UNDERLINE - 471)) | (1 << (Cobol85Parser.VIRTUAL - 471)) | (1 << (Cobol85Parser.WAIT - 471)) | (1 << (Cobol85Parser.WHEN_COMPILED - 471)) | (1 << (Cobol85Parser.YEAR - 471)) | (1 << (Cobol85Parser.YYYYMMDD - 471)) | (1 << (Cobol85Parser.YYYYDDD - 471)) | (1 << (Cobol85Parser.ZERO - 471)) | (1 << (Cobol85Parser.ZERO_FILL - 471)) | (1 << (Cobol85Parser.ZEROS - 471)) | (1 << (Cobol85Parser.ZEROES - 471)))) != 0) or ((((_la - 556)) & ~0x3f) == 0 and ((1 << (_la - 556)) & ((1 << (Cobol85Parser.NONNUMERICLITERAL - 556)) | (1 << (Cobol85Parser.LEVEL_NUMBER_66 - 556)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 556)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 556)) | (1 << (Cobol85Parser.INTEGERLITERAL - 556)) | (1 << (Cobol85Parser.NUMERICLITERAL - 556)) | (1 << (Cobol85Parser.IDENTIFIER - 556)))) != 0)):
                    break

            self.state = 5364
            self.stringIntoPhrase()
            self.state = 5366
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,821,self._ctx)
            if la_ == 1:
                self.state = 5365
                self.stringWithPointerPhrase()


            self.state = 5369
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,822,self._ctx)
            if la_ == 1:
                self.state = 5368
                self.onOverflowPhrase()


            self.state = 5372
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,823,self._ctx)
            if la_ == 1:
                self.state = 5371
                self.notOnOverflowPhrase()


            self.state = 5375
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,824,self._ctx)
            if la_ == 1:
                self.state = 5374
                self.match(Cobol85Parser.END_STRING)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StringSendingPhraseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.StringSendingPhraseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def stringSending(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.StringSendingContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.StringSendingContext,i)


        def stringDelimitedByPhrase(self):
            return self.getTypedRuleContext(Cobol85Parser.StringDelimitedByPhraseContext,0)


        def stringForPhrase(self):
            return self.getTypedRuleContext(Cobol85Parser.StringForPhraseContext,0)


        def COMMACHAR(self, i=None):
            if i is None:
                return self.getTokens(Cobol85Parser.COMMACHAR)
            else:
                return self.getToken(Cobol85Parser.COMMACHAR, i)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_stringSendingPhrase

        def enterRule(self, listener):
            if hasattr(listener, "enterStringSendingPhrase"):
                listener.enterStringSendingPhrase(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitStringSendingPhrase"):
                listener.exitStringSendingPhrase(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitStringSendingPhrase"):
                return visitor.visitStringSendingPhrase(self)
            else:
                return visitor.visitChildren(self)




    def stringSendingPhrase(self):

        localctx = Cobol85Parser.StringSendingPhraseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 936, self.RULE_stringSendingPhrase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5377
            self.stringSending()
            self.state = 5384
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.ADDRESS) | (1 << Cobol85Parser.ALL) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE) | (1 << Cobol85Parser.AUTO) | (1 << Cobol85Parser.AUTO_SKIP) | (1 << Cobol85Parser.BACKGROUND_COLOR) | (1 << Cobol85Parser.BACKGROUND_COLOUR) | (1 << Cobol85Parser.BEEP) | (1 << Cobol85Parser.BELL) | (1 << Cobol85Parser.BINARY) | (1 << Cobol85Parser.BIT) | (1 << Cobol85Parser.BLINK) | (1 << Cobol85Parser.BLOB) | (1 << Cobol85Parser.BOUNDS) | (1 << Cobol85Parser.CAPABLE) | (1 << Cobol85Parser.CCSVERSION) | (1 << Cobol85Parser.CHANGED) | (1 << Cobol85Parser.CHANNEL))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (Cobol85Parser.CLOB - 67)) | (1 << (Cobol85Parser.CLOSE_DISPOSITION - 67)) | (1 << (Cobol85Parser.COBOL - 67)) | (1 << (Cobol85Parser.COMMITMENT - 67)) | (1 << (Cobol85Parser.CONTROL_POINT - 67)) | (1 << (Cobol85Parser.CONVENTION - 67)) | (1 << (Cobol85Parser.CRUNCH - 67)) | (1 << (Cobol85Parser.CURSOR - 67)) | (1 << (Cobol85Parser.DATE - 67)) | (1 << (Cobol85Parser.DAY - 67)) | (1 << (Cobol85Parser.DAY_OF_WEEK - 67)) | (1 << (Cobol85Parser.DBCLOB - 67)) | (1 << (Cobol85Parser.DEBUG_CONTENTS - 67)) | (1 << (Cobol85Parser.DEBUG_ITEM - 67)) | (1 << (Cobol85Parser.DEBUG_LINE - 67)) | (1 << (Cobol85Parser.DEBUG_NAME - 67)) | (1 << (Cobol85Parser.DEBUG_SUB_1 - 67)) | (1 << (Cobol85Parser.DEBUG_SUB_2 - 67)) | (1 << (Cobol85Parser.DEBUG_SUB_3 - 67)))) != 0) or ((((_la - 131)) & ~0x3f) == 0 and ((1 << (_la - 131)) & ((1 << (Cobol85Parser.DEFAULT - 131)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 131)) | (1 << (Cobol85Parser.DEFINITION - 131)) | (1 << (Cobol85Parser.DFHRESP - 131)) | (1 << (Cobol85Parser.DFHVALUE - 131)) | (1 << (Cobol85Parser.DISK - 131)) | (1 << (Cobol85Parser.DONTCARE - 131)) | (1 << (Cobol85Parser.DOUBLE - 131)) | (1 << (Cobol85Parser.EBCDIC - 131)) | (1 << (Cobol85Parser.EMPTY_CHECK - 131)) | (1 << (Cobol85Parser.ENTER - 131)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 131)) | (1 << (Cobol85Parser.ERASE - 131)) | (1 << (Cobol85Parser.EOL - 131)) | (1 << (Cobol85Parser.EOS - 131)))) != 0) or ((((_la - 195)) & ~0x3f) == 0 and ((1 << (_la - 195)) & ((1 << (Cobol85Parser.ESCAPE - 195)) | (1 << (Cobol85Parser.EVENT - 195)) | (1 << (Cobol85Parser.EXCLUSIVE - 195)) | (1 << (Cobol85Parser.EXPORT - 195)) | (1 << (Cobol85Parser.EXTENDED - 195)) | (1 << (Cobol85Parser.FALSE - 195)) | (1 << (Cobol85Parser.FOREGROUND_COLOR - 195)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 195)) | (1 << (Cobol85Parser.FULL - 195)) | (1 << (Cobol85Parser.FUNCTION - 195)) | (1 << (Cobol85Parser.FUNCTIONNAME - 195)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 195)) | (1 << (Cobol85Parser.GRID - 195)) | (1 << (Cobol85Parser.HIGHLIGHT - 195)) | (1 << (Cobol85Parser.HIGH_VALUE - 195)) | (1 << (Cobol85Parser.HIGH_VALUES - 195)) | (1 << (Cobol85Parser.IMPLICIT - 195)) | (1 << (Cobol85Parser.IMPORT - 195)) | (1 << (Cobol85Parser.INTEGER - 195)))) != 0) or ((((_la - 262)) & ~0x3f) == 0 and ((1 << (_la - 262)) & ((1 << (Cobol85Parser.KEPT - 262)) | (1 << (Cobol85Parser.KEYBOARD - 262)) | (1 << (Cobol85Parser.LANGUAGE - 262)) | (1 << (Cobol85Parser.LB - 262)) | (1 << (Cobol85Parser.LD - 262)) | (1 << (Cobol85Parser.LEFTLINE - 262)) | (1 << (Cobol85Parser.LENGTH - 262)) | (1 << (Cobol85Parser.LENGTH_CHECK - 262)) | (1 << (Cobol85Parser.LIBACCESS - 262)) | (1 << (Cobol85Parser.LIBPARAMETER - 262)) | (1 << (Cobol85Parser.LIBRARY - 262)) | (1 << (Cobol85Parser.LINAGE_COUNTER - 262)) | (1 << (Cobol85Parser.LINE_COUNTER - 262)) | (1 << (Cobol85Parser.LIST - 262)) | (1 << (Cobol85Parser.LOCAL - 262)) | (1 << (Cobol85Parser.LONG_DATE - 262)) | (1 << (Cobol85Parser.LONG_TIME - 262)) | (1 << (Cobol85Parser.LOWER - 262)) | (1 << (Cobol85Parser.LOWLIGHT - 262)) | (1 << (Cobol85Parser.LOW_VALUE - 262)) | (1 << (Cobol85Parser.LOW_VALUES - 262)) | (1 << (Cobol85Parser.MMDDYYYY - 262)) | (1 << (Cobol85Parser.NAMED - 262)) | (1 << (Cobol85Parser.NATIONAL - 262)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 262)) | (1 << (Cobol85Parser.NETWORK - 262)) | (1 << (Cobol85Parser.NO_ECHO - 262)) | (1 << (Cobol85Parser.NULL - 262)) | (1 << (Cobol85Parser.NULLS - 262)) | (1 << (Cobol85Parser.NUMERIC_DATE - 262)) | (1 << (Cobol85Parser.NUMERIC_TIME - 262)))) != 0) or ((((_la - 326)) & ~0x3f) == 0 and ((1 << (_la - 326)) & ((1 << (Cobol85Parser.ODT - 326)) | (1 << (Cobol85Parser.ORDERLY - 326)) | (1 << (Cobol85Parser.OVERLINE - 326)) | (1 << (Cobol85Parser.OWN - 326)) | (1 << (Cobol85Parser.PAGE_COUNTER - 326)) | (1 << (Cobol85Parser.PASSWORD - 326)) | (1 << (Cobol85Parser.PORT - 326)) | (1 << (Cobol85Parser.PRINTER - 326)) | (1 << (Cobol85Parser.PRIVATE - 326)) | (1 << (Cobol85Parser.PROCESS - 326)) | (1 << (Cobol85Parser.PROGRAM - 326)) | (1 << (Cobol85Parser.PROMPT - 326)) | (1 << (Cobol85Parser.QUOTE - 326)) | (1 << (Cobol85Parser.QUOTES - 326)) | (1 << (Cobol85Parser.READER - 326)) | (1 << (Cobol85Parser.REMOTE - 326)) | (1 << (Cobol85Parser.REAL - 326)) | (1 << (Cobol85Parser.RECEIVED - 326)) | (1 << (Cobol85Parser.RECURSIVE - 326)) | (1 << (Cobol85Parser.REF - 326)))) != 0) or ((((_la - 395)) & ~0x3f) == 0 and ((1 << (_la - 395)) & ((1 << (Cobol85Parser.REMOVE - 395)) | (1 << (Cobol85Parser.REQUIRED - 395)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 395)) | (1 << (Cobol85Parser.RETURN_CODE - 395)) | (1 << (Cobol85Parser.SAVE - 395)) | (1 << (Cobol85Parser.SECURE - 395)) | (1 << (Cobol85Parser.SHARED - 395)) | (1 << (Cobol85Parser.SHAREDBYALL - 395)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 395)) | (1 << (Cobol85Parser.SHARING - 395)) | (1 << (Cobol85Parser.SHIFT_IN - 395)) | (1 << (Cobol85Parser.SHIFT_OUT - 395)) | (1 << (Cobol85Parser.SHORT_DATE - 395)) | (1 << (Cobol85Parser.SORT_CONTROL - 395)) | (1 << (Cobol85Parser.SORT_CORE_SIZE - 395)) | (1 << (Cobol85Parser.SORT_FILE_SIZE - 395)) | (1 << (Cobol85Parser.SORT_MESSAGE - 395)) | (1 << (Cobol85Parser.SORT_MODE_SIZE - 395)) | (1 << (Cobol85Parser.SORT_RETURN - 395)) | (1 << (Cobol85Parser.SPACE - 395)) | (1 << (Cobol85Parser.SPACES - 395)) | (1 << (Cobol85Parser.SQL - 395)))) != 0) or ((((_la - 471)) & ~0x3f) == 0 and ((1 << (_la - 471)) & ((1 << (Cobol85Parser.SYMBOL - 471)) | (1 << (Cobol85Parser.TALLY - 471)) | (1 << (Cobol85Parser.TASK - 471)) | (1 << (Cobol85Parser.THREAD - 471)) | (1 << (Cobol85Parser.THREAD_LOCAL - 471)) | (1 << (Cobol85Parser.TIME - 471)) | (1 << (Cobol85Parser.TIMER - 471)) | (1 << (Cobol85Parser.TODAYS_DATE - 471)) | (1 << (Cobol85Parser.TODAYS_NAME - 471)) | (1 << (Cobol85Parser.TRUE - 471)) | (1 << (Cobol85Parser.TRUNCATED - 471)) | (1 << (Cobol85Parser.TYPEDEF - 471)) | (1 << (Cobol85Parser.UNDERLINE - 471)) | (1 << (Cobol85Parser.VIRTUAL - 471)) | (1 << (Cobol85Parser.WAIT - 471)) | (1 << (Cobol85Parser.WHEN_COMPILED - 471)) | (1 << (Cobol85Parser.YEAR - 471)) | (1 << (Cobol85Parser.YYYYMMDD - 471)) | (1 << (Cobol85Parser.YYYYDDD - 471)) | (1 << (Cobol85Parser.ZERO - 471)) | (1 << (Cobol85Parser.ZERO_FILL - 471)) | (1 << (Cobol85Parser.ZEROS - 471)) | (1 << (Cobol85Parser.ZEROES - 471)) | (1 << (Cobol85Parser.COMMACHAR - 471)))) != 0) or ((((_la - 556)) & ~0x3f) == 0 and ((1 << (_la - 556)) & ((1 << (Cobol85Parser.NONNUMERICLITERAL - 556)) | (1 << (Cobol85Parser.LEVEL_NUMBER_66 - 556)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 556)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 556)) | (1 << (Cobol85Parser.INTEGERLITERAL - 556)) | (1 << (Cobol85Parser.NUMERICLITERAL - 556)) | (1 << (Cobol85Parser.IDENTIFIER - 556)))) != 0):
                self.state = 5379
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Cobol85Parser.COMMACHAR:
                    self.state = 5378
                    self.match(Cobol85Parser.COMMACHAR)


                self.state = 5381
                self.stringSending()
                self.state = 5386
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 5389
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Cobol85Parser.DELIMITED]:
                self.state = 5387
                self.stringDelimitedByPhrase()
                pass
            elif token in [Cobol85Parser.FOR]:
                self.state = 5388
                self.stringForPhrase()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StringSendingContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.StringSendingContext, self).__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(Cobol85Parser.IdentifierContext,0)


        def literal(self):
            return self.getTypedRuleContext(Cobol85Parser.LiteralContext,0)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_stringSending

        def enterRule(self, listener):
            if hasattr(listener, "enterStringSending"):
                listener.enterStringSending(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitStringSending"):
                listener.exitStringSending(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitStringSending"):
                return visitor.visitStringSending(self)
            else:
                return visitor.visitChildren(self)




    def stringSending(self):

        localctx = Cobol85Parser.StringSendingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 938, self.RULE_stringSending)
        try:
            self.state = 5393
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,828,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5391
                self.identifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5392
                self.literal()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StringDelimitedByPhraseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.StringDelimitedByPhraseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def DELIMITED(self):
            return self.getToken(Cobol85Parser.DELIMITED, 0)

        def SIZE(self):
            return self.getToken(Cobol85Parser.SIZE, 0)

        def identifier(self):
            return self.getTypedRuleContext(Cobol85Parser.IdentifierContext,0)


        def literal(self):
            return self.getTypedRuleContext(Cobol85Parser.LiteralContext,0)


        def BY(self):
            return self.getToken(Cobol85Parser.BY, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_stringDelimitedByPhrase

        def enterRule(self, listener):
            if hasattr(listener, "enterStringDelimitedByPhrase"):
                listener.enterStringDelimitedByPhrase(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitStringDelimitedByPhrase"):
                listener.exitStringDelimitedByPhrase(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitStringDelimitedByPhrase"):
                return visitor.visitStringDelimitedByPhrase(self)
            else:
                return visitor.visitChildren(self)




    def stringDelimitedByPhrase(self):

        localctx = Cobol85Parser.StringDelimitedByPhraseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 940, self.RULE_stringDelimitedByPhrase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5395
            self.match(Cobol85Parser.DELIMITED)
            self.state = 5397
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.BY:
                self.state = 5396
                self.match(Cobol85Parser.BY)


            self.state = 5402
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,830,self._ctx)
            if la_ == 1:
                self.state = 5399
                self.match(Cobol85Parser.SIZE)
                pass

            elif la_ == 2:
                self.state = 5400
                self.identifier()
                pass

            elif la_ == 3:
                self.state = 5401
                self.literal()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StringForPhraseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.StringForPhraseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(Cobol85Parser.FOR, 0)

        def identifier(self):
            return self.getTypedRuleContext(Cobol85Parser.IdentifierContext,0)


        def literal(self):
            return self.getTypedRuleContext(Cobol85Parser.LiteralContext,0)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_stringForPhrase

        def enterRule(self, listener):
            if hasattr(listener, "enterStringForPhrase"):
                listener.enterStringForPhrase(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitStringForPhrase"):
                listener.exitStringForPhrase(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitStringForPhrase"):
                return visitor.visitStringForPhrase(self)
            else:
                return visitor.visitChildren(self)




    def stringForPhrase(self):

        localctx = Cobol85Parser.StringForPhraseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 942, self.RULE_stringForPhrase)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5404
            self.match(Cobol85Parser.FOR)
            self.state = 5407
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,831,self._ctx)
            if la_ == 1:
                self.state = 5405
                self.identifier()
                pass

            elif la_ == 2:
                self.state = 5406
                self.literal()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StringIntoPhraseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.StringIntoPhraseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def INTO(self):
            return self.getToken(Cobol85Parser.INTO, 0)

        def identifier(self):
            return self.getTypedRuleContext(Cobol85Parser.IdentifierContext,0)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_stringIntoPhrase

        def enterRule(self, listener):
            if hasattr(listener, "enterStringIntoPhrase"):
                listener.enterStringIntoPhrase(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitStringIntoPhrase"):
                listener.exitStringIntoPhrase(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitStringIntoPhrase"):
                return visitor.visitStringIntoPhrase(self)
            else:
                return visitor.visitChildren(self)




    def stringIntoPhrase(self):

        localctx = Cobol85Parser.StringIntoPhraseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 944, self.RULE_stringIntoPhrase)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5409
            self.match(Cobol85Parser.INTO)
            self.state = 5410
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StringWithPointerPhraseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.StringWithPointerPhraseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def POINTER(self):
            return self.getToken(Cobol85Parser.POINTER, 0)

        def qualifiedDataName(self):
            return self.getTypedRuleContext(Cobol85Parser.QualifiedDataNameContext,0)


        def WITH(self):
            return self.getToken(Cobol85Parser.WITH, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_stringWithPointerPhrase

        def enterRule(self, listener):
            if hasattr(listener, "enterStringWithPointerPhrase"):
                listener.enterStringWithPointerPhrase(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitStringWithPointerPhrase"):
                listener.exitStringWithPointerPhrase(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitStringWithPointerPhrase"):
                return visitor.visitStringWithPointerPhrase(self)
            else:
                return visitor.visitChildren(self)




    def stringWithPointerPhrase(self):

        localctx = Cobol85Parser.StringWithPointerPhraseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 946, self.RULE_stringWithPointerPhrase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5413
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.WITH:
                self.state = 5412
                self.match(Cobol85Parser.WITH)


            self.state = 5415
            self.match(Cobol85Parser.POINTER)
            self.state = 5416
            self.qualifiedDataName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SubtractStatementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.SubtractStatementContext, self).__init__(parent, invokingState)
            self.parser = parser

        def SUBTRACT(self):
            return self.getToken(Cobol85Parser.SUBTRACT, 0)

        def subtractFromStatement(self):
            return self.getTypedRuleContext(Cobol85Parser.SubtractFromStatementContext,0)


        def subtractFromGivingStatement(self):
            return self.getTypedRuleContext(Cobol85Parser.SubtractFromGivingStatementContext,0)


        def subtractCorrespondingStatement(self):
            return self.getTypedRuleContext(Cobol85Parser.SubtractCorrespondingStatementContext,0)


        def onSizeErrorPhrase(self):
            return self.getTypedRuleContext(Cobol85Parser.OnSizeErrorPhraseContext,0)


        def notOnSizeErrorPhrase(self):
            return self.getTypedRuleContext(Cobol85Parser.NotOnSizeErrorPhraseContext,0)


        def END_SUBTRACT(self):
            return self.getToken(Cobol85Parser.END_SUBTRACT, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_subtractStatement

        def enterRule(self, listener):
            if hasattr(listener, "enterSubtractStatement"):
                listener.enterSubtractStatement(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSubtractStatement"):
                listener.exitSubtractStatement(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitSubtractStatement"):
                return visitor.visitSubtractStatement(self)
            else:
                return visitor.visitChildren(self)




    def subtractStatement(self):

        localctx = Cobol85Parser.SubtractStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 948, self.RULE_subtractStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5418
            self.match(Cobol85Parser.SUBTRACT)
            self.state = 5422
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,833,self._ctx)
            if la_ == 1:
                self.state = 5419
                self.subtractFromStatement()
                pass

            elif la_ == 2:
                self.state = 5420
                self.subtractFromGivingStatement()
                pass

            elif la_ == 3:
                self.state = 5421
                self.subtractCorrespondingStatement()
                pass


            self.state = 5425
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,834,self._ctx)
            if la_ == 1:
                self.state = 5424
                self.onSizeErrorPhrase()


            self.state = 5428
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,835,self._ctx)
            if la_ == 1:
                self.state = 5427
                self.notOnSizeErrorPhrase()


            self.state = 5431
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,836,self._ctx)
            if la_ == 1:
                self.state = 5430
                self.match(Cobol85Parser.END_SUBTRACT)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SubtractFromStatementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.SubtractFromStatementContext, self).__init__(parent, invokingState)
            self.parser = parser

        def FROM(self):
            return self.getToken(Cobol85Parser.FROM, 0)

        def subtractSubtrahend(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.SubtractSubtrahendContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.SubtractSubtrahendContext,i)


        def subtractMinuend(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.SubtractMinuendContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.SubtractMinuendContext,i)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_subtractFromStatement

        def enterRule(self, listener):
            if hasattr(listener, "enterSubtractFromStatement"):
                listener.enterSubtractFromStatement(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSubtractFromStatement"):
                listener.exitSubtractFromStatement(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitSubtractFromStatement"):
                return visitor.visitSubtractFromStatement(self)
            else:
                return visitor.visitChildren(self)




    def subtractFromStatement(self):

        localctx = Cobol85Parser.SubtractFromStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 950, self.RULE_subtractFromStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5434 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 5433
                self.subtractSubtrahend()
                self.state = 5436 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.ADDRESS) | (1 << Cobol85Parser.ALL) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE) | (1 << Cobol85Parser.AUTO) | (1 << Cobol85Parser.AUTO_SKIP) | (1 << Cobol85Parser.BACKGROUND_COLOR) | (1 << Cobol85Parser.BACKGROUND_COLOUR) | (1 << Cobol85Parser.BEEP) | (1 << Cobol85Parser.BELL) | (1 << Cobol85Parser.BINARY) | (1 << Cobol85Parser.BIT) | (1 << Cobol85Parser.BLINK) | (1 << Cobol85Parser.BLOB) | (1 << Cobol85Parser.BOUNDS) | (1 << Cobol85Parser.CAPABLE) | (1 << Cobol85Parser.CCSVERSION) | (1 << Cobol85Parser.CHANGED) | (1 << Cobol85Parser.CHANNEL))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (Cobol85Parser.CLOB - 67)) | (1 << (Cobol85Parser.CLOSE_DISPOSITION - 67)) | (1 << (Cobol85Parser.COBOL - 67)) | (1 << (Cobol85Parser.COMMITMENT - 67)) | (1 << (Cobol85Parser.CONTROL_POINT - 67)) | (1 << (Cobol85Parser.CONVENTION - 67)) | (1 << (Cobol85Parser.CRUNCH - 67)) | (1 << (Cobol85Parser.CURSOR - 67)) | (1 << (Cobol85Parser.DATE - 67)) | (1 << (Cobol85Parser.DAY - 67)) | (1 << (Cobol85Parser.DAY_OF_WEEK - 67)) | (1 << (Cobol85Parser.DBCLOB - 67)) | (1 << (Cobol85Parser.DEBUG_CONTENTS - 67)) | (1 << (Cobol85Parser.DEBUG_ITEM - 67)) | (1 << (Cobol85Parser.DEBUG_LINE - 67)) | (1 << (Cobol85Parser.DEBUG_NAME - 67)) | (1 << (Cobol85Parser.DEBUG_SUB_1 - 67)) | (1 << (Cobol85Parser.DEBUG_SUB_2 - 67)) | (1 << (Cobol85Parser.DEBUG_SUB_3 - 67)))) != 0) or ((((_la - 131)) & ~0x3f) == 0 and ((1 << (_la - 131)) & ((1 << (Cobol85Parser.DEFAULT - 131)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 131)) | (1 << (Cobol85Parser.DEFINITION - 131)) | (1 << (Cobol85Parser.DFHRESP - 131)) | (1 << (Cobol85Parser.DFHVALUE - 131)) | (1 << (Cobol85Parser.DISK - 131)) | (1 << (Cobol85Parser.DONTCARE - 131)) | (1 << (Cobol85Parser.DOUBLE - 131)) | (1 << (Cobol85Parser.EBCDIC - 131)) | (1 << (Cobol85Parser.EMPTY_CHECK - 131)) | (1 << (Cobol85Parser.ENTER - 131)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 131)) | (1 << (Cobol85Parser.ERASE - 131)) | (1 << (Cobol85Parser.EOL - 131)) | (1 << (Cobol85Parser.EOS - 131)))) != 0) or ((((_la - 195)) & ~0x3f) == 0 and ((1 << (_la - 195)) & ((1 << (Cobol85Parser.ESCAPE - 195)) | (1 << (Cobol85Parser.EVENT - 195)) | (1 << (Cobol85Parser.EXCLUSIVE - 195)) | (1 << (Cobol85Parser.EXPORT - 195)) | (1 << (Cobol85Parser.EXTENDED - 195)) | (1 << (Cobol85Parser.FALSE - 195)) | (1 << (Cobol85Parser.FOREGROUND_COLOR - 195)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 195)) | (1 << (Cobol85Parser.FULL - 195)) | (1 << (Cobol85Parser.FUNCTION - 195)) | (1 << (Cobol85Parser.FUNCTIONNAME - 195)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 195)) | (1 << (Cobol85Parser.GRID - 195)) | (1 << (Cobol85Parser.HIGHLIGHT - 195)) | (1 << (Cobol85Parser.HIGH_VALUE - 195)) | (1 << (Cobol85Parser.HIGH_VALUES - 195)) | (1 << (Cobol85Parser.IMPLICIT - 195)) | (1 << (Cobol85Parser.IMPORT - 195)) | (1 << (Cobol85Parser.INTEGER - 195)))) != 0) or ((((_la - 262)) & ~0x3f) == 0 and ((1 << (_la - 262)) & ((1 << (Cobol85Parser.KEPT - 262)) | (1 << (Cobol85Parser.KEYBOARD - 262)) | (1 << (Cobol85Parser.LANGUAGE - 262)) | (1 << (Cobol85Parser.LB - 262)) | (1 << (Cobol85Parser.LD - 262)) | (1 << (Cobol85Parser.LEFTLINE - 262)) | (1 << (Cobol85Parser.LENGTH - 262)) | (1 << (Cobol85Parser.LENGTH_CHECK - 262)) | (1 << (Cobol85Parser.LIBACCESS - 262)) | (1 << (Cobol85Parser.LIBPARAMETER - 262)) | (1 << (Cobol85Parser.LIBRARY - 262)) | (1 << (Cobol85Parser.LINAGE_COUNTER - 262)) | (1 << (Cobol85Parser.LINE_COUNTER - 262)) | (1 << (Cobol85Parser.LIST - 262)) | (1 << (Cobol85Parser.LOCAL - 262)) | (1 << (Cobol85Parser.LONG_DATE - 262)) | (1 << (Cobol85Parser.LONG_TIME - 262)) | (1 << (Cobol85Parser.LOWER - 262)) | (1 << (Cobol85Parser.LOWLIGHT - 262)) | (1 << (Cobol85Parser.LOW_VALUE - 262)) | (1 << (Cobol85Parser.LOW_VALUES - 262)) | (1 << (Cobol85Parser.MMDDYYYY - 262)) | (1 << (Cobol85Parser.NAMED - 262)) | (1 << (Cobol85Parser.NATIONAL - 262)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 262)) | (1 << (Cobol85Parser.NETWORK - 262)) | (1 << (Cobol85Parser.NO_ECHO - 262)) | (1 << (Cobol85Parser.NULL - 262)) | (1 << (Cobol85Parser.NULLS - 262)) | (1 << (Cobol85Parser.NUMERIC_DATE - 262)) | (1 << (Cobol85Parser.NUMERIC_TIME - 262)))) != 0) or ((((_la - 326)) & ~0x3f) == 0 and ((1 << (_la - 326)) & ((1 << (Cobol85Parser.ODT - 326)) | (1 << (Cobol85Parser.ORDERLY - 326)) | (1 << (Cobol85Parser.OVERLINE - 326)) | (1 << (Cobol85Parser.OWN - 326)) | (1 << (Cobol85Parser.PAGE_COUNTER - 326)) | (1 << (Cobol85Parser.PASSWORD - 326)) | (1 << (Cobol85Parser.PORT - 326)) | (1 << (Cobol85Parser.PRINTER - 326)) | (1 << (Cobol85Parser.PRIVATE - 326)) | (1 << (Cobol85Parser.PROCESS - 326)) | (1 << (Cobol85Parser.PROGRAM - 326)) | (1 << (Cobol85Parser.PROMPT - 326)) | (1 << (Cobol85Parser.QUOTE - 326)) | (1 << (Cobol85Parser.QUOTES - 326)) | (1 << (Cobol85Parser.READER - 326)) | (1 << (Cobol85Parser.REMOTE - 326)) | (1 << (Cobol85Parser.REAL - 326)) | (1 << (Cobol85Parser.RECEIVED - 326)) | (1 << (Cobol85Parser.RECURSIVE - 326)) | (1 << (Cobol85Parser.REF - 326)))) != 0) or ((((_la - 395)) & ~0x3f) == 0 and ((1 << (_la - 395)) & ((1 << (Cobol85Parser.REMOVE - 395)) | (1 << (Cobol85Parser.REQUIRED - 395)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 395)) | (1 << (Cobol85Parser.RETURN_CODE - 395)) | (1 << (Cobol85Parser.SAVE - 395)) | (1 << (Cobol85Parser.SECURE - 395)) | (1 << (Cobol85Parser.SHARED - 395)) | (1 << (Cobol85Parser.SHAREDBYALL - 395)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 395)) | (1 << (Cobol85Parser.SHARING - 395)) | (1 << (Cobol85Parser.SHIFT_IN - 395)) | (1 << (Cobol85Parser.SHIFT_OUT - 395)) | (1 << (Cobol85Parser.SHORT_DATE - 395)) | (1 << (Cobol85Parser.SORT_CONTROL - 395)) | (1 << (Cobol85Parser.SORT_CORE_SIZE - 395)) | (1 << (Cobol85Parser.SORT_FILE_SIZE - 395)) | (1 << (Cobol85Parser.SORT_MESSAGE - 395)) | (1 << (Cobol85Parser.SORT_MODE_SIZE - 395)) | (1 << (Cobol85Parser.SORT_RETURN - 395)) | (1 << (Cobol85Parser.SPACE - 395)) | (1 << (Cobol85Parser.SPACES - 395)) | (1 << (Cobol85Parser.SQL - 395)))) != 0) or ((((_la - 471)) & ~0x3f) == 0 and ((1 << (_la - 471)) & ((1 << (Cobol85Parser.SYMBOL - 471)) | (1 << (Cobol85Parser.TALLY - 471)) | (1 << (Cobol85Parser.TASK - 471)) | (1 << (Cobol85Parser.THREAD - 471)) | (1 << (Cobol85Parser.THREAD_LOCAL - 471)) | (1 << (Cobol85Parser.TIME - 471)) | (1 << (Cobol85Parser.TIMER - 471)) | (1 << (Cobol85Parser.TODAYS_DATE - 471)) | (1 << (Cobol85Parser.TODAYS_NAME - 471)) | (1 << (Cobol85Parser.TRUE - 471)) | (1 << (Cobol85Parser.TRUNCATED - 471)) | (1 << (Cobol85Parser.TYPEDEF - 471)) | (1 << (Cobol85Parser.UNDERLINE - 471)) | (1 << (Cobol85Parser.VIRTUAL - 471)) | (1 << (Cobol85Parser.WAIT - 471)) | (1 << (Cobol85Parser.WHEN_COMPILED - 471)) | (1 << (Cobol85Parser.YEAR - 471)) | (1 << (Cobol85Parser.YYYYMMDD - 471)) | (1 << (Cobol85Parser.YYYYDDD - 471)) | (1 << (Cobol85Parser.ZERO - 471)) | (1 << (Cobol85Parser.ZERO_FILL - 471)) | (1 << (Cobol85Parser.ZEROS - 471)) | (1 << (Cobol85Parser.ZEROES - 471)))) != 0) or ((((_la - 556)) & ~0x3f) == 0 and ((1 << (_la - 556)) & ((1 << (Cobol85Parser.NONNUMERICLITERAL - 556)) | (1 << (Cobol85Parser.LEVEL_NUMBER_66 - 556)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 556)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 556)) | (1 << (Cobol85Parser.INTEGERLITERAL - 556)) | (1 << (Cobol85Parser.NUMERICLITERAL - 556)) | (1 << (Cobol85Parser.IDENTIFIER - 556)))) != 0)):
                    break

            self.state = 5438
            self.match(Cobol85Parser.FROM)
            self.state = 5440 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 5439
                self.subtractMinuend()
                self.state = 5442 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.ADDRESS) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE) | (1 << Cobol85Parser.AUTO) | (1 << Cobol85Parser.AUTO_SKIP) | (1 << Cobol85Parser.BACKGROUND_COLOR) | (1 << Cobol85Parser.BACKGROUND_COLOUR) | (1 << Cobol85Parser.BEEP) | (1 << Cobol85Parser.BELL) | (1 << Cobol85Parser.BINARY) | (1 << Cobol85Parser.BIT) | (1 << Cobol85Parser.BLINK) | (1 << Cobol85Parser.BLOB) | (1 << Cobol85Parser.BOUNDS) | (1 << Cobol85Parser.CAPABLE) | (1 << Cobol85Parser.CCSVERSION) | (1 << Cobol85Parser.CHANGED) | (1 << Cobol85Parser.CHANNEL))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (Cobol85Parser.CLOB - 67)) | (1 << (Cobol85Parser.CLOSE_DISPOSITION - 67)) | (1 << (Cobol85Parser.COBOL - 67)) | (1 << (Cobol85Parser.COMMITMENT - 67)) | (1 << (Cobol85Parser.CONTROL_POINT - 67)) | (1 << (Cobol85Parser.CONVENTION - 67)) | (1 << (Cobol85Parser.CRUNCH - 67)) | (1 << (Cobol85Parser.CURSOR - 67)) | (1 << (Cobol85Parser.DATE - 67)) | (1 << (Cobol85Parser.DAY - 67)) | (1 << (Cobol85Parser.DAY_OF_WEEK - 67)) | (1 << (Cobol85Parser.DBCLOB - 67)) | (1 << (Cobol85Parser.DEBUG_CONTENTS - 67)) | (1 << (Cobol85Parser.DEBUG_ITEM - 67)) | (1 << (Cobol85Parser.DEBUG_LINE - 67)) | (1 << (Cobol85Parser.DEBUG_NAME - 67)) | (1 << (Cobol85Parser.DEBUG_SUB_1 - 67)) | (1 << (Cobol85Parser.DEBUG_SUB_2 - 67)) | (1 << (Cobol85Parser.DEBUG_SUB_3 - 67)))) != 0) or ((((_la - 131)) & ~0x3f) == 0 and ((1 << (_la - 131)) & ((1 << (Cobol85Parser.DEFAULT - 131)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 131)) | (1 << (Cobol85Parser.DEFINITION - 131)) | (1 << (Cobol85Parser.DFHRESP - 131)) | (1 << (Cobol85Parser.DFHVALUE - 131)) | (1 << (Cobol85Parser.DISK - 131)) | (1 << (Cobol85Parser.DONTCARE - 131)) | (1 << (Cobol85Parser.DOUBLE - 131)) | (1 << (Cobol85Parser.EBCDIC - 131)) | (1 << (Cobol85Parser.EMPTY_CHECK - 131)) | (1 << (Cobol85Parser.ENTER - 131)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 131)) | (1 << (Cobol85Parser.ERASE - 131)) | (1 << (Cobol85Parser.EOL - 131)) | (1 << (Cobol85Parser.EOS - 131)))) != 0) or ((((_la - 195)) & ~0x3f) == 0 and ((1 << (_la - 195)) & ((1 << (Cobol85Parser.ESCAPE - 195)) | (1 << (Cobol85Parser.EVENT - 195)) | (1 << (Cobol85Parser.EXCLUSIVE - 195)) | (1 << (Cobol85Parser.EXPORT - 195)) | (1 << (Cobol85Parser.EXTENDED - 195)) | (1 << (Cobol85Parser.FOREGROUND_COLOR - 195)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 195)) | (1 << (Cobol85Parser.FULL - 195)) | (1 << (Cobol85Parser.FUNCTION - 195)) | (1 << (Cobol85Parser.FUNCTIONNAME - 195)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 195)) | (1 << (Cobol85Parser.GRID - 195)) | (1 << (Cobol85Parser.HIGHLIGHT - 195)) | (1 << (Cobol85Parser.IMPLICIT - 195)) | (1 << (Cobol85Parser.IMPORT - 195)) | (1 << (Cobol85Parser.INTEGER - 195)))) != 0) or ((((_la - 262)) & ~0x3f) == 0 and ((1 << (_la - 262)) & ((1 << (Cobol85Parser.KEPT - 262)) | (1 << (Cobol85Parser.KEYBOARD - 262)) | (1 << (Cobol85Parser.LANGUAGE - 262)) | (1 << (Cobol85Parser.LB - 262)) | (1 << (Cobol85Parser.LD - 262)) | (1 << (Cobol85Parser.LEFTLINE - 262)) | (1 << (Cobol85Parser.LENGTH - 262)) | (1 << (Cobol85Parser.LENGTH_CHECK - 262)) | (1 << (Cobol85Parser.LIBACCESS - 262)) | (1 << (Cobol85Parser.LIBPARAMETER - 262)) | (1 << (Cobol85Parser.LIBRARY - 262)) | (1 << (Cobol85Parser.LINAGE_COUNTER - 262)) | (1 << (Cobol85Parser.LINE_COUNTER - 262)) | (1 << (Cobol85Parser.LIST - 262)) | (1 << (Cobol85Parser.LOCAL - 262)) | (1 << (Cobol85Parser.LONG_DATE - 262)) | (1 << (Cobol85Parser.LONG_TIME - 262)) | (1 << (Cobol85Parser.LOWER - 262)) | (1 << (Cobol85Parser.LOWLIGHT - 262)) | (1 << (Cobol85Parser.MMDDYYYY - 262)) | (1 << (Cobol85Parser.NAMED - 262)) | (1 << (Cobol85Parser.NATIONAL - 262)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 262)) | (1 << (Cobol85Parser.NETWORK - 262)) | (1 << (Cobol85Parser.NO_ECHO - 262)) | (1 << (Cobol85Parser.NUMERIC_DATE - 262)) | (1 << (Cobol85Parser.NUMERIC_TIME - 262)))) != 0) or ((((_la - 326)) & ~0x3f) == 0 and ((1 << (_la - 326)) & ((1 << (Cobol85Parser.ODT - 326)) | (1 << (Cobol85Parser.ORDERLY - 326)) | (1 << (Cobol85Parser.OVERLINE - 326)) | (1 << (Cobol85Parser.OWN - 326)) | (1 << (Cobol85Parser.PAGE_COUNTER - 326)) | (1 << (Cobol85Parser.PASSWORD - 326)) | (1 << (Cobol85Parser.PORT - 326)) | (1 << (Cobol85Parser.PRINTER - 326)) | (1 << (Cobol85Parser.PRIVATE - 326)) | (1 << (Cobol85Parser.PROCESS - 326)) | (1 << (Cobol85Parser.PROGRAM - 326)) | (1 << (Cobol85Parser.PROMPT - 326)) | (1 << (Cobol85Parser.READER - 326)) | (1 << (Cobol85Parser.REMOTE - 326)) | (1 << (Cobol85Parser.REAL - 326)) | (1 << (Cobol85Parser.RECEIVED - 326)) | (1 << (Cobol85Parser.RECURSIVE - 326)) | (1 << (Cobol85Parser.REF - 326)))) != 0) or ((((_la - 395)) & ~0x3f) == 0 and ((1 << (_la - 395)) & ((1 << (Cobol85Parser.REMOVE - 395)) | (1 << (Cobol85Parser.REQUIRED - 395)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 395)) | (1 << (Cobol85Parser.RETURN_CODE - 395)) | (1 << (Cobol85Parser.SAVE - 395)) | (1 << (Cobol85Parser.SECURE - 395)) | (1 << (Cobol85Parser.SHARED - 395)) | (1 << (Cobol85Parser.SHAREDBYALL - 395)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 395)) | (1 << (Cobol85Parser.SHARING - 395)) | (1 << (Cobol85Parser.SHIFT_IN - 395)) | (1 << (Cobol85Parser.SHIFT_OUT - 395)) | (1 << (Cobol85Parser.SHORT_DATE - 395)) | (1 << (Cobol85Parser.SORT_CONTROL - 395)) | (1 << (Cobol85Parser.SORT_CORE_SIZE - 395)) | (1 << (Cobol85Parser.SORT_FILE_SIZE - 395)) | (1 << (Cobol85Parser.SORT_MESSAGE - 395)) | (1 << (Cobol85Parser.SORT_MODE_SIZE - 395)) | (1 << (Cobol85Parser.SORT_RETURN - 395)) | (1 << (Cobol85Parser.SQL - 395)))) != 0) or ((((_la - 471)) & ~0x3f) == 0 and ((1 << (_la - 471)) & ((1 << (Cobol85Parser.SYMBOL - 471)) | (1 << (Cobol85Parser.TALLY - 471)) | (1 << (Cobol85Parser.TASK - 471)) | (1 << (Cobol85Parser.THREAD - 471)) | (1 << (Cobol85Parser.THREAD_LOCAL - 471)) | (1 << (Cobol85Parser.TIME - 471)) | (1 << (Cobol85Parser.TIMER - 471)) | (1 << (Cobol85Parser.TODAYS_DATE - 471)) | (1 << (Cobol85Parser.TODAYS_NAME - 471)) | (1 << (Cobol85Parser.TRUNCATED - 471)) | (1 << (Cobol85Parser.TYPEDEF - 471)) | (1 << (Cobol85Parser.UNDERLINE - 471)) | (1 << (Cobol85Parser.VIRTUAL - 471)) | (1 << (Cobol85Parser.WAIT - 471)) | (1 << (Cobol85Parser.WHEN_COMPILED - 471)) | (1 << (Cobol85Parser.YEAR - 471)) | (1 << (Cobol85Parser.YYYYMMDD - 471)) | (1 << (Cobol85Parser.YYYYDDD - 471)) | (1 << (Cobol85Parser.ZERO_FILL - 471)))) != 0) or ((((_la - 557)) & ~0x3f) == 0 and ((1 << (_la - 557)) & ((1 << (Cobol85Parser.LEVEL_NUMBER_66 - 557)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 557)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 557)) | (1 << (Cobol85Parser.INTEGERLITERAL - 557)) | (1 << (Cobol85Parser.IDENTIFIER - 557)))) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SubtractFromGivingStatementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.SubtractFromGivingStatementContext, self).__init__(parent, invokingState)
            self.parser = parser

        def FROM(self):
            return self.getToken(Cobol85Parser.FROM, 0)

        def subtractMinuendGiving(self):
            return self.getTypedRuleContext(Cobol85Parser.SubtractMinuendGivingContext,0)


        def GIVING(self):
            return self.getToken(Cobol85Parser.GIVING, 0)

        def subtractSubtrahend(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.SubtractSubtrahendContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.SubtractSubtrahendContext,i)


        def subtractGiving(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.SubtractGivingContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.SubtractGivingContext,i)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_subtractFromGivingStatement

        def enterRule(self, listener):
            if hasattr(listener, "enterSubtractFromGivingStatement"):
                listener.enterSubtractFromGivingStatement(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSubtractFromGivingStatement"):
                listener.exitSubtractFromGivingStatement(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitSubtractFromGivingStatement"):
                return visitor.visitSubtractFromGivingStatement(self)
            else:
                return visitor.visitChildren(self)




    def subtractFromGivingStatement(self):

        localctx = Cobol85Parser.SubtractFromGivingStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 952, self.RULE_subtractFromGivingStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5445 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 5444
                self.subtractSubtrahend()
                self.state = 5447 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.ADDRESS) | (1 << Cobol85Parser.ALL) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE) | (1 << Cobol85Parser.AUTO) | (1 << Cobol85Parser.AUTO_SKIP) | (1 << Cobol85Parser.BACKGROUND_COLOR) | (1 << Cobol85Parser.BACKGROUND_COLOUR) | (1 << Cobol85Parser.BEEP) | (1 << Cobol85Parser.BELL) | (1 << Cobol85Parser.BINARY) | (1 << Cobol85Parser.BIT) | (1 << Cobol85Parser.BLINK) | (1 << Cobol85Parser.BLOB) | (1 << Cobol85Parser.BOUNDS) | (1 << Cobol85Parser.CAPABLE) | (1 << Cobol85Parser.CCSVERSION) | (1 << Cobol85Parser.CHANGED) | (1 << Cobol85Parser.CHANNEL))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (Cobol85Parser.CLOB - 67)) | (1 << (Cobol85Parser.CLOSE_DISPOSITION - 67)) | (1 << (Cobol85Parser.COBOL - 67)) | (1 << (Cobol85Parser.COMMITMENT - 67)) | (1 << (Cobol85Parser.CONTROL_POINT - 67)) | (1 << (Cobol85Parser.CONVENTION - 67)) | (1 << (Cobol85Parser.CRUNCH - 67)) | (1 << (Cobol85Parser.CURSOR - 67)) | (1 << (Cobol85Parser.DATE - 67)) | (1 << (Cobol85Parser.DAY - 67)) | (1 << (Cobol85Parser.DAY_OF_WEEK - 67)) | (1 << (Cobol85Parser.DBCLOB - 67)) | (1 << (Cobol85Parser.DEBUG_CONTENTS - 67)) | (1 << (Cobol85Parser.DEBUG_ITEM - 67)) | (1 << (Cobol85Parser.DEBUG_LINE - 67)) | (1 << (Cobol85Parser.DEBUG_NAME - 67)) | (1 << (Cobol85Parser.DEBUG_SUB_1 - 67)) | (1 << (Cobol85Parser.DEBUG_SUB_2 - 67)) | (1 << (Cobol85Parser.DEBUG_SUB_3 - 67)))) != 0) or ((((_la - 131)) & ~0x3f) == 0 and ((1 << (_la - 131)) & ((1 << (Cobol85Parser.DEFAULT - 131)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 131)) | (1 << (Cobol85Parser.DEFINITION - 131)) | (1 << (Cobol85Parser.DFHRESP - 131)) | (1 << (Cobol85Parser.DFHVALUE - 131)) | (1 << (Cobol85Parser.DISK - 131)) | (1 << (Cobol85Parser.DONTCARE - 131)) | (1 << (Cobol85Parser.DOUBLE - 131)) | (1 << (Cobol85Parser.EBCDIC - 131)) | (1 << (Cobol85Parser.EMPTY_CHECK - 131)) | (1 << (Cobol85Parser.ENTER - 131)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 131)) | (1 << (Cobol85Parser.ERASE - 131)) | (1 << (Cobol85Parser.EOL - 131)) | (1 << (Cobol85Parser.EOS - 131)))) != 0) or ((((_la - 195)) & ~0x3f) == 0 and ((1 << (_la - 195)) & ((1 << (Cobol85Parser.ESCAPE - 195)) | (1 << (Cobol85Parser.EVENT - 195)) | (1 << (Cobol85Parser.EXCLUSIVE - 195)) | (1 << (Cobol85Parser.EXPORT - 195)) | (1 << (Cobol85Parser.EXTENDED - 195)) | (1 << (Cobol85Parser.FALSE - 195)) | (1 << (Cobol85Parser.FOREGROUND_COLOR - 195)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 195)) | (1 << (Cobol85Parser.FULL - 195)) | (1 << (Cobol85Parser.FUNCTION - 195)) | (1 << (Cobol85Parser.FUNCTIONNAME - 195)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 195)) | (1 << (Cobol85Parser.GRID - 195)) | (1 << (Cobol85Parser.HIGHLIGHT - 195)) | (1 << (Cobol85Parser.HIGH_VALUE - 195)) | (1 << (Cobol85Parser.HIGH_VALUES - 195)) | (1 << (Cobol85Parser.IMPLICIT - 195)) | (1 << (Cobol85Parser.IMPORT - 195)) | (1 << (Cobol85Parser.INTEGER - 195)))) != 0) or ((((_la - 262)) & ~0x3f) == 0 and ((1 << (_la - 262)) & ((1 << (Cobol85Parser.KEPT - 262)) | (1 << (Cobol85Parser.KEYBOARD - 262)) | (1 << (Cobol85Parser.LANGUAGE - 262)) | (1 << (Cobol85Parser.LB - 262)) | (1 << (Cobol85Parser.LD - 262)) | (1 << (Cobol85Parser.LEFTLINE - 262)) | (1 << (Cobol85Parser.LENGTH - 262)) | (1 << (Cobol85Parser.LENGTH_CHECK - 262)) | (1 << (Cobol85Parser.LIBACCESS - 262)) | (1 << (Cobol85Parser.LIBPARAMETER - 262)) | (1 << (Cobol85Parser.LIBRARY - 262)) | (1 << (Cobol85Parser.LINAGE_COUNTER - 262)) | (1 << (Cobol85Parser.LINE_COUNTER - 262)) | (1 << (Cobol85Parser.LIST - 262)) | (1 << (Cobol85Parser.LOCAL - 262)) | (1 << (Cobol85Parser.LONG_DATE - 262)) | (1 << (Cobol85Parser.LONG_TIME - 262)) | (1 << (Cobol85Parser.LOWER - 262)) | (1 << (Cobol85Parser.LOWLIGHT - 262)) | (1 << (Cobol85Parser.LOW_VALUE - 262)) | (1 << (Cobol85Parser.LOW_VALUES - 262)) | (1 << (Cobol85Parser.MMDDYYYY - 262)) | (1 << (Cobol85Parser.NAMED - 262)) | (1 << (Cobol85Parser.NATIONAL - 262)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 262)) | (1 << (Cobol85Parser.NETWORK - 262)) | (1 << (Cobol85Parser.NO_ECHO - 262)) | (1 << (Cobol85Parser.NULL - 262)) | (1 << (Cobol85Parser.NULLS - 262)) | (1 << (Cobol85Parser.NUMERIC_DATE - 262)) | (1 << (Cobol85Parser.NUMERIC_TIME - 262)))) != 0) or ((((_la - 326)) & ~0x3f) == 0 and ((1 << (_la - 326)) & ((1 << (Cobol85Parser.ODT - 326)) | (1 << (Cobol85Parser.ORDERLY - 326)) | (1 << (Cobol85Parser.OVERLINE - 326)) | (1 << (Cobol85Parser.OWN - 326)) | (1 << (Cobol85Parser.PAGE_COUNTER - 326)) | (1 << (Cobol85Parser.PASSWORD - 326)) | (1 << (Cobol85Parser.PORT - 326)) | (1 << (Cobol85Parser.PRINTER - 326)) | (1 << (Cobol85Parser.PRIVATE - 326)) | (1 << (Cobol85Parser.PROCESS - 326)) | (1 << (Cobol85Parser.PROGRAM - 326)) | (1 << (Cobol85Parser.PROMPT - 326)) | (1 << (Cobol85Parser.QUOTE - 326)) | (1 << (Cobol85Parser.QUOTES - 326)) | (1 << (Cobol85Parser.READER - 326)) | (1 << (Cobol85Parser.REMOTE - 326)) | (1 << (Cobol85Parser.REAL - 326)) | (1 << (Cobol85Parser.RECEIVED - 326)) | (1 << (Cobol85Parser.RECURSIVE - 326)) | (1 << (Cobol85Parser.REF - 326)))) != 0) or ((((_la - 395)) & ~0x3f) == 0 and ((1 << (_la - 395)) & ((1 << (Cobol85Parser.REMOVE - 395)) | (1 << (Cobol85Parser.REQUIRED - 395)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 395)) | (1 << (Cobol85Parser.RETURN_CODE - 395)) | (1 << (Cobol85Parser.SAVE - 395)) | (1 << (Cobol85Parser.SECURE - 395)) | (1 << (Cobol85Parser.SHARED - 395)) | (1 << (Cobol85Parser.SHAREDBYALL - 395)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 395)) | (1 << (Cobol85Parser.SHARING - 395)) | (1 << (Cobol85Parser.SHIFT_IN - 395)) | (1 << (Cobol85Parser.SHIFT_OUT - 395)) | (1 << (Cobol85Parser.SHORT_DATE - 395)) | (1 << (Cobol85Parser.SORT_CONTROL - 395)) | (1 << (Cobol85Parser.SORT_CORE_SIZE - 395)) | (1 << (Cobol85Parser.SORT_FILE_SIZE - 395)) | (1 << (Cobol85Parser.SORT_MESSAGE - 395)) | (1 << (Cobol85Parser.SORT_MODE_SIZE - 395)) | (1 << (Cobol85Parser.SORT_RETURN - 395)) | (1 << (Cobol85Parser.SPACE - 395)) | (1 << (Cobol85Parser.SPACES - 395)) | (1 << (Cobol85Parser.SQL - 395)))) != 0) or ((((_la - 471)) & ~0x3f) == 0 and ((1 << (_la - 471)) & ((1 << (Cobol85Parser.SYMBOL - 471)) | (1 << (Cobol85Parser.TALLY - 471)) | (1 << (Cobol85Parser.TASK - 471)) | (1 << (Cobol85Parser.THREAD - 471)) | (1 << (Cobol85Parser.THREAD_LOCAL - 471)) | (1 << (Cobol85Parser.TIME - 471)) | (1 << (Cobol85Parser.TIMER - 471)) | (1 << (Cobol85Parser.TODAYS_DATE - 471)) | (1 << (Cobol85Parser.TODAYS_NAME - 471)) | (1 << (Cobol85Parser.TRUE - 471)) | (1 << (Cobol85Parser.TRUNCATED - 471)) | (1 << (Cobol85Parser.TYPEDEF - 471)) | (1 << (Cobol85Parser.UNDERLINE - 471)) | (1 << (Cobol85Parser.VIRTUAL - 471)) | (1 << (Cobol85Parser.WAIT - 471)) | (1 << (Cobol85Parser.WHEN_COMPILED - 471)) | (1 << (Cobol85Parser.YEAR - 471)) | (1 << (Cobol85Parser.YYYYMMDD - 471)) | (1 << (Cobol85Parser.YYYYDDD - 471)) | (1 << (Cobol85Parser.ZERO - 471)) | (1 << (Cobol85Parser.ZERO_FILL - 471)) | (1 << (Cobol85Parser.ZEROS - 471)) | (1 << (Cobol85Parser.ZEROES - 471)))) != 0) or ((((_la - 556)) & ~0x3f) == 0 and ((1 << (_la - 556)) & ((1 << (Cobol85Parser.NONNUMERICLITERAL - 556)) | (1 << (Cobol85Parser.LEVEL_NUMBER_66 - 556)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 556)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 556)) | (1 << (Cobol85Parser.INTEGERLITERAL - 556)) | (1 << (Cobol85Parser.NUMERICLITERAL - 556)) | (1 << (Cobol85Parser.IDENTIFIER - 556)))) != 0)):
                    break

            self.state = 5449
            self.match(Cobol85Parser.FROM)
            self.state = 5450
            self.subtractMinuendGiving()
            self.state = 5451
            self.match(Cobol85Parser.GIVING)
            self.state = 5453 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 5452
                self.subtractGiving()
                self.state = 5455 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.ADDRESS) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE) | (1 << Cobol85Parser.AUTO) | (1 << Cobol85Parser.AUTO_SKIP) | (1 << Cobol85Parser.BACKGROUND_COLOR) | (1 << Cobol85Parser.BACKGROUND_COLOUR) | (1 << Cobol85Parser.BEEP) | (1 << Cobol85Parser.BELL) | (1 << Cobol85Parser.BINARY) | (1 << Cobol85Parser.BIT) | (1 << Cobol85Parser.BLINK) | (1 << Cobol85Parser.BLOB) | (1 << Cobol85Parser.BOUNDS) | (1 << Cobol85Parser.CAPABLE) | (1 << Cobol85Parser.CCSVERSION) | (1 << Cobol85Parser.CHANGED) | (1 << Cobol85Parser.CHANNEL))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (Cobol85Parser.CLOB - 67)) | (1 << (Cobol85Parser.CLOSE_DISPOSITION - 67)) | (1 << (Cobol85Parser.COBOL - 67)) | (1 << (Cobol85Parser.COMMITMENT - 67)) | (1 << (Cobol85Parser.CONTROL_POINT - 67)) | (1 << (Cobol85Parser.CONVENTION - 67)) | (1 << (Cobol85Parser.CRUNCH - 67)) | (1 << (Cobol85Parser.CURSOR - 67)) | (1 << (Cobol85Parser.DATE - 67)) | (1 << (Cobol85Parser.DAY - 67)) | (1 << (Cobol85Parser.DAY_OF_WEEK - 67)) | (1 << (Cobol85Parser.DBCLOB - 67)) | (1 << (Cobol85Parser.DEBUG_CONTENTS - 67)) | (1 << (Cobol85Parser.DEBUG_ITEM - 67)) | (1 << (Cobol85Parser.DEBUG_LINE - 67)) | (1 << (Cobol85Parser.DEBUG_NAME - 67)) | (1 << (Cobol85Parser.DEBUG_SUB_1 - 67)) | (1 << (Cobol85Parser.DEBUG_SUB_2 - 67)) | (1 << (Cobol85Parser.DEBUG_SUB_3 - 67)))) != 0) or ((((_la - 131)) & ~0x3f) == 0 and ((1 << (_la - 131)) & ((1 << (Cobol85Parser.DEFAULT - 131)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 131)) | (1 << (Cobol85Parser.DEFINITION - 131)) | (1 << (Cobol85Parser.DFHRESP - 131)) | (1 << (Cobol85Parser.DFHVALUE - 131)) | (1 << (Cobol85Parser.DISK - 131)) | (1 << (Cobol85Parser.DONTCARE - 131)) | (1 << (Cobol85Parser.DOUBLE - 131)) | (1 << (Cobol85Parser.EBCDIC - 131)) | (1 << (Cobol85Parser.EMPTY_CHECK - 131)) | (1 << (Cobol85Parser.ENTER - 131)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 131)) | (1 << (Cobol85Parser.ERASE - 131)) | (1 << (Cobol85Parser.EOL - 131)) | (1 << (Cobol85Parser.EOS - 131)))) != 0) or ((((_la - 195)) & ~0x3f) == 0 and ((1 << (_la - 195)) & ((1 << (Cobol85Parser.ESCAPE - 195)) | (1 << (Cobol85Parser.EVENT - 195)) | (1 << (Cobol85Parser.EXCLUSIVE - 195)) | (1 << (Cobol85Parser.EXPORT - 195)) | (1 << (Cobol85Parser.EXTENDED - 195)) | (1 << (Cobol85Parser.FOREGROUND_COLOR - 195)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 195)) | (1 << (Cobol85Parser.FULL - 195)) | (1 << (Cobol85Parser.FUNCTION - 195)) | (1 << (Cobol85Parser.FUNCTIONNAME - 195)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 195)) | (1 << (Cobol85Parser.GRID - 195)) | (1 << (Cobol85Parser.HIGHLIGHT - 195)) | (1 << (Cobol85Parser.IMPLICIT - 195)) | (1 << (Cobol85Parser.IMPORT - 195)) | (1 << (Cobol85Parser.INTEGER - 195)))) != 0) or ((((_la - 262)) & ~0x3f) == 0 and ((1 << (_la - 262)) & ((1 << (Cobol85Parser.KEPT - 262)) | (1 << (Cobol85Parser.KEYBOARD - 262)) | (1 << (Cobol85Parser.LANGUAGE - 262)) | (1 << (Cobol85Parser.LB - 262)) | (1 << (Cobol85Parser.LD - 262)) | (1 << (Cobol85Parser.LEFTLINE - 262)) | (1 << (Cobol85Parser.LENGTH - 262)) | (1 << (Cobol85Parser.LENGTH_CHECK - 262)) | (1 << (Cobol85Parser.LIBACCESS - 262)) | (1 << (Cobol85Parser.LIBPARAMETER - 262)) | (1 << (Cobol85Parser.LIBRARY - 262)) | (1 << (Cobol85Parser.LINAGE_COUNTER - 262)) | (1 << (Cobol85Parser.LINE_COUNTER - 262)) | (1 << (Cobol85Parser.LIST - 262)) | (1 << (Cobol85Parser.LOCAL - 262)) | (1 << (Cobol85Parser.LONG_DATE - 262)) | (1 << (Cobol85Parser.LONG_TIME - 262)) | (1 << (Cobol85Parser.LOWER - 262)) | (1 << (Cobol85Parser.LOWLIGHT - 262)) | (1 << (Cobol85Parser.MMDDYYYY - 262)) | (1 << (Cobol85Parser.NAMED - 262)) | (1 << (Cobol85Parser.NATIONAL - 262)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 262)) | (1 << (Cobol85Parser.NETWORK - 262)) | (1 << (Cobol85Parser.NO_ECHO - 262)) | (1 << (Cobol85Parser.NUMERIC_DATE - 262)) | (1 << (Cobol85Parser.NUMERIC_TIME - 262)))) != 0) or ((((_la - 326)) & ~0x3f) == 0 and ((1 << (_la - 326)) & ((1 << (Cobol85Parser.ODT - 326)) | (1 << (Cobol85Parser.ORDERLY - 326)) | (1 << (Cobol85Parser.OVERLINE - 326)) | (1 << (Cobol85Parser.OWN - 326)) | (1 << (Cobol85Parser.PAGE_COUNTER - 326)) | (1 << (Cobol85Parser.PASSWORD - 326)) | (1 << (Cobol85Parser.PORT - 326)) | (1 << (Cobol85Parser.PRINTER - 326)) | (1 << (Cobol85Parser.PRIVATE - 326)) | (1 << (Cobol85Parser.PROCESS - 326)) | (1 << (Cobol85Parser.PROGRAM - 326)) | (1 << (Cobol85Parser.PROMPT - 326)) | (1 << (Cobol85Parser.READER - 326)) | (1 << (Cobol85Parser.REMOTE - 326)) | (1 << (Cobol85Parser.REAL - 326)) | (1 << (Cobol85Parser.RECEIVED - 326)) | (1 << (Cobol85Parser.RECURSIVE - 326)) | (1 << (Cobol85Parser.REF - 326)))) != 0) or ((((_la - 395)) & ~0x3f) == 0 and ((1 << (_la - 395)) & ((1 << (Cobol85Parser.REMOVE - 395)) | (1 << (Cobol85Parser.REQUIRED - 395)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 395)) | (1 << (Cobol85Parser.RETURN_CODE - 395)) | (1 << (Cobol85Parser.SAVE - 395)) | (1 << (Cobol85Parser.SECURE - 395)) | (1 << (Cobol85Parser.SHARED - 395)) | (1 << (Cobol85Parser.SHAREDBYALL - 395)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 395)) | (1 << (Cobol85Parser.SHARING - 395)) | (1 << (Cobol85Parser.SHIFT_IN - 395)) | (1 << (Cobol85Parser.SHIFT_OUT - 395)) | (1 << (Cobol85Parser.SHORT_DATE - 395)) | (1 << (Cobol85Parser.SORT_CONTROL - 395)) | (1 << (Cobol85Parser.SORT_CORE_SIZE - 395)) | (1 << (Cobol85Parser.SORT_FILE_SIZE - 395)) | (1 << (Cobol85Parser.SORT_MESSAGE - 395)) | (1 << (Cobol85Parser.SORT_MODE_SIZE - 395)) | (1 << (Cobol85Parser.SORT_RETURN - 395)) | (1 << (Cobol85Parser.SQL - 395)))) != 0) or ((((_la - 471)) & ~0x3f) == 0 and ((1 << (_la - 471)) & ((1 << (Cobol85Parser.SYMBOL - 471)) | (1 << (Cobol85Parser.TALLY - 471)) | (1 << (Cobol85Parser.TASK - 471)) | (1 << (Cobol85Parser.THREAD - 471)) | (1 << (Cobol85Parser.THREAD_LOCAL - 471)) | (1 << (Cobol85Parser.TIME - 471)) | (1 << (Cobol85Parser.TIMER - 471)) | (1 << (Cobol85Parser.TODAYS_DATE - 471)) | (1 << (Cobol85Parser.TODAYS_NAME - 471)) | (1 << (Cobol85Parser.TRUNCATED - 471)) | (1 << (Cobol85Parser.TYPEDEF - 471)) | (1 << (Cobol85Parser.UNDERLINE - 471)) | (1 << (Cobol85Parser.VIRTUAL - 471)) | (1 << (Cobol85Parser.WAIT - 471)) | (1 << (Cobol85Parser.WHEN_COMPILED - 471)) | (1 << (Cobol85Parser.YEAR - 471)) | (1 << (Cobol85Parser.YYYYMMDD - 471)) | (1 << (Cobol85Parser.YYYYDDD - 471)) | (1 << (Cobol85Parser.ZERO_FILL - 471)))) != 0) or ((((_la - 557)) & ~0x3f) == 0 and ((1 << (_la - 557)) & ((1 << (Cobol85Parser.LEVEL_NUMBER_66 - 557)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 557)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 557)) | (1 << (Cobol85Parser.INTEGERLITERAL - 557)) | (1 << (Cobol85Parser.IDENTIFIER - 557)))) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SubtractCorrespondingStatementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.SubtractCorrespondingStatementContext, self).__init__(parent, invokingState)
            self.parser = parser

        def qualifiedDataName(self):
            return self.getTypedRuleContext(Cobol85Parser.QualifiedDataNameContext,0)


        def FROM(self):
            return self.getToken(Cobol85Parser.FROM, 0)

        def subtractMinuendCorresponding(self):
            return self.getTypedRuleContext(Cobol85Parser.SubtractMinuendCorrespondingContext,0)


        def CORRESPONDING(self):
            return self.getToken(Cobol85Parser.CORRESPONDING, 0)

        def CORR(self):
            return self.getToken(Cobol85Parser.CORR, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_subtractCorrespondingStatement

        def enterRule(self, listener):
            if hasattr(listener, "enterSubtractCorrespondingStatement"):
                listener.enterSubtractCorrespondingStatement(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSubtractCorrespondingStatement"):
                listener.exitSubtractCorrespondingStatement(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitSubtractCorrespondingStatement"):
                return visitor.visitSubtractCorrespondingStatement(self)
            else:
                return visitor.visitChildren(self)




    def subtractCorrespondingStatement(self):

        localctx = Cobol85Parser.SubtractCorrespondingStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 954, self.RULE_subtractCorrespondingStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5457
            _la = self._input.LA(1)
            if not(_la==Cobol85Parser.CORR or _la==Cobol85Parser.CORRESPONDING):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 5458
            self.qualifiedDataName()
            self.state = 5459
            self.match(Cobol85Parser.FROM)
            self.state = 5460
            self.subtractMinuendCorresponding()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SubtractSubtrahendContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.SubtractSubtrahendContext, self).__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(Cobol85Parser.IdentifierContext,0)


        def literal(self):
            return self.getTypedRuleContext(Cobol85Parser.LiteralContext,0)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_subtractSubtrahend

        def enterRule(self, listener):
            if hasattr(listener, "enterSubtractSubtrahend"):
                listener.enterSubtractSubtrahend(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSubtractSubtrahend"):
                listener.exitSubtractSubtrahend(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitSubtractSubtrahend"):
                return visitor.visitSubtractSubtrahend(self)
            else:
                return visitor.visitChildren(self)




    def subtractSubtrahend(self):

        localctx = Cobol85Parser.SubtractSubtrahendContext(self, self._ctx, self.state)
        self.enterRule(localctx, 956, self.RULE_subtractSubtrahend)
        try:
            self.state = 5464
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,841,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5462
                self.identifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5463
                self.literal()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SubtractMinuendContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.SubtractMinuendContext, self).__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(Cobol85Parser.IdentifierContext,0)


        def ROUNDED(self):
            return self.getToken(Cobol85Parser.ROUNDED, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_subtractMinuend

        def enterRule(self, listener):
            if hasattr(listener, "enterSubtractMinuend"):
                listener.enterSubtractMinuend(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSubtractMinuend"):
                listener.exitSubtractMinuend(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitSubtractMinuend"):
                return visitor.visitSubtractMinuend(self)
            else:
                return visitor.visitChildren(self)




    def subtractMinuend(self):

        localctx = Cobol85Parser.SubtractMinuendContext(self, self._ctx, self.state)
        self.enterRule(localctx, 958, self.RULE_subtractMinuend)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5466
            self.identifier()
            self.state = 5468
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.ROUNDED:
                self.state = 5467
                self.match(Cobol85Parser.ROUNDED)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SubtractMinuendGivingContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.SubtractMinuendGivingContext, self).__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(Cobol85Parser.IdentifierContext,0)


        def literal(self):
            return self.getTypedRuleContext(Cobol85Parser.LiteralContext,0)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_subtractMinuendGiving

        def enterRule(self, listener):
            if hasattr(listener, "enterSubtractMinuendGiving"):
                listener.enterSubtractMinuendGiving(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSubtractMinuendGiving"):
                listener.exitSubtractMinuendGiving(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitSubtractMinuendGiving"):
                return visitor.visitSubtractMinuendGiving(self)
            else:
                return visitor.visitChildren(self)




    def subtractMinuendGiving(self):

        localctx = Cobol85Parser.SubtractMinuendGivingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 960, self.RULE_subtractMinuendGiving)
        try:
            self.state = 5472
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,843,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5470
                self.identifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5471
                self.literal()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SubtractGivingContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.SubtractGivingContext, self).__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(Cobol85Parser.IdentifierContext,0)


        def ROUNDED(self):
            return self.getToken(Cobol85Parser.ROUNDED, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_subtractGiving

        def enterRule(self, listener):
            if hasattr(listener, "enterSubtractGiving"):
                listener.enterSubtractGiving(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSubtractGiving"):
                listener.exitSubtractGiving(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitSubtractGiving"):
                return visitor.visitSubtractGiving(self)
            else:
                return visitor.visitChildren(self)




    def subtractGiving(self):

        localctx = Cobol85Parser.SubtractGivingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 962, self.RULE_subtractGiving)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5474
            self.identifier()
            self.state = 5476
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.ROUNDED:
                self.state = 5475
                self.match(Cobol85Parser.ROUNDED)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SubtractMinuendCorrespondingContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.SubtractMinuendCorrespondingContext, self).__init__(parent, invokingState)
            self.parser = parser

        def qualifiedDataName(self):
            return self.getTypedRuleContext(Cobol85Parser.QualifiedDataNameContext,0)


        def ROUNDED(self):
            return self.getToken(Cobol85Parser.ROUNDED, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_subtractMinuendCorresponding

        def enterRule(self, listener):
            if hasattr(listener, "enterSubtractMinuendCorresponding"):
                listener.enterSubtractMinuendCorresponding(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSubtractMinuendCorresponding"):
                listener.exitSubtractMinuendCorresponding(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitSubtractMinuendCorresponding"):
                return visitor.visitSubtractMinuendCorresponding(self)
            else:
                return visitor.visitChildren(self)




    def subtractMinuendCorresponding(self):

        localctx = Cobol85Parser.SubtractMinuendCorrespondingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 964, self.RULE_subtractMinuendCorresponding)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5478
            self.qualifiedDataName()
            self.state = 5480
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.ROUNDED:
                self.state = 5479
                self.match(Cobol85Parser.ROUNDED)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TerminateStatementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.TerminateStatementContext, self).__init__(parent, invokingState)
            self.parser = parser

        def TERMINATE(self):
            return self.getToken(Cobol85Parser.TERMINATE, 0)

        def reportName(self):
            return self.getTypedRuleContext(Cobol85Parser.ReportNameContext,0)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_terminateStatement

        def enterRule(self, listener):
            if hasattr(listener, "enterTerminateStatement"):
                listener.enterTerminateStatement(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitTerminateStatement"):
                listener.exitTerminateStatement(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitTerminateStatement"):
                return visitor.visitTerminateStatement(self)
            else:
                return visitor.visitChildren(self)




    def terminateStatement(self):

        localctx = Cobol85Parser.TerminateStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 966, self.RULE_terminateStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5482
            self.match(Cobol85Parser.TERMINATE)
            self.state = 5483
            self.reportName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class UnstringStatementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.UnstringStatementContext, self).__init__(parent, invokingState)
            self.parser = parser

        def UNSTRING(self):
            return self.getToken(Cobol85Parser.UNSTRING, 0)

        def unstringSendingPhrase(self):
            return self.getTypedRuleContext(Cobol85Parser.UnstringSendingPhraseContext,0)


        def unstringIntoPhrase(self):
            return self.getTypedRuleContext(Cobol85Parser.UnstringIntoPhraseContext,0)


        def unstringWithPointerPhrase(self):
            return self.getTypedRuleContext(Cobol85Parser.UnstringWithPointerPhraseContext,0)


        def unstringTallyingPhrase(self):
            return self.getTypedRuleContext(Cobol85Parser.UnstringTallyingPhraseContext,0)


        def onOverflowPhrase(self):
            return self.getTypedRuleContext(Cobol85Parser.OnOverflowPhraseContext,0)


        def notOnOverflowPhrase(self):
            return self.getTypedRuleContext(Cobol85Parser.NotOnOverflowPhraseContext,0)


        def END_UNSTRING(self):
            return self.getToken(Cobol85Parser.END_UNSTRING, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_unstringStatement

        def enterRule(self, listener):
            if hasattr(listener, "enterUnstringStatement"):
                listener.enterUnstringStatement(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitUnstringStatement"):
                listener.exitUnstringStatement(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitUnstringStatement"):
                return visitor.visitUnstringStatement(self)
            else:
                return visitor.visitChildren(self)




    def unstringStatement(self):

        localctx = Cobol85Parser.UnstringStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 968, self.RULE_unstringStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5485
            self.match(Cobol85Parser.UNSTRING)
            self.state = 5486
            self.unstringSendingPhrase()
            self.state = 5487
            self.unstringIntoPhrase()
            self.state = 5489
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,846,self._ctx)
            if la_ == 1:
                self.state = 5488
                self.unstringWithPointerPhrase()


            self.state = 5492
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.TALLYING:
                self.state = 5491
                self.unstringTallyingPhrase()


            self.state = 5495
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,848,self._ctx)
            if la_ == 1:
                self.state = 5494
                self.onOverflowPhrase()


            self.state = 5498
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,849,self._ctx)
            if la_ == 1:
                self.state = 5497
                self.notOnOverflowPhrase()


            self.state = 5501
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,850,self._ctx)
            if la_ == 1:
                self.state = 5500
                self.match(Cobol85Parser.END_UNSTRING)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class UnstringSendingPhraseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.UnstringSendingPhraseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(Cobol85Parser.IdentifierContext,0)


        def unstringDelimitedByPhrase(self):
            return self.getTypedRuleContext(Cobol85Parser.UnstringDelimitedByPhraseContext,0)


        def unstringOrAllPhrase(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.UnstringOrAllPhraseContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.UnstringOrAllPhraseContext,i)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_unstringSendingPhrase

        def enterRule(self, listener):
            if hasattr(listener, "enterUnstringSendingPhrase"):
                listener.enterUnstringSendingPhrase(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitUnstringSendingPhrase"):
                listener.exitUnstringSendingPhrase(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitUnstringSendingPhrase"):
                return visitor.visitUnstringSendingPhrase(self)
            else:
                return visitor.visitChildren(self)




    def unstringSendingPhrase(self):

        localctx = Cobol85Parser.UnstringSendingPhraseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 970, self.RULE_unstringSendingPhrase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5503
            self.identifier()
            self.state = 5511
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.DELIMITED:
                self.state = 5504
                self.unstringDelimitedByPhrase()
                self.state = 5508
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==Cobol85Parser.OR:
                    self.state = 5505
                    self.unstringOrAllPhrase()
                    self.state = 5510
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class UnstringDelimitedByPhraseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.UnstringDelimitedByPhraseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def DELIMITED(self):
            return self.getToken(Cobol85Parser.DELIMITED, 0)

        def identifier(self):
            return self.getTypedRuleContext(Cobol85Parser.IdentifierContext,0)


        def literal(self):
            return self.getTypedRuleContext(Cobol85Parser.LiteralContext,0)


        def BY(self):
            return self.getToken(Cobol85Parser.BY, 0)

        def ALL(self):
            return self.getToken(Cobol85Parser.ALL, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_unstringDelimitedByPhrase

        def enterRule(self, listener):
            if hasattr(listener, "enterUnstringDelimitedByPhrase"):
                listener.enterUnstringDelimitedByPhrase(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitUnstringDelimitedByPhrase"):
                listener.exitUnstringDelimitedByPhrase(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitUnstringDelimitedByPhrase"):
                return visitor.visitUnstringDelimitedByPhrase(self)
            else:
                return visitor.visitChildren(self)




    def unstringDelimitedByPhrase(self):

        localctx = Cobol85Parser.UnstringDelimitedByPhraseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 972, self.RULE_unstringDelimitedByPhrase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5513
            self.match(Cobol85Parser.DELIMITED)
            self.state = 5515
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.BY:
                self.state = 5514
                self.match(Cobol85Parser.BY)


            self.state = 5518
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,854,self._ctx)
            if la_ == 1:
                self.state = 5517
                self.match(Cobol85Parser.ALL)


            self.state = 5522
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,855,self._ctx)
            if la_ == 1:
                self.state = 5520
                self.identifier()
                pass

            elif la_ == 2:
                self.state = 5521
                self.literal()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class UnstringOrAllPhraseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.UnstringOrAllPhraseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def OR(self):
            return self.getToken(Cobol85Parser.OR, 0)

        def identifier(self):
            return self.getTypedRuleContext(Cobol85Parser.IdentifierContext,0)


        def literal(self):
            return self.getTypedRuleContext(Cobol85Parser.LiteralContext,0)


        def ALL(self):
            return self.getToken(Cobol85Parser.ALL, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_unstringOrAllPhrase

        def enterRule(self, listener):
            if hasattr(listener, "enterUnstringOrAllPhrase"):
                listener.enterUnstringOrAllPhrase(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitUnstringOrAllPhrase"):
                listener.exitUnstringOrAllPhrase(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitUnstringOrAllPhrase"):
                return visitor.visitUnstringOrAllPhrase(self)
            else:
                return visitor.visitChildren(self)




    def unstringOrAllPhrase(self):

        localctx = Cobol85Parser.UnstringOrAllPhraseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 974, self.RULE_unstringOrAllPhrase)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5524
            self.match(Cobol85Parser.OR)
            self.state = 5526
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,856,self._ctx)
            if la_ == 1:
                self.state = 5525
                self.match(Cobol85Parser.ALL)


            self.state = 5530
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,857,self._ctx)
            if la_ == 1:
                self.state = 5528
                self.identifier()
                pass

            elif la_ == 2:
                self.state = 5529
                self.literal()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class UnstringIntoPhraseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.UnstringIntoPhraseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def INTO(self):
            return self.getToken(Cobol85Parser.INTO, 0)

        def unstringInto(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.UnstringIntoContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.UnstringIntoContext,i)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_unstringIntoPhrase

        def enterRule(self, listener):
            if hasattr(listener, "enterUnstringIntoPhrase"):
                listener.enterUnstringIntoPhrase(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitUnstringIntoPhrase"):
                listener.exitUnstringIntoPhrase(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitUnstringIntoPhrase"):
                return visitor.visitUnstringIntoPhrase(self)
            else:
                return visitor.visitChildren(self)




    def unstringIntoPhrase(self):

        localctx = Cobol85Parser.UnstringIntoPhraseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 976, self.RULE_unstringIntoPhrase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5532
            self.match(Cobol85Parser.INTO)
            self.state = 5534 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 5533
                self.unstringInto()
                self.state = 5536 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.ADDRESS) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE) | (1 << Cobol85Parser.AUTO) | (1 << Cobol85Parser.AUTO_SKIP) | (1 << Cobol85Parser.BACKGROUND_COLOR) | (1 << Cobol85Parser.BACKGROUND_COLOUR) | (1 << Cobol85Parser.BEEP) | (1 << Cobol85Parser.BELL) | (1 << Cobol85Parser.BINARY) | (1 << Cobol85Parser.BIT) | (1 << Cobol85Parser.BLINK) | (1 << Cobol85Parser.BLOB) | (1 << Cobol85Parser.BOUNDS) | (1 << Cobol85Parser.CAPABLE) | (1 << Cobol85Parser.CCSVERSION) | (1 << Cobol85Parser.CHANGED) | (1 << Cobol85Parser.CHANNEL))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (Cobol85Parser.CLOB - 67)) | (1 << (Cobol85Parser.CLOSE_DISPOSITION - 67)) | (1 << (Cobol85Parser.COBOL - 67)) | (1 << (Cobol85Parser.COMMITMENT - 67)) | (1 << (Cobol85Parser.CONTROL_POINT - 67)) | (1 << (Cobol85Parser.CONVENTION - 67)) | (1 << (Cobol85Parser.CRUNCH - 67)) | (1 << (Cobol85Parser.CURSOR - 67)) | (1 << (Cobol85Parser.DATE - 67)) | (1 << (Cobol85Parser.DAY - 67)) | (1 << (Cobol85Parser.DAY_OF_WEEK - 67)) | (1 << (Cobol85Parser.DBCLOB - 67)) | (1 << (Cobol85Parser.DEBUG_CONTENTS - 67)) | (1 << (Cobol85Parser.DEBUG_ITEM - 67)) | (1 << (Cobol85Parser.DEBUG_LINE - 67)) | (1 << (Cobol85Parser.DEBUG_NAME - 67)) | (1 << (Cobol85Parser.DEBUG_SUB_1 - 67)) | (1 << (Cobol85Parser.DEBUG_SUB_2 - 67)) | (1 << (Cobol85Parser.DEBUG_SUB_3 - 67)))) != 0) or ((((_la - 131)) & ~0x3f) == 0 and ((1 << (_la - 131)) & ((1 << (Cobol85Parser.DEFAULT - 131)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 131)) | (1 << (Cobol85Parser.DEFINITION - 131)) | (1 << (Cobol85Parser.DFHRESP - 131)) | (1 << (Cobol85Parser.DFHVALUE - 131)) | (1 << (Cobol85Parser.DISK - 131)) | (1 << (Cobol85Parser.DONTCARE - 131)) | (1 << (Cobol85Parser.DOUBLE - 131)) | (1 << (Cobol85Parser.EBCDIC - 131)) | (1 << (Cobol85Parser.EMPTY_CHECK - 131)) | (1 << (Cobol85Parser.ENTER - 131)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 131)) | (1 << (Cobol85Parser.ERASE - 131)) | (1 << (Cobol85Parser.EOL - 131)) | (1 << (Cobol85Parser.EOS - 131)))) != 0) or ((((_la - 195)) & ~0x3f) == 0 and ((1 << (_la - 195)) & ((1 << (Cobol85Parser.ESCAPE - 195)) | (1 << (Cobol85Parser.EVENT - 195)) | (1 << (Cobol85Parser.EXCLUSIVE - 195)) | (1 << (Cobol85Parser.EXPORT - 195)) | (1 << (Cobol85Parser.EXTENDED - 195)) | (1 << (Cobol85Parser.FOREGROUND_COLOR - 195)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 195)) | (1 << (Cobol85Parser.FULL - 195)) | (1 << (Cobol85Parser.FUNCTION - 195)) | (1 << (Cobol85Parser.FUNCTIONNAME - 195)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 195)) | (1 << (Cobol85Parser.GRID - 195)) | (1 << (Cobol85Parser.HIGHLIGHT - 195)) | (1 << (Cobol85Parser.IMPLICIT - 195)) | (1 << (Cobol85Parser.IMPORT - 195)) | (1 << (Cobol85Parser.INTEGER - 195)))) != 0) or ((((_la - 262)) & ~0x3f) == 0 and ((1 << (_la - 262)) & ((1 << (Cobol85Parser.KEPT - 262)) | (1 << (Cobol85Parser.KEYBOARD - 262)) | (1 << (Cobol85Parser.LANGUAGE - 262)) | (1 << (Cobol85Parser.LB - 262)) | (1 << (Cobol85Parser.LD - 262)) | (1 << (Cobol85Parser.LEFTLINE - 262)) | (1 << (Cobol85Parser.LENGTH - 262)) | (1 << (Cobol85Parser.LENGTH_CHECK - 262)) | (1 << (Cobol85Parser.LIBACCESS - 262)) | (1 << (Cobol85Parser.LIBPARAMETER - 262)) | (1 << (Cobol85Parser.LIBRARY - 262)) | (1 << (Cobol85Parser.LINAGE_COUNTER - 262)) | (1 << (Cobol85Parser.LINE_COUNTER - 262)) | (1 << (Cobol85Parser.LIST - 262)) | (1 << (Cobol85Parser.LOCAL - 262)) | (1 << (Cobol85Parser.LONG_DATE - 262)) | (1 << (Cobol85Parser.LONG_TIME - 262)) | (1 << (Cobol85Parser.LOWER - 262)) | (1 << (Cobol85Parser.LOWLIGHT - 262)) | (1 << (Cobol85Parser.MMDDYYYY - 262)) | (1 << (Cobol85Parser.NAMED - 262)) | (1 << (Cobol85Parser.NATIONAL - 262)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 262)) | (1 << (Cobol85Parser.NETWORK - 262)) | (1 << (Cobol85Parser.NO_ECHO - 262)) | (1 << (Cobol85Parser.NUMERIC_DATE - 262)) | (1 << (Cobol85Parser.NUMERIC_TIME - 262)))) != 0) or ((((_la - 326)) & ~0x3f) == 0 and ((1 << (_la - 326)) & ((1 << (Cobol85Parser.ODT - 326)) | (1 << (Cobol85Parser.ORDERLY - 326)) | (1 << (Cobol85Parser.OVERLINE - 326)) | (1 << (Cobol85Parser.OWN - 326)) | (1 << (Cobol85Parser.PAGE_COUNTER - 326)) | (1 << (Cobol85Parser.PASSWORD - 326)) | (1 << (Cobol85Parser.PORT - 326)) | (1 << (Cobol85Parser.PRINTER - 326)) | (1 << (Cobol85Parser.PRIVATE - 326)) | (1 << (Cobol85Parser.PROCESS - 326)) | (1 << (Cobol85Parser.PROGRAM - 326)) | (1 << (Cobol85Parser.PROMPT - 326)) | (1 << (Cobol85Parser.READER - 326)) | (1 << (Cobol85Parser.REMOTE - 326)) | (1 << (Cobol85Parser.REAL - 326)) | (1 << (Cobol85Parser.RECEIVED - 326)) | (1 << (Cobol85Parser.RECURSIVE - 326)) | (1 << (Cobol85Parser.REF - 326)))) != 0) or ((((_la - 395)) & ~0x3f) == 0 and ((1 << (_la - 395)) & ((1 << (Cobol85Parser.REMOVE - 395)) | (1 << (Cobol85Parser.REQUIRED - 395)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 395)) | (1 << (Cobol85Parser.RETURN_CODE - 395)) | (1 << (Cobol85Parser.SAVE - 395)) | (1 << (Cobol85Parser.SECURE - 395)) | (1 << (Cobol85Parser.SHARED - 395)) | (1 << (Cobol85Parser.SHAREDBYALL - 395)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 395)) | (1 << (Cobol85Parser.SHARING - 395)) | (1 << (Cobol85Parser.SHIFT_IN - 395)) | (1 << (Cobol85Parser.SHIFT_OUT - 395)) | (1 << (Cobol85Parser.SHORT_DATE - 395)) | (1 << (Cobol85Parser.SORT_CONTROL - 395)) | (1 << (Cobol85Parser.SORT_CORE_SIZE - 395)) | (1 << (Cobol85Parser.SORT_FILE_SIZE - 395)) | (1 << (Cobol85Parser.SORT_MESSAGE - 395)) | (1 << (Cobol85Parser.SORT_MODE_SIZE - 395)) | (1 << (Cobol85Parser.SORT_RETURN - 395)) | (1 << (Cobol85Parser.SQL - 395)))) != 0) or ((((_la - 471)) & ~0x3f) == 0 and ((1 << (_la - 471)) & ((1 << (Cobol85Parser.SYMBOL - 471)) | (1 << (Cobol85Parser.TALLY - 471)) | (1 << (Cobol85Parser.TASK - 471)) | (1 << (Cobol85Parser.THREAD - 471)) | (1 << (Cobol85Parser.THREAD_LOCAL - 471)) | (1 << (Cobol85Parser.TIME - 471)) | (1 << (Cobol85Parser.TIMER - 471)) | (1 << (Cobol85Parser.TODAYS_DATE - 471)) | (1 << (Cobol85Parser.TODAYS_NAME - 471)) | (1 << (Cobol85Parser.TRUNCATED - 471)) | (1 << (Cobol85Parser.TYPEDEF - 471)) | (1 << (Cobol85Parser.UNDERLINE - 471)) | (1 << (Cobol85Parser.VIRTUAL - 471)) | (1 << (Cobol85Parser.WAIT - 471)) | (1 << (Cobol85Parser.WHEN_COMPILED - 471)) | (1 << (Cobol85Parser.YEAR - 471)) | (1 << (Cobol85Parser.YYYYMMDD - 471)) | (1 << (Cobol85Parser.YYYYDDD - 471)) | (1 << (Cobol85Parser.ZERO_FILL - 471)))) != 0) or ((((_la - 557)) & ~0x3f) == 0 and ((1 << (_la - 557)) & ((1 << (Cobol85Parser.LEVEL_NUMBER_66 - 557)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 557)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 557)) | (1 << (Cobol85Parser.INTEGERLITERAL - 557)) | (1 << (Cobol85Parser.IDENTIFIER - 557)))) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class UnstringIntoContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.UnstringIntoContext, self).__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(Cobol85Parser.IdentifierContext,0)


        def unstringDelimiterIn(self):
            return self.getTypedRuleContext(Cobol85Parser.UnstringDelimiterInContext,0)


        def unstringCountIn(self):
            return self.getTypedRuleContext(Cobol85Parser.UnstringCountInContext,0)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_unstringInto

        def enterRule(self, listener):
            if hasattr(listener, "enterUnstringInto"):
                listener.enterUnstringInto(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitUnstringInto"):
                listener.exitUnstringInto(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitUnstringInto"):
                return visitor.visitUnstringInto(self)
            else:
                return visitor.visitChildren(self)




    def unstringInto(self):

        localctx = Cobol85Parser.UnstringIntoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 978, self.RULE_unstringInto)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5538
            self.identifier()
            self.state = 5540
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.DELIMITER:
                self.state = 5539
                self.unstringDelimiterIn()


            self.state = 5543
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.COUNT:
                self.state = 5542
                self.unstringCountIn()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class UnstringDelimiterInContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.UnstringDelimiterInContext, self).__init__(parent, invokingState)
            self.parser = parser

        def DELIMITER(self):
            return self.getToken(Cobol85Parser.DELIMITER, 0)

        def identifier(self):
            return self.getTypedRuleContext(Cobol85Parser.IdentifierContext,0)


        def IN(self):
            return self.getToken(Cobol85Parser.IN, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_unstringDelimiterIn

        def enterRule(self, listener):
            if hasattr(listener, "enterUnstringDelimiterIn"):
                listener.enterUnstringDelimiterIn(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitUnstringDelimiterIn"):
                listener.exitUnstringDelimiterIn(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitUnstringDelimiterIn"):
                return visitor.visitUnstringDelimiterIn(self)
            else:
                return visitor.visitChildren(self)




    def unstringDelimiterIn(self):

        localctx = Cobol85Parser.UnstringDelimiterInContext(self, self._ctx, self.state)
        self.enterRule(localctx, 980, self.RULE_unstringDelimiterIn)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5545
            self.match(Cobol85Parser.DELIMITER)
            self.state = 5547
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.IN:
                self.state = 5546
                self.match(Cobol85Parser.IN)


            self.state = 5549
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class UnstringCountInContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.UnstringCountInContext, self).__init__(parent, invokingState)
            self.parser = parser

        def COUNT(self):
            return self.getToken(Cobol85Parser.COUNT, 0)

        def identifier(self):
            return self.getTypedRuleContext(Cobol85Parser.IdentifierContext,0)


        def IN(self):
            return self.getToken(Cobol85Parser.IN, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_unstringCountIn

        def enterRule(self, listener):
            if hasattr(listener, "enterUnstringCountIn"):
                listener.enterUnstringCountIn(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitUnstringCountIn"):
                listener.exitUnstringCountIn(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitUnstringCountIn"):
                return visitor.visitUnstringCountIn(self)
            else:
                return visitor.visitChildren(self)




    def unstringCountIn(self):

        localctx = Cobol85Parser.UnstringCountInContext(self, self._ctx, self.state)
        self.enterRule(localctx, 982, self.RULE_unstringCountIn)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5551
            self.match(Cobol85Parser.COUNT)
            self.state = 5553
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.IN:
                self.state = 5552
                self.match(Cobol85Parser.IN)


            self.state = 5555
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class UnstringWithPointerPhraseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.UnstringWithPointerPhraseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def POINTER(self):
            return self.getToken(Cobol85Parser.POINTER, 0)

        def qualifiedDataName(self):
            return self.getTypedRuleContext(Cobol85Parser.QualifiedDataNameContext,0)


        def WITH(self):
            return self.getToken(Cobol85Parser.WITH, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_unstringWithPointerPhrase

        def enterRule(self, listener):
            if hasattr(listener, "enterUnstringWithPointerPhrase"):
                listener.enterUnstringWithPointerPhrase(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitUnstringWithPointerPhrase"):
                listener.exitUnstringWithPointerPhrase(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitUnstringWithPointerPhrase"):
                return visitor.visitUnstringWithPointerPhrase(self)
            else:
                return visitor.visitChildren(self)




    def unstringWithPointerPhrase(self):

        localctx = Cobol85Parser.UnstringWithPointerPhraseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 984, self.RULE_unstringWithPointerPhrase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5558
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.WITH:
                self.state = 5557
                self.match(Cobol85Parser.WITH)


            self.state = 5560
            self.match(Cobol85Parser.POINTER)
            self.state = 5561
            self.qualifiedDataName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class UnstringTallyingPhraseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.UnstringTallyingPhraseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def TALLYING(self):
            return self.getToken(Cobol85Parser.TALLYING, 0)

        def qualifiedDataName(self):
            return self.getTypedRuleContext(Cobol85Parser.QualifiedDataNameContext,0)


        def IN(self):
            return self.getToken(Cobol85Parser.IN, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_unstringTallyingPhrase

        def enterRule(self, listener):
            if hasattr(listener, "enterUnstringTallyingPhrase"):
                listener.enterUnstringTallyingPhrase(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitUnstringTallyingPhrase"):
                listener.exitUnstringTallyingPhrase(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitUnstringTallyingPhrase"):
                return visitor.visitUnstringTallyingPhrase(self)
            else:
                return visitor.visitChildren(self)




    def unstringTallyingPhrase(self):

        localctx = Cobol85Parser.UnstringTallyingPhraseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 986, self.RULE_unstringTallyingPhrase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5563
            self.match(Cobol85Parser.TALLYING)
            self.state = 5565
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.IN:
                self.state = 5564
                self.match(Cobol85Parser.IN)


            self.state = 5567
            self.qualifiedDataName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class UseStatementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.UseStatementContext, self).__init__(parent, invokingState)
            self.parser = parser

        def USE(self):
            return self.getToken(Cobol85Parser.USE, 0)

        def useAfterClause(self):
            return self.getTypedRuleContext(Cobol85Parser.UseAfterClauseContext,0)


        def useDebugClause(self):
            return self.getTypedRuleContext(Cobol85Parser.UseDebugClauseContext,0)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_useStatement

        def enterRule(self, listener):
            if hasattr(listener, "enterUseStatement"):
                listener.enterUseStatement(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitUseStatement"):
                listener.exitUseStatement(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitUseStatement"):
                return visitor.visitUseStatement(self)
            else:
                return visitor.visitChildren(self)




    def useStatement(self):

        localctx = Cobol85Parser.UseStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 988, self.RULE_useStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5569
            self.match(Cobol85Parser.USE)
            self.state = 5572
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Cobol85Parser.AFTER, Cobol85Parser.GLOBAL]:
                self.state = 5570
                self.useAfterClause()
                pass
            elif token in [Cobol85Parser.DEBUGGING, Cobol85Parser.FOR]:
                self.state = 5571
                self.useDebugClause()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class UseAfterClauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.UseAfterClauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def AFTER(self):
            return self.getToken(Cobol85Parser.AFTER, 0)

        def PROCEDURE(self):
            return self.getToken(Cobol85Parser.PROCEDURE, 0)

        def useAfterOn(self):
            return self.getTypedRuleContext(Cobol85Parser.UseAfterOnContext,0)


        def EXCEPTION(self):
            return self.getToken(Cobol85Parser.EXCEPTION, 0)

        def ERROR(self):
            return self.getToken(Cobol85Parser.ERROR, 0)

        def GLOBAL(self):
            return self.getToken(Cobol85Parser.GLOBAL, 0)

        def STANDARD(self):
            return self.getToken(Cobol85Parser.STANDARD, 0)

        def ON(self):
            return self.getToken(Cobol85Parser.ON, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_useAfterClause

        def enterRule(self, listener):
            if hasattr(listener, "enterUseAfterClause"):
                listener.enterUseAfterClause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitUseAfterClause"):
                listener.exitUseAfterClause(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitUseAfterClause"):
                return visitor.visitUseAfterClause(self)
            else:
                return visitor.visitChildren(self)




    def useAfterClause(self):

        localctx = Cobol85Parser.UseAfterClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 990, self.RULE_useAfterClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5575
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.GLOBAL:
                self.state = 5574
                self.match(Cobol85Parser.GLOBAL)


            self.state = 5577
            self.match(Cobol85Parser.AFTER)
            self.state = 5579
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.STANDARD:
                self.state = 5578
                self.match(Cobol85Parser.STANDARD)


            self.state = 5581
            _la = self._input.LA(1)
            if not(_la==Cobol85Parser.ERROR or _la==Cobol85Parser.EXCEPTION):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 5582
            self.match(Cobol85Parser.PROCEDURE)
            self.state = 5584
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.ON:
                self.state = 5583
                self.match(Cobol85Parser.ON)


            self.state = 5586
            self.useAfterOn()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class UseAfterOnContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.UseAfterOnContext, self).__init__(parent, invokingState)
            self.parser = parser

        def INPUT(self):
            return self.getToken(Cobol85Parser.INPUT, 0)

        def OUTPUT(self):
            return self.getToken(Cobol85Parser.OUTPUT, 0)

        def I_O(self):
            return self.getToken(Cobol85Parser.I_O, 0)

        def EXTEND(self):
            return self.getToken(Cobol85Parser.EXTEND, 0)

        def fileName(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.FileNameContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.FileNameContext,i)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_useAfterOn

        def enterRule(self, listener):
            if hasattr(listener, "enterUseAfterOn"):
                listener.enterUseAfterOn(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitUseAfterOn"):
                listener.exitUseAfterOn(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitUseAfterOn"):
                return visitor.visitUseAfterOn(self)
            else:
                return visitor.visitChildren(self)




    def useAfterOn(self):

        localctx = Cobol85Parser.UseAfterOnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 992, self.RULE_useAfterOn)
        self._la = 0 # Token type
        try:
            self.state = 5597
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Cobol85Parser.INPUT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5588
                self.match(Cobol85Parser.INPUT)
                pass
            elif token in [Cobol85Parser.OUTPUT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5589
                self.match(Cobol85Parser.OUTPUT)
                pass
            elif token in [Cobol85Parser.I_O]:
                self.enterOuterAlt(localctx, 3)
                self.state = 5590
                self.match(Cobol85Parser.I_O)
                pass
            elif token in [Cobol85Parser.EXTEND]:
                self.enterOuterAlt(localctx, 4)
                self.state = 5591
                self.match(Cobol85Parser.EXTEND)
                pass
            elif token in [Cobol85Parser.ABORT, Cobol85Parser.AS, Cobol85Parser.ASCII, Cobol85Parser.ASSOCIATED_DATA, Cobol85Parser.ASSOCIATED_DATA_LENGTH, Cobol85Parser.ATTRIBUTE, Cobol85Parser.AUTO, Cobol85Parser.AUTO_SKIP, Cobol85Parser.BACKGROUND_COLOR, Cobol85Parser.BACKGROUND_COLOUR, Cobol85Parser.BEEP, Cobol85Parser.BELL, Cobol85Parser.BINARY, Cobol85Parser.BIT, Cobol85Parser.BLINK, Cobol85Parser.BLOB, Cobol85Parser.BOUNDS, Cobol85Parser.CAPABLE, Cobol85Parser.CCSVERSION, Cobol85Parser.CHANGED, Cobol85Parser.CHANNEL, Cobol85Parser.CLOB, Cobol85Parser.CLOSE_DISPOSITION, Cobol85Parser.COBOL, Cobol85Parser.COMMITMENT, Cobol85Parser.CONTROL_POINT, Cobol85Parser.CONVENTION, Cobol85Parser.CRUNCH, Cobol85Parser.CURSOR, Cobol85Parser.DBCLOB, Cobol85Parser.DEFAULT, Cobol85Parser.DEFAULT_DISPLAY, Cobol85Parser.DEFINITION, Cobol85Parser.DFHRESP, Cobol85Parser.DFHVALUE, Cobol85Parser.DISK, Cobol85Parser.DONTCARE, Cobol85Parser.DOUBLE, Cobol85Parser.EBCDIC, Cobol85Parser.EMPTY_CHECK, Cobol85Parser.ENTER, Cobol85Parser.ENTRY_PROCEDURE, Cobol85Parser.ERASE, Cobol85Parser.EOL, Cobol85Parser.EOS, Cobol85Parser.ESCAPE, Cobol85Parser.EVENT, Cobol85Parser.EXCLUSIVE, Cobol85Parser.EXPORT, Cobol85Parser.EXTENDED, Cobol85Parser.FOREGROUND_COLOR, Cobol85Parser.FOREGROUND_COLOUR, Cobol85Parser.FULL, Cobol85Parser.FUNCTIONNAME, Cobol85Parser.FUNCTION_POINTER, Cobol85Parser.GRID, Cobol85Parser.HIGHLIGHT, Cobol85Parser.IMPLICIT, Cobol85Parser.IMPORT, Cobol85Parser.INTEGER, Cobol85Parser.KEPT, Cobol85Parser.KEYBOARD, Cobol85Parser.LANGUAGE, Cobol85Parser.LB, Cobol85Parser.LD, Cobol85Parser.LEFTLINE, Cobol85Parser.LENGTH_CHECK, Cobol85Parser.LIBACCESS, Cobol85Parser.LIBPARAMETER, Cobol85Parser.LIBRARY, Cobol85Parser.LIST, Cobol85Parser.LOCAL, Cobol85Parser.LONG_DATE, Cobol85Parser.LONG_TIME, Cobol85Parser.LOWER, Cobol85Parser.LOWLIGHT, Cobol85Parser.MMDDYYYY, Cobol85Parser.NAMED, Cobol85Parser.NATIONAL, Cobol85Parser.NATIONAL_EDITED, Cobol85Parser.NETWORK, Cobol85Parser.NO_ECHO, Cobol85Parser.NUMERIC_DATE, Cobol85Parser.NUMERIC_TIME, Cobol85Parser.ODT, Cobol85Parser.ORDERLY, Cobol85Parser.OVERLINE, Cobol85Parser.OWN, Cobol85Parser.PASSWORD, Cobol85Parser.PORT, Cobol85Parser.PRINTER, Cobol85Parser.PRIVATE, Cobol85Parser.PROCESS, Cobol85Parser.PROGRAM, Cobol85Parser.PROMPT, Cobol85Parser.READER, Cobol85Parser.REMOTE, Cobol85Parser.REAL, Cobol85Parser.RECEIVED, Cobol85Parser.RECURSIVE, Cobol85Parser.REF, Cobol85Parser.REMOVE, Cobol85Parser.REQUIRED, Cobol85Parser.REVERSE_VIDEO, Cobol85Parser.SAVE, Cobol85Parser.SECURE, Cobol85Parser.SHARED, Cobol85Parser.SHAREDBYALL, Cobol85Parser.SHAREDBYRUNUNIT, Cobol85Parser.SHARING, Cobol85Parser.SHORT_DATE, Cobol85Parser.SQL, Cobol85Parser.SYMBOL, Cobol85Parser.TASK, Cobol85Parser.THREAD, Cobol85Parser.THREAD_LOCAL, Cobol85Parser.TIMER, Cobol85Parser.TODAYS_DATE, Cobol85Parser.TODAYS_NAME, Cobol85Parser.TRUNCATED, Cobol85Parser.TYPEDEF, Cobol85Parser.UNDERLINE, Cobol85Parser.VIRTUAL, Cobol85Parser.WAIT, Cobol85Parser.YEAR, Cobol85Parser.YYYYMMDD, Cobol85Parser.YYYYDDD, Cobol85Parser.ZERO_FILL, Cobol85Parser.IDENTIFIER]:
                self.enterOuterAlt(localctx, 5)
                self.state = 5593 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 5592
                    self.fileName()
                    self.state = 5595 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE) | (1 << Cobol85Parser.AUTO) | (1 << Cobol85Parser.AUTO_SKIP) | (1 << Cobol85Parser.BACKGROUND_COLOR) | (1 << Cobol85Parser.BACKGROUND_COLOUR) | (1 << Cobol85Parser.BEEP) | (1 << Cobol85Parser.BELL) | (1 << Cobol85Parser.BINARY) | (1 << Cobol85Parser.BIT) | (1 << Cobol85Parser.BLINK) | (1 << Cobol85Parser.BLOB) | (1 << Cobol85Parser.BOUNDS) | (1 << Cobol85Parser.CAPABLE) | (1 << Cobol85Parser.CCSVERSION) | (1 << Cobol85Parser.CHANGED) | (1 << Cobol85Parser.CHANNEL))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (Cobol85Parser.CLOB - 67)) | (1 << (Cobol85Parser.CLOSE_DISPOSITION - 67)) | (1 << (Cobol85Parser.COBOL - 67)) | (1 << (Cobol85Parser.COMMITMENT - 67)) | (1 << (Cobol85Parser.CONTROL_POINT - 67)) | (1 << (Cobol85Parser.CONVENTION - 67)) | (1 << (Cobol85Parser.CRUNCH - 67)) | (1 << (Cobol85Parser.CURSOR - 67)) | (1 << (Cobol85Parser.DBCLOB - 67)))) != 0) or ((((_la - 131)) & ~0x3f) == 0 and ((1 << (_la - 131)) & ((1 << (Cobol85Parser.DEFAULT - 131)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 131)) | (1 << (Cobol85Parser.DEFINITION - 131)) | (1 << (Cobol85Parser.DFHRESP - 131)) | (1 << (Cobol85Parser.DFHVALUE - 131)) | (1 << (Cobol85Parser.DISK - 131)) | (1 << (Cobol85Parser.DONTCARE - 131)) | (1 << (Cobol85Parser.DOUBLE - 131)) | (1 << (Cobol85Parser.EBCDIC - 131)) | (1 << (Cobol85Parser.EMPTY_CHECK - 131)) | (1 << (Cobol85Parser.ENTER - 131)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 131)) | (1 << (Cobol85Parser.ERASE - 131)) | (1 << (Cobol85Parser.EOL - 131)) | (1 << (Cobol85Parser.EOS - 131)))) != 0) or ((((_la - 195)) & ~0x3f) == 0 and ((1 << (_la - 195)) & ((1 << (Cobol85Parser.ESCAPE - 195)) | (1 << (Cobol85Parser.EVENT - 195)) | (1 << (Cobol85Parser.EXCLUSIVE - 195)) | (1 << (Cobol85Parser.EXPORT - 195)) | (1 << (Cobol85Parser.EXTENDED - 195)) | (1 << (Cobol85Parser.FOREGROUND_COLOR - 195)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 195)) | (1 << (Cobol85Parser.FULL - 195)) | (1 << (Cobol85Parser.FUNCTIONNAME - 195)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 195)) | (1 << (Cobol85Parser.GRID - 195)) | (1 << (Cobol85Parser.HIGHLIGHT - 195)) | (1 << (Cobol85Parser.IMPLICIT - 195)) | (1 << (Cobol85Parser.IMPORT - 195)) | (1 << (Cobol85Parser.INTEGER - 195)))) != 0) or ((((_la - 262)) & ~0x3f) == 0 and ((1 << (_la - 262)) & ((1 << (Cobol85Parser.KEPT - 262)) | (1 << (Cobol85Parser.KEYBOARD - 262)) | (1 << (Cobol85Parser.LANGUAGE - 262)) | (1 << (Cobol85Parser.LB - 262)) | (1 << (Cobol85Parser.LD - 262)) | (1 << (Cobol85Parser.LEFTLINE - 262)) | (1 << (Cobol85Parser.LENGTH_CHECK - 262)) | (1 << (Cobol85Parser.LIBACCESS - 262)) | (1 << (Cobol85Parser.LIBPARAMETER - 262)) | (1 << (Cobol85Parser.LIBRARY - 262)) | (1 << (Cobol85Parser.LIST - 262)) | (1 << (Cobol85Parser.LOCAL - 262)) | (1 << (Cobol85Parser.LONG_DATE - 262)) | (1 << (Cobol85Parser.LONG_TIME - 262)) | (1 << (Cobol85Parser.LOWER - 262)) | (1 << (Cobol85Parser.LOWLIGHT - 262)) | (1 << (Cobol85Parser.MMDDYYYY - 262)) | (1 << (Cobol85Parser.NAMED - 262)) | (1 << (Cobol85Parser.NATIONAL - 262)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 262)) | (1 << (Cobol85Parser.NETWORK - 262)) | (1 << (Cobol85Parser.NO_ECHO - 262)) | (1 << (Cobol85Parser.NUMERIC_DATE - 262)) | (1 << (Cobol85Parser.NUMERIC_TIME - 262)))) != 0) or ((((_la - 326)) & ~0x3f) == 0 and ((1 << (_la - 326)) & ((1 << (Cobol85Parser.ODT - 326)) | (1 << (Cobol85Parser.ORDERLY - 326)) | (1 << (Cobol85Parser.OVERLINE - 326)) | (1 << (Cobol85Parser.OWN - 326)) | (1 << (Cobol85Parser.PASSWORD - 326)) | (1 << (Cobol85Parser.PORT - 326)) | (1 << (Cobol85Parser.PRINTER - 326)) | (1 << (Cobol85Parser.PRIVATE - 326)) | (1 << (Cobol85Parser.PROCESS - 326)) | (1 << (Cobol85Parser.PROGRAM - 326)) | (1 << (Cobol85Parser.PROMPT - 326)) | (1 << (Cobol85Parser.READER - 326)) | (1 << (Cobol85Parser.REMOTE - 326)) | (1 << (Cobol85Parser.REAL - 326)) | (1 << (Cobol85Parser.RECEIVED - 326)) | (1 << (Cobol85Parser.RECURSIVE - 326)) | (1 << (Cobol85Parser.REF - 326)))) != 0) or ((((_la - 395)) & ~0x3f) == 0 and ((1 << (_la - 395)) & ((1 << (Cobol85Parser.REMOVE - 395)) | (1 << (Cobol85Parser.REQUIRED - 395)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 395)) | (1 << (Cobol85Parser.SAVE - 395)) | (1 << (Cobol85Parser.SECURE - 395)) | (1 << (Cobol85Parser.SHARED - 395)) | (1 << (Cobol85Parser.SHAREDBYALL - 395)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 395)) | (1 << (Cobol85Parser.SHARING - 395)) | (1 << (Cobol85Parser.SHORT_DATE - 395)) | (1 << (Cobol85Parser.SQL - 395)))) != 0) or ((((_la - 471)) & ~0x3f) == 0 and ((1 << (_la - 471)) & ((1 << (Cobol85Parser.SYMBOL - 471)) | (1 << (Cobol85Parser.TASK - 471)) | (1 << (Cobol85Parser.THREAD - 471)) | (1 << (Cobol85Parser.THREAD_LOCAL - 471)) | (1 << (Cobol85Parser.TIMER - 471)) | (1 << (Cobol85Parser.TODAYS_DATE - 471)) | (1 << (Cobol85Parser.TODAYS_NAME - 471)) | (1 << (Cobol85Parser.TRUNCATED - 471)) | (1 << (Cobol85Parser.TYPEDEF - 471)) | (1 << (Cobol85Parser.UNDERLINE - 471)) | (1 << (Cobol85Parser.VIRTUAL - 471)) | (1 << (Cobol85Parser.WAIT - 471)) | (1 << (Cobol85Parser.YEAR - 471)) | (1 << (Cobol85Parser.YYYYMMDD - 471)) | (1 << (Cobol85Parser.YYYYDDD - 471)) | (1 << (Cobol85Parser.ZERO_FILL - 471)))) != 0) or _la==Cobol85Parser.IDENTIFIER):
                        break

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class UseDebugClauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.UseDebugClauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def DEBUGGING(self):
            return self.getToken(Cobol85Parser.DEBUGGING, 0)

        def FOR(self):
            return self.getToken(Cobol85Parser.FOR, 0)

        def ON(self):
            return self.getToken(Cobol85Parser.ON, 0)

        def useDebugOn(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.UseDebugOnContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.UseDebugOnContext,i)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_useDebugClause

        def enterRule(self, listener):
            if hasattr(listener, "enterUseDebugClause"):
                listener.enterUseDebugClause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitUseDebugClause"):
                listener.exitUseDebugClause(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitUseDebugClause"):
                return visitor.visitUseDebugClause(self)
            else:
                return visitor.visitChildren(self)




    def useDebugClause(self):

        localctx = Cobol85Parser.UseDebugClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 994, self.RULE_useDebugClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5600
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.FOR:
                self.state = 5599
                self.match(Cobol85Parser.FOR)


            self.state = 5602
            self.match(Cobol85Parser.DEBUGGING)
            self.state = 5604
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.ON:
                self.state = 5603
                self.match(Cobol85Parser.ON)


            self.state = 5607 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 5606
                self.useDebugOn()
                self.state = 5609 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.ALL) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE) | (1 << Cobol85Parser.AUTO) | (1 << Cobol85Parser.AUTO_SKIP) | (1 << Cobol85Parser.BACKGROUND_COLOR) | (1 << Cobol85Parser.BACKGROUND_COLOUR) | (1 << Cobol85Parser.BEEP) | (1 << Cobol85Parser.BELL) | (1 << Cobol85Parser.BINARY) | (1 << Cobol85Parser.BIT) | (1 << Cobol85Parser.BLINK) | (1 << Cobol85Parser.BLOB) | (1 << Cobol85Parser.BOUNDS) | (1 << Cobol85Parser.CAPABLE) | (1 << Cobol85Parser.CCSVERSION) | (1 << Cobol85Parser.CHANGED) | (1 << Cobol85Parser.CHANNEL))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (Cobol85Parser.CLOB - 67)) | (1 << (Cobol85Parser.CLOSE_DISPOSITION - 67)) | (1 << (Cobol85Parser.COBOL - 67)) | (1 << (Cobol85Parser.COMMITMENT - 67)) | (1 << (Cobol85Parser.CONTROL_POINT - 67)) | (1 << (Cobol85Parser.CONVENTION - 67)) | (1 << (Cobol85Parser.CRUNCH - 67)) | (1 << (Cobol85Parser.CURSOR - 67)) | (1 << (Cobol85Parser.DBCLOB - 67)))) != 0) or ((((_la - 131)) & ~0x3f) == 0 and ((1 << (_la - 131)) & ((1 << (Cobol85Parser.DEFAULT - 131)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 131)) | (1 << (Cobol85Parser.DEFINITION - 131)) | (1 << (Cobol85Parser.DFHRESP - 131)) | (1 << (Cobol85Parser.DFHVALUE - 131)) | (1 << (Cobol85Parser.DISK - 131)) | (1 << (Cobol85Parser.DONTCARE - 131)) | (1 << (Cobol85Parser.DOUBLE - 131)) | (1 << (Cobol85Parser.EBCDIC - 131)) | (1 << (Cobol85Parser.EMPTY_CHECK - 131)) | (1 << (Cobol85Parser.ENTER - 131)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 131)) | (1 << (Cobol85Parser.ERASE - 131)) | (1 << (Cobol85Parser.EOL - 131)) | (1 << (Cobol85Parser.EOS - 131)))) != 0) or ((((_la - 195)) & ~0x3f) == 0 and ((1 << (_la - 195)) & ((1 << (Cobol85Parser.ESCAPE - 195)) | (1 << (Cobol85Parser.EVENT - 195)) | (1 << (Cobol85Parser.EXCLUSIVE - 195)) | (1 << (Cobol85Parser.EXPORT - 195)) | (1 << (Cobol85Parser.EXTENDED - 195)) | (1 << (Cobol85Parser.FOREGROUND_COLOR - 195)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 195)) | (1 << (Cobol85Parser.FULL - 195)) | (1 << (Cobol85Parser.FUNCTIONNAME - 195)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 195)) | (1 << (Cobol85Parser.GRID - 195)) | (1 << (Cobol85Parser.HIGHLIGHT - 195)) | (1 << (Cobol85Parser.IMPLICIT - 195)) | (1 << (Cobol85Parser.IMPORT - 195)) | (1 << (Cobol85Parser.INTEGER - 195)))) != 0) or ((((_la - 262)) & ~0x3f) == 0 and ((1 << (_la - 262)) & ((1 << (Cobol85Parser.KEPT - 262)) | (1 << (Cobol85Parser.KEYBOARD - 262)) | (1 << (Cobol85Parser.LANGUAGE - 262)) | (1 << (Cobol85Parser.LB - 262)) | (1 << (Cobol85Parser.LD - 262)) | (1 << (Cobol85Parser.LEFTLINE - 262)) | (1 << (Cobol85Parser.LENGTH_CHECK - 262)) | (1 << (Cobol85Parser.LIBACCESS - 262)) | (1 << (Cobol85Parser.LIBPARAMETER - 262)) | (1 << (Cobol85Parser.LIBRARY - 262)) | (1 << (Cobol85Parser.LIST - 262)) | (1 << (Cobol85Parser.LOCAL - 262)) | (1 << (Cobol85Parser.LONG_DATE - 262)) | (1 << (Cobol85Parser.LONG_TIME - 262)) | (1 << (Cobol85Parser.LOWER - 262)) | (1 << (Cobol85Parser.LOWLIGHT - 262)) | (1 << (Cobol85Parser.MMDDYYYY - 262)) | (1 << (Cobol85Parser.NAMED - 262)) | (1 << (Cobol85Parser.NATIONAL - 262)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 262)) | (1 << (Cobol85Parser.NETWORK - 262)) | (1 << (Cobol85Parser.NO_ECHO - 262)) | (1 << (Cobol85Parser.NUMERIC_DATE - 262)) | (1 << (Cobol85Parser.NUMERIC_TIME - 262)))) != 0) or ((((_la - 326)) & ~0x3f) == 0 and ((1 << (_la - 326)) & ((1 << (Cobol85Parser.ODT - 326)) | (1 << (Cobol85Parser.ORDERLY - 326)) | (1 << (Cobol85Parser.OVERLINE - 326)) | (1 << (Cobol85Parser.OWN - 326)) | (1 << (Cobol85Parser.PASSWORD - 326)) | (1 << (Cobol85Parser.PORT - 326)) | (1 << (Cobol85Parser.PRINTER - 326)) | (1 << (Cobol85Parser.PRIVATE - 326)) | (1 << (Cobol85Parser.PROCESS - 326)) | (1 << (Cobol85Parser.PROGRAM - 326)) | (1 << (Cobol85Parser.PROMPT - 326)) | (1 << (Cobol85Parser.READER - 326)) | (1 << (Cobol85Parser.REMOTE - 326)) | (1 << (Cobol85Parser.REAL - 326)) | (1 << (Cobol85Parser.RECEIVED - 326)) | (1 << (Cobol85Parser.RECURSIVE - 326)) | (1 << (Cobol85Parser.REF - 326)))) != 0) or ((((_la - 395)) & ~0x3f) == 0 and ((1 << (_la - 395)) & ((1 << (Cobol85Parser.REMOVE - 395)) | (1 << (Cobol85Parser.REQUIRED - 395)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 395)) | (1 << (Cobol85Parser.SAVE - 395)) | (1 << (Cobol85Parser.SECURE - 395)) | (1 << (Cobol85Parser.SHARED - 395)) | (1 << (Cobol85Parser.SHAREDBYALL - 395)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 395)) | (1 << (Cobol85Parser.SHARING - 395)) | (1 << (Cobol85Parser.SHORT_DATE - 395)) | (1 << (Cobol85Parser.SQL - 395)))) != 0) or ((((_la - 471)) & ~0x3f) == 0 and ((1 << (_la - 471)) & ((1 << (Cobol85Parser.SYMBOL - 471)) | (1 << (Cobol85Parser.TASK - 471)) | (1 << (Cobol85Parser.THREAD - 471)) | (1 << (Cobol85Parser.THREAD_LOCAL - 471)) | (1 << (Cobol85Parser.TIMER - 471)) | (1 << (Cobol85Parser.TODAYS_DATE - 471)) | (1 << (Cobol85Parser.TODAYS_NAME - 471)) | (1 << (Cobol85Parser.TRUNCATED - 471)) | (1 << (Cobol85Parser.TYPEDEF - 471)) | (1 << (Cobol85Parser.UNDERLINE - 471)) | (1 << (Cobol85Parser.VIRTUAL - 471)) | (1 << (Cobol85Parser.WAIT - 471)) | (1 << (Cobol85Parser.YEAR - 471)) | (1 << (Cobol85Parser.YYYYMMDD - 471)) | (1 << (Cobol85Parser.YYYYDDD - 471)) | (1 << (Cobol85Parser.ZERO_FILL - 471)))) != 0) or ((((_la - 557)) & ~0x3f) == 0 and ((1 << (_la - 557)) & ((1 << (Cobol85Parser.LEVEL_NUMBER_66 - 557)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 557)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 557)) | (1 << (Cobol85Parser.INTEGERLITERAL - 557)) | (1 << (Cobol85Parser.IDENTIFIER - 557)))) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class UseDebugOnContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.UseDebugOnContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ALL(self):
            return self.getToken(Cobol85Parser.ALL, 0)

        def PROCEDURES(self):
            return self.getToken(Cobol85Parser.PROCEDURES, 0)

        def identifier(self):
            return self.getTypedRuleContext(Cobol85Parser.IdentifierContext,0)


        def REFERENCES(self):
            return self.getToken(Cobol85Parser.REFERENCES, 0)

        def OF(self):
            return self.getToken(Cobol85Parser.OF, 0)

        def procedureName(self):
            return self.getTypedRuleContext(Cobol85Parser.ProcedureNameContext,0)


        def fileName(self):
            return self.getTypedRuleContext(Cobol85Parser.FileNameContext,0)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_useDebugOn

        def enterRule(self, listener):
            if hasattr(listener, "enterUseDebugOn"):
                listener.enterUseDebugOn(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitUseDebugOn"):
                listener.exitUseDebugOn(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitUseDebugOn"):
                return visitor.visitUseDebugOn(self)
            else:
                return visitor.visitChildren(self)




    def useDebugOn(self):

        localctx = Cobol85Parser.UseDebugOnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 996, self.RULE_useDebugOn)
        self._la = 0 # Token type
        try:
            self.state = 5623
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,876,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5611
                self.match(Cobol85Parser.ALL)
                self.state = 5612
                self.match(Cobol85Parser.PROCEDURES)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5613
                self.match(Cobol85Parser.ALL)
                self.state = 5615
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Cobol85Parser.REFERENCES:
                    self.state = 5614
                    self.match(Cobol85Parser.REFERENCES)


                self.state = 5618
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Cobol85Parser.OF:
                    self.state = 5617
                    self.match(Cobol85Parser.OF)


                self.state = 5620
                self.identifier()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 5621
                self.procedureName()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 5622
                self.fileName()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class WriteStatementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.WriteStatementContext, self).__init__(parent, invokingState)
            self.parser = parser

        def WRITE(self):
            return self.getToken(Cobol85Parser.WRITE, 0)

        def recordName(self):
            return self.getTypedRuleContext(Cobol85Parser.RecordNameContext,0)


        def writeFromPhrase(self):
            return self.getTypedRuleContext(Cobol85Parser.WriteFromPhraseContext,0)


        def writeAdvancingPhrase(self):
            return self.getTypedRuleContext(Cobol85Parser.WriteAdvancingPhraseContext,0)


        def writeAtEndOfPagePhrase(self):
            return self.getTypedRuleContext(Cobol85Parser.WriteAtEndOfPagePhraseContext,0)


        def writeNotAtEndOfPagePhrase(self):
            return self.getTypedRuleContext(Cobol85Parser.WriteNotAtEndOfPagePhraseContext,0)


        def invalidKeyPhrase(self):
            return self.getTypedRuleContext(Cobol85Parser.InvalidKeyPhraseContext,0)


        def notInvalidKeyPhrase(self):
            return self.getTypedRuleContext(Cobol85Parser.NotInvalidKeyPhraseContext,0)


        def END_WRITE(self):
            return self.getToken(Cobol85Parser.END_WRITE, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_writeStatement

        def enterRule(self, listener):
            if hasattr(listener, "enterWriteStatement"):
                listener.enterWriteStatement(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitWriteStatement"):
                listener.exitWriteStatement(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitWriteStatement"):
                return visitor.visitWriteStatement(self)
            else:
                return visitor.visitChildren(self)




    def writeStatement(self):

        localctx = Cobol85Parser.WriteStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 998, self.RULE_writeStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5625
            self.match(Cobol85Parser.WRITE)
            self.state = 5626
            self.recordName()
            self.state = 5628
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.FROM:
                self.state = 5627
                self.writeFromPhrase()


            self.state = 5631
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.AFTER or _la==Cobol85Parser.BEFORE:
                self.state = 5630
                self.writeAdvancingPhrase()


            self.state = 5634
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,879,self._ctx)
            if la_ == 1:
                self.state = 5633
                self.writeAtEndOfPagePhrase()


            self.state = 5637
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,880,self._ctx)
            if la_ == 1:
                self.state = 5636
                self.writeNotAtEndOfPagePhrase()


            self.state = 5640
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,881,self._ctx)
            if la_ == 1:
                self.state = 5639
                self.invalidKeyPhrase()


            self.state = 5643
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,882,self._ctx)
            if la_ == 1:
                self.state = 5642
                self.notInvalidKeyPhrase()


            self.state = 5646
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,883,self._ctx)
            if la_ == 1:
                self.state = 5645
                self.match(Cobol85Parser.END_WRITE)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class WriteFromPhraseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.WriteFromPhraseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def FROM(self):
            return self.getToken(Cobol85Parser.FROM, 0)

        def identifier(self):
            return self.getTypedRuleContext(Cobol85Parser.IdentifierContext,0)


        def literal(self):
            return self.getTypedRuleContext(Cobol85Parser.LiteralContext,0)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_writeFromPhrase

        def enterRule(self, listener):
            if hasattr(listener, "enterWriteFromPhrase"):
                listener.enterWriteFromPhrase(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitWriteFromPhrase"):
                listener.exitWriteFromPhrase(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitWriteFromPhrase"):
                return visitor.visitWriteFromPhrase(self)
            else:
                return visitor.visitChildren(self)




    def writeFromPhrase(self):

        localctx = Cobol85Parser.WriteFromPhraseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1000, self.RULE_writeFromPhrase)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5648
            self.match(Cobol85Parser.FROM)
            self.state = 5651
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,884,self._ctx)
            if la_ == 1:
                self.state = 5649
                self.identifier()
                pass

            elif la_ == 2:
                self.state = 5650
                self.literal()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class WriteAdvancingPhraseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.WriteAdvancingPhraseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def BEFORE(self):
            return self.getToken(Cobol85Parser.BEFORE, 0)

        def AFTER(self):
            return self.getToken(Cobol85Parser.AFTER, 0)

        def writeAdvancingPage(self):
            return self.getTypedRuleContext(Cobol85Parser.WriteAdvancingPageContext,0)


        def writeAdvancingLines(self):
            return self.getTypedRuleContext(Cobol85Parser.WriteAdvancingLinesContext,0)


        def writeAdvancingMnemonic(self):
            return self.getTypedRuleContext(Cobol85Parser.WriteAdvancingMnemonicContext,0)


        def ADVANCING(self):
            return self.getToken(Cobol85Parser.ADVANCING, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_writeAdvancingPhrase

        def enterRule(self, listener):
            if hasattr(listener, "enterWriteAdvancingPhrase"):
                listener.enterWriteAdvancingPhrase(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitWriteAdvancingPhrase"):
                listener.exitWriteAdvancingPhrase(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitWriteAdvancingPhrase"):
                return visitor.visitWriteAdvancingPhrase(self)
            else:
                return visitor.visitChildren(self)




    def writeAdvancingPhrase(self):

        localctx = Cobol85Parser.WriteAdvancingPhraseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1002, self.RULE_writeAdvancingPhrase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5653
            _la = self._input.LA(1)
            if not(_la==Cobol85Parser.AFTER or _la==Cobol85Parser.BEFORE):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 5655
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.ADVANCING:
                self.state = 5654
                self.match(Cobol85Parser.ADVANCING)


            self.state = 5660
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,886,self._ctx)
            if la_ == 1:
                self.state = 5657
                self.writeAdvancingPage()
                pass

            elif la_ == 2:
                self.state = 5658
                self.writeAdvancingLines()
                pass

            elif la_ == 3:
                self.state = 5659
                self.writeAdvancingMnemonic()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class WriteAdvancingPageContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.WriteAdvancingPageContext, self).__init__(parent, invokingState)
            self.parser = parser

        def PAGE(self):
            return self.getToken(Cobol85Parser.PAGE, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_writeAdvancingPage

        def enterRule(self, listener):
            if hasattr(listener, "enterWriteAdvancingPage"):
                listener.enterWriteAdvancingPage(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitWriteAdvancingPage"):
                listener.exitWriteAdvancingPage(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitWriteAdvancingPage"):
                return visitor.visitWriteAdvancingPage(self)
            else:
                return visitor.visitChildren(self)




    def writeAdvancingPage(self):

        localctx = Cobol85Parser.WriteAdvancingPageContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1004, self.RULE_writeAdvancingPage)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5662
            self.match(Cobol85Parser.PAGE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class WriteAdvancingLinesContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.WriteAdvancingLinesContext, self).__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(Cobol85Parser.IdentifierContext,0)


        def literal(self):
            return self.getTypedRuleContext(Cobol85Parser.LiteralContext,0)


        def LINE(self):
            return self.getToken(Cobol85Parser.LINE, 0)

        def LINES(self):
            return self.getToken(Cobol85Parser.LINES, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_writeAdvancingLines

        def enterRule(self, listener):
            if hasattr(listener, "enterWriteAdvancingLines"):
                listener.enterWriteAdvancingLines(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitWriteAdvancingLines"):
                listener.exitWriteAdvancingLines(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitWriteAdvancingLines"):
                return visitor.visitWriteAdvancingLines(self)
            else:
                return visitor.visitChildren(self)




    def writeAdvancingLines(self):

        localctx = Cobol85Parser.WriteAdvancingLinesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1006, self.RULE_writeAdvancingLines)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5666
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,887,self._ctx)
            if la_ == 1:
                self.state = 5664
                self.identifier()
                pass

            elif la_ == 2:
                self.state = 5665
                self.literal()
                pass


            self.state = 5669
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.LINE or _la==Cobol85Parser.LINES:
                self.state = 5668
                _la = self._input.LA(1)
                if not(_la==Cobol85Parser.LINE or _la==Cobol85Parser.LINES):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class WriteAdvancingMnemonicContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.WriteAdvancingMnemonicContext, self).__init__(parent, invokingState)
            self.parser = parser

        def mnemonicName(self):
            return self.getTypedRuleContext(Cobol85Parser.MnemonicNameContext,0)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_writeAdvancingMnemonic

        def enterRule(self, listener):
            if hasattr(listener, "enterWriteAdvancingMnemonic"):
                listener.enterWriteAdvancingMnemonic(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitWriteAdvancingMnemonic"):
                listener.exitWriteAdvancingMnemonic(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitWriteAdvancingMnemonic"):
                return visitor.visitWriteAdvancingMnemonic(self)
            else:
                return visitor.visitChildren(self)




    def writeAdvancingMnemonic(self):

        localctx = Cobol85Parser.WriteAdvancingMnemonicContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1008, self.RULE_writeAdvancingMnemonic)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5671
            self.mnemonicName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class WriteAtEndOfPagePhraseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.WriteAtEndOfPagePhraseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def END_OF_PAGE(self):
            return self.getToken(Cobol85Parser.END_OF_PAGE, 0)

        def EOP(self):
            return self.getToken(Cobol85Parser.EOP, 0)

        def AT(self):
            return self.getToken(Cobol85Parser.AT, 0)

        def statement(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.StatementContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.StatementContext,i)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_writeAtEndOfPagePhrase

        def enterRule(self, listener):
            if hasattr(listener, "enterWriteAtEndOfPagePhrase"):
                listener.enterWriteAtEndOfPagePhrase(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitWriteAtEndOfPagePhrase"):
                listener.exitWriteAtEndOfPagePhrase(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitWriteAtEndOfPagePhrase"):
                return visitor.visitWriteAtEndOfPagePhrase(self)
            else:
                return visitor.visitChildren(self)




    def writeAtEndOfPagePhrase(self):

        localctx = Cobol85Parser.WriteAtEndOfPagePhraseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1010, self.RULE_writeAtEndOfPagePhrase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5674
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.AT:
                self.state = 5673
                self.match(Cobol85Parser.AT)


            self.state = 5676
            _la = self._input.LA(1)
            if not(_la==Cobol85Parser.END_OF_PAGE or _la==Cobol85Parser.EOP):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 5680
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,890,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 5677
                    self.statement() 
                self.state = 5682
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,890,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class WriteNotAtEndOfPagePhraseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.WriteNotAtEndOfPagePhraseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def NOT(self):
            return self.getToken(Cobol85Parser.NOT, 0)

        def END_OF_PAGE(self):
            return self.getToken(Cobol85Parser.END_OF_PAGE, 0)

        def EOP(self):
            return self.getToken(Cobol85Parser.EOP, 0)

        def AT(self):
            return self.getToken(Cobol85Parser.AT, 0)

        def statement(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.StatementContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.StatementContext,i)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_writeNotAtEndOfPagePhrase

        def enterRule(self, listener):
            if hasattr(listener, "enterWriteNotAtEndOfPagePhrase"):
                listener.enterWriteNotAtEndOfPagePhrase(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitWriteNotAtEndOfPagePhrase"):
                listener.exitWriteNotAtEndOfPagePhrase(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitWriteNotAtEndOfPagePhrase"):
                return visitor.visitWriteNotAtEndOfPagePhrase(self)
            else:
                return visitor.visitChildren(self)




    def writeNotAtEndOfPagePhrase(self):

        localctx = Cobol85Parser.WriteNotAtEndOfPagePhraseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1012, self.RULE_writeNotAtEndOfPagePhrase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5683
            self.match(Cobol85Parser.NOT)
            self.state = 5685
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.AT:
                self.state = 5684
                self.match(Cobol85Parser.AT)


            self.state = 5687
            _la = self._input.LA(1)
            if not(_la==Cobol85Parser.END_OF_PAGE or _la==Cobol85Parser.EOP):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 5691
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,892,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 5688
                    self.statement() 
                self.state = 5693
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,892,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AtEndPhraseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.AtEndPhraseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def END(self):
            return self.getToken(Cobol85Parser.END, 0)

        def AT(self):
            return self.getToken(Cobol85Parser.AT, 0)

        def statement(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.StatementContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.StatementContext,i)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_atEndPhrase

        def enterRule(self, listener):
            if hasattr(listener, "enterAtEndPhrase"):
                listener.enterAtEndPhrase(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitAtEndPhrase"):
                listener.exitAtEndPhrase(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitAtEndPhrase"):
                return visitor.visitAtEndPhrase(self)
            else:
                return visitor.visitChildren(self)




    def atEndPhrase(self):

        localctx = Cobol85Parser.AtEndPhraseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1014, self.RULE_atEndPhrase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5695
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.AT:
                self.state = 5694
                self.match(Cobol85Parser.AT)


            self.state = 5697
            self.match(Cobol85Parser.END)
            self.state = 5701
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,894,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 5698
                    self.statement() 
                self.state = 5703
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,894,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NotAtEndPhraseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.NotAtEndPhraseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def NOT(self):
            return self.getToken(Cobol85Parser.NOT, 0)

        def END(self):
            return self.getToken(Cobol85Parser.END, 0)

        def AT(self):
            return self.getToken(Cobol85Parser.AT, 0)

        def statement(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.StatementContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.StatementContext,i)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_notAtEndPhrase

        def enterRule(self, listener):
            if hasattr(listener, "enterNotAtEndPhrase"):
                listener.enterNotAtEndPhrase(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitNotAtEndPhrase"):
                listener.exitNotAtEndPhrase(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitNotAtEndPhrase"):
                return visitor.visitNotAtEndPhrase(self)
            else:
                return visitor.visitChildren(self)




    def notAtEndPhrase(self):

        localctx = Cobol85Parser.NotAtEndPhraseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1016, self.RULE_notAtEndPhrase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5704
            self.match(Cobol85Parser.NOT)
            self.state = 5706
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.AT:
                self.state = 5705
                self.match(Cobol85Parser.AT)


            self.state = 5708
            self.match(Cobol85Parser.END)
            self.state = 5712
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,896,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 5709
                    self.statement() 
                self.state = 5714
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,896,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InvalidKeyPhraseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.InvalidKeyPhraseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def INVALID(self):
            return self.getToken(Cobol85Parser.INVALID, 0)

        def KEY(self):
            return self.getToken(Cobol85Parser.KEY, 0)

        def statement(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.StatementContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.StatementContext,i)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_invalidKeyPhrase

        def enterRule(self, listener):
            if hasattr(listener, "enterInvalidKeyPhrase"):
                listener.enterInvalidKeyPhrase(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitInvalidKeyPhrase"):
                listener.exitInvalidKeyPhrase(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitInvalidKeyPhrase"):
                return visitor.visitInvalidKeyPhrase(self)
            else:
                return visitor.visitChildren(self)




    def invalidKeyPhrase(self):

        localctx = Cobol85Parser.InvalidKeyPhraseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1018, self.RULE_invalidKeyPhrase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5715
            self.match(Cobol85Parser.INVALID)
            self.state = 5717
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.KEY:
                self.state = 5716
                self.match(Cobol85Parser.KEY)


            self.state = 5722
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,898,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 5719
                    self.statement() 
                self.state = 5724
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,898,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NotInvalidKeyPhraseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.NotInvalidKeyPhraseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def NOT(self):
            return self.getToken(Cobol85Parser.NOT, 0)

        def INVALID(self):
            return self.getToken(Cobol85Parser.INVALID, 0)

        def KEY(self):
            return self.getToken(Cobol85Parser.KEY, 0)

        def statement(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.StatementContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.StatementContext,i)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_notInvalidKeyPhrase

        def enterRule(self, listener):
            if hasattr(listener, "enterNotInvalidKeyPhrase"):
                listener.enterNotInvalidKeyPhrase(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitNotInvalidKeyPhrase"):
                listener.exitNotInvalidKeyPhrase(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitNotInvalidKeyPhrase"):
                return visitor.visitNotInvalidKeyPhrase(self)
            else:
                return visitor.visitChildren(self)




    def notInvalidKeyPhrase(self):

        localctx = Cobol85Parser.NotInvalidKeyPhraseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1020, self.RULE_notInvalidKeyPhrase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5725
            self.match(Cobol85Parser.NOT)
            self.state = 5726
            self.match(Cobol85Parser.INVALID)
            self.state = 5728
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.KEY:
                self.state = 5727
                self.match(Cobol85Parser.KEY)


            self.state = 5733
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,900,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 5730
                    self.statement() 
                self.state = 5735
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,900,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OnOverflowPhraseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.OnOverflowPhraseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def OVERFLOW(self):
            return self.getToken(Cobol85Parser.OVERFLOW, 0)

        def ON(self):
            return self.getToken(Cobol85Parser.ON, 0)

        def statement(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.StatementContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.StatementContext,i)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_onOverflowPhrase

        def enterRule(self, listener):
            if hasattr(listener, "enterOnOverflowPhrase"):
                listener.enterOnOverflowPhrase(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitOnOverflowPhrase"):
                listener.exitOnOverflowPhrase(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitOnOverflowPhrase"):
                return visitor.visitOnOverflowPhrase(self)
            else:
                return visitor.visitChildren(self)




    def onOverflowPhrase(self):

        localctx = Cobol85Parser.OnOverflowPhraseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1022, self.RULE_onOverflowPhrase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5737
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.ON:
                self.state = 5736
                self.match(Cobol85Parser.ON)


            self.state = 5739
            self.match(Cobol85Parser.OVERFLOW)
            self.state = 5743
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,902,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 5740
                    self.statement() 
                self.state = 5745
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,902,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NotOnOverflowPhraseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.NotOnOverflowPhraseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def NOT(self):
            return self.getToken(Cobol85Parser.NOT, 0)

        def OVERFLOW(self):
            return self.getToken(Cobol85Parser.OVERFLOW, 0)

        def ON(self):
            return self.getToken(Cobol85Parser.ON, 0)

        def statement(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.StatementContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.StatementContext,i)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_notOnOverflowPhrase

        def enterRule(self, listener):
            if hasattr(listener, "enterNotOnOverflowPhrase"):
                listener.enterNotOnOverflowPhrase(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitNotOnOverflowPhrase"):
                listener.exitNotOnOverflowPhrase(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitNotOnOverflowPhrase"):
                return visitor.visitNotOnOverflowPhrase(self)
            else:
                return visitor.visitChildren(self)




    def notOnOverflowPhrase(self):

        localctx = Cobol85Parser.NotOnOverflowPhraseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1024, self.RULE_notOnOverflowPhrase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5746
            self.match(Cobol85Parser.NOT)
            self.state = 5748
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.ON:
                self.state = 5747
                self.match(Cobol85Parser.ON)


            self.state = 5750
            self.match(Cobol85Parser.OVERFLOW)
            self.state = 5754
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,904,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 5751
                    self.statement() 
                self.state = 5756
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,904,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OnSizeErrorPhraseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.OnSizeErrorPhraseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def SIZE(self):
            return self.getToken(Cobol85Parser.SIZE, 0)

        def ERROR(self):
            return self.getToken(Cobol85Parser.ERROR, 0)

        def ON(self):
            return self.getToken(Cobol85Parser.ON, 0)

        def statement(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.StatementContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.StatementContext,i)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_onSizeErrorPhrase

        def enterRule(self, listener):
            if hasattr(listener, "enterOnSizeErrorPhrase"):
                listener.enterOnSizeErrorPhrase(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitOnSizeErrorPhrase"):
                listener.exitOnSizeErrorPhrase(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitOnSizeErrorPhrase"):
                return visitor.visitOnSizeErrorPhrase(self)
            else:
                return visitor.visitChildren(self)




    def onSizeErrorPhrase(self):

        localctx = Cobol85Parser.OnSizeErrorPhraseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1026, self.RULE_onSizeErrorPhrase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5758
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.ON:
                self.state = 5757
                self.match(Cobol85Parser.ON)


            self.state = 5760
            self.match(Cobol85Parser.SIZE)
            self.state = 5761
            self.match(Cobol85Parser.ERROR)
            self.state = 5765
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,906,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 5762
                    self.statement() 
                self.state = 5767
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,906,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NotOnSizeErrorPhraseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.NotOnSizeErrorPhraseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def NOT(self):
            return self.getToken(Cobol85Parser.NOT, 0)

        def SIZE(self):
            return self.getToken(Cobol85Parser.SIZE, 0)

        def ERROR(self):
            return self.getToken(Cobol85Parser.ERROR, 0)

        def ON(self):
            return self.getToken(Cobol85Parser.ON, 0)

        def statement(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.StatementContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.StatementContext,i)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_notOnSizeErrorPhrase

        def enterRule(self, listener):
            if hasattr(listener, "enterNotOnSizeErrorPhrase"):
                listener.enterNotOnSizeErrorPhrase(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitNotOnSizeErrorPhrase"):
                listener.exitNotOnSizeErrorPhrase(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitNotOnSizeErrorPhrase"):
                return visitor.visitNotOnSizeErrorPhrase(self)
            else:
                return visitor.visitChildren(self)




    def notOnSizeErrorPhrase(self):

        localctx = Cobol85Parser.NotOnSizeErrorPhraseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1028, self.RULE_notOnSizeErrorPhrase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5768
            self.match(Cobol85Parser.NOT)
            self.state = 5770
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.ON:
                self.state = 5769
                self.match(Cobol85Parser.ON)


            self.state = 5772
            self.match(Cobol85Parser.SIZE)
            self.state = 5773
            self.match(Cobol85Parser.ERROR)
            self.state = 5777
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,908,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 5774
                    self.statement() 
                self.state = 5779
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,908,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class OnExceptionClauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.OnExceptionClauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def EXCEPTION(self):
            return self.getToken(Cobol85Parser.EXCEPTION, 0)

        def ON(self):
            return self.getToken(Cobol85Parser.ON, 0)

        def statement(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.StatementContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.StatementContext,i)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_onExceptionClause

        def enterRule(self, listener):
            if hasattr(listener, "enterOnExceptionClause"):
                listener.enterOnExceptionClause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitOnExceptionClause"):
                listener.exitOnExceptionClause(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitOnExceptionClause"):
                return visitor.visitOnExceptionClause(self)
            else:
                return visitor.visitChildren(self)




    def onExceptionClause(self):

        localctx = Cobol85Parser.OnExceptionClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1030, self.RULE_onExceptionClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5781
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.ON:
                self.state = 5780
                self.match(Cobol85Parser.ON)


            self.state = 5783
            self.match(Cobol85Parser.EXCEPTION)
            self.state = 5787
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,910,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 5784
                    self.statement() 
                self.state = 5789
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,910,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NotOnExceptionClauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.NotOnExceptionClauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def NOT(self):
            return self.getToken(Cobol85Parser.NOT, 0)

        def EXCEPTION(self):
            return self.getToken(Cobol85Parser.EXCEPTION, 0)

        def ON(self):
            return self.getToken(Cobol85Parser.ON, 0)

        def statement(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.StatementContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.StatementContext,i)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_notOnExceptionClause

        def enterRule(self, listener):
            if hasattr(listener, "enterNotOnExceptionClause"):
                listener.enterNotOnExceptionClause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitNotOnExceptionClause"):
                listener.exitNotOnExceptionClause(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitNotOnExceptionClause"):
                return visitor.visitNotOnExceptionClause(self)
            else:
                return visitor.visitChildren(self)




    def notOnExceptionClause(self):

        localctx = Cobol85Parser.NotOnExceptionClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1032, self.RULE_notOnExceptionClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5790
            self.match(Cobol85Parser.NOT)
            self.state = 5792
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.ON:
                self.state = 5791
                self.match(Cobol85Parser.ON)


            self.state = 5794
            self.match(Cobol85Parser.EXCEPTION)
            self.state = 5798
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,912,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 5795
                    self.statement() 
                self.state = 5800
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,912,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ArithmeticExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.ArithmeticExpressionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def multDivs(self):
            return self.getTypedRuleContext(Cobol85Parser.MultDivsContext,0)


        def plusMinus(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.PlusMinusContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.PlusMinusContext,i)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_arithmeticExpression

        def enterRule(self, listener):
            if hasattr(listener, "enterArithmeticExpression"):
                listener.enterArithmeticExpression(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitArithmeticExpression"):
                listener.exitArithmeticExpression(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitArithmeticExpression"):
                return visitor.visitArithmeticExpression(self)
            else:
                return visitor.visitChildren(self)




    def arithmeticExpression(self):

        localctx = Cobol85Parser.ArithmeticExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1034, self.RULE_arithmeticExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5801
            self.multDivs()
            self.state = 5805
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,913,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 5802
                    self.plusMinus() 
                self.state = 5807
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,913,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PlusMinusContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.PlusMinusContext, self).__init__(parent, invokingState)
            self.parser = parser

        def multDivs(self):
            return self.getTypedRuleContext(Cobol85Parser.MultDivsContext,0)


        def PLUSCHAR(self):
            return self.getToken(Cobol85Parser.PLUSCHAR, 0)

        def MINUSCHAR(self):
            return self.getToken(Cobol85Parser.MINUSCHAR, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_plusMinus

        def enterRule(self, listener):
            if hasattr(listener, "enterPlusMinus"):
                listener.enterPlusMinus(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitPlusMinus"):
                listener.exitPlusMinus(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitPlusMinus"):
                return visitor.visitPlusMinus(self)
            else:
                return visitor.visitChildren(self)




    def plusMinus(self):

        localctx = Cobol85Parser.PlusMinusContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1036, self.RULE_plusMinus)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5808
            _la = self._input.LA(1)
            if not(_la==Cobol85Parser.MINUSCHAR or _la==Cobol85Parser.PLUSCHAR):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 5809
            self.multDivs()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MultDivsContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.MultDivsContext, self).__init__(parent, invokingState)
            self.parser = parser

        def powers(self):
            return self.getTypedRuleContext(Cobol85Parser.PowersContext,0)


        def multDiv(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.MultDivContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.MultDivContext,i)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_multDivs

        def enterRule(self, listener):
            if hasattr(listener, "enterMultDivs"):
                listener.enterMultDivs(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitMultDivs"):
                listener.exitMultDivs(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitMultDivs"):
                return visitor.visitMultDivs(self)
            else:
                return visitor.visitChildren(self)




    def multDivs(self):

        localctx = Cobol85Parser.MultDivsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1038, self.RULE_multDivs)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5811
            self.powers()
            self.state = 5815
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==Cobol85Parser.ASTERISKCHAR or _la==Cobol85Parser.SLASHCHAR:
                self.state = 5812
                self.multDiv()
                self.state = 5817
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MultDivContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.MultDivContext, self).__init__(parent, invokingState)
            self.parser = parser

        def powers(self):
            return self.getTypedRuleContext(Cobol85Parser.PowersContext,0)


        def ASTERISKCHAR(self):
            return self.getToken(Cobol85Parser.ASTERISKCHAR, 0)

        def SLASHCHAR(self):
            return self.getToken(Cobol85Parser.SLASHCHAR, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_multDiv

        def enterRule(self, listener):
            if hasattr(listener, "enterMultDiv"):
                listener.enterMultDiv(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitMultDiv"):
                listener.exitMultDiv(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitMultDiv"):
                return visitor.visitMultDiv(self)
            else:
                return visitor.visitChildren(self)




    def multDiv(self):

        localctx = Cobol85Parser.MultDivContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1040, self.RULE_multDiv)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5818
            _la = self._input.LA(1)
            if not(_la==Cobol85Parser.ASTERISKCHAR or _la==Cobol85Parser.SLASHCHAR):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 5819
            self.powers()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PowersContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.PowersContext, self).__init__(parent, invokingState)
            self.parser = parser

        def basis(self):
            return self.getTypedRuleContext(Cobol85Parser.BasisContext,0)


        def power(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.PowerContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.PowerContext,i)


        def PLUSCHAR(self):
            return self.getToken(Cobol85Parser.PLUSCHAR, 0)

        def MINUSCHAR(self):
            return self.getToken(Cobol85Parser.MINUSCHAR, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_powers

        def enterRule(self, listener):
            if hasattr(listener, "enterPowers"):
                listener.enterPowers(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitPowers"):
                listener.exitPowers(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitPowers"):
                return visitor.visitPowers(self)
            else:
                return visitor.visitChildren(self)




    def powers(self):

        localctx = Cobol85Parser.PowersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1042, self.RULE_powers)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5822
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.MINUSCHAR or _la==Cobol85Parser.PLUSCHAR:
                self.state = 5821
                _la = self._input.LA(1)
                if not(_la==Cobol85Parser.MINUSCHAR or _la==Cobol85Parser.PLUSCHAR):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 5824
            self.basis()
            self.state = 5828
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==Cobol85Parser.DOUBLEASTERISKCHAR:
                self.state = 5825
                self.power()
                self.state = 5830
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PowerContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.PowerContext, self).__init__(parent, invokingState)
            self.parser = parser

        def DOUBLEASTERISKCHAR(self):
            return self.getToken(Cobol85Parser.DOUBLEASTERISKCHAR, 0)

        def basis(self):
            return self.getTypedRuleContext(Cobol85Parser.BasisContext,0)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_power

        def enterRule(self, listener):
            if hasattr(listener, "enterPower"):
                listener.enterPower(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitPower"):
                listener.exitPower(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitPower"):
                return visitor.visitPower(self)
            else:
                return visitor.visitChildren(self)




    def power(self):

        localctx = Cobol85Parser.PowerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1044, self.RULE_power)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5831
            self.match(Cobol85Parser.DOUBLEASTERISKCHAR)
            self.state = 5832
            self.basis()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BasisContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.BasisContext, self).__init__(parent, invokingState)
            self.parser = parser

        def LPARENCHAR(self):
            return self.getToken(Cobol85Parser.LPARENCHAR, 0)

        def arithmeticExpression(self):
            return self.getTypedRuleContext(Cobol85Parser.ArithmeticExpressionContext,0)


        def RPARENCHAR(self):
            return self.getToken(Cobol85Parser.RPARENCHAR, 0)

        def identifier(self):
            return self.getTypedRuleContext(Cobol85Parser.IdentifierContext,0)


        def literal(self):
            return self.getTypedRuleContext(Cobol85Parser.LiteralContext,0)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_basis

        def enterRule(self, listener):
            if hasattr(listener, "enterBasis"):
                listener.enterBasis(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitBasis"):
                listener.exitBasis(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitBasis"):
                return visitor.visitBasis(self)
            else:
                return visitor.visitChildren(self)




    def basis(self):

        localctx = Cobol85Parser.BasisContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1046, self.RULE_basis)
        try:
            self.state = 5840
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,917,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5834
                self.match(Cobol85Parser.LPARENCHAR)
                self.state = 5835
                self.arithmeticExpression()
                self.state = 5836
                self.match(Cobol85Parser.RPARENCHAR)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5838
                self.identifier()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 5839
                self.literal()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConditionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.ConditionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def combinableCondition(self):
            return self.getTypedRuleContext(Cobol85Parser.CombinableConditionContext,0)


        def andOrCondition(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.AndOrConditionContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.AndOrConditionContext,i)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_condition

        def enterRule(self, listener):
            if hasattr(listener, "enterCondition"):
                listener.enterCondition(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitCondition"):
                listener.exitCondition(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitCondition"):
                return visitor.visitCondition(self)
            else:
                return visitor.visitChildren(self)




    def condition(self):

        localctx = Cobol85Parser.ConditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1048, self.RULE_condition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5842
            self.combinableCondition()
            self.state = 5846
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==Cobol85Parser.AND or _la==Cobol85Parser.OR:
                self.state = 5843
                self.andOrCondition()
                self.state = 5848
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AndOrConditionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.AndOrConditionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def AND(self):
            return self.getToken(Cobol85Parser.AND, 0)

        def OR(self):
            return self.getToken(Cobol85Parser.OR, 0)

        def combinableCondition(self):
            return self.getTypedRuleContext(Cobol85Parser.CombinableConditionContext,0)


        def abbreviation(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.AbbreviationContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.AbbreviationContext,i)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_andOrCondition

        def enterRule(self, listener):
            if hasattr(listener, "enterAndOrCondition"):
                listener.enterAndOrCondition(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitAndOrCondition"):
                listener.exitAndOrCondition(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitAndOrCondition"):
                return visitor.visitAndOrCondition(self)
            else:
                return visitor.visitChildren(self)




    def andOrCondition(self):

        localctx = Cobol85Parser.AndOrConditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1050, self.RULE_andOrCondition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5849
            _la = self._input.LA(1)
            if not(_la==Cobol85Parser.AND or _la==Cobol85Parser.OR):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 5856
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,920,self._ctx)
            if la_ == 1:
                self.state = 5850
                self.combinableCondition()
                pass

            elif la_ == 2:
                self.state = 5852 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 5851
                        self.abbreviation()

                    else:
                        raise NoViableAltException(self)
                    self.state = 5854 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,919,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CombinableConditionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.CombinableConditionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def simpleCondition(self):
            return self.getTypedRuleContext(Cobol85Parser.SimpleConditionContext,0)


        def NOT(self):
            return self.getToken(Cobol85Parser.NOT, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_combinableCondition

        def enterRule(self, listener):
            if hasattr(listener, "enterCombinableCondition"):
                listener.enterCombinableCondition(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitCombinableCondition"):
                listener.exitCombinableCondition(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitCombinableCondition"):
                return visitor.visitCombinableCondition(self)
            else:
                return visitor.visitChildren(self)




    def combinableCondition(self):

        localctx = Cobol85Parser.CombinableConditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1052, self.RULE_combinableCondition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5859
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.NOT:
                self.state = 5858
                self.match(Cobol85Parser.NOT)


            self.state = 5861
            self.simpleCondition()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SimpleConditionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.SimpleConditionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def LPARENCHAR(self):
            return self.getToken(Cobol85Parser.LPARENCHAR, 0)

        def condition(self):
            return self.getTypedRuleContext(Cobol85Parser.ConditionContext,0)


        def RPARENCHAR(self):
            return self.getToken(Cobol85Parser.RPARENCHAR, 0)

        def relationCondition(self):
            return self.getTypedRuleContext(Cobol85Parser.RelationConditionContext,0)


        def classCondition(self):
            return self.getTypedRuleContext(Cobol85Parser.ClassConditionContext,0)


        def conditionNameReference(self):
            return self.getTypedRuleContext(Cobol85Parser.ConditionNameReferenceContext,0)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_simpleCondition

        def enterRule(self, listener):
            if hasattr(listener, "enterSimpleCondition"):
                listener.enterSimpleCondition(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSimpleCondition"):
                listener.exitSimpleCondition(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitSimpleCondition"):
                return visitor.visitSimpleCondition(self)
            else:
                return visitor.visitChildren(self)




    def simpleCondition(self):

        localctx = Cobol85Parser.SimpleConditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1054, self.RULE_simpleCondition)
        try:
            self.state = 5870
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,922,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5863
                self.match(Cobol85Parser.LPARENCHAR)
                self.state = 5864
                self.condition()
                self.state = 5865
                self.match(Cobol85Parser.RPARENCHAR)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5867
                self.relationCondition()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 5868
                self.classCondition()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 5869
                self.conditionNameReference()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ClassConditionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.ClassConditionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(Cobol85Parser.IdentifierContext,0)


        def NUMERIC(self):
            return self.getToken(Cobol85Parser.NUMERIC, 0)

        def ALPHABETIC(self):
            return self.getToken(Cobol85Parser.ALPHABETIC, 0)

        def ALPHABETIC_LOWER(self):
            return self.getToken(Cobol85Parser.ALPHABETIC_LOWER, 0)

        def ALPHABETIC_UPPER(self):
            return self.getToken(Cobol85Parser.ALPHABETIC_UPPER, 0)

        def DBCS(self):
            return self.getToken(Cobol85Parser.DBCS, 0)

        def KANJI(self):
            return self.getToken(Cobol85Parser.KANJI, 0)

        def className(self):
            return self.getTypedRuleContext(Cobol85Parser.ClassNameContext,0)


        def IS(self):
            return self.getToken(Cobol85Parser.IS, 0)

        def NOT(self):
            return self.getToken(Cobol85Parser.NOT, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_classCondition

        def enterRule(self, listener):
            if hasattr(listener, "enterClassCondition"):
                listener.enterClassCondition(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitClassCondition"):
                listener.exitClassCondition(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitClassCondition"):
                return visitor.visitClassCondition(self)
            else:
                return visitor.visitChildren(self)




    def classCondition(self):

        localctx = Cobol85Parser.ClassConditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1056, self.RULE_classCondition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5872
            self.identifier()
            self.state = 5874
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.IS:
                self.state = 5873
                self.match(Cobol85Parser.IS)


            self.state = 5877
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.NOT:
                self.state = 5876
                self.match(Cobol85Parser.NOT)


            self.state = 5886
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Cobol85Parser.NUMERIC]:
                self.state = 5879
                self.match(Cobol85Parser.NUMERIC)
                pass
            elif token in [Cobol85Parser.ALPHABETIC]:
                self.state = 5880
                self.match(Cobol85Parser.ALPHABETIC)
                pass
            elif token in [Cobol85Parser.ALPHABETIC_LOWER]:
                self.state = 5881
                self.match(Cobol85Parser.ALPHABETIC_LOWER)
                pass
            elif token in [Cobol85Parser.ALPHABETIC_UPPER]:
                self.state = 5882
                self.match(Cobol85Parser.ALPHABETIC_UPPER)
                pass
            elif token in [Cobol85Parser.DBCS]:
                self.state = 5883
                self.match(Cobol85Parser.DBCS)
                pass
            elif token in [Cobol85Parser.KANJI]:
                self.state = 5884
                self.match(Cobol85Parser.KANJI)
                pass
            elif token in [Cobol85Parser.ABORT, Cobol85Parser.AS, Cobol85Parser.ASCII, Cobol85Parser.ASSOCIATED_DATA, Cobol85Parser.ASSOCIATED_DATA_LENGTH, Cobol85Parser.ATTRIBUTE, Cobol85Parser.AUTO, Cobol85Parser.AUTO_SKIP, Cobol85Parser.BACKGROUND_COLOR, Cobol85Parser.BACKGROUND_COLOUR, Cobol85Parser.BEEP, Cobol85Parser.BELL, Cobol85Parser.BINARY, Cobol85Parser.BIT, Cobol85Parser.BLINK, Cobol85Parser.BLOB, Cobol85Parser.BOUNDS, Cobol85Parser.CAPABLE, Cobol85Parser.CCSVERSION, Cobol85Parser.CHANGED, Cobol85Parser.CHANNEL, Cobol85Parser.CLOB, Cobol85Parser.CLOSE_DISPOSITION, Cobol85Parser.COBOL, Cobol85Parser.COMMITMENT, Cobol85Parser.CONTROL_POINT, Cobol85Parser.CONVENTION, Cobol85Parser.CRUNCH, Cobol85Parser.CURSOR, Cobol85Parser.DBCLOB, Cobol85Parser.DEFAULT, Cobol85Parser.DEFAULT_DISPLAY, Cobol85Parser.DEFINITION, Cobol85Parser.DFHRESP, Cobol85Parser.DFHVALUE, Cobol85Parser.DISK, Cobol85Parser.DONTCARE, Cobol85Parser.DOUBLE, Cobol85Parser.EBCDIC, Cobol85Parser.EMPTY_CHECK, Cobol85Parser.ENTER, Cobol85Parser.ENTRY_PROCEDURE, Cobol85Parser.ERASE, Cobol85Parser.EOL, Cobol85Parser.EOS, Cobol85Parser.ESCAPE, Cobol85Parser.EVENT, Cobol85Parser.EXCLUSIVE, Cobol85Parser.EXPORT, Cobol85Parser.EXTENDED, Cobol85Parser.FOREGROUND_COLOR, Cobol85Parser.FOREGROUND_COLOUR, Cobol85Parser.FULL, Cobol85Parser.FUNCTIONNAME, Cobol85Parser.FUNCTION_POINTER, Cobol85Parser.GRID, Cobol85Parser.HIGHLIGHT, Cobol85Parser.IMPLICIT, Cobol85Parser.IMPORT, Cobol85Parser.INTEGER, Cobol85Parser.KEPT, Cobol85Parser.KEYBOARD, Cobol85Parser.LANGUAGE, Cobol85Parser.LB, Cobol85Parser.LD, Cobol85Parser.LEFTLINE, Cobol85Parser.LENGTH_CHECK, Cobol85Parser.LIBACCESS, Cobol85Parser.LIBPARAMETER, Cobol85Parser.LIBRARY, Cobol85Parser.LIST, Cobol85Parser.LOCAL, Cobol85Parser.LONG_DATE, Cobol85Parser.LONG_TIME, Cobol85Parser.LOWER, Cobol85Parser.LOWLIGHT, Cobol85Parser.MMDDYYYY, Cobol85Parser.NAMED, Cobol85Parser.NATIONAL, Cobol85Parser.NATIONAL_EDITED, Cobol85Parser.NETWORK, Cobol85Parser.NO_ECHO, Cobol85Parser.NUMERIC_DATE, Cobol85Parser.NUMERIC_TIME, Cobol85Parser.ODT, Cobol85Parser.ORDERLY, Cobol85Parser.OVERLINE, Cobol85Parser.OWN, Cobol85Parser.PASSWORD, Cobol85Parser.PORT, Cobol85Parser.PRINTER, Cobol85Parser.PRIVATE, Cobol85Parser.PROCESS, Cobol85Parser.PROGRAM, Cobol85Parser.PROMPT, Cobol85Parser.READER, Cobol85Parser.REMOTE, Cobol85Parser.REAL, Cobol85Parser.RECEIVED, Cobol85Parser.RECURSIVE, Cobol85Parser.REF, Cobol85Parser.REMOVE, Cobol85Parser.REQUIRED, Cobol85Parser.REVERSE_VIDEO, Cobol85Parser.SAVE, Cobol85Parser.SECURE, Cobol85Parser.SHARED, Cobol85Parser.SHAREDBYALL, Cobol85Parser.SHAREDBYRUNUNIT, Cobol85Parser.SHARING, Cobol85Parser.SHORT_DATE, Cobol85Parser.SQL, Cobol85Parser.SYMBOL, Cobol85Parser.TASK, Cobol85Parser.THREAD, Cobol85Parser.THREAD_LOCAL, Cobol85Parser.TIMER, Cobol85Parser.TODAYS_DATE, Cobol85Parser.TODAYS_NAME, Cobol85Parser.TRUNCATED, Cobol85Parser.TYPEDEF, Cobol85Parser.UNDERLINE, Cobol85Parser.VIRTUAL, Cobol85Parser.WAIT, Cobol85Parser.YEAR, Cobol85Parser.YYYYMMDD, Cobol85Parser.YYYYDDD, Cobol85Parser.ZERO_FILL, Cobol85Parser.IDENTIFIER]:
                self.state = 5885
                self.className()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConditionNameReferenceContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.ConditionNameReferenceContext, self).__init__(parent, invokingState)
            self.parser = parser

        def conditionName(self):
            return self.getTypedRuleContext(Cobol85Parser.ConditionNameContext,0)


        def inData(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.InDataContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.InDataContext,i)


        def inFile(self):
            return self.getTypedRuleContext(Cobol85Parser.InFileContext,0)


        def conditionNameSubscriptReference(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.ConditionNameSubscriptReferenceContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.ConditionNameSubscriptReferenceContext,i)


        def inMnemonic(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.InMnemonicContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.InMnemonicContext,i)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_conditionNameReference

        def enterRule(self, listener):
            if hasattr(listener, "enterConditionNameReference"):
                listener.enterConditionNameReference(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitConditionNameReference"):
                listener.exitConditionNameReference(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitConditionNameReference"):
                return visitor.visitConditionNameReference(self)
            else:
                return visitor.visitChildren(self)




    def conditionNameReference(self):

        localctx = Cobol85Parser.ConditionNameReferenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1058, self.RULE_conditionNameReference)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5888
            self.conditionName()
            self.state = 5910
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,930,self._ctx)
            if la_ == 1:
                self.state = 5892
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,926,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 5889
                        self.inData() 
                    self.state = 5894
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,926,self._ctx)

                self.state = 5896
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Cobol85Parser.IN or _la==Cobol85Parser.OF:
                    self.state = 5895
                    self.inFile()


                self.state = 5901
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==Cobol85Parser.LPARENCHAR:
                    self.state = 5898
                    self.conditionNameSubscriptReference()
                    self.state = 5903
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.state = 5907
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==Cobol85Parser.IN or _la==Cobol85Parser.OF:
                    self.state = 5904
                    self.inMnemonic()
                    self.state = 5909
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConditionNameSubscriptReferenceContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.ConditionNameSubscriptReferenceContext, self).__init__(parent, invokingState)
            self.parser = parser

        def LPARENCHAR(self):
            return self.getToken(Cobol85Parser.LPARENCHAR, 0)

        def subscript(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.SubscriptContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.SubscriptContext,i)


        def RPARENCHAR(self):
            return self.getToken(Cobol85Parser.RPARENCHAR, 0)

        def COMMACHAR(self, i=None):
            if i is None:
                return self.getTokens(Cobol85Parser.COMMACHAR)
            else:
                return self.getToken(Cobol85Parser.COMMACHAR, i)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_conditionNameSubscriptReference

        def enterRule(self, listener):
            if hasattr(listener, "enterConditionNameSubscriptReference"):
                listener.enterConditionNameSubscriptReference(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitConditionNameSubscriptReference"):
                listener.exitConditionNameSubscriptReference(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitConditionNameSubscriptReference"):
                return visitor.visitConditionNameSubscriptReference(self)
            else:
                return visitor.visitChildren(self)




    def conditionNameSubscriptReference(self):

        localctx = Cobol85Parser.ConditionNameSubscriptReferenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1060, self.RULE_conditionNameSubscriptReference)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5912
            self.match(Cobol85Parser.LPARENCHAR)
            self.state = 5913
            self.subscript()
            self.state = 5920
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.ADDRESS) | (1 << Cobol85Parser.ALL) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE) | (1 << Cobol85Parser.AUTO) | (1 << Cobol85Parser.AUTO_SKIP) | (1 << Cobol85Parser.BACKGROUND_COLOR) | (1 << Cobol85Parser.BACKGROUND_COLOUR) | (1 << Cobol85Parser.BEEP) | (1 << Cobol85Parser.BELL) | (1 << Cobol85Parser.BINARY) | (1 << Cobol85Parser.BIT) | (1 << Cobol85Parser.BLINK) | (1 << Cobol85Parser.BLOB) | (1 << Cobol85Parser.BOUNDS) | (1 << Cobol85Parser.CAPABLE) | (1 << Cobol85Parser.CCSVERSION) | (1 << Cobol85Parser.CHANGED) | (1 << Cobol85Parser.CHANNEL))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (Cobol85Parser.CLOB - 67)) | (1 << (Cobol85Parser.CLOSE_DISPOSITION - 67)) | (1 << (Cobol85Parser.COBOL - 67)) | (1 << (Cobol85Parser.COMMITMENT - 67)) | (1 << (Cobol85Parser.CONTROL_POINT - 67)) | (1 << (Cobol85Parser.CONVENTION - 67)) | (1 << (Cobol85Parser.CRUNCH - 67)) | (1 << (Cobol85Parser.CURSOR - 67)) | (1 << (Cobol85Parser.DATE - 67)) | (1 << (Cobol85Parser.DAY - 67)) | (1 << (Cobol85Parser.DAY_OF_WEEK - 67)) | (1 << (Cobol85Parser.DBCLOB - 67)) | (1 << (Cobol85Parser.DEBUG_CONTENTS - 67)) | (1 << (Cobol85Parser.DEBUG_ITEM - 67)) | (1 << (Cobol85Parser.DEBUG_LINE - 67)) | (1 << (Cobol85Parser.DEBUG_NAME - 67)) | (1 << (Cobol85Parser.DEBUG_SUB_1 - 67)) | (1 << (Cobol85Parser.DEBUG_SUB_2 - 67)) | (1 << (Cobol85Parser.DEBUG_SUB_3 - 67)))) != 0) or ((((_la - 131)) & ~0x3f) == 0 and ((1 << (_la - 131)) & ((1 << (Cobol85Parser.DEFAULT - 131)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 131)) | (1 << (Cobol85Parser.DEFINITION - 131)) | (1 << (Cobol85Parser.DFHRESP - 131)) | (1 << (Cobol85Parser.DFHVALUE - 131)) | (1 << (Cobol85Parser.DISK - 131)) | (1 << (Cobol85Parser.DONTCARE - 131)) | (1 << (Cobol85Parser.DOUBLE - 131)) | (1 << (Cobol85Parser.EBCDIC - 131)) | (1 << (Cobol85Parser.EMPTY_CHECK - 131)) | (1 << (Cobol85Parser.ENTER - 131)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 131)) | (1 << (Cobol85Parser.ERASE - 131)) | (1 << (Cobol85Parser.EOL - 131)) | (1 << (Cobol85Parser.EOS - 131)))) != 0) or ((((_la - 195)) & ~0x3f) == 0 and ((1 << (_la - 195)) & ((1 << (Cobol85Parser.ESCAPE - 195)) | (1 << (Cobol85Parser.EVENT - 195)) | (1 << (Cobol85Parser.EXCLUSIVE - 195)) | (1 << (Cobol85Parser.EXPORT - 195)) | (1 << (Cobol85Parser.EXTENDED - 195)) | (1 << (Cobol85Parser.FALSE - 195)) | (1 << (Cobol85Parser.FOREGROUND_COLOR - 195)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 195)) | (1 << (Cobol85Parser.FULL - 195)) | (1 << (Cobol85Parser.FUNCTION - 195)) | (1 << (Cobol85Parser.FUNCTIONNAME - 195)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 195)) | (1 << (Cobol85Parser.GRID - 195)) | (1 << (Cobol85Parser.HIGHLIGHT - 195)) | (1 << (Cobol85Parser.HIGH_VALUE - 195)) | (1 << (Cobol85Parser.HIGH_VALUES - 195)) | (1 << (Cobol85Parser.IMPLICIT - 195)) | (1 << (Cobol85Parser.IMPORT - 195)) | (1 << (Cobol85Parser.INTEGER - 195)))) != 0) or ((((_la - 262)) & ~0x3f) == 0 and ((1 << (_la - 262)) & ((1 << (Cobol85Parser.KEPT - 262)) | (1 << (Cobol85Parser.KEYBOARD - 262)) | (1 << (Cobol85Parser.LANGUAGE - 262)) | (1 << (Cobol85Parser.LB - 262)) | (1 << (Cobol85Parser.LD - 262)) | (1 << (Cobol85Parser.LEFTLINE - 262)) | (1 << (Cobol85Parser.LENGTH - 262)) | (1 << (Cobol85Parser.LENGTH_CHECK - 262)) | (1 << (Cobol85Parser.LIBACCESS - 262)) | (1 << (Cobol85Parser.LIBPARAMETER - 262)) | (1 << (Cobol85Parser.LIBRARY - 262)) | (1 << (Cobol85Parser.LINAGE_COUNTER - 262)) | (1 << (Cobol85Parser.LINE_COUNTER - 262)) | (1 << (Cobol85Parser.LIST - 262)) | (1 << (Cobol85Parser.LOCAL - 262)) | (1 << (Cobol85Parser.LONG_DATE - 262)) | (1 << (Cobol85Parser.LONG_TIME - 262)) | (1 << (Cobol85Parser.LOWER - 262)) | (1 << (Cobol85Parser.LOWLIGHT - 262)) | (1 << (Cobol85Parser.LOW_VALUE - 262)) | (1 << (Cobol85Parser.LOW_VALUES - 262)) | (1 << (Cobol85Parser.MMDDYYYY - 262)) | (1 << (Cobol85Parser.NAMED - 262)) | (1 << (Cobol85Parser.NATIONAL - 262)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 262)) | (1 << (Cobol85Parser.NETWORK - 262)) | (1 << (Cobol85Parser.NO_ECHO - 262)) | (1 << (Cobol85Parser.NULL - 262)) | (1 << (Cobol85Parser.NULLS - 262)) | (1 << (Cobol85Parser.NUMERIC_DATE - 262)) | (1 << (Cobol85Parser.NUMERIC_TIME - 262)))) != 0) or ((((_la - 326)) & ~0x3f) == 0 and ((1 << (_la - 326)) & ((1 << (Cobol85Parser.ODT - 326)) | (1 << (Cobol85Parser.ORDERLY - 326)) | (1 << (Cobol85Parser.OVERLINE - 326)) | (1 << (Cobol85Parser.OWN - 326)) | (1 << (Cobol85Parser.PAGE_COUNTER - 326)) | (1 << (Cobol85Parser.PASSWORD - 326)) | (1 << (Cobol85Parser.PORT - 326)) | (1 << (Cobol85Parser.PRINTER - 326)) | (1 << (Cobol85Parser.PRIVATE - 326)) | (1 << (Cobol85Parser.PROCESS - 326)) | (1 << (Cobol85Parser.PROGRAM - 326)) | (1 << (Cobol85Parser.PROMPT - 326)) | (1 << (Cobol85Parser.QUOTE - 326)) | (1 << (Cobol85Parser.QUOTES - 326)) | (1 << (Cobol85Parser.READER - 326)) | (1 << (Cobol85Parser.REMOTE - 326)) | (1 << (Cobol85Parser.REAL - 326)) | (1 << (Cobol85Parser.RECEIVED - 326)) | (1 << (Cobol85Parser.RECURSIVE - 326)) | (1 << (Cobol85Parser.REF - 326)))) != 0) or ((((_la - 395)) & ~0x3f) == 0 and ((1 << (_la - 395)) & ((1 << (Cobol85Parser.REMOVE - 395)) | (1 << (Cobol85Parser.REQUIRED - 395)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 395)) | (1 << (Cobol85Parser.RETURN_CODE - 395)) | (1 << (Cobol85Parser.SAVE - 395)) | (1 << (Cobol85Parser.SECURE - 395)) | (1 << (Cobol85Parser.SHARED - 395)) | (1 << (Cobol85Parser.SHAREDBYALL - 395)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 395)) | (1 << (Cobol85Parser.SHARING - 395)) | (1 << (Cobol85Parser.SHIFT_IN - 395)) | (1 << (Cobol85Parser.SHIFT_OUT - 395)) | (1 << (Cobol85Parser.SHORT_DATE - 395)) | (1 << (Cobol85Parser.SORT_CONTROL - 395)) | (1 << (Cobol85Parser.SORT_CORE_SIZE - 395)) | (1 << (Cobol85Parser.SORT_FILE_SIZE - 395)) | (1 << (Cobol85Parser.SORT_MESSAGE - 395)) | (1 << (Cobol85Parser.SORT_MODE_SIZE - 395)) | (1 << (Cobol85Parser.SORT_RETURN - 395)) | (1 << (Cobol85Parser.SPACE - 395)) | (1 << (Cobol85Parser.SPACES - 395)) | (1 << (Cobol85Parser.SQL - 395)))) != 0) or ((((_la - 471)) & ~0x3f) == 0 and ((1 << (_la - 471)) & ((1 << (Cobol85Parser.SYMBOL - 471)) | (1 << (Cobol85Parser.TALLY - 471)) | (1 << (Cobol85Parser.TASK - 471)) | (1 << (Cobol85Parser.THREAD - 471)) | (1 << (Cobol85Parser.THREAD_LOCAL - 471)) | (1 << (Cobol85Parser.TIME - 471)) | (1 << (Cobol85Parser.TIMER - 471)) | (1 << (Cobol85Parser.TODAYS_DATE - 471)) | (1 << (Cobol85Parser.TODAYS_NAME - 471)) | (1 << (Cobol85Parser.TRUE - 471)) | (1 << (Cobol85Parser.TRUNCATED - 471)) | (1 << (Cobol85Parser.TYPEDEF - 471)) | (1 << (Cobol85Parser.UNDERLINE - 471)) | (1 << (Cobol85Parser.VIRTUAL - 471)) | (1 << (Cobol85Parser.WAIT - 471)) | (1 << (Cobol85Parser.WHEN_COMPILED - 471)) | (1 << (Cobol85Parser.YEAR - 471)) | (1 << (Cobol85Parser.YYYYMMDD - 471)) | (1 << (Cobol85Parser.YYYYDDD - 471)) | (1 << (Cobol85Parser.ZERO - 471)) | (1 << (Cobol85Parser.ZERO_FILL - 471)) | (1 << (Cobol85Parser.ZEROS - 471)) | (1 << (Cobol85Parser.ZEROES - 471)) | (1 << (Cobol85Parser.COMMACHAR - 471)))) != 0) or ((((_la - 547)) & ~0x3f) == 0 and ((1 << (_la - 547)) & ((1 << (Cobol85Parser.LPARENCHAR - 547)) | (1 << (Cobol85Parser.MINUSCHAR - 547)) | (1 << (Cobol85Parser.PLUSCHAR - 547)) | (1 << (Cobol85Parser.NONNUMERICLITERAL - 547)) | (1 << (Cobol85Parser.LEVEL_NUMBER_66 - 547)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 547)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 547)) | (1 << (Cobol85Parser.INTEGERLITERAL - 547)) | (1 << (Cobol85Parser.NUMERICLITERAL - 547)) | (1 << (Cobol85Parser.IDENTIFIER - 547)))) != 0):
                self.state = 5915
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Cobol85Parser.COMMACHAR:
                    self.state = 5914
                    self.match(Cobol85Parser.COMMACHAR)


                self.state = 5917
                self.subscript()
                self.state = 5922
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 5923
            self.match(Cobol85Parser.RPARENCHAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RelationConditionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.RelationConditionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def relationSignCondition(self):
            return self.getTypedRuleContext(Cobol85Parser.RelationSignConditionContext,0)


        def relationArithmeticComparison(self):
            return self.getTypedRuleContext(Cobol85Parser.RelationArithmeticComparisonContext,0)


        def relationCombinedComparison(self):
            return self.getTypedRuleContext(Cobol85Parser.RelationCombinedComparisonContext,0)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_relationCondition

        def enterRule(self, listener):
            if hasattr(listener, "enterRelationCondition"):
                listener.enterRelationCondition(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitRelationCondition"):
                listener.exitRelationCondition(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitRelationCondition"):
                return visitor.visitRelationCondition(self)
            else:
                return visitor.visitChildren(self)




    def relationCondition(self):

        localctx = Cobol85Parser.RelationConditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1062, self.RULE_relationCondition)
        try:
            self.state = 5928
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,933,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5925
                self.relationSignCondition()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5926
                self.relationArithmeticComparison()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 5927
                self.relationCombinedComparison()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RelationSignConditionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.RelationSignConditionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def arithmeticExpression(self):
            return self.getTypedRuleContext(Cobol85Parser.ArithmeticExpressionContext,0)


        def POSITIVE(self):
            return self.getToken(Cobol85Parser.POSITIVE, 0)

        def NEGATIVE(self):
            return self.getToken(Cobol85Parser.NEGATIVE, 0)

        def ZERO(self):
            return self.getToken(Cobol85Parser.ZERO, 0)

        def IS(self):
            return self.getToken(Cobol85Parser.IS, 0)

        def NOT(self):
            return self.getToken(Cobol85Parser.NOT, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_relationSignCondition

        def enterRule(self, listener):
            if hasattr(listener, "enterRelationSignCondition"):
                listener.enterRelationSignCondition(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitRelationSignCondition"):
                listener.exitRelationSignCondition(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitRelationSignCondition"):
                return visitor.visitRelationSignCondition(self)
            else:
                return visitor.visitChildren(self)




    def relationSignCondition(self):

        localctx = Cobol85Parser.RelationSignConditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1064, self.RULE_relationSignCondition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5930
            self.arithmeticExpression()
            self.state = 5932
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.IS:
                self.state = 5931
                self.match(Cobol85Parser.IS)


            self.state = 5935
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.NOT:
                self.state = 5934
                self.match(Cobol85Parser.NOT)


            self.state = 5937
            _la = self._input.LA(1)
            if not(_la==Cobol85Parser.NEGATIVE or _la==Cobol85Parser.POSITIVE or _la==Cobol85Parser.ZERO):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RelationArithmeticComparisonContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.RelationArithmeticComparisonContext, self).__init__(parent, invokingState)
            self.parser = parser

        def arithmeticExpression(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.ArithmeticExpressionContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.ArithmeticExpressionContext,i)


        def relationalOperator(self):
            return self.getTypedRuleContext(Cobol85Parser.RelationalOperatorContext,0)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_relationArithmeticComparison

        def enterRule(self, listener):
            if hasattr(listener, "enterRelationArithmeticComparison"):
                listener.enterRelationArithmeticComparison(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitRelationArithmeticComparison"):
                listener.exitRelationArithmeticComparison(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitRelationArithmeticComparison"):
                return visitor.visitRelationArithmeticComparison(self)
            else:
                return visitor.visitChildren(self)




    def relationArithmeticComparison(self):

        localctx = Cobol85Parser.RelationArithmeticComparisonContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1066, self.RULE_relationArithmeticComparison)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5939
            self.arithmeticExpression()
            self.state = 5940
            self.relationalOperator()
            self.state = 5941
            self.arithmeticExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RelationCombinedComparisonContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.RelationCombinedComparisonContext, self).__init__(parent, invokingState)
            self.parser = parser

        def arithmeticExpression(self):
            return self.getTypedRuleContext(Cobol85Parser.ArithmeticExpressionContext,0)


        def relationalOperator(self):
            return self.getTypedRuleContext(Cobol85Parser.RelationalOperatorContext,0)


        def LPARENCHAR(self):
            return self.getToken(Cobol85Parser.LPARENCHAR, 0)

        def relationCombinedCondition(self):
            return self.getTypedRuleContext(Cobol85Parser.RelationCombinedConditionContext,0)


        def RPARENCHAR(self):
            return self.getToken(Cobol85Parser.RPARENCHAR, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_relationCombinedComparison

        def enterRule(self, listener):
            if hasattr(listener, "enterRelationCombinedComparison"):
                listener.enterRelationCombinedComparison(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitRelationCombinedComparison"):
                listener.exitRelationCombinedComparison(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitRelationCombinedComparison"):
                return visitor.visitRelationCombinedComparison(self)
            else:
                return visitor.visitChildren(self)




    def relationCombinedComparison(self):

        localctx = Cobol85Parser.RelationCombinedComparisonContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1068, self.RULE_relationCombinedComparison)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5943
            self.arithmeticExpression()
            self.state = 5944
            self.relationalOperator()
            self.state = 5945
            self.match(Cobol85Parser.LPARENCHAR)
            self.state = 5946
            self.relationCombinedCondition()
            self.state = 5947
            self.match(Cobol85Parser.RPARENCHAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RelationCombinedConditionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.RelationCombinedConditionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def arithmeticExpression(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.ArithmeticExpressionContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.ArithmeticExpressionContext,i)


        def AND(self, i=None):
            if i is None:
                return self.getTokens(Cobol85Parser.AND)
            else:
                return self.getToken(Cobol85Parser.AND, i)

        def OR(self, i=None):
            if i is None:
                return self.getTokens(Cobol85Parser.OR)
            else:
                return self.getToken(Cobol85Parser.OR, i)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_relationCombinedCondition

        def enterRule(self, listener):
            if hasattr(listener, "enterRelationCombinedCondition"):
                listener.enterRelationCombinedCondition(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitRelationCombinedCondition"):
                listener.exitRelationCombinedCondition(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitRelationCombinedCondition"):
                return visitor.visitRelationCombinedCondition(self)
            else:
                return visitor.visitChildren(self)




    def relationCombinedCondition(self):

        localctx = Cobol85Parser.RelationCombinedConditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1070, self.RULE_relationCombinedCondition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5949
            self.arithmeticExpression()
            self.state = 5952 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 5950
                _la = self._input.LA(1)
                if not(_la==Cobol85Parser.AND or _la==Cobol85Parser.OR):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5951
                self.arithmeticExpression()
                self.state = 5954 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==Cobol85Parser.AND or _la==Cobol85Parser.OR):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RelationalOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.RelationalOperatorContext, self).__init__(parent, invokingState)
            self.parser = parser

        def NOTEQUALCHAR(self):
            return self.getToken(Cobol85Parser.NOTEQUALCHAR, 0)

        def GREATER(self):
            return self.getToken(Cobol85Parser.GREATER, 0)

        def OR(self):
            return self.getToken(Cobol85Parser.OR, 0)

        def EQUAL(self):
            return self.getToken(Cobol85Parser.EQUAL, 0)

        def MORETHANOREQUAL(self):
            return self.getToken(Cobol85Parser.MORETHANOREQUAL, 0)

        def LESS(self):
            return self.getToken(Cobol85Parser.LESS, 0)

        def LESSTHANOREQUAL(self):
            return self.getToken(Cobol85Parser.LESSTHANOREQUAL, 0)

        def IS(self):
            return self.getToken(Cobol85Parser.IS, 0)

        def ARE(self):
            return self.getToken(Cobol85Parser.ARE, 0)

        def MORETHANCHAR(self):
            return self.getToken(Cobol85Parser.MORETHANCHAR, 0)

        def LESSTHANCHAR(self):
            return self.getToken(Cobol85Parser.LESSTHANCHAR, 0)

        def EQUALCHAR(self):
            return self.getToken(Cobol85Parser.EQUALCHAR, 0)

        def NOT(self):
            return self.getToken(Cobol85Parser.NOT, 0)

        def THAN(self):
            return self.getToken(Cobol85Parser.THAN, 0)

        def TO(self):
            return self.getToken(Cobol85Parser.TO, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_relationalOperator

        def enterRule(self, listener):
            if hasattr(listener, "enterRelationalOperator"):
                listener.enterRelationalOperator(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitRelationalOperator"):
                listener.exitRelationalOperator(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitRelationalOperator"):
                return visitor.visitRelationalOperator(self)
            else:
                return visitor.visitChildren(self)




    def relationalOperator(self):

        localctx = Cobol85Parser.RelationalOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1072, self.RULE_relationalOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5957
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.ARE or _la==Cobol85Parser.IS:
                self.state = 5956
                _la = self._input.LA(1)
                if not(_la==Cobol85Parser.ARE or _la==Cobol85Parser.IS):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 6000
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,947,self._ctx)
            if la_ == 1:
                self.state = 5960
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Cobol85Parser.NOT:
                    self.state = 5959
                    self.match(Cobol85Parser.NOT)


                self.state = 5977
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [Cobol85Parser.GREATER]:
                    self.state = 5962
                    self.match(Cobol85Parser.GREATER)
                    self.state = 5964
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==Cobol85Parser.THAN:
                        self.state = 5963
                        self.match(Cobol85Parser.THAN)


                    pass
                elif token in [Cobol85Parser.MORETHANCHAR]:
                    self.state = 5966
                    self.match(Cobol85Parser.MORETHANCHAR)
                    pass
                elif token in [Cobol85Parser.LESS]:
                    self.state = 5967
                    self.match(Cobol85Parser.LESS)
                    self.state = 5969
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==Cobol85Parser.THAN:
                        self.state = 5968
                        self.match(Cobol85Parser.THAN)


                    pass
                elif token in [Cobol85Parser.LESSTHANCHAR]:
                    self.state = 5971
                    self.match(Cobol85Parser.LESSTHANCHAR)
                    pass
                elif token in [Cobol85Parser.EQUAL]:
                    self.state = 5972
                    self.match(Cobol85Parser.EQUAL)
                    self.state = 5974
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==Cobol85Parser.TO:
                        self.state = 5973
                        self.match(Cobol85Parser.TO)


                    pass
                elif token in [Cobol85Parser.EQUALCHAR]:
                    self.state = 5976
                    self.match(Cobol85Parser.EQUALCHAR)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 2:
                self.state = 5979
                self.match(Cobol85Parser.NOTEQUALCHAR)
                pass

            elif la_ == 3:
                self.state = 5980
                self.match(Cobol85Parser.GREATER)
                self.state = 5982
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Cobol85Parser.THAN:
                    self.state = 5981
                    self.match(Cobol85Parser.THAN)


                self.state = 5984
                self.match(Cobol85Parser.OR)
                self.state = 5985
                self.match(Cobol85Parser.EQUAL)
                self.state = 5987
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Cobol85Parser.TO:
                    self.state = 5986
                    self.match(Cobol85Parser.TO)


                pass

            elif la_ == 4:
                self.state = 5989
                self.match(Cobol85Parser.MORETHANOREQUAL)
                pass

            elif la_ == 5:
                self.state = 5990
                self.match(Cobol85Parser.LESS)
                self.state = 5992
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Cobol85Parser.THAN:
                    self.state = 5991
                    self.match(Cobol85Parser.THAN)


                self.state = 5994
                self.match(Cobol85Parser.OR)
                self.state = 5995
                self.match(Cobol85Parser.EQUAL)
                self.state = 5997
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Cobol85Parser.TO:
                    self.state = 5996
                    self.match(Cobol85Parser.TO)


                pass

            elif la_ == 6:
                self.state = 5999
                self.match(Cobol85Parser.LESSTHANOREQUAL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AbbreviationContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.AbbreviationContext, self).__init__(parent, invokingState)
            self.parser = parser

        def arithmeticExpression(self):
            return self.getTypedRuleContext(Cobol85Parser.ArithmeticExpressionContext,0)


        def LPARENCHAR(self):
            return self.getToken(Cobol85Parser.LPARENCHAR, 0)

        def abbreviation(self):
            return self.getTypedRuleContext(Cobol85Parser.AbbreviationContext,0)


        def RPARENCHAR(self):
            return self.getToken(Cobol85Parser.RPARENCHAR, 0)

        def NOT(self):
            return self.getToken(Cobol85Parser.NOT, 0)

        def relationalOperator(self):
            return self.getTypedRuleContext(Cobol85Parser.RelationalOperatorContext,0)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_abbreviation

        def enterRule(self, listener):
            if hasattr(listener, "enterAbbreviation"):
                listener.enterAbbreviation(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitAbbreviation"):
                listener.exitAbbreviation(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitAbbreviation"):
                return visitor.visitAbbreviation(self)
            else:
                return visitor.visitChildren(self)




    def abbreviation(self):

        localctx = Cobol85Parser.AbbreviationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1074, self.RULE_abbreviation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6003
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,948,self._ctx)
            if la_ == 1:
                self.state = 6002
                self.match(Cobol85Parser.NOT)


            self.state = 6006
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==Cobol85Parser.ARE or _la==Cobol85Parser.EQUAL or _la==Cobol85Parser.GREATER or ((((_la - 258)) & ~0x3f) == 0 and ((1 << (_la - 258)) & ((1 << (Cobol85Parser.IS - 258)) | (1 << (Cobol85Parser.LESS - 258)) | (1 << (Cobol85Parser.NOT - 258)))) != 0) or ((((_la - 541)) & ~0x3f) == 0 and ((1 << (_la - 541)) & ((1 << (Cobol85Parser.EQUALCHAR - 541)) | (1 << (Cobol85Parser.LESSTHANCHAR - 541)) | (1 << (Cobol85Parser.LESSTHANOREQUAL - 541)) | (1 << (Cobol85Parser.MORETHANCHAR - 541)) | (1 << (Cobol85Parser.MORETHANOREQUAL - 541)) | (1 << (Cobol85Parser.NOTEQUALCHAR - 541)))) != 0):
                self.state = 6005
                self.relationalOperator()


            self.state = 6014
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,950,self._ctx)
            if la_ == 1:
                self.state = 6008
                self.arithmeticExpression()
                pass

            elif la_ == 2:
                self.state = 6009
                self.match(Cobol85Parser.LPARENCHAR)
                self.state = 6010
                self.arithmeticExpression()
                self.state = 6011
                self.abbreviation()
                self.state = 6012
                self.match(Cobol85Parser.RPARENCHAR)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IdentifierContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.IdentifierContext, self).__init__(parent, invokingState)
            self.parser = parser

        def qualifiedDataName(self):
            return self.getTypedRuleContext(Cobol85Parser.QualifiedDataNameContext,0)


        def tableCall(self):
            return self.getTypedRuleContext(Cobol85Parser.TableCallContext,0)


        def functionCall(self):
            return self.getTypedRuleContext(Cobol85Parser.FunctionCallContext,0)


        def specialRegister(self):
            return self.getTypedRuleContext(Cobol85Parser.SpecialRegisterContext,0)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_identifier

        def enterRule(self, listener):
            if hasattr(listener, "enterIdentifier"):
                listener.enterIdentifier(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitIdentifier"):
                listener.exitIdentifier(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitIdentifier"):
                return visitor.visitIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def identifier(self):

        localctx = Cobol85Parser.IdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1076, self.RULE_identifier)
        try:
            self.state = 6020
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,951,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6016
                self.qualifiedDataName()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6017
                self.tableCall()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 6018
                self.functionCall()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 6019
                self.specialRegister()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TableCallContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.TableCallContext, self).__init__(parent, invokingState)
            self.parser = parser

        def qualifiedDataName(self):
            return self.getTypedRuleContext(Cobol85Parser.QualifiedDataNameContext,0)


        def LPARENCHAR(self, i=None):
            if i is None:
                return self.getTokens(Cobol85Parser.LPARENCHAR)
            else:
                return self.getToken(Cobol85Parser.LPARENCHAR, i)

        def subscript(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.SubscriptContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.SubscriptContext,i)


        def RPARENCHAR(self, i=None):
            if i is None:
                return self.getTokens(Cobol85Parser.RPARENCHAR)
            else:
                return self.getToken(Cobol85Parser.RPARENCHAR, i)

        def referenceModifier(self):
            return self.getTypedRuleContext(Cobol85Parser.ReferenceModifierContext,0)


        def COMMACHAR(self, i=None):
            if i is None:
                return self.getTokens(Cobol85Parser.COMMACHAR)
            else:
                return self.getToken(Cobol85Parser.COMMACHAR, i)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_tableCall

        def enterRule(self, listener):
            if hasattr(listener, "enterTableCall"):
                listener.enterTableCall(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitTableCall"):
                listener.exitTableCall(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitTableCall"):
                return visitor.visitTableCall(self)
            else:
                return visitor.visitChildren(self)




    def tableCall(self):

        localctx = Cobol85Parser.TableCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1078, self.RULE_tableCall)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6022
            self.qualifiedDataName()
            self.state = 6038
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,954,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 6023
                    self.match(Cobol85Parser.LPARENCHAR)
                    self.state = 6024
                    self.subscript()
                    self.state = 6031
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.ADDRESS) | (1 << Cobol85Parser.ALL) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE) | (1 << Cobol85Parser.AUTO) | (1 << Cobol85Parser.AUTO_SKIP) | (1 << Cobol85Parser.BACKGROUND_COLOR) | (1 << Cobol85Parser.BACKGROUND_COLOUR) | (1 << Cobol85Parser.BEEP) | (1 << Cobol85Parser.BELL) | (1 << Cobol85Parser.BINARY) | (1 << Cobol85Parser.BIT) | (1 << Cobol85Parser.BLINK) | (1 << Cobol85Parser.BLOB) | (1 << Cobol85Parser.BOUNDS) | (1 << Cobol85Parser.CAPABLE) | (1 << Cobol85Parser.CCSVERSION) | (1 << Cobol85Parser.CHANGED) | (1 << Cobol85Parser.CHANNEL))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (Cobol85Parser.CLOB - 67)) | (1 << (Cobol85Parser.CLOSE_DISPOSITION - 67)) | (1 << (Cobol85Parser.COBOL - 67)) | (1 << (Cobol85Parser.COMMITMENT - 67)) | (1 << (Cobol85Parser.CONTROL_POINT - 67)) | (1 << (Cobol85Parser.CONVENTION - 67)) | (1 << (Cobol85Parser.CRUNCH - 67)) | (1 << (Cobol85Parser.CURSOR - 67)) | (1 << (Cobol85Parser.DATE - 67)) | (1 << (Cobol85Parser.DAY - 67)) | (1 << (Cobol85Parser.DAY_OF_WEEK - 67)) | (1 << (Cobol85Parser.DBCLOB - 67)) | (1 << (Cobol85Parser.DEBUG_CONTENTS - 67)) | (1 << (Cobol85Parser.DEBUG_ITEM - 67)) | (1 << (Cobol85Parser.DEBUG_LINE - 67)) | (1 << (Cobol85Parser.DEBUG_NAME - 67)) | (1 << (Cobol85Parser.DEBUG_SUB_1 - 67)) | (1 << (Cobol85Parser.DEBUG_SUB_2 - 67)) | (1 << (Cobol85Parser.DEBUG_SUB_3 - 67)))) != 0) or ((((_la - 131)) & ~0x3f) == 0 and ((1 << (_la - 131)) & ((1 << (Cobol85Parser.DEFAULT - 131)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 131)) | (1 << (Cobol85Parser.DEFINITION - 131)) | (1 << (Cobol85Parser.DFHRESP - 131)) | (1 << (Cobol85Parser.DFHVALUE - 131)) | (1 << (Cobol85Parser.DISK - 131)) | (1 << (Cobol85Parser.DONTCARE - 131)) | (1 << (Cobol85Parser.DOUBLE - 131)) | (1 << (Cobol85Parser.EBCDIC - 131)) | (1 << (Cobol85Parser.EMPTY_CHECK - 131)) | (1 << (Cobol85Parser.ENTER - 131)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 131)) | (1 << (Cobol85Parser.ERASE - 131)) | (1 << (Cobol85Parser.EOL - 131)) | (1 << (Cobol85Parser.EOS - 131)))) != 0) or ((((_la - 195)) & ~0x3f) == 0 and ((1 << (_la - 195)) & ((1 << (Cobol85Parser.ESCAPE - 195)) | (1 << (Cobol85Parser.EVENT - 195)) | (1 << (Cobol85Parser.EXCLUSIVE - 195)) | (1 << (Cobol85Parser.EXPORT - 195)) | (1 << (Cobol85Parser.EXTENDED - 195)) | (1 << (Cobol85Parser.FALSE - 195)) | (1 << (Cobol85Parser.FOREGROUND_COLOR - 195)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 195)) | (1 << (Cobol85Parser.FULL - 195)) | (1 << (Cobol85Parser.FUNCTION - 195)) | (1 << (Cobol85Parser.FUNCTIONNAME - 195)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 195)) | (1 << (Cobol85Parser.GRID - 195)) | (1 << (Cobol85Parser.HIGHLIGHT - 195)) | (1 << (Cobol85Parser.HIGH_VALUE - 195)) | (1 << (Cobol85Parser.HIGH_VALUES - 195)) | (1 << (Cobol85Parser.IMPLICIT - 195)) | (1 << (Cobol85Parser.IMPORT - 195)) | (1 << (Cobol85Parser.INTEGER - 195)))) != 0) or ((((_la - 262)) & ~0x3f) == 0 and ((1 << (_la - 262)) & ((1 << (Cobol85Parser.KEPT - 262)) | (1 << (Cobol85Parser.KEYBOARD - 262)) | (1 << (Cobol85Parser.LANGUAGE - 262)) | (1 << (Cobol85Parser.LB - 262)) | (1 << (Cobol85Parser.LD - 262)) | (1 << (Cobol85Parser.LEFTLINE - 262)) | (1 << (Cobol85Parser.LENGTH - 262)) | (1 << (Cobol85Parser.LENGTH_CHECK - 262)) | (1 << (Cobol85Parser.LIBACCESS - 262)) | (1 << (Cobol85Parser.LIBPARAMETER - 262)) | (1 << (Cobol85Parser.LIBRARY - 262)) | (1 << (Cobol85Parser.LINAGE_COUNTER - 262)) | (1 << (Cobol85Parser.LINE_COUNTER - 262)) | (1 << (Cobol85Parser.LIST - 262)) | (1 << (Cobol85Parser.LOCAL - 262)) | (1 << (Cobol85Parser.LONG_DATE - 262)) | (1 << (Cobol85Parser.LONG_TIME - 262)) | (1 << (Cobol85Parser.LOWER - 262)) | (1 << (Cobol85Parser.LOWLIGHT - 262)) | (1 << (Cobol85Parser.LOW_VALUE - 262)) | (1 << (Cobol85Parser.LOW_VALUES - 262)) | (1 << (Cobol85Parser.MMDDYYYY - 262)) | (1 << (Cobol85Parser.NAMED - 262)) | (1 << (Cobol85Parser.NATIONAL - 262)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 262)) | (1 << (Cobol85Parser.NETWORK - 262)) | (1 << (Cobol85Parser.NO_ECHO - 262)) | (1 << (Cobol85Parser.NULL - 262)) | (1 << (Cobol85Parser.NULLS - 262)) | (1 << (Cobol85Parser.NUMERIC_DATE - 262)) | (1 << (Cobol85Parser.NUMERIC_TIME - 262)))) != 0) or ((((_la - 326)) & ~0x3f) == 0 and ((1 << (_la - 326)) & ((1 << (Cobol85Parser.ODT - 326)) | (1 << (Cobol85Parser.ORDERLY - 326)) | (1 << (Cobol85Parser.OVERLINE - 326)) | (1 << (Cobol85Parser.OWN - 326)) | (1 << (Cobol85Parser.PAGE_COUNTER - 326)) | (1 << (Cobol85Parser.PASSWORD - 326)) | (1 << (Cobol85Parser.PORT - 326)) | (1 << (Cobol85Parser.PRINTER - 326)) | (1 << (Cobol85Parser.PRIVATE - 326)) | (1 << (Cobol85Parser.PROCESS - 326)) | (1 << (Cobol85Parser.PROGRAM - 326)) | (1 << (Cobol85Parser.PROMPT - 326)) | (1 << (Cobol85Parser.QUOTE - 326)) | (1 << (Cobol85Parser.QUOTES - 326)) | (1 << (Cobol85Parser.READER - 326)) | (1 << (Cobol85Parser.REMOTE - 326)) | (1 << (Cobol85Parser.REAL - 326)) | (1 << (Cobol85Parser.RECEIVED - 326)) | (1 << (Cobol85Parser.RECURSIVE - 326)) | (1 << (Cobol85Parser.REF - 326)))) != 0) or ((((_la - 395)) & ~0x3f) == 0 and ((1 << (_la - 395)) & ((1 << (Cobol85Parser.REMOVE - 395)) | (1 << (Cobol85Parser.REQUIRED - 395)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 395)) | (1 << (Cobol85Parser.RETURN_CODE - 395)) | (1 << (Cobol85Parser.SAVE - 395)) | (1 << (Cobol85Parser.SECURE - 395)) | (1 << (Cobol85Parser.SHARED - 395)) | (1 << (Cobol85Parser.SHAREDBYALL - 395)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 395)) | (1 << (Cobol85Parser.SHARING - 395)) | (1 << (Cobol85Parser.SHIFT_IN - 395)) | (1 << (Cobol85Parser.SHIFT_OUT - 395)) | (1 << (Cobol85Parser.SHORT_DATE - 395)) | (1 << (Cobol85Parser.SORT_CONTROL - 395)) | (1 << (Cobol85Parser.SORT_CORE_SIZE - 395)) | (1 << (Cobol85Parser.SORT_FILE_SIZE - 395)) | (1 << (Cobol85Parser.SORT_MESSAGE - 395)) | (1 << (Cobol85Parser.SORT_MODE_SIZE - 395)) | (1 << (Cobol85Parser.SORT_RETURN - 395)) | (1 << (Cobol85Parser.SPACE - 395)) | (1 << (Cobol85Parser.SPACES - 395)) | (1 << (Cobol85Parser.SQL - 395)))) != 0) or ((((_la - 471)) & ~0x3f) == 0 and ((1 << (_la - 471)) & ((1 << (Cobol85Parser.SYMBOL - 471)) | (1 << (Cobol85Parser.TALLY - 471)) | (1 << (Cobol85Parser.TASK - 471)) | (1 << (Cobol85Parser.THREAD - 471)) | (1 << (Cobol85Parser.THREAD_LOCAL - 471)) | (1 << (Cobol85Parser.TIME - 471)) | (1 << (Cobol85Parser.TIMER - 471)) | (1 << (Cobol85Parser.TODAYS_DATE - 471)) | (1 << (Cobol85Parser.TODAYS_NAME - 471)) | (1 << (Cobol85Parser.TRUE - 471)) | (1 << (Cobol85Parser.TRUNCATED - 471)) | (1 << (Cobol85Parser.TYPEDEF - 471)) | (1 << (Cobol85Parser.UNDERLINE - 471)) | (1 << (Cobol85Parser.VIRTUAL - 471)) | (1 << (Cobol85Parser.WAIT - 471)) | (1 << (Cobol85Parser.WHEN_COMPILED - 471)) | (1 << (Cobol85Parser.YEAR - 471)) | (1 << (Cobol85Parser.YYYYMMDD - 471)) | (1 << (Cobol85Parser.YYYYDDD - 471)) | (1 << (Cobol85Parser.ZERO - 471)) | (1 << (Cobol85Parser.ZERO_FILL - 471)) | (1 << (Cobol85Parser.ZEROS - 471)) | (1 << (Cobol85Parser.ZEROES - 471)) | (1 << (Cobol85Parser.COMMACHAR - 471)))) != 0) or ((((_la - 547)) & ~0x3f) == 0 and ((1 << (_la - 547)) & ((1 << (Cobol85Parser.LPARENCHAR - 547)) | (1 << (Cobol85Parser.MINUSCHAR - 547)) | (1 << (Cobol85Parser.PLUSCHAR - 547)) | (1 << (Cobol85Parser.NONNUMERICLITERAL - 547)) | (1 << (Cobol85Parser.LEVEL_NUMBER_66 - 547)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 547)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 547)) | (1 << (Cobol85Parser.INTEGERLITERAL - 547)) | (1 << (Cobol85Parser.NUMERICLITERAL - 547)) | (1 << (Cobol85Parser.IDENTIFIER - 547)))) != 0):
                        self.state = 6026
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==Cobol85Parser.COMMACHAR:
                            self.state = 6025
                            self.match(Cobol85Parser.COMMACHAR)


                        self.state = 6028
                        self.subscript()
                        self.state = 6033
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 6034
                    self.match(Cobol85Parser.RPARENCHAR) 
                self.state = 6040
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,954,self._ctx)

            self.state = 6042
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,955,self._ctx)
            if la_ == 1:
                self.state = 6041
                self.referenceModifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FunctionCallContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.FunctionCallContext, self).__init__(parent, invokingState)
            self.parser = parser

        def FUNCTION(self):
            return self.getToken(Cobol85Parser.FUNCTION, 0)

        def functionName(self):
            return self.getTypedRuleContext(Cobol85Parser.FunctionNameContext,0)


        def LPARENCHAR(self, i=None):
            if i is None:
                return self.getTokens(Cobol85Parser.LPARENCHAR)
            else:
                return self.getToken(Cobol85Parser.LPARENCHAR, i)

        def argument(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.ArgumentContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.ArgumentContext,i)


        def RPARENCHAR(self, i=None):
            if i is None:
                return self.getTokens(Cobol85Parser.RPARENCHAR)
            else:
                return self.getToken(Cobol85Parser.RPARENCHAR, i)

        def referenceModifier(self):
            return self.getTypedRuleContext(Cobol85Parser.ReferenceModifierContext,0)


        def COMMACHAR(self, i=None):
            if i is None:
                return self.getTokens(Cobol85Parser.COMMACHAR)
            else:
                return self.getToken(Cobol85Parser.COMMACHAR, i)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_functionCall

        def enterRule(self, listener):
            if hasattr(listener, "enterFunctionCall"):
                listener.enterFunctionCall(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitFunctionCall"):
                listener.exitFunctionCall(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitFunctionCall"):
                return visitor.visitFunctionCall(self)
            else:
                return visitor.visitChildren(self)




    def functionCall(self):

        localctx = Cobol85Parser.FunctionCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1080, self.RULE_functionCall)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6044
            self.match(Cobol85Parser.FUNCTION)
            self.state = 6045
            self.functionName()
            self.state = 6061
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,958,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 6046
                    self.match(Cobol85Parser.LPARENCHAR)
                    self.state = 6047
                    self.argument()
                    self.state = 6054
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.ADDRESS) | (1 << Cobol85Parser.ALL) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE) | (1 << Cobol85Parser.AUTO) | (1 << Cobol85Parser.AUTO_SKIP) | (1 << Cobol85Parser.BACKGROUND_COLOR) | (1 << Cobol85Parser.BACKGROUND_COLOUR) | (1 << Cobol85Parser.BEEP) | (1 << Cobol85Parser.BELL) | (1 << Cobol85Parser.BINARY) | (1 << Cobol85Parser.BIT) | (1 << Cobol85Parser.BLINK) | (1 << Cobol85Parser.BLOB) | (1 << Cobol85Parser.BOUNDS) | (1 << Cobol85Parser.CAPABLE) | (1 << Cobol85Parser.CCSVERSION) | (1 << Cobol85Parser.CHANGED) | (1 << Cobol85Parser.CHANNEL))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (Cobol85Parser.CLOB - 67)) | (1 << (Cobol85Parser.CLOSE_DISPOSITION - 67)) | (1 << (Cobol85Parser.COBOL - 67)) | (1 << (Cobol85Parser.COMMITMENT - 67)) | (1 << (Cobol85Parser.CONTROL_POINT - 67)) | (1 << (Cobol85Parser.CONVENTION - 67)) | (1 << (Cobol85Parser.CRUNCH - 67)) | (1 << (Cobol85Parser.CURSOR - 67)) | (1 << (Cobol85Parser.DATE - 67)) | (1 << (Cobol85Parser.DAY - 67)) | (1 << (Cobol85Parser.DAY_OF_WEEK - 67)) | (1 << (Cobol85Parser.DBCLOB - 67)) | (1 << (Cobol85Parser.DEBUG_CONTENTS - 67)) | (1 << (Cobol85Parser.DEBUG_ITEM - 67)) | (1 << (Cobol85Parser.DEBUG_LINE - 67)) | (1 << (Cobol85Parser.DEBUG_NAME - 67)) | (1 << (Cobol85Parser.DEBUG_SUB_1 - 67)) | (1 << (Cobol85Parser.DEBUG_SUB_2 - 67)) | (1 << (Cobol85Parser.DEBUG_SUB_3 - 67)))) != 0) or ((((_la - 131)) & ~0x3f) == 0 and ((1 << (_la - 131)) & ((1 << (Cobol85Parser.DEFAULT - 131)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 131)) | (1 << (Cobol85Parser.DEFINITION - 131)) | (1 << (Cobol85Parser.DFHRESP - 131)) | (1 << (Cobol85Parser.DFHVALUE - 131)) | (1 << (Cobol85Parser.DISK - 131)) | (1 << (Cobol85Parser.DONTCARE - 131)) | (1 << (Cobol85Parser.DOUBLE - 131)) | (1 << (Cobol85Parser.EBCDIC - 131)) | (1 << (Cobol85Parser.EMPTY_CHECK - 131)) | (1 << (Cobol85Parser.ENTER - 131)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 131)) | (1 << (Cobol85Parser.ERASE - 131)) | (1 << (Cobol85Parser.EOL - 131)) | (1 << (Cobol85Parser.EOS - 131)))) != 0) or ((((_la - 195)) & ~0x3f) == 0 and ((1 << (_la - 195)) & ((1 << (Cobol85Parser.ESCAPE - 195)) | (1 << (Cobol85Parser.EVENT - 195)) | (1 << (Cobol85Parser.EXCLUSIVE - 195)) | (1 << (Cobol85Parser.EXPORT - 195)) | (1 << (Cobol85Parser.EXTENDED - 195)) | (1 << (Cobol85Parser.FALSE - 195)) | (1 << (Cobol85Parser.FOREGROUND_COLOR - 195)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 195)) | (1 << (Cobol85Parser.FULL - 195)) | (1 << (Cobol85Parser.FUNCTION - 195)) | (1 << (Cobol85Parser.FUNCTIONNAME - 195)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 195)) | (1 << (Cobol85Parser.GRID - 195)) | (1 << (Cobol85Parser.HIGHLIGHT - 195)) | (1 << (Cobol85Parser.HIGH_VALUE - 195)) | (1 << (Cobol85Parser.HIGH_VALUES - 195)) | (1 << (Cobol85Parser.IMPLICIT - 195)) | (1 << (Cobol85Parser.IMPORT - 195)) | (1 << (Cobol85Parser.INTEGER - 195)))) != 0) or ((((_la - 262)) & ~0x3f) == 0 and ((1 << (_la - 262)) & ((1 << (Cobol85Parser.KEPT - 262)) | (1 << (Cobol85Parser.KEYBOARD - 262)) | (1 << (Cobol85Parser.LANGUAGE - 262)) | (1 << (Cobol85Parser.LB - 262)) | (1 << (Cobol85Parser.LD - 262)) | (1 << (Cobol85Parser.LEFTLINE - 262)) | (1 << (Cobol85Parser.LENGTH - 262)) | (1 << (Cobol85Parser.LENGTH_CHECK - 262)) | (1 << (Cobol85Parser.LIBACCESS - 262)) | (1 << (Cobol85Parser.LIBPARAMETER - 262)) | (1 << (Cobol85Parser.LIBRARY - 262)) | (1 << (Cobol85Parser.LINAGE_COUNTER - 262)) | (1 << (Cobol85Parser.LINE_COUNTER - 262)) | (1 << (Cobol85Parser.LIST - 262)) | (1 << (Cobol85Parser.LOCAL - 262)) | (1 << (Cobol85Parser.LONG_DATE - 262)) | (1 << (Cobol85Parser.LONG_TIME - 262)) | (1 << (Cobol85Parser.LOWER - 262)) | (1 << (Cobol85Parser.LOWLIGHT - 262)) | (1 << (Cobol85Parser.LOW_VALUE - 262)) | (1 << (Cobol85Parser.LOW_VALUES - 262)) | (1 << (Cobol85Parser.MMDDYYYY - 262)) | (1 << (Cobol85Parser.NAMED - 262)) | (1 << (Cobol85Parser.NATIONAL - 262)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 262)) | (1 << (Cobol85Parser.NETWORK - 262)) | (1 << (Cobol85Parser.NO_ECHO - 262)) | (1 << (Cobol85Parser.NULL - 262)) | (1 << (Cobol85Parser.NULLS - 262)) | (1 << (Cobol85Parser.NUMERIC_DATE - 262)) | (1 << (Cobol85Parser.NUMERIC_TIME - 262)))) != 0) or ((((_la - 326)) & ~0x3f) == 0 and ((1 << (_la - 326)) & ((1 << (Cobol85Parser.ODT - 326)) | (1 << (Cobol85Parser.ORDERLY - 326)) | (1 << (Cobol85Parser.OVERLINE - 326)) | (1 << (Cobol85Parser.OWN - 326)) | (1 << (Cobol85Parser.PAGE_COUNTER - 326)) | (1 << (Cobol85Parser.PASSWORD - 326)) | (1 << (Cobol85Parser.PORT - 326)) | (1 << (Cobol85Parser.PRINTER - 326)) | (1 << (Cobol85Parser.PRIVATE - 326)) | (1 << (Cobol85Parser.PROCESS - 326)) | (1 << (Cobol85Parser.PROGRAM - 326)) | (1 << (Cobol85Parser.PROMPT - 326)) | (1 << (Cobol85Parser.QUOTE - 326)) | (1 << (Cobol85Parser.QUOTES - 326)) | (1 << (Cobol85Parser.READER - 326)) | (1 << (Cobol85Parser.REMOTE - 326)) | (1 << (Cobol85Parser.REAL - 326)) | (1 << (Cobol85Parser.RECEIVED - 326)) | (1 << (Cobol85Parser.RECURSIVE - 326)) | (1 << (Cobol85Parser.REF - 326)))) != 0) or ((((_la - 395)) & ~0x3f) == 0 and ((1 << (_la - 395)) & ((1 << (Cobol85Parser.REMOVE - 395)) | (1 << (Cobol85Parser.REQUIRED - 395)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 395)) | (1 << (Cobol85Parser.RETURN_CODE - 395)) | (1 << (Cobol85Parser.SAVE - 395)) | (1 << (Cobol85Parser.SECURE - 395)) | (1 << (Cobol85Parser.SHARED - 395)) | (1 << (Cobol85Parser.SHAREDBYALL - 395)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 395)) | (1 << (Cobol85Parser.SHARING - 395)) | (1 << (Cobol85Parser.SHIFT_IN - 395)) | (1 << (Cobol85Parser.SHIFT_OUT - 395)) | (1 << (Cobol85Parser.SHORT_DATE - 395)) | (1 << (Cobol85Parser.SORT_CONTROL - 395)) | (1 << (Cobol85Parser.SORT_CORE_SIZE - 395)) | (1 << (Cobol85Parser.SORT_FILE_SIZE - 395)) | (1 << (Cobol85Parser.SORT_MESSAGE - 395)) | (1 << (Cobol85Parser.SORT_MODE_SIZE - 395)) | (1 << (Cobol85Parser.SORT_RETURN - 395)) | (1 << (Cobol85Parser.SPACE - 395)) | (1 << (Cobol85Parser.SPACES - 395)) | (1 << (Cobol85Parser.SQL - 395)))) != 0) or ((((_la - 471)) & ~0x3f) == 0 and ((1 << (_la - 471)) & ((1 << (Cobol85Parser.SYMBOL - 471)) | (1 << (Cobol85Parser.TALLY - 471)) | (1 << (Cobol85Parser.TASK - 471)) | (1 << (Cobol85Parser.THREAD - 471)) | (1 << (Cobol85Parser.THREAD_LOCAL - 471)) | (1 << (Cobol85Parser.TIME - 471)) | (1 << (Cobol85Parser.TIMER - 471)) | (1 << (Cobol85Parser.TODAYS_DATE - 471)) | (1 << (Cobol85Parser.TODAYS_NAME - 471)) | (1 << (Cobol85Parser.TRUE - 471)) | (1 << (Cobol85Parser.TRUNCATED - 471)) | (1 << (Cobol85Parser.TYPEDEF - 471)) | (1 << (Cobol85Parser.UNDERLINE - 471)) | (1 << (Cobol85Parser.VIRTUAL - 471)) | (1 << (Cobol85Parser.WAIT - 471)) | (1 << (Cobol85Parser.WHEN_COMPILED - 471)) | (1 << (Cobol85Parser.YEAR - 471)) | (1 << (Cobol85Parser.YYYYMMDD - 471)) | (1 << (Cobol85Parser.YYYYDDD - 471)) | (1 << (Cobol85Parser.ZERO - 471)) | (1 << (Cobol85Parser.ZERO_FILL - 471)) | (1 << (Cobol85Parser.ZEROS - 471)) | (1 << (Cobol85Parser.ZEROES - 471)) | (1 << (Cobol85Parser.COMMACHAR - 471)))) != 0) or ((((_la - 547)) & ~0x3f) == 0 and ((1 << (_la - 547)) & ((1 << (Cobol85Parser.LPARENCHAR - 547)) | (1 << (Cobol85Parser.MINUSCHAR - 547)) | (1 << (Cobol85Parser.PLUSCHAR - 547)) | (1 << (Cobol85Parser.NONNUMERICLITERAL - 547)) | (1 << (Cobol85Parser.LEVEL_NUMBER_66 - 547)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 547)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 547)) | (1 << (Cobol85Parser.INTEGERLITERAL - 547)) | (1 << (Cobol85Parser.NUMERICLITERAL - 547)) | (1 << (Cobol85Parser.IDENTIFIER - 547)))) != 0):
                        self.state = 6049
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==Cobol85Parser.COMMACHAR:
                            self.state = 6048
                            self.match(Cobol85Parser.COMMACHAR)


                        self.state = 6051
                        self.argument()
                        self.state = 6056
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 6057
                    self.match(Cobol85Parser.RPARENCHAR) 
                self.state = 6063
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,958,self._ctx)

            self.state = 6065
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,959,self._ctx)
            if la_ == 1:
                self.state = 6064
                self.referenceModifier()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ReferenceModifierContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.ReferenceModifierContext, self).__init__(parent, invokingState)
            self.parser = parser

        def LPARENCHAR(self):
            return self.getToken(Cobol85Parser.LPARENCHAR, 0)

        def characterPosition(self):
            return self.getTypedRuleContext(Cobol85Parser.CharacterPositionContext,0)


        def COLONCHAR(self):
            return self.getToken(Cobol85Parser.COLONCHAR, 0)

        def RPARENCHAR(self):
            return self.getToken(Cobol85Parser.RPARENCHAR, 0)

        def length(self):
            return self.getTypedRuleContext(Cobol85Parser.LengthContext,0)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_referenceModifier

        def enterRule(self, listener):
            if hasattr(listener, "enterReferenceModifier"):
                listener.enterReferenceModifier(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitReferenceModifier"):
                listener.exitReferenceModifier(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitReferenceModifier"):
                return visitor.visitReferenceModifier(self)
            else:
                return visitor.visitChildren(self)




    def referenceModifier(self):

        localctx = Cobol85Parser.ReferenceModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1082, self.RULE_referenceModifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6067
            self.match(Cobol85Parser.LPARENCHAR)
            self.state = 6068
            self.characterPosition()
            self.state = 6069
            self.match(Cobol85Parser.COLONCHAR)
            self.state = 6071
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.ADDRESS) | (1 << Cobol85Parser.ALL) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE) | (1 << Cobol85Parser.AUTO) | (1 << Cobol85Parser.AUTO_SKIP) | (1 << Cobol85Parser.BACKGROUND_COLOR) | (1 << Cobol85Parser.BACKGROUND_COLOUR) | (1 << Cobol85Parser.BEEP) | (1 << Cobol85Parser.BELL) | (1 << Cobol85Parser.BINARY) | (1 << Cobol85Parser.BIT) | (1 << Cobol85Parser.BLINK) | (1 << Cobol85Parser.BLOB) | (1 << Cobol85Parser.BOUNDS) | (1 << Cobol85Parser.CAPABLE) | (1 << Cobol85Parser.CCSVERSION) | (1 << Cobol85Parser.CHANGED) | (1 << Cobol85Parser.CHANNEL))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (Cobol85Parser.CLOB - 67)) | (1 << (Cobol85Parser.CLOSE_DISPOSITION - 67)) | (1 << (Cobol85Parser.COBOL - 67)) | (1 << (Cobol85Parser.COMMITMENT - 67)) | (1 << (Cobol85Parser.CONTROL_POINT - 67)) | (1 << (Cobol85Parser.CONVENTION - 67)) | (1 << (Cobol85Parser.CRUNCH - 67)) | (1 << (Cobol85Parser.CURSOR - 67)) | (1 << (Cobol85Parser.DATE - 67)) | (1 << (Cobol85Parser.DAY - 67)) | (1 << (Cobol85Parser.DAY_OF_WEEK - 67)) | (1 << (Cobol85Parser.DBCLOB - 67)) | (1 << (Cobol85Parser.DEBUG_CONTENTS - 67)) | (1 << (Cobol85Parser.DEBUG_ITEM - 67)) | (1 << (Cobol85Parser.DEBUG_LINE - 67)) | (1 << (Cobol85Parser.DEBUG_NAME - 67)) | (1 << (Cobol85Parser.DEBUG_SUB_1 - 67)) | (1 << (Cobol85Parser.DEBUG_SUB_2 - 67)) | (1 << (Cobol85Parser.DEBUG_SUB_3 - 67)))) != 0) or ((((_la - 131)) & ~0x3f) == 0 and ((1 << (_la - 131)) & ((1 << (Cobol85Parser.DEFAULT - 131)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 131)) | (1 << (Cobol85Parser.DEFINITION - 131)) | (1 << (Cobol85Parser.DFHRESP - 131)) | (1 << (Cobol85Parser.DFHVALUE - 131)) | (1 << (Cobol85Parser.DISK - 131)) | (1 << (Cobol85Parser.DONTCARE - 131)) | (1 << (Cobol85Parser.DOUBLE - 131)) | (1 << (Cobol85Parser.EBCDIC - 131)) | (1 << (Cobol85Parser.EMPTY_CHECK - 131)) | (1 << (Cobol85Parser.ENTER - 131)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 131)) | (1 << (Cobol85Parser.ERASE - 131)) | (1 << (Cobol85Parser.EOL - 131)) | (1 << (Cobol85Parser.EOS - 131)))) != 0) or ((((_la - 195)) & ~0x3f) == 0 and ((1 << (_la - 195)) & ((1 << (Cobol85Parser.ESCAPE - 195)) | (1 << (Cobol85Parser.EVENT - 195)) | (1 << (Cobol85Parser.EXCLUSIVE - 195)) | (1 << (Cobol85Parser.EXPORT - 195)) | (1 << (Cobol85Parser.EXTENDED - 195)) | (1 << (Cobol85Parser.FALSE - 195)) | (1 << (Cobol85Parser.FOREGROUND_COLOR - 195)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 195)) | (1 << (Cobol85Parser.FULL - 195)) | (1 << (Cobol85Parser.FUNCTION - 195)) | (1 << (Cobol85Parser.FUNCTIONNAME - 195)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 195)) | (1 << (Cobol85Parser.GRID - 195)) | (1 << (Cobol85Parser.HIGHLIGHT - 195)) | (1 << (Cobol85Parser.HIGH_VALUE - 195)) | (1 << (Cobol85Parser.HIGH_VALUES - 195)) | (1 << (Cobol85Parser.IMPLICIT - 195)) | (1 << (Cobol85Parser.IMPORT - 195)) | (1 << (Cobol85Parser.INTEGER - 195)))) != 0) or ((((_la - 262)) & ~0x3f) == 0 and ((1 << (_la - 262)) & ((1 << (Cobol85Parser.KEPT - 262)) | (1 << (Cobol85Parser.KEYBOARD - 262)) | (1 << (Cobol85Parser.LANGUAGE - 262)) | (1 << (Cobol85Parser.LB - 262)) | (1 << (Cobol85Parser.LD - 262)) | (1 << (Cobol85Parser.LEFTLINE - 262)) | (1 << (Cobol85Parser.LENGTH - 262)) | (1 << (Cobol85Parser.LENGTH_CHECK - 262)) | (1 << (Cobol85Parser.LIBACCESS - 262)) | (1 << (Cobol85Parser.LIBPARAMETER - 262)) | (1 << (Cobol85Parser.LIBRARY - 262)) | (1 << (Cobol85Parser.LINAGE_COUNTER - 262)) | (1 << (Cobol85Parser.LINE_COUNTER - 262)) | (1 << (Cobol85Parser.LIST - 262)) | (1 << (Cobol85Parser.LOCAL - 262)) | (1 << (Cobol85Parser.LONG_DATE - 262)) | (1 << (Cobol85Parser.LONG_TIME - 262)) | (1 << (Cobol85Parser.LOWER - 262)) | (1 << (Cobol85Parser.LOWLIGHT - 262)) | (1 << (Cobol85Parser.LOW_VALUE - 262)) | (1 << (Cobol85Parser.LOW_VALUES - 262)) | (1 << (Cobol85Parser.MMDDYYYY - 262)) | (1 << (Cobol85Parser.NAMED - 262)) | (1 << (Cobol85Parser.NATIONAL - 262)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 262)) | (1 << (Cobol85Parser.NETWORK - 262)) | (1 << (Cobol85Parser.NO_ECHO - 262)) | (1 << (Cobol85Parser.NULL - 262)) | (1 << (Cobol85Parser.NULLS - 262)) | (1 << (Cobol85Parser.NUMERIC_DATE - 262)) | (1 << (Cobol85Parser.NUMERIC_TIME - 262)))) != 0) or ((((_la - 326)) & ~0x3f) == 0 and ((1 << (_la - 326)) & ((1 << (Cobol85Parser.ODT - 326)) | (1 << (Cobol85Parser.ORDERLY - 326)) | (1 << (Cobol85Parser.OVERLINE - 326)) | (1 << (Cobol85Parser.OWN - 326)) | (1 << (Cobol85Parser.PAGE_COUNTER - 326)) | (1 << (Cobol85Parser.PASSWORD - 326)) | (1 << (Cobol85Parser.PORT - 326)) | (1 << (Cobol85Parser.PRINTER - 326)) | (1 << (Cobol85Parser.PRIVATE - 326)) | (1 << (Cobol85Parser.PROCESS - 326)) | (1 << (Cobol85Parser.PROGRAM - 326)) | (1 << (Cobol85Parser.PROMPT - 326)) | (1 << (Cobol85Parser.QUOTE - 326)) | (1 << (Cobol85Parser.QUOTES - 326)) | (1 << (Cobol85Parser.READER - 326)) | (1 << (Cobol85Parser.REMOTE - 326)) | (1 << (Cobol85Parser.REAL - 326)) | (1 << (Cobol85Parser.RECEIVED - 326)) | (1 << (Cobol85Parser.RECURSIVE - 326)) | (1 << (Cobol85Parser.REF - 326)))) != 0) or ((((_la - 395)) & ~0x3f) == 0 and ((1 << (_la - 395)) & ((1 << (Cobol85Parser.REMOVE - 395)) | (1 << (Cobol85Parser.REQUIRED - 395)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 395)) | (1 << (Cobol85Parser.RETURN_CODE - 395)) | (1 << (Cobol85Parser.SAVE - 395)) | (1 << (Cobol85Parser.SECURE - 395)) | (1 << (Cobol85Parser.SHARED - 395)) | (1 << (Cobol85Parser.SHAREDBYALL - 395)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 395)) | (1 << (Cobol85Parser.SHARING - 395)) | (1 << (Cobol85Parser.SHIFT_IN - 395)) | (1 << (Cobol85Parser.SHIFT_OUT - 395)) | (1 << (Cobol85Parser.SHORT_DATE - 395)) | (1 << (Cobol85Parser.SORT_CONTROL - 395)) | (1 << (Cobol85Parser.SORT_CORE_SIZE - 395)) | (1 << (Cobol85Parser.SORT_FILE_SIZE - 395)) | (1 << (Cobol85Parser.SORT_MESSAGE - 395)) | (1 << (Cobol85Parser.SORT_MODE_SIZE - 395)) | (1 << (Cobol85Parser.SORT_RETURN - 395)) | (1 << (Cobol85Parser.SPACE - 395)) | (1 << (Cobol85Parser.SPACES - 395)) | (1 << (Cobol85Parser.SQL - 395)))) != 0) or ((((_la - 471)) & ~0x3f) == 0 and ((1 << (_la - 471)) & ((1 << (Cobol85Parser.SYMBOL - 471)) | (1 << (Cobol85Parser.TALLY - 471)) | (1 << (Cobol85Parser.TASK - 471)) | (1 << (Cobol85Parser.THREAD - 471)) | (1 << (Cobol85Parser.THREAD_LOCAL - 471)) | (1 << (Cobol85Parser.TIME - 471)) | (1 << (Cobol85Parser.TIMER - 471)) | (1 << (Cobol85Parser.TODAYS_DATE - 471)) | (1 << (Cobol85Parser.TODAYS_NAME - 471)) | (1 << (Cobol85Parser.TRUE - 471)) | (1 << (Cobol85Parser.TRUNCATED - 471)) | (1 << (Cobol85Parser.TYPEDEF - 471)) | (1 << (Cobol85Parser.UNDERLINE - 471)) | (1 << (Cobol85Parser.VIRTUAL - 471)) | (1 << (Cobol85Parser.WAIT - 471)) | (1 << (Cobol85Parser.WHEN_COMPILED - 471)) | (1 << (Cobol85Parser.YEAR - 471)) | (1 << (Cobol85Parser.YYYYMMDD - 471)) | (1 << (Cobol85Parser.YYYYDDD - 471)) | (1 << (Cobol85Parser.ZERO - 471)) | (1 << (Cobol85Parser.ZERO_FILL - 471)) | (1 << (Cobol85Parser.ZEROS - 471)) | (1 << (Cobol85Parser.ZEROES - 471)))) != 0) or ((((_la - 547)) & ~0x3f) == 0 and ((1 << (_la - 547)) & ((1 << (Cobol85Parser.LPARENCHAR - 547)) | (1 << (Cobol85Parser.MINUSCHAR - 547)) | (1 << (Cobol85Parser.PLUSCHAR - 547)) | (1 << (Cobol85Parser.NONNUMERICLITERAL - 547)) | (1 << (Cobol85Parser.LEVEL_NUMBER_66 - 547)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 547)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 547)) | (1 << (Cobol85Parser.INTEGERLITERAL - 547)) | (1 << (Cobol85Parser.NUMERICLITERAL - 547)) | (1 << (Cobol85Parser.IDENTIFIER - 547)))) != 0):
                self.state = 6070
                self.length()


            self.state = 6073
            self.match(Cobol85Parser.RPARENCHAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CharacterPositionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.CharacterPositionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def arithmeticExpression(self):
            return self.getTypedRuleContext(Cobol85Parser.ArithmeticExpressionContext,0)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_characterPosition

        def enterRule(self, listener):
            if hasattr(listener, "enterCharacterPosition"):
                listener.enterCharacterPosition(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitCharacterPosition"):
                listener.exitCharacterPosition(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitCharacterPosition"):
                return visitor.visitCharacterPosition(self)
            else:
                return visitor.visitChildren(self)




    def characterPosition(self):

        localctx = Cobol85Parser.CharacterPositionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1084, self.RULE_characterPosition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6075
            self.arithmeticExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LengthContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.LengthContext, self).__init__(parent, invokingState)
            self.parser = parser

        def arithmeticExpression(self):
            return self.getTypedRuleContext(Cobol85Parser.ArithmeticExpressionContext,0)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_length

        def enterRule(self, listener):
            if hasattr(listener, "enterLength"):
                listener.enterLength(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitLength"):
                listener.exitLength(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitLength"):
                return visitor.visitLength(self)
            else:
                return visitor.visitChildren(self)




    def length(self):

        localctx = Cobol85Parser.LengthContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1086, self.RULE_length)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6077
            self.arithmeticExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SubscriptContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.SubscriptContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ALL(self):
            return self.getToken(Cobol85Parser.ALL, 0)

        def integerLiteral(self):
            return self.getTypedRuleContext(Cobol85Parser.IntegerLiteralContext,0)


        def qualifiedDataName(self):
            return self.getTypedRuleContext(Cobol85Parser.QualifiedDataNameContext,0)


        def indexName(self):
            return self.getTypedRuleContext(Cobol85Parser.IndexNameContext,0)


        def arithmeticExpression(self):
            return self.getTypedRuleContext(Cobol85Parser.ArithmeticExpressionContext,0)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_subscript

        def enterRule(self, listener):
            if hasattr(listener, "enterSubscript"):
                listener.enterSubscript(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSubscript"):
                listener.exitSubscript(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitSubscript"):
                return visitor.visitSubscript(self)
            else:
                return visitor.visitChildren(self)




    def subscript(self):

        localctx = Cobol85Parser.SubscriptContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1088, self.RULE_subscript)
        try:
            self.state = 6090
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,963,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6079
                self.match(Cobol85Parser.ALL)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6080
                self.integerLiteral()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 6081
                self.qualifiedDataName()
                self.state = 6083
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,961,self._ctx)
                if la_ == 1:
                    self.state = 6082
                    self.integerLiteral()


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 6085
                self.indexName()
                self.state = 6087
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,962,self._ctx)
                if la_ == 1:
                    self.state = 6086
                    self.integerLiteral()


                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 6089
                self.arithmeticExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ArgumentContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.ArgumentContext, self).__init__(parent, invokingState)
            self.parser = parser

        def literal(self):
            return self.getTypedRuleContext(Cobol85Parser.LiteralContext,0)


        def identifier(self):
            return self.getTypedRuleContext(Cobol85Parser.IdentifierContext,0)


        def qualifiedDataName(self):
            return self.getTypedRuleContext(Cobol85Parser.QualifiedDataNameContext,0)


        def integerLiteral(self):
            return self.getTypedRuleContext(Cobol85Parser.IntegerLiteralContext,0)


        def indexName(self):
            return self.getTypedRuleContext(Cobol85Parser.IndexNameContext,0)


        def arithmeticExpression(self):
            return self.getTypedRuleContext(Cobol85Parser.ArithmeticExpressionContext,0)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_argument

        def enterRule(self, listener):
            if hasattr(listener, "enterArgument"):
                listener.enterArgument(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitArgument"):
                listener.exitArgument(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitArgument"):
                return visitor.visitArgument(self)
            else:
                return visitor.visitChildren(self)




    def argument(self):

        localctx = Cobol85Parser.ArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1090, self.RULE_argument)
        try:
            self.state = 6103
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,966,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6092
                self.literal()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6093
                self.identifier()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 6094
                self.qualifiedDataName()
                self.state = 6096
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,964,self._ctx)
                if la_ == 1:
                    self.state = 6095
                    self.integerLiteral()


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 6098
                self.indexName()
                self.state = 6100
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,965,self._ctx)
                if la_ == 1:
                    self.state = 6099
                    self.integerLiteral()


                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 6102
                self.arithmeticExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class QualifiedDataNameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.QualifiedDataNameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def qualifiedDataNameFormat1(self):
            return self.getTypedRuleContext(Cobol85Parser.QualifiedDataNameFormat1Context,0)


        def qualifiedDataNameFormat2(self):
            return self.getTypedRuleContext(Cobol85Parser.QualifiedDataNameFormat2Context,0)


        def qualifiedDataNameFormat3(self):
            return self.getTypedRuleContext(Cobol85Parser.QualifiedDataNameFormat3Context,0)


        def qualifiedDataNameFormat4(self):
            return self.getTypedRuleContext(Cobol85Parser.QualifiedDataNameFormat4Context,0)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_qualifiedDataName

        def enterRule(self, listener):
            if hasattr(listener, "enterQualifiedDataName"):
                listener.enterQualifiedDataName(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitQualifiedDataName"):
                listener.exitQualifiedDataName(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitQualifiedDataName"):
                return visitor.visitQualifiedDataName(self)
            else:
                return visitor.visitChildren(self)




    def qualifiedDataName(self):

        localctx = Cobol85Parser.QualifiedDataNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1092, self.RULE_qualifiedDataName)
        try:
            self.state = 6109
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,967,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6105
                self.qualifiedDataNameFormat1()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6106
                self.qualifiedDataNameFormat2()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 6107
                self.qualifiedDataNameFormat3()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 6108
                self.qualifiedDataNameFormat4()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class QualifiedDataNameFormat1Context(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.QualifiedDataNameFormat1Context, self).__init__(parent, invokingState)
            self.parser = parser

        def dataName(self):
            return self.getTypedRuleContext(Cobol85Parser.DataNameContext,0)


        def conditionName(self):
            return self.getTypedRuleContext(Cobol85Parser.ConditionNameContext,0)


        def inFile(self):
            return self.getTypedRuleContext(Cobol85Parser.InFileContext,0)


        def qualifiedInData(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(Cobol85Parser.QualifiedInDataContext)
            else:
                return self.getTypedRuleContext(Cobol85Parser.QualifiedInDataContext,i)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_qualifiedDataNameFormat1

        def enterRule(self, listener):
            if hasattr(listener, "enterQualifiedDataNameFormat1"):
                listener.enterQualifiedDataNameFormat1(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitQualifiedDataNameFormat1"):
                listener.exitQualifiedDataNameFormat1(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitQualifiedDataNameFormat1"):
                return visitor.visitQualifiedDataNameFormat1(self)
            else:
                return visitor.visitChildren(self)




    def qualifiedDataNameFormat1(self):

        localctx = Cobol85Parser.QualifiedDataNameFormat1Context(self, self._ctx, self.state)
        self.enterRule(localctx, 1094, self.RULE_qualifiedDataNameFormat1)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6113
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,968,self._ctx)
            if la_ == 1:
                self.state = 6111
                self.dataName()
                pass

            elif la_ == 2:
                self.state = 6112
                self.conditionName()
                pass


            self.state = 6124
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,971,self._ctx)
            if la_ == 1:
                self.state = 6116 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 6115
                        self.qualifiedInData()

                    else:
                        raise NoViableAltException(self)
                    self.state = 6118 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,969,self._ctx)

                self.state = 6121
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,970,self._ctx)
                if la_ == 1:
                    self.state = 6120
                    self.inFile()



            elif la_ == 2:
                self.state = 6123
                self.inFile()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class QualifiedDataNameFormat2Context(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.QualifiedDataNameFormat2Context, self).__init__(parent, invokingState)
            self.parser = parser

        def paragraphName(self):
            return self.getTypedRuleContext(Cobol85Parser.ParagraphNameContext,0)


        def inSection(self):
            return self.getTypedRuleContext(Cobol85Parser.InSectionContext,0)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_qualifiedDataNameFormat2

        def enterRule(self, listener):
            if hasattr(listener, "enterQualifiedDataNameFormat2"):
                listener.enterQualifiedDataNameFormat2(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitQualifiedDataNameFormat2"):
                listener.exitQualifiedDataNameFormat2(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitQualifiedDataNameFormat2"):
                return visitor.visitQualifiedDataNameFormat2(self)
            else:
                return visitor.visitChildren(self)




    def qualifiedDataNameFormat2(self):

        localctx = Cobol85Parser.QualifiedDataNameFormat2Context(self, self._ctx, self.state)
        self.enterRule(localctx, 1096, self.RULE_qualifiedDataNameFormat2)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6126
            self.paragraphName()
            self.state = 6127
            self.inSection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class QualifiedDataNameFormat3Context(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.QualifiedDataNameFormat3Context, self).__init__(parent, invokingState)
            self.parser = parser

        def textName(self):
            return self.getTypedRuleContext(Cobol85Parser.TextNameContext,0)


        def inLibrary(self):
            return self.getTypedRuleContext(Cobol85Parser.InLibraryContext,0)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_qualifiedDataNameFormat3

        def enterRule(self, listener):
            if hasattr(listener, "enterQualifiedDataNameFormat3"):
                listener.enterQualifiedDataNameFormat3(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitQualifiedDataNameFormat3"):
                listener.exitQualifiedDataNameFormat3(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitQualifiedDataNameFormat3"):
                return visitor.visitQualifiedDataNameFormat3(self)
            else:
                return visitor.visitChildren(self)




    def qualifiedDataNameFormat3(self):

        localctx = Cobol85Parser.QualifiedDataNameFormat3Context(self, self._ctx, self.state)
        self.enterRule(localctx, 1098, self.RULE_qualifiedDataNameFormat3)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6129
            self.textName()
            self.state = 6130
            self.inLibrary()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class QualifiedDataNameFormat4Context(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.QualifiedDataNameFormat4Context, self).__init__(parent, invokingState)
            self.parser = parser

        def LINAGE_COUNTER(self):
            return self.getToken(Cobol85Parser.LINAGE_COUNTER, 0)

        def inFile(self):
            return self.getTypedRuleContext(Cobol85Parser.InFileContext,0)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_qualifiedDataNameFormat4

        def enterRule(self, listener):
            if hasattr(listener, "enterQualifiedDataNameFormat4"):
                listener.enterQualifiedDataNameFormat4(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitQualifiedDataNameFormat4"):
                listener.exitQualifiedDataNameFormat4(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitQualifiedDataNameFormat4"):
                return visitor.visitQualifiedDataNameFormat4(self)
            else:
                return visitor.visitChildren(self)




    def qualifiedDataNameFormat4(self):

        localctx = Cobol85Parser.QualifiedDataNameFormat4Context(self, self._ctx, self.state)
        self.enterRule(localctx, 1100, self.RULE_qualifiedDataNameFormat4)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6132
            self.match(Cobol85Parser.LINAGE_COUNTER)
            self.state = 6133
            self.inFile()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class QualifiedInDataContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.QualifiedInDataContext, self).__init__(parent, invokingState)
            self.parser = parser

        def inData(self):
            return self.getTypedRuleContext(Cobol85Parser.InDataContext,0)


        def inTable(self):
            return self.getTypedRuleContext(Cobol85Parser.InTableContext,0)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_qualifiedInData

        def enterRule(self, listener):
            if hasattr(listener, "enterQualifiedInData"):
                listener.enterQualifiedInData(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitQualifiedInData"):
                listener.exitQualifiedInData(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitQualifiedInData"):
                return visitor.visitQualifiedInData(self)
            else:
                return visitor.visitChildren(self)




    def qualifiedInData(self):

        localctx = Cobol85Parser.QualifiedInDataContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1102, self.RULE_qualifiedInData)
        try:
            self.state = 6137
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,972,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6135
                self.inData()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6136
                self.inTable()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InDataContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.InDataContext, self).__init__(parent, invokingState)
            self.parser = parser

        def dataName(self):
            return self.getTypedRuleContext(Cobol85Parser.DataNameContext,0)


        def IN(self):
            return self.getToken(Cobol85Parser.IN, 0)

        def OF(self):
            return self.getToken(Cobol85Parser.OF, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_inData

        def enterRule(self, listener):
            if hasattr(listener, "enterInData"):
                listener.enterInData(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitInData"):
                listener.exitInData(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitInData"):
                return visitor.visitInData(self)
            else:
                return visitor.visitChildren(self)




    def inData(self):

        localctx = Cobol85Parser.InDataContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1104, self.RULE_inData)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6139
            _la = self._input.LA(1)
            if not(_la==Cobol85Parser.IN or _la==Cobol85Parser.OF):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 6140
            self.dataName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InFileContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.InFileContext, self).__init__(parent, invokingState)
            self.parser = parser

        def fileName(self):
            return self.getTypedRuleContext(Cobol85Parser.FileNameContext,0)


        def IN(self):
            return self.getToken(Cobol85Parser.IN, 0)

        def OF(self):
            return self.getToken(Cobol85Parser.OF, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_inFile

        def enterRule(self, listener):
            if hasattr(listener, "enterInFile"):
                listener.enterInFile(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitInFile"):
                listener.exitInFile(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitInFile"):
                return visitor.visitInFile(self)
            else:
                return visitor.visitChildren(self)




    def inFile(self):

        localctx = Cobol85Parser.InFileContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1106, self.RULE_inFile)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6142
            _la = self._input.LA(1)
            if not(_la==Cobol85Parser.IN or _la==Cobol85Parser.OF):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 6143
            self.fileName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InMnemonicContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.InMnemonicContext, self).__init__(parent, invokingState)
            self.parser = parser

        def mnemonicName(self):
            return self.getTypedRuleContext(Cobol85Parser.MnemonicNameContext,0)


        def IN(self):
            return self.getToken(Cobol85Parser.IN, 0)

        def OF(self):
            return self.getToken(Cobol85Parser.OF, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_inMnemonic

        def enterRule(self, listener):
            if hasattr(listener, "enterInMnemonic"):
                listener.enterInMnemonic(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitInMnemonic"):
                listener.exitInMnemonic(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitInMnemonic"):
                return visitor.visitInMnemonic(self)
            else:
                return visitor.visitChildren(self)




    def inMnemonic(self):

        localctx = Cobol85Parser.InMnemonicContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1108, self.RULE_inMnemonic)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6145
            _la = self._input.LA(1)
            if not(_la==Cobol85Parser.IN or _la==Cobol85Parser.OF):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 6146
            self.mnemonicName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InSectionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.InSectionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def sectionName(self):
            return self.getTypedRuleContext(Cobol85Parser.SectionNameContext,0)


        def IN(self):
            return self.getToken(Cobol85Parser.IN, 0)

        def OF(self):
            return self.getToken(Cobol85Parser.OF, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_inSection

        def enterRule(self, listener):
            if hasattr(listener, "enterInSection"):
                listener.enterInSection(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitInSection"):
                listener.exitInSection(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitInSection"):
                return visitor.visitInSection(self)
            else:
                return visitor.visitChildren(self)




    def inSection(self):

        localctx = Cobol85Parser.InSectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1110, self.RULE_inSection)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6148
            _la = self._input.LA(1)
            if not(_la==Cobol85Parser.IN or _la==Cobol85Parser.OF):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 6149
            self.sectionName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InLibraryContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.InLibraryContext, self).__init__(parent, invokingState)
            self.parser = parser

        def libraryName(self):
            return self.getTypedRuleContext(Cobol85Parser.LibraryNameContext,0)


        def IN(self):
            return self.getToken(Cobol85Parser.IN, 0)

        def OF(self):
            return self.getToken(Cobol85Parser.OF, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_inLibrary

        def enterRule(self, listener):
            if hasattr(listener, "enterInLibrary"):
                listener.enterInLibrary(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitInLibrary"):
                listener.exitInLibrary(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitInLibrary"):
                return visitor.visitInLibrary(self)
            else:
                return visitor.visitChildren(self)




    def inLibrary(self):

        localctx = Cobol85Parser.InLibraryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1112, self.RULE_inLibrary)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6151
            _la = self._input.LA(1)
            if not(_la==Cobol85Parser.IN or _la==Cobol85Parser.OF):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 6152
            self.libraryName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InTableContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.InTableContext, self).__init__(parent, invokingState)
            self.parser = parser

        def tableCall(self):
            return self.getTypedRuleContext(Cobol85Parser.TableCallContext,0)


        def IN(self):
            return self.getToken(Cobol85Parser.IN, 0)

        def OF(self):
            return self.getToken(Cobol85Parser.OF, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_inTable

        def enterRule(self, listener):
            if hasattr(listener, "enterInTable"):
                listener.enterInTable(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitInTable"):
                listener.exitInTable(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitInTable"):
                return visitor.visitInTable(self)
            else:
                return visitor.visitChildren(self)




    def inTable(self):

        localctx = Cobol85Parser.InTableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1114, self.RULE_inTable)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6154
            _la = self._input.LA(1)
            if not(_la==Cobol85Parser.IN or _la==Cobol85Parser.OF):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 6155
            self.tableCall()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AlphabetNameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.AlphabetNameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def cobolWord(self):
            return self.getTypedRuleContext(Cobol85Parser.CobolWordContext,0)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_alphabetName

        def enterRule(self, listener):
            if hasattr(listener, "enterAlphabetName"):
                listener.enterAlphabetName(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitAlphabetName"):
                listener.exitAlphabetName(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitAlphabetName"):
                return visitor.visitAlphabetName(self)
            else:
                return visitor.visitChildren(self)




    def alphabetName(self):

        localctx = Cobol85Parser.AlphabetNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1116, self.RULE_alphabetName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6157
            self.cobolWord()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AssignmentNameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.AssignmentNameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def systemName(self):
            return self.getTypedRuleContext(Cobol85Parser.SystemNameContext,0)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_assignmentName

        def enterRule(self, listener):
            if hasattr(listener, "enterAssignmentName"):
                listener.enterAssignmentName(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitAssignmentName"):
                listener.exitAssignmentName(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitAssignmentName"):
                return visitor.visitAssignmentName(self)
            else:
                return visitor.visitChildren(self)




    def assignmentName(self):

        localctx = Cobol85Parser.AssignmentNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1118, self.RULE_assignmentName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6159
            self.systemName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BasisNameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.BasisNameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def programName(self):
            return self.getTypedRuleContext(Cobol85Parser.ProgramNameContext,0)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_basisName

        def enterRule(self, listener):
            if hasattr(listener, "enterBasisName"):
                listener.enterBasisName(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitBasisName"):
                listener.exitBasisName(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitBasisName"):
                return visitor.visitBasisName(self)
            else:
                return visitor.visitChildren(self)




    def basisName(self):

        localctx = Cobol85Parser.BasisNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1120, self.RULE_basisName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6161
            self.programName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CdNameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.CdNameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def cobolWord(self):
            return self.getTypedRuleContext(Cobol85Parser.CobolWordContext,0)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_cdName

        def enterRule(self, listener):
            if hasattr(listener, "enterCdName"):
                listener.enterCdName(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitCdName"):
                listener.exitCdName(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitCdName"):
                return visitor.visitCdName(self)
            else:
                return visitor.visitChildren(self)




    def cdName(self):

        localctx = Cobol85Parser.CdNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1122, self.RULE_cdName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6163
            self.cobolWord()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ClassNameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.ClassNameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def cobolWord(self):
            return self.getTypedRuleContext(Cobol85Parser.CobolWordContext,0)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_className

        def enterRule(self, listener):
            if hasattr(listener, "enterClassName"):
                listener.enterClassName(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitClassName"):
                listener.exitClassName(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitClassName"):
                return visitor.visitClassName(self)
            else:
                return visitor.visitChildren(self)




    def className(self):

        localctx = Cobol85Parser.ClassNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1124, self.RULE_className)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6165
            self.cobolWord()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ComputerNameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.ComputerNameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def systemName(self):
            return self.getTypedRuleContext(Cobol85Parser.SystemNameContext,0)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_computerName

        def enterRule(self, listener):
            if hasattr(listener, "enterComputerName"):
                listener.enterComputerName(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitComputerName"):
                listener.exitComputerName(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitComputerName"):
                return visitor.visitComputerName(self)
            else:
                return visitor.visitChildren(self)




    def computerName(self):

        localctx = Cobol85Parser.ComputerNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1126, self.RULE_computerName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6167
            self.systemName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConditionNameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.ConditionNameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def cobolWord(self):
            return self.getTypedRuleContext(Cobol85Parser.CobolWordContext,0)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_conditionName

        def enterRule(self, listener):
            if hasattr(listener, "enterConditionName"):
                listener.enterConditionName(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitConditionName"):
                listener.exitConditionName(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitConditionName"):
                return visitor.visitConditionName(self)
            else:
                return visitor.visitChildren(self)




    def conditionName(self):

        localctx = Cobol85Parser.ConditionNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1128, self.RULE_conditionName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6169
            self.cobolWord()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DataNameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.DataNameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def cobolWord(self):
            return self.getTypedRuleContext(Cobol85Parser.CobolWordContext,0)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_dataName

        def enterRule(self, listener):
            if hasattr(listener, "enterDataName"):
                listener.enterDataName(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitDataName"):
                listener.exitDataName(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitDataName"):
                return visitor.visitDataName(self)
            else:
                return visitor.visitChildren(self)




    def dataName(self):

        localctx = Cobol85Parser.DataNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1130, self.RULE_dataName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6171
            self.cobolWord()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DataDescNameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.DataDescNameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def FILLER(self):
            return self.getToken(Cobol85Parser.FILLER, 0)

        def CURSOR(self):
            return self.getToken(Cobol85Parser.CURSOR, 0)

        def dataName(self):
            return self.getTypedRuleContext(Cobol85Parser.DataNameContext,0)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_dataDescName

        def enterRule(self, listener):
            if hasattr(listener, "enterDataDescName"):
                listener.enterDataDescName(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitDataDescName"):
                listener.exitDataDescName(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitDataDescName"):
                return visitor.visitDataDescName(self)
            else:
                return visitor.visitChildren(self)




    def dataDescName(self):

        localctx = Cobol85Parser.DataDescNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1132, self.RULE_dataDescName)
        try:
            self.state = 6176
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,973,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6173
                self.match(Cobol85Parser.FILLER)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6174
                self.match(Cobol85Parser.CURSOR)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 6175
                self.dataName()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EnvironmentNameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.EnvironmentNameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def systemName(self):
            return self.getTypedRuleContext(Cobol85Parser.SystemNameContext,0)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_environmentName

        def enterRule(self, listener):
            if hasattr(listener, "enterEnvironmentName"):
                listener.enterEnvironmentName(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitEnvironmentName"):
                listener.exitEnvironmentName(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitEnvironmentName"):
                return visitor.visitEnvironmentName(self)
            else:
                return visitor.visitChildren(self)




    def environmentName(self):

        localctx = Cobol85Parser.EnvironmentNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1134, self.RULE_environmentName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6178
            self.systemName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FileNameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.FileNameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def cobolWord(self):
            return self.getTypedRuleContext(Cobol85Parser.CobolWordContext,0)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_fileName

        def enterRule(self, listener):
            if hasattr(listener, "enterFileName"):
                listener.enterFileName(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitFileName"):
                listener.exitFileName(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitFileName"):
                return visitor.visitFileName(self)
            else:
                return visitor.visitChildren(self)




    def fileName(self):

        localctx = Cobol85Parser.FileNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1136, self.RULE_fileName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6180
            self.cobolWord()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FunctionNameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.FunctionNameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def INTEGER(self):
            return self.getToken(Cobol85Parser.INTEGER, 0)

        def LENGTH(self):
            return self.getToken(Cobol85Parser.LENGTH, 0)

        def RANDOM(self):
            return self.getToken(Cobol85Parser.RANDOM, 0)

        def SUM(self):
            return self.getToken(Cobol85Parser.SUM, 0)

        def WHEN_COMPILED(self):
            return self.getToken(Cobol85Parser.WHEN_COMPILED, 0)

        def cobolWord(self):
            return self.getTypedRuleContext(Cobol85Parser.CobolWordContext,0)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_functionName

        def enterRule(self, listener):
            if hasattr(listener, "enterFunctionName"):
                listener.enterFunctionName(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitFunctionName"):
                listener.exitFunctionName(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitFunctionName"):
                return visitor.visitFunctionName(self)
            else:
                return visitor.visitChildren(self)




    def functionName(self):

        localctx = Cobol85Parser.FunctionNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1138, self.RULE_functionName)
        try:
            self.state = 6188
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,974,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6182
                self.match(Cobol85Parser.INTEGER)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6183
                self.match(Cobol85Parser.LENGTH)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 6184
                self.match(Cobol85Parser.RANDOM)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 6185
                self.match(Cobol85Parser.SUM)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 6186
                self.match(Cobol85Parser.WHEN_COMPILED)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 6187
                self.cobolWord()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IndexNameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.IndexNameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def cobolWord(self):
            return self.getTypedRuleContext(Cobol85Parser.CobolWordContext,0)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_indexName

        def enterRule(self, listener):
            if hasattr(listener, "enterIndexName"):
                listener.enterIndexName(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitIndexName"):
                listener.exitIndexName(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitIndexName"):
                return visitor.visitIndexName(self)
            else:
                return visitor.visitChildren(self)




    def indexName(self):

        localctx = Cobol85Parser.IndexNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1140, self.RULE_indexName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6190
            self.cobolWord()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LanguageNameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.LanguageNameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def systemName(self):
            return self.getTypedRuleContext(Cobol85Parser.SystemNameContext,0)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_languageName

        def enterRule(self, listener):
            if hasattr(listener, "enterLanguageName"):
                listener.enterLanguageName(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitLanguageName"):
                listener.exitLanguageName(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitLanguageName"):
                return visitor.visitLanguageName(self)
            else:
                return visitor.visitChildren(self)




    def languageName(self):

        localctx = Cobol85Parser.LanguageNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1142, self.RULE_languageName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6192
            self.systemName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LibraryNameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.LibraryNameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def cobolWord(self):
            return self.getTypedRuleContext(Cobol85Parser.CobolWordContext,0)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_libraryName

        def enterRule(self, listener):
            if hasattr(listener, "enterLibraryName"):
                listener.enterLibraryName(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitLibraryName"):
                listener.exitLibraryName(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitLibraryName"):
                return visitor.visitLibraryName(self)
            else:
                return visitor.visitChildren(self)




    def libraryName(self):

        localctx = Cobol85Parser.LibraryNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1144, self.RULE_libraryName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6194
            self.cobolWord()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LocalNameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.LocalNameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def cobolWord(self):
            return self.getTypedRuleContext(Cobol85Parser.CobolWordContext,0)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_localName

        def enterRule(self, listener):
            if hasattr(listener, "enterLocalName"):
                listener.enterLocalName(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitLocalName"):
                listener.exitLocalName(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitLocalName"):
                return visitor.visitLocalName(self)
            else:
                return visitor.visitChildren(self)




    def localName(self):

        localctx = Cobol85Parser.LocalNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1146, self.RULE_localName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6196
            self.cobolWord()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MnemonicNameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.MnemonicNameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def cobolWord(self):
            return self.getTypedRuleContext(Cobol85Parser.CobolWordContext,0)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_mnemonicName

        def enterRule(self, listener):
            if hasattr(listener, "enterMnemonicName"):
                listener.enterMnemonicName(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitMnemonicName"):
                listener.exitMnemonicName(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitMnemonicName"):
                return visitor.visitMnemonicName(self)
            else:
                return visitor.visitChildren(self)




    def mnemonicName(self):

        localctx = Cobol85Parser.MnemonicNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1148, self.RULE_mnemonicName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6198
            self.cobolWord()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ParagraphNameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.ParagraphNameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def cobolWord(self):
            return self.getTypedRuleContext(Cobol85Parser.CobolWordContext,0)


        def integerLiteral(self):
            return self.getTypedRuleContext(Cobol85Parser.IntegerLiteralContext,0)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_paragraphName

        def enterRule(self, listener):
            if hasattr(listener, "enterParagraphName"):
                listener.enterParagraphName(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitParagraphName"):
                listener.exitParagraphName(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitParagraphName"):
                return visitor.visitParagraphName(self)
            else:
                return visitor.visitChildren(self)




    def paragraphName(self):

        localctx = Cobol85Parser.ParagraphNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1150, self.RULE_paragraphName)
        try:
            self.state = 6202
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Cobol85Parser.ABORT, Cobol85Parser.AS, Cobol85Parser.ASCII, Cobol85Parser.ASSOCIATED_DATA, Cobol85Parser.ASSOCIATED_DATA_LENGTH, Cobol85Parser.ATTRIBUTE, Cobol85Parser.AUTO, Cobol85Parser.AUTO_SKIP, Cobol85Parser.BACKGROUND_COLOR, Cobol85Parser.BACKGROUND_COLOUR, Cobol85Parser.BEEP, Cobol85Parser.BELL, Cobol85Parser.BINARY, Cobol85Parser.BIT, Cobol85Parser.BLINK, Cobol85Parser.BLOB, Cobol85Parser.BOUNDS, Cobol85Parser.CAPABLE, Cobol85Parser.CCSVERSION, Cobol85Parser.CHANGED, Cobol85Parser.CHANNEL, Cobol85Parser.CLOB, Cobol85Parser.CLOSE_DISPOSITION, Cobol85Parser.COBOL, Cobol85Parser.COMMITMENT, Cobol85Parser.CONTROL_POINT, Cobol85Parser.CONVENTION, Cobol85Parser.CRUNCH, Cobol85Parser.CURSOR, Cobol85Parser.DBCLOB, Cobol85Parser.DEFAULT, Cobol85Parser.DEFAULT_DISPLAY, Cobol85Parser.DEFINITION, Cobol85Parser.DFHRESP, Cobol85Parser.DFHVALUE, Cobol85Parser.DISK, Cobol85Parser.DONTCARE, Cobol85Parser.DOUBLE, Cobol85Parser.EBCDIC, Cobol85Parser.EMPTY_CHECK, Cobol85Parser.ENTER, Cobol85Parser.ENTRY_PROCEDURE, Cobol85Parser.ERASE, Cobol85Parser.EOL, Cobol85Parser.EOS, Cobol85Parser.ESCAPE, Cobol85Parser.EVENT, Cobol85Parser.EXCLUSIVE, Cobol85Parser.EXPORT, Cobol85Parser.EXTENDED, Cobol85Parser.FOREGROUND_COLOR, Cobol85Parser.FOREGROUND_COLOUR, Cobol85Parser.FULL, Cobol85Parser.FUNCTIONNAME, Cobol85Parser.FUNCTION_POINTER, Cobol85Parser.GRID, Cobol85Parser.HIGHLIGHT, Cobol85Parser.IMPLICIT, Cobol85Parser.IMPORT, Cobol85Parser.INTEGER, Cobol85Parser.KEPT, Cobol85Parser.KEYBOARD, Cobol85Parser.LANGUAGE, Cobol85Parser.LB, Cobol85Parser.LD, Cobol85Parser.LEFTLINE, Cobol85Parser.LENGTH_CHECK, Cobol85Parser.LIBACCESS, Cobol85Parser.LIBPARAMETER, Cobol85Parser.LIBRARY, Cobol85Parser.LIST, Cobol85Parser.LOCAL, Cobol85Parser.LONG_DATE, Cobol85Parser.LONG_TIME, Cobol85Parser.LOWER, Cobol85Parser.LOWLIGHT, Cobol85Parser.MMDDYYYY, Cobol85Parser.NAMED, Cobol85Parser.NATIONAL, Cobol85Parser.NATIONAL_EDITED, Cobol85Parser.NETWORK, Cobol85Parser.NO_ECHO, Cobol85Parser.NUMERIC_DATE, Cobol85Parser.NUMERIC_TIME, Cobol85Parser.ODT, Cobol85Parser.ORDERLY, Cobol85Parser.OVERLINE, Cobol85Parser.OWN, Cobol85Parser.PASSWORD, Cobol85Parser.PORT, Cobol85Parser.PRINTER, Cobol85Parser.PRIVATE, Cobol85Parser.PROCESS, Cobol85Parser.PROGRAM, Cobol85Parser.PROMPT, Cobol85Parser.READER, Cobol85Parser.REMOTE, Cobol85Parser.REAL, Cobol85Parser.RECEIVED, Cobol85Parser.RECURSIVE, Cobol85Parser.REF, Cobol85Parser.REMOVE, Cobol85Parser.REQUIRED, Cobol85Parser.REVERSE_VIDEO, Cobol85Parser.SAVE, Cobol85Parser.SECURE, Cobol85Parser.SHARED, Cobol85Parser.SHAREDBYALL, Cobol85Parser.SHAREDBYRUNUNIT, Cobol85Parser.SHARING, Cobol85Parser.SHORT_DATE, Cobol85Parser.SQL, Cobol85Parser.SYMBOL, Cobol85Parser.TASK, Cobol85Parser.THREAD, Cobol85Parser.THREAD_LOCAL, Cobol85Parser.TIMER, Cobol85Parser.TODAYS_DATE, Cobol85Parser.TODAYS_NAME, Cobol85Parser.TRUNCATED, Cobol85Parser.TYPEDEF, Cobol85Parser.UNDERLINE, Cobol85Parser.VIRTUAL, Cobol85Parser.WAIT, Cobol85Parser.YEAR, Cobol85Parser.YYYYMMDD, Cobol85Parser.YYYYDDD, Cobol85Parser.ZERO_FILL, Cobol85Parser.IDENTIFIER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 6200
                self.cobolWord()
                pass
            elif token in [Cobol85Parser.LEVEL_NUMBER_66, Cobol85Parser.LEVEL_NUMBER_77, Cobol85Parser.LEVEL_NUMBER_88, Cobol85Parser.INTEGERLITERAL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 6201
                self.integerLiteral()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ProcedureNameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.ProcedureNameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def paragraphName(self):
            return self.getTypedRuleContext(Cobol85Parser.ParagraphNameContext,0)


        def inSection(self):
            return self.getTypedRuleContext(Cobol85Parser.InSectionContext,0)


        def sectionName(self):
            return self.getTypedRuleContext(Cobol85Parser.SectionNameContext,0)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_procedureName

        def enterRule(self, listener):
            if hasattr(listener, "enterProcedureName"):
                listener.enterProcedureName(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitProcedureName"):
                listener.exitProcedureName(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitProcedureName"):
                return visitor.visitProcedureName(self)
            else:
                return visitor.visitChildren(self)




    def procedureName(self):

        localctx = Cobol85Parser.ProcedureNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1152, self.RULE_procedureName)
        self._la = 0 # Token type
        try:
            self.state = 6209
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,977,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6204
                self.paragraphName()
                self.state = 6206
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Cobol85Parser.IN or _la==Cobol85Parser.OF:
                    self.state = 6205
                    self.inSection()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6208
                self.sectionName()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ProgramNameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.ProgramNameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def NONNUMERICLITERAL(self):
            return self.getToken(Cobol85Parser.NONNUMERICLITERAL, 0)

        def cobolWord(self):
            return self.getTypedRuleContext(Cobol85Parser.CobolWordContext,0)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_programName

        def enterRule(self, listener):
            if hasattr(listener, "enterProgramName"):
                listener.enterProgramName(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitProgramName"):
                listener.exitProgramName(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitProgramName"):
                return visitor.visitProgramName(self)
            else:
                return visitor.visitChildren(self)




    def programName(self):

        localctx = Cobol85Parser.ProgramNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1154, self.RULE_programName)
        try:
            self.state = 6213
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Cobol85Parser.NONNUMERICLITERAL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 6211
                self.match(Cobol85Parser.NONNUMERICLITERAL)
                pass
            elif token in [Cobol85Parser.ABORT, Cobol85Parser.AS, Cobol85Parser.ASCII, Cobol85Parser.ASSOCIATED_DATA, Cobol85Parser.ASSOCIATED_DATA_LENGTH, Cobol85Parser.ATTRIBUTE, Cobol85Parser.AUTO, Cobol85Parser.AUTO_SKIP, Cobol85Parser.BACKGROUND_COLOR, Cobol85Parser.BACKGROUND_COLOUR, Cobol85Parser.BEEP, Cobol85Parser.BELL, Cobol85Parser.BINARY, Cobol85Parser.BIT, Cobol85Parser.BLINK, Cobol85Parser.BLOB, Cobol85Parser.BOUNDS, Cobol85Parser.CAPABLE, Cobol85Parser.CCSVERSION, Cobol85Parser.CHANGED, Cobol85Parser.CHANNEL, Cobol85Parser.CLOB, Cobol85Parser.CLOSE_DISPOSITION, Cobol85Parser.COBOL, Cobol85Parser.COMMITMENT, Cobol85Parser.CONTROL_POINT, Cobol85Parser.CONVENTION, Cobol85Parser.CRUNCH, Cobol85Parser.CURSOR, Cobol85Parser.DBCLOB, Cobol85Parser.DEFAULT, Cobol85Parser.DEFAULT_DISPLAY, Cobol85Parser.DEFINITION, Cobol85Parser.DFHRESP, Cobol85Parser.DFHVALUE, Cobol85Parser.DISK, Cobol85Parser.DONTCARE, Cobol85Parser.DOUBLE, Cobol85Parser.EBCDIC, Cobol85Parser.EMPTY_CHECK, Cobol85Parser.ENTER, Cobol85Parser.ENTRY_PROCEDURE, Cobol85Parser.ERASE, Cobol85Parser.EOL, Cobol85Parser.EOS, Cobol85Parser.ESCAPE, Cobol85Parser.EVENT, Cobol85Parser.EXCLUSIVE, Cobol85Parser.EXPORT, Cobol85Parser.EXTENDED, Cobol85Parser.FOREGROUND_COLOR, Cobol85Parser.FOREGROUND_COLOUR, Cobol85Parser.FULL, Cobol85Parser.FUNCTIONNAME, Cobol85Parser.FUNCTION_POINTER, Cobol85Parser.GRID, Cobol85Parser.HIGHLIGHT, Cobol85Parser.IMPLICIT, Cobol85Parser.IMPORT, Cobol85Parser.INTEGER, Cobol85Parser.KEPT, Cobol85Parser.KEYBOARD, Cobol85Parser.LANGUAGE, Cobol85Parser.LB, Cobol85Parser.LD, Cobol85Parser.LEFTLINE, Cobol85Parser.LENGTH_CHECK, Cobol85Parser.LIBACCESS, Cobol85Parser.LIBPARAMETER, Cobol85Parser.LIBRARY, Cobol85Parser.LIST, Cobol85Parser.LOCAL, Cobol85Parser.LONG_DATE, Cobol85Parser.LONG_TIME, Cobol85Parser.LOWER, Cobol85Parser.LOWLIGHT, Cobol85Parser.MMDDYYYY, Cobol85Parser.NAMED, Cobol85Parser.NATIONAL, Cobol85Parser.NATIONAL_EDITED, Cobol85Parser.NETWORK, Cobol85Parser.NO_ECHO, Cobol85Parser.NUMERIC_DATE, Cobol85Parser.NUMERIC_TIME, Cobol85Parser.ODT, Cobol85Parser.ORDERLY, Cobol85Parser.OVERLINE, Cobol85Parser.OWN, Cobol85Parser.PASSWORD, Cobol85Parser.PORT, Cobol85Parser.PRINTER, Cobol85Parser.PRIVATE, Cobol85Parser.PROCESS, Cobol85Parser.PROGRAM, Cobol85Parser.PROMPT, Cobol85Parser.READER, Cobol85Parser.REMOTE, Cobol85Parser.REAL, Cobol85Parser.RECEIVED, Cobol85Parser.RECURSIVE, Cobol85Parser.REF, Cobol85Parser.REMOVE, Cobol85Parser.REQUIRED, Cobol85Parser.REVERSE_VIDEO, Cobol85Parser.SAVE, Cobol85Parser.SECURE, Cobol85Parser.SHARED, Cobol85Parser.SHAREDBYALL, Cobol85Parser.SHAREDBYRUNUNIT, Cobol85Parser.SHARING, Cobol85Parser.SHORT_DATE, Cobol85Parser.SQL, Cobol85Parser.SYMBOL, Cobol85Parser.TASK, Cobol85Parser.THREAD, Cobol85Parser.THREAD_LOCAL, Cobol85Parser.TIMER, Cobol85Parser.TODAYS_DATE, Cobol85Parser.TODAYS_NAME, Cobol85Parser.TRUNCATED, Cobol85Parser.TYPEDEF, Cobol85Parser.UNDERLINE, Cobol85Parser.VIRTUAL, Cobol85Parser.WAIT, Cobol85Parser.YEAR, Cobol85Parser.YYYYMMDD, Cobol85Parser.YYYYDDD, Cobol85Parser.ZERO_FILL, Cobol85Parser.IDENTIFIER]:
                self.enterOuterAlt(localctx, 2)
                self.state = 6212
                self.cobolWord()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RecordNameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.RecordNameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def qualifiedDataName(self):
            return self.getTypedRuleContext(Cobol85Parser.QualifiedDataNameContext,0)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_recordName

        def enterRule(self, listener):
            if hasattr(listener, "enterRecordName"):
                listener.enterRecordName(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitRecordName"):
                listener.exitRecordName(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitRecordName"):
                return visitor.visitRecordName(self)
            else:
                return visitor.visitChildren(self)




    def recordName(self):

        localctx = Cobol85Parser.RecordNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1156, self.RULE_recordName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6215
            self.qualifiedDataName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ReportNameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.ReportNameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def qualifiedDataName(self):
            return self.getTypedRuleContext(Cobol85Parser.QualifiedDataNameContext,0)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_reportName

        def enterRule(self, listener):
            if hasattr(listener, "enterReportName"):
                listener.enterReportName(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitReportName"):
                listener.exitReportName(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitReportName"):
                return visitor.visitReportName(self)
            else:
                return visitor.visitChildren(self)




    def reportName(self):

        localctx = Cobol85Parser.ReportNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1158, self.RULE_reportName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6217
            self.qualifiedDataName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class RoutineNameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.RoutineNameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def cobolWord(self):
            return self.getTypedRuleContext(Cobol85Parser.CobolWordContext,0)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_routineName

        def enterRule(self, listener):
            if hasattr(listener, "enterRoutineName"):
                listener.enterRoutineName(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitRoutineName"):
                listener.exitRoutineName(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitRoutineName"):
                return visitor.visitRoutineName(self)
            else:
                return visitor.visitChildren(self)




    def routineName(self):

        localctx = Cobol85Parser.RoutineNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1160, self.RULE_routineName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6219
            self.cobolWord()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ScreenNameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.ScreenNameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def cobolWord(self):
            return self.getTypedRuleContext(Cobol85Parser.CobolWordContext,0)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_screenName

        def enterRule(self, listener):
            if hasattr(listener, "enterScreenName"):
                listener.enterScreenName(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitScreenName"):
                listener.exitScreenName(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitScreenName"):
                return visitor.visitScreenName(self)
            else:
                return visitor.visitChildren(self)




    def screenName(self):

        localctx = Cobol85Parser.ScreenNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1162, self.RULE_screenName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6221
            self.cobolWord()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SectionNameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.SectionNameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def cobolWord(self):
            return self.getTypedRuleContext(Cobol85Parser.CobolWordContext,0)


        def integerLiteral(self):
            return self.getTypedRuleContext(Cobol85Parser.IntegerLiteralContext,0)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_sectionName

        def enterRule(self, listener):
            if hasattr(listener, "enterSectionName"):
                listener.enterSectionName(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSectionName"):
                listener.exitSectionName(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitSectionName"):
                return visitor.visitSectionName(self)
            else:
                return visitor.visitChildren(self)




    def sectionName(self):

        localctx = Cobol85Parser.SectionNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1164, self.RULE_sectionName)
        try:
            self.state = 6225
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Cobol85Parser.ABORT, Cobol85Parser.AS, Cobol85Parser.ASCII, Cobol85Parser.ASSOCIATED_DATA, Cobol85Parser.ASSOCIATED_DATA_LENGTH, Cobol85Parser.ATTRIBUTE, Cobol85Parser.AUTO, Cobol85Parser.AUTO_SKIP, Cobol85Parser.BACKGROUND_COLOR, Cobol85Parser.BACKGROUND_COLOUR, Cobol85Parser.BEEP, Cobol85Parser.BELL, Cobol85Parser.BINARY, Cobol85Parser.BIT, Cobol85Parser.BLINK, Cobol85Parser.BLOB, Cobol85Parser.BOUNDS, Cobol85Parser.CAPABLE, Cobol85Parser.CCSVERSION, Cobol85Parser.CHANGED, Cobol85Parser.CHANNEL, Cobol85Parser.CLOB, Cobol85Parser.CLOSE_DISPOSITION, Cobol85Parser.COBOL, Cobol85Parser.COMMITMENT, Cobol85Parser.CONTROL_POINT, Cobol85Parser.CONVENTION, Cobol85Parser.CRUNCH, Cobol85Parser.CURSOR, Cobol85Parser.DBCLOB, Cobol85Parser.DEFAULT, Cobol85Parser.DEFAULT_DISPLAY, Cobol85Parser.DEFINITION, Cobol85Parser.DFHRESP, Cobol85Parser.DFHVALUE, Cobol85Parser.DISK, Cobol85Parser.DONTCARE, Cobol85Parser.DOUBLE, Cobol85Parser.EBCDIC, Cobol85Parser.EMPTY_CHECK, Cobol85Parser.ENTER, Cobol85Parser.ENTRY_PROCEDURE, Cobol85Parser.ERASE, Cobol85Parser.EOL, Cobol85Parser.EOS, Cobol85Parser.ESCAPE, Cobol85Parser.EVENT, Cobol85Parser.EXCLUSIVE, Cobol85Parser.EXPORT, Cobol85Parser.EXTENDED, Cobol85Parser.FOREGROUND_COLOR, Cobol85Parser.FOREGROUND_COLOUR, Cobol85Parser.FULL, Cobol85Parser.FUNCTIONNAME, Cobol85Parser.FUNCTION_POINTER, Cobol85Parser.GRID, Cobol85Parser.HIGHLIGHT, Cobol85Parser.IMPLICIT, Cobol85Parser.IMPORT, Cobol85Parser.INTEGER, Cobol85Parser.KEPT, Cobol85Parser.KEYBOARD, Cobol85Parser.LANGUAGE, Cobol85Parser.LB, Cobol85Parser.LD, Cobol85Parser.LEFTLINE, Cobol85Parser.LENGTH_CHECK, Cobol85Parser.LIBACCESS, Cobol85Parser.LIBPARAMETER, Cobol85Parser.LIBRARY, Cobol85Parser.LIST, Cobol85Parser.LOCAL, Cobol85Parser.LONG_DATE, Cobol85Parser.LONG_TIME, Cobol85Parser.LOWER, Cobol85Parser.LOWLIGHT, Cobol85Parser.MMDDYYYY, Cobol85Parser.NAMED, Cobol85Parser.NATIONAL, Cobol85Parser.NATIONAL_EDITED, Cobol85Parser.NETWORK, Cobol85Parser.NO_ECHO, Cobol85Parser.NUMERIC_DATE, Cobol85Parser.NUMERIC_TIME, Cobol85Parser.ODT, Cobol85Parser.ORDERLY, Cobol85Parser.OVERLINE, Cobol85Parser.OWN, Cobol85Parser.PASSWORD, Cobol85Parser.PORT, Cobol85Parser.PRINTER, Cobol85Parser.PRIVATE, Cobol85Parser.PROCESS, Cobol85Parser.PROGRAM, Cobol85Parser.PROMPT, Cobol85Parser.READER, Cobol85Parser.REMOTE, Cobol85Parser.REAL, Cobol85Parser.RECEIVED, Cobol85Parser.RECURSIVE, Cobol85Parser.REF, Cobol85Parser.REMOVE, Cobol85Parser.REQUIRED, Cobol85Parser.REVERSE_VIDEO, Cobol85Parser.SAVE, Cobol85Parser.SECURE, Cobol85Parser.SHARED, Cobol85Parser.SHAREDBYALL, Cobol85Parser.SHAREDBYRUNUNIT, Cobol85Parser.SHARING, Cobol85Parser.SHORT_DATE, Cobol85Parser.SQL, Cobol85Parser.SYMBOL, Cobol85Parser.TASK, Cobol85Parser.THREAD, Cobol85Parser.THREAD_LOCAL, Cobol85Parser.TIMER, Cobol85Parser.TODAYS_DATE, Cobol85Parser.TODAYS_NAME, Cobol85Parser.TRUNCATED, Cobol85Parser.TYPEDEF, Cobol85Parser.UNDERLINE, Cobol85Parser.VIRTUAL, Cobol85Parser.WAIT, Cobol85Parser.YEAR, Cobol85Parser.YYYYMMDD, Cobol85Parser.YYYYDDD, Cobol85Parser.ZERO_FILL, Cobol85Parser.IDENTIFIER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 6223
                self.cobolWord()
                pass
            elif token in [Cobol85Parser.LEVEL_NUMBER_66, Cobol85Parser.LEVEL_NUMBER_77, Cobol85Parser.LEVEL_NUMBER_88, Cobol85Parser.INTEGERLITERAL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 6224
                self.integerLiteral()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SystemNameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.SystemNameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def cobolWord(self):
            return self.getTypedRuleContext(Cobol85Parser.CobolWordContext,0)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_systemName

        def enterRule(self, listener):
            if hasattr(listener, "enterSystemName"):
                listener.enterSystemName(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSystemName"):
                listener.exitSystemName(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitSystemName"):
                return visitor.visitSystemName(self)
            else:
                return visitor.visitChildren(self)




    def systemName(self):

        localctx = Cobol85Parser.SystemNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1166, self.RULE_systemName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6227
            self.cobolWord()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SymbolicCharacterContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.SymbolicCharacterContext, self).__init__(parent, invokingState)
            self.parser = parser

        def cobolWord(self):
            return self.getTypedRuleContext(Cobol85Parser.CobolWordContext,0)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_symbolicCharacter

        def enterRule(self, listener):
            if hasattr(listener, "enterSymbolicCharacter"):
                listener.enterSymbolicCharacter(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSymbolicCharacter"):
                listener.exitSymbolicCharacter(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitSymbolicCharacter"):
                return visitor.visitSymbolicCharacter(self)
            else:
                return visitor.visitChildren(self)




    def symbolicCharacter(self):

        localctx = Cobol85Parser.SymbolicCharacterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1168, self.RULE_symbolicCharacter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6229
            self.cobolWord()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TextNameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.TextNameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def cobolWord(self):
            return self.getTypedRuleContext(Cobol85Parser.CobolWordContext,0)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_textName

        def enterRule(self, listener):
            if hasattr(listener, "enterTextName"):
                listener.enterTextName(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitTextName"):
                listener.exitTextName(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitTextName"):
                return visitor.visitTextName(self)
            else:
                return visitor.visitChildren(self)




    def textName(self):

        localctx = Cobol85Parser.TextNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1170, self.RULE_textName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6231
            self.cobolWord()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CobolWordContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.CobolWordContext, self).__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(Cobol85Parser.IDENTIFIER, 0)

        def ABORT(self):
            return self.getToken(Cobol85Parser.ABORT, 0)

        def AS(self):
            return self.getToken(Cobol85Parser.AS, 0)

        def ASCII(self):
            return self.getToken(Cobol85Parser.ASCII, 0)

        def ASSOCIATED_DATA(self):
            return self.getToken(Cobol85Parser.ASSOCIATED_DATA, 0)

        def ASSOCIATED_DATA_LENGTH(self):
            return self.getToken(Cobol85Parser.ASSOCIATED_DATA_LENGTH, 0)

        def ATTRIBUTE(self):
            return self.getToken(Cobol85Parser.ATTRIBUTE, 0)

        def AUTO(self):
            return self.getToken(Cobol85Parser.AUTO, 0)

        def AUTO_SKIP(self):
            return self.getToken(Cobol85Parser.AUTO_SKIP, 0)

        def BACKGROUND_COLOR(self):
            return self.getToken(Cobol85Parser.BACKGROUND_COLOR, 0)

        def BACKGROUND_COLOUR(self):
            return self.getToken(Cobol85Parser.BACKGROUND_COLOUR, 0)

        def BEEP(self):
            return self.getToken(Cobol85Parser.BEEP, 0)

        def BELL(self):
            return self.getToken(Cobol85Parser.BELL, 0)

        def BINARY(self):
            return self.getToken(Cobol85Parser.BINARY, 0)

        def BIT(self):
            return self.getToken(Cobol85Parser.BIT, 0)

        def BLINK(self):
            return self.getToken(Cobol85Parser.BLINK, 0)

        def BLOB(self):
            return self.getToken(Cobol85Parser.BLOB, 0)

        def BOUNDS(self):
            return self.getToken(Cobol85Parser.BOUNDS, 0)

        def CAPABLE(self):
            return self.getToken(Cobol85Parser.CAPABLE, 0)

        def CCSVERSION(self):
            return self.getToken(Cobol85Parser.CCSVERSION, 0)

        def CHANGED(self):
            return self.getToken(Cobol85Parser.CHANGED, 0)

        def CHANNEL(self):
            return self.getToken(Cobol85Parser.CHANNEL, 0)

        def CLOB(self):
            return self.getToken(Cobol85Parser.CLOB, 0)

        def CLOSE_DISPOSITION(self):
            return self.getToken(Cobol85Parser.CLOSE_DISPOSITION, 0)

        def COBOL(self):
            return self.getToken(Cobol85Parser.COBOL, 0)

        def COMMITMENT(self):
            return self.getToken(Cobol85Parser.COMMITMENT, 0)

        def CONTROL_POINT(self):
            return self.getToken(Cobol85Parser.CONTROL_POINT, 0)

        def CONVENTION(self):
            return self.getToken(Cobol85Parser.CONVENTION, 0)

        def CRUNCH(self):
            return self.getToken(Cobol85Parser.CRUNCH, 0)

        def CURSOR(self):
            return self.getToken(Cobol85Parser.CURSOR, 0)

        def DBCLOB(self):
            return self.getToken(Cobol85Parser.DBCLOB, 0)

        def DEFAULT(self):
            return self.getToken(Cobol85Parser.DEFAULT, 0)

        def DEFAULT_DISPLAY(self):
            return self.getToken(Cobol85Parser.DEFAULT_DISPLAY, 0)

        def DEFINITION(self):
            return self.getToken(Cobol85Parser.DEFINITION, 0)

        def DFHRESP(self):
            return self.getToken(Cobol85Parser.DFHRESP, 0)

        def DFHVALUE(self):
            return self.getToken(Cobol85Parser.DFHVALUE, 0)

        def DISK(self):
            return self.getToken(Cobol85Parser.DISK, 0)

        def DONTCARE(self):
            return self.getToken(Cobol85Parser.DONTCARE, 0)

        def DOUBLE(self):
            return self.getToken(Cobol85Parser.DOUBLE, 0)

        def EBCDIC(self):
            return self.getToken(Cobol85Parser.EBCDIC, 0)

        def EMPTY_CHECK(self):
            return self.getToken(Cobol85Parser.EMPTY_CHECK, 0)

        def ENTER(self):
            return self.getToken(Cobol85Parser.ENTER, 0)

        def ENTRY_PROCEDURE(self):
            return self.getToken(Cobol85Parser.ENTRY_PROCEDURE, 0)

        def EOL(self):
            return self.getToken(Cobol85Parser.EOL, 0)

        def EOS(self):
            return self.getToken(Cobol85Parser.EOS, 0)

        def ERASE(self):
            return self.getToken(Cobol85Parser.ERASE, 0)

        def ESCAPE(self):
            return self.getToken(Cobol85Parser.ESCAPE, 0)

        def EVENT(self):
            return self.getToken(Cobol85Parser.EVENT, 0)

        def EXCLUSIVE(self):
            return self.getToken(Cobol85Parser.EXCLUSIVE, 0)

        def EXPORT(self):
            return self.getToken(Cobol85Parser.EXPORT, 0)

        def EXTENDED(self):
            return self.getToken(Cobol85Parser.EXTENDED, 0)

        def FOREGROUND_COLOR(self):
            return self.getToken(Cobol85Parser.FOREGROUND_COLOR, 0)

        def FOREGROUND_COLOUR(self):
            return self.getToken(Cobol85Parser.FOREGROUND_COLOUR, 0)

        def FULL(self):
            return self.getToken(Cobol85Parser.FULL, 0)

        def FUNCTIONNAME(self):
            return self.getToken(Cobol85Parser.FUNCTIONNAME, 0)

        def FUNCTION_POINTER(self):
            return self.getToken(Cobol85Parser.FUNCTION_POINTER, 0)

        def GRID(self):
            return self.getToken(Cobol85Parser.GRID, 0)

        def HIGHLIGHT(self):
            return self.getToken(Cobol85Parser.HIGHLIGHT, 0)

        def IMPLICIT(self):
            return self.getToken(Cobol85Parser.IMPLICIT, 0)

        def IMPORT(self):
            return self.getToken(Cobol85Parser.IMPORT, 0)

        def INTEGER(self):
            return self.getToken(Cobol85Parser.INTEGER, 0)

        def KEPT(self):
            return self.getToken(Cobol85Parser.KEPT, 0)

        def KEYBOARD(self):
            return self.getToken(Cobol85Parser.KEYBOARD, 0)

        def LANGUAGE(self):
            return self.getToken(Cobol85Parser.LANGUAGE, 0)

        def LB(self):
            return self.getToken(Cobol85Parser.LB, 0)

        def LD(self):
            return self.getToken(Cobol85Parser.LD, 0)

        def LEFTLINE(self):
            return self.getToken(Cobol85Parser.LEFTLINE, 0)

        def LENGTH_CHECK(self):
            return self.getToken(Cobol85Parser.LENGTH_CHECK, 0)

        def LIBACCESS(self):
            return self.getToken(Cobol85Parser.LIBACCESS, 0)

        def LIBPARAMETER(self):
            return self.getToken(Cobol85Parser.LIBPARAMETER, 0)

        def LIBRARY(self):
            return self.getToken(Cobol85Parser.LIBRARY, 0)

        def LIST(self):
            return self.getToken(Cobol85Parser.LIST, 0)

        def LOCAL(self):
            return self.getToken(Cobol85Parser.LOCAL, 0)

        def LONG_DATE(self):
            return self.getToken(Cobol85Parser.LONG_DATE, 0)

        def LONG_TIME(self):
            return self.getToken(Cobol85Parser.LONG_TIME, 0)

        def LOWER(self):
            return self.getToken(Cobol85Parser.LOWER, 0)

        def LOWLIGHT(self):
            return self.getToken(Cobol85Parser.LOWLIGHT, 0)

        def MMDDYYYY(self):
            return self.getToken(Cobol85Parser.MMDDYYYY, 0)

        def NAMED(self):
            return self.getToken(Cobol85Parser.NAMED, 0)

        def NATIONAL(self):
            return self.getToken(Cobol85Parser.NATIONAL, 0)

        def NATIONAL_EDITED(self):
            return self.getToken(Cobol85Parser.NATIONAL_EDITED, 0)

        def NETWORK(self):
            return self.getToken(Cobol85Parser.NETWORK, 0)

        def NO_ECHO(self):
            return self.getToken(Cobol85Parser.NO_ECHO, 0)

        def NUMERIC_DATE(self):
            return self.getToken(Cobol85Parser.NUMERIC_DATE, 0)

        def NUMERIC_TIME(self):
            return self.getToken(Cobol85Parser.NUMERIC_TIME, 0)

        def ODT(self):
            return self.getToken(Cobol85Parser.ODT, 0)

        def ORDERLY(self):
            return self.getToken(Cobol85Parser.ORDERLY, 0)

        def OVERLINE(self):
            return self.getToken(Cobol85Parser.OVERLINE, 0)

        def OWN(self):
            return self.getToken(Cobol85Parser.OWN, 0)

        def PASSWORD(self):
            return self.getToken(Cobol85Parser.PASSWORD, 0)

        def PORT(self):
            return self.getToken(Cobol85Parser.PORT, 0)

        def PRINTER(self):
            return self.getToken(Cobol85Parser.PRINTER, 0)

        def PRIVATE(self):
            return self.getToken(Cobol85Parser.PRIVATE, 0)

        def PROCESS(self):
            return self.getToken(Cobol85Parser.PROCESS, 0)

        def PROGRAM(self):
            return self.getToken(Cobol85Parser.PROGRAM, 0)

        def PROMPT(self):
            return self.getToken(Cobol85Parser.PROMPT, 0)

        def READER(self):
            return self.getToken(Cobol85Parser.READER, 0)

        def REAL(self):
            return self.getToken(Cobol85Parser.REAL, 0)

        def RECEIVED(self):
            return self.getToken(Cobol85Parser.RECEIVED, 0)

        def RECURSIVE(self):
            return self.getToken(Cobol85Parser.RECURSIVE, 0)

        def REF(self):
            return self.getToken(Cobol85Parser.REF, 0)

        def REMOTE(self):
            return self.getToken(Cobol85Parser.REMOTE, 0)

        def REMOVE(self):
            return self.getToken(Cobol85Parser.REMOVE, 0)

        def REQUIRED(self):
            return self.getToken(Cobol85Parser.REQUIRED, 0)

        def REVERSE_VIDEO(self):
            return self.getToken(Cobol85Parser.REVERSE_VIDEO, 0)

        def SAVE(self):
            return self.getToken(Cobol85Parser.SAVE, 0)

        def SECURE(self):
            return self.getToken(Cobol85Parser.SECURE, 0)

        def SHARED(self):
            return self.getToken(Cobol85Parser.SHARED, 0)

        def SHAREDBYALL(self):
            return self.getToken(Cobol85Parser.SHAREDBYALL, 0)

        def SHAREDBYRUNUNIT(self):
            return self.getToken(Cobol85Parser.SHAREDBYRUNUNIT, 0)

        def SHARING(self):
            return self.getToken(Cobol85Parser.SHARING, 0)

        def SHORT_DATE(self):
            return self.getToken(Cobol85Parser.SHORT_DATE, 0)

        def SQL(self):
            return self.getToken(Cobol85Parser.SQL, 0)

        def SYMBOL(self):
            return self.getToken(Cobol85Parser.SYMBOL, 0)

        def TASK(self):
            return self.getToken(Cobol85Parser.TASK, 0)

        def THREAD(self):
            return self.getToken(Cobol85Parser.THREAD, 0)

        def THREAD_LOCAL(self):
            return self.getToken(Cobol85Parser.THREAD_LOCAL, 0)

        def TIMER(self):
            return self.getToken(Cobol85Parser.TIMER, 0)

        def TODAYS_DATE(self):
            return self.getToken(Cobol85Parser.TODAYS_DATE, 0)

        def TODAYS_NAME(self):
            return self.getToken(Cobol85Parser.TODAYS_NAME, 0)

        def TRUNCATED(self):
            return self.getToken(Cobol85Parser.TRUNCATED, 0)

        def TYPEDEF(self):
            return self.getToken(Cobol85Parser.TYPEDEF, 0)

        def UNDERLINE(self):
            return self.getToken(Cobol85Parser.UNDERLINE, 0)

        def VIRTUAL(self):
            return self.getToken(Cobol85Parser.VIRTUAL, 0)

        def WAIT(self):
            return self.getToken(Cobol85Parser.WAIT, 0)

        def YEAR(self):
            return self.getToken(Cobol85Parser.YEAR, 0)

        def YYYYMMDD(self):
            return self.getToken(Cobol85Parser.YYYYMMDD, 0)

        def YYYYDDD(self):
            return self.getToken(Cobol85Parser.YYYYDDD, 0)

        def ZERO_FILL(self):
            return self.getToken(Cobol85Parser.ZERO_FILL, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_cobolWord

        def enterRule(self, listener):
            if hasattr(listener, "enterCobolWord"):
                listener.enterCobolWord(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitCobolWord"):
                listener.exitCobolWord(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitCobolWord"):
                return visitor.visitCobolWord(self)
            else:
                return visitor.visitChildren(self)




    def cobolWord(self):

        localctx = Cobol85Parser.CobolWordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1172, self.RULE_cobolWord)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6233
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << Cobol85Parser.ABORT) | (1 << Cobol85Parser.AS) | (1 << Cobol85Parser.ASCII) | (1 << Cobol85Parser.ASSOCIATED_DATA) | (1 << Cobol85Parser.ASSOCIATED_DATA_LENGTH) | (1 << Cobol85Parser.ATTRIBUTE) | (1 << Cobol85Parser.AUTO) | (1 << Cobol85Parser.AUTO_SKIP) | (1 << Cobol85Parser.BACKGROUND_COLOR) | (1 << Cobol85Parser.BACKGROUND_COLOUR) | (1 << Cobol85Parser.BEEP) | (1 << Cobol85Parser.BELL) | (1 << Cobol85Parser.BINARY) | (1 << Cobol85Parser.BIT) | (1 << Cobol85Parser.BLINK) | (1 << Cobol85Parser.BLOB) | (1 << Cobol85Parser.BOUNDS) | (1 << Cobol85Parser.CAPABLE) | (1 << Cobol85Parser.CCSVERSION) | (1 << Cobol85Parser.CHANGED) | (1 << Cobol85Parser.CHANNEL))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (Cobol85Parser.CLOB - 67)) | (1 << (Cobol85Parser.CLOSE_DISPOSITION - 67)) | (1 << (Cobol85Parser.COBOL - 67)) | (1 << (Cobol85Parser.COMMITMENT - 67)) | (1 << (Cobol85Parser.CONTROL_POINT - 67)) | (1 << (Cobol85Parser.CONVENTION - 67)) | (1 << (Cobol85Parser.CRUNCH - 67)) | (1 << (Cobol85Parser.CURSOR - 67)) | (1 << (Cobol85Parser.DBCLOB - 67)))) != 0) or ((((_la - 131)) & ~0x3f) == 0 and ((1 << (_la - 131)) & ((1 << (Cobol85Parser.DEFAULT - 131)) | (1 << (Cobol85Parser.DEFAULT_DISPLAY - 131)) | (1 << (Cobol85Parser.DEFINITION - 131)) | (1 << (Cobol85Parser.DFHRESP - 131)) | (1 << (Cobol85Parser.DFHVALUE - 131)) | (1 << (Cobol85Parser.DISK - 131)) | (1 << (Cobol85Parser.DONTCARE - 131)) | (1 << (Cobol85Parser.DOUBLE - 131)) | (1 << (Cobol85Parser.EBCDIC - 131)) | (1 << (Cobol85Parser.EMPTY_CHECK - 131)) | (1 << (Cobol85Parser.ENTER - 131)) | (1 << (Cobol85Parser.ENTRY_PROCEDURE - 131)) | (1 << (Cobol85Parser.ERASE - 131)) | (1 << (Cobol85Parser.EOL - 131)) | (1 << (Cobol85Parser.EOS - 131)))) != 0) or ((((_la - 195)) & ~0x3f) == 0 and ((1 << (_la - 195)) & ((1 << (Cobol85Parser.ESCAPE - 195)) | (1 << (Cobol85Parser.EVENT - 195)) | (1 << (Cobol85Parser.EXCLUSIVE - 195)) | (1 << (Cobol85Parser.EXPORT - 195)) | (1 << (Cobol85Parser.EXTENDED - 195)) | (1 << (Cobol85Parser.FOREGROUND_COLOR - 195)) | (1 << (Cobol85Parser.FOREGROUND_COLOUR - 195)) | (1 << (Cobol85Parser.FULL - 195)) | (1 << (Cobol85Parser.FUNCTIONNAME - 195)) | (1 << (Cobol85Parser.FUNCTION_POINTER - 195)) | (1 << (Cobol85Parser.GRID - 195)) | (1 << (Cobol85Parser.HIGHLIGHT - 195)) | (1 << (Cobol85Parser.IMPLICIT - 195)) | (1 << (Cobol85Parser.IMPORT - 195)) | (1 << (Cobol85Parser.INTEGER - 195)))) != 0) or ((((_la - 262)) & ~0x3f) == 0 and ((1 << (_la - 262)) & ((1 << (Cobol85Parser.KEPT - 262)) | (1 << (Cobol85Parser.KEYBOARD - 262)) | (1 << (Cobol85Parser.LANGUAGE - 262)) | (1 << (Cobol85Parser.LB - 262)) | (1 << (Cobol85Parser.LD - 262)) | (1 << (Cobol85Parser.LEFTLINE - 262)) | (1 << (Cobol85Parser.LENGTH_CHECK - 262)) | (1 << (Cobol85Parser.LIBACCESS - 262)) | (1 << (Cobol85Parser.LIBPARAMETER - 262)) | (1 << (Cobol85Parser.LIBRARY - 262)) | (1 << (Cobol85Parser.LIST - 262)) | (1 << (Cobol85Parser.LOCAL - 262)) | (1 << (Cobol85Parser.LONG_DATE - 262)) | (1 << (Cobol85Parser.LONG_TIME - 262)) | (1 << (Cobol85Parser.LOWER - 262)) | (1 << (Cobol85Parser.LOWLIGHT - 262)) | (1 << (Cobol85Parser.MMDDYYYY - 262)) | (1 << (Cobol85Parser.NAMED - 262)) | (1 << (Cobol85Parser.NATIONAL - 262)) | (1 << (Cobol85Parser.NATIONAL_EDITED - 262)) | (1 << (Cobol85Parser.NETWORK - 262)) | (1 << (Cobol85Parser.NO_ECHO - 262)) | (1 << (Cobol85Parser.NUMERIC_DATE - 262)) | (1 << (Cobol85Parser.NUMERIC_TIME - 262)))) != 0) or ((((_la - 326)) & ~0x3f) == 0 and ((1 << (_la - 326)) & ((1 << (Cobol85Parser.ODT - 326)) | (1 << (Cobol85Parser.ORDERLY - 326)) | (1 << (Cobol85Parser.OVERLINE - 326)) | (1 << (Cobol85Parser.OWN - 326)) | (1 << (Cobol85Parser.PASSWORD - 326)) | (1 << (Cobol85Parser.PORT - 326)) | (1 << (Cobol85Parser.PRINTER - 326)) | (1 << (Cobol85Parser.PRIVATE - 326)) | (1 << (Cobol85Parser.PROCESS - 326)) | (1 << (Cobol85Parser.PROGRAM - 326)) | (1 << (Cobol85Parser.PROMPT - 326)) | (1 << (Cobol85Parser.READER - 326)) | (1 << (Cobol85Parser.REMOTE - 326)) | (1 << (Cobol85Parser.REAL - 326)) | (1 << (Cobol85Parser.RECEIVED - 326)) | (1 << (Cobol85Parser.RECURSIVE - 326)) | (1 << (Cobol85Parser.REF - 326)))) != 0) or ((((_la - 395)) & ~0x3f) == 0 and ((1 << (_la - 395)) & ((1 << (Cobol85Parser.REMOVE - 395)) | (1 << (Cobol85Parser.REQUIRED - 395)) | (1 << (Cobol85Parser.REVERSE_VIDEO - 395)) | (1 << (Cobol85Parser.SAVE - 395)) | (1 << (Cobol85Parser.SECURE - 395)) | (1 << (Cobol85Parser.SHARED - 395)) | (1 << (Cobol85Parser.SHAREDBYALL - 395)) | (1 << (Cobol85Parser.SHAREDBYRUNUNIT - 395)) | (1 << (Cobol85Parser.SHARING - 395)) | (1 << (Cobol85Parser.SHORT_DATE - 395)) | (1 << (Cobol85Parser.SQL - 395)))) != 0) or ((((_la - 471)) & ~0x3f) == 0 and ((1 << (_la - 471)) & ((1 << (Cobol85Parser.SYMBOL - 471)) | (1 << (Cobol85Parser.TASK - 471)) | (1 << (Cobol85Parser.THREAD - 471)) | (1 << (Cobol85Parser.THREAD_LOCAL - 471)) | (1 << (Cobol85Parser.TIMER - 471)) | (1 << (Cobol85Parser.TODAYS_DATE - 471)) | (1 << (Cobol85Parser.TODAYS_NAME - 471)) | (1 << (Cobol85Parser.TRUNCATED - 471)) | (1 << (Cobol85Parser.TYPEDEF - 471)) | (1 << (Cobol85Parser.UNDERLINE - 471)) | (1 << (Cobol85Parser.VIRTUAL - 471)) | (1 << (Cobol85Parser.WAIT - 471)) | (1 << (Cobol85Parser.YEAR - 471)) | (1 << (Cobol85Parser.YYYYMMDD - 471)) | (1 << (Cobol85Parser.YYYYDDD - 471)) | (1 << (Cobol85Parser.ZERO_FILL - 471)))) != 0) or _la==Cobol85Parser.IDENTIFIER):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LiteralContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.LiteralContext, self).__init__(parent, invokingState)
            self.parser = parser

        def NONNUMERICLITERAL(self):
            return self.getToken(Cobol85Parser.NONNUMERICLITERAL, 0)

        def figurativeConstant(self):
            return self.getTypedRuleContext(Cobol85Parser.FigurativeConstantContext,0)


        def numericLiteral(self):
            return self.getTypedRuleContext(Cobol85Parser.NumericLiteralContext,0)


        def booleanLiteral(self):
            return self.getTypedRuleContext(Cobol85Parser.BooleanLiteralContext,0)


        def cicsDfhRespLiteral(self):
            return self.getTypedRuleContext(Cobol85Parser.CicsDfhRespLiteralContext,0)


        def cicsDfhValueLiteral(self):
            return self.getTypedRuleContext(Cobol85Parser.CicsDfhValueLiteralContext,0)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_literal

        def enterRule(self, listener):
            if hasattr(listener, "enterLiteral"):
                listener.enterLiteral(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitLiteral"):
                listener.exitLiteral(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitLiteral"):
                return visitor.visitLiteral(self)
            else:
                return visitor.visitChildren(self)




    def literal(self):

        localctx = Cobol85Parser.LiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1174, self.RULE_literal)
        try:
            self.state = 6241
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,980,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6235
                self.match(Cobol85Parser.NONNUMERICLITERAL)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6236
                self.figurativeConstant()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 6237
                self.numericLiteral()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 6238
                self.booleanLiteral()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 6239
                self.cicsDfhRespLiteral()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 6240
                self.cicsDfhValueLiteral()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BooleanLiteralContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.BooleanLiteralContext, self).__init__(parent, invokingState)
            self.parser = parser

        def TRUE(self):
            return self.getToken(Cobol85Parser.TRUE, 0)

        def FALSE(self):
            return self.getToken(Cobol85Parser.FALSE, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_booleanLiteral

        def enterRule(self, listener):
            if hasattr(listener, "enterBooleanLiteral"):
                listener.enterBooleanLiteral(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitBooleanLiteral"):
                listener.exitBooleanLiteral(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitBooleanLiteral"):
                return visitor.visitBooleanLiteral(self)
            else:
                return visitor.visitChildren(self)




    def booleanLiteral(self):

        localctx = Cobol85Parser.BooleanLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1176, self.RULE_booleanLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6243
            _la = self._input.LA(1)
            if not(_la==Cobol85Parser.FALSE or _la==Cobol85Parser.TRUE):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NumericLiteralContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.NumericLiteralContext, self).__init__(parent, invokingState)
            self.parser = parser

        def NUMERICLITERAL(self):
            return self.getToken(Cobol85Parser.NUMERICLITERAL, 0)

        def ZERO(self):
            return self.getToken(Cobol85Parser.ZERO, 0)

        def integerLiteral(self):
            return self.getTypedRuleContext(Cobol85Parser.IntegerLiteralContext,0)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_numericLiteral

        def enterRule(self, listener):
            if hasattr(listener, "enterNumericLiteral"):
                listener.enterNumericLiteral(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitNumericLiteral"):
                listener.exitNumericLiteral(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitNumericLiteral"):
                return visitor.visitNumericLiteral(self)
            else:
                return visitor.visitChildren(self)




    def numericLiteral(self):

        localctx = Cobol85Parser.NumericLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1178, self.RULE_numericLiteral)
        try:
            self.state = 6248
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Cobol85Parser.NUMERICLITERAL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 6245
                self.match(Cobol85Parser.NUMERICLITERAL)
                pass
            elif token in [Cobol85Parser.ZERO]:
                self.enterOuterAlt(localctx, 2)
                self.state = 6246
                self.match(Cobol85Parser.ZERO)
                pass
            elif token in [Cobol85Parser.LEVEL_NUMBER_66, Cobol85Parser.LEVEL_NUMBER_77, Cobol85Parser.LEVEL_NUMBER_88, Cobol85Parser.INTEGERLITERAL]:
                self.enterOuterAlt(localctx, 3)
                self.state = 6247
                self.integerLiteral()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IntegerLiteralContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.IntegerLiteralContext, self).__init__(parent, invokingState)
            self.parser = parser

        def INTEGERLITERAL(self):
            return self.getToken(Cobol85Parser.INTEGERLITERAL, 0)

        def LEVEL_NUMBER_66(self):
            return self.getToken(Cobol85Parser.LEVEL_NUMBER_66, 0)

        def LEVEL_NUMBER_77(self):
            return self.getToken(Cobol85Parser.LEVEL_NUMBER_77, 0)

        def LEVEL_NUMBER_88(self):
            return self.getToken(Cobol85Parser.LEVEL_NUMBER_88, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_integerLiteral

        def enterRule(self, listener):
            if hasattr(listener, "enterIntegerLiteral"):
                listener.enterIntegerLiteral(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitIntegerLiteral"):
                listener.exitIntegerLiteral(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitIntegerLiteral"):
                return visitor.visitIntegerLiteral(self)
            else:
                return visitor.visitChildren(self)




    def integerLiteral(self):

        localctx = Cobol85Parser.IntegerLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1180, self.RULE_integerLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6250
            _la = self._input.LA(1)
            if not(((((_la - 557)) & ~0x3f) == 0 and ((1 << (_la - 557)) & ((1 << (Cobol85Parser.LEVEL_NUMBER_66 - 557)) | (1 << (Cobol85Parser.LEVEL_NUMBER_77 - 557)) | (1 << (Cobol85Parser.LEVEL_NUMBER_88 - 557)) | (1 << (Cobol85Parser.INTEGERLITERAL - 557)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CicsDfhRespLiteralContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.CicsDfhRespLiteralContext, self).__init__(parent, invokingState)
            self.parser = parser

        def DFHRESP(self):
            return self.getToken(Cobol85Parser.DFHRESP, 0)

        def LPARENCHAR(self):
            return self.getToken(Cobol85Parser.LPARENCHAR, 0)

        def RPARENCHAR(self):
            return self.getToken(Cobol85Parser.RPARENCHAR, 0)

        def cobolWord(self):
            return self.getTypedRuleContext(Cobol85Parser.CobolWordContext,0)


        def literal(self):
            return self.getTypedRuleContext(Cobol85Parser.LiteralContext,0)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_cicsDfhRespLiteral

        def enterRule(self, listener):
            if hasattr(listener, "enterCicsDfhRespLiteral"):
                listener.enterCicsDfhRespLiteral(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitCicsDfhRespLiteral"):
                listener.exitCicsDfhRespLiteral(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitCicsDfhRespLiteral"):
                return visitor.visitCicsDfhRespLiteral(self)
            else:
                return visitor.visitChildren(self)




    def cicsDfhRespLiteral(self):

        localctx = Cobol85Parser.CicsDfhRespLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1182, self.RULE_cicsDfhRespLiteral)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6252
            self.match(Cobol85Parser.DFHRESP)
            self.state = 6253
            self.match(Cobol85Parser.LPARENCHAR)
            self.state = 6256
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,982,self._ctx)
            if la_ == 1:
                self.state = 6254
                self.cobolWord()
                pass

            elif la_ == 2:
                self.state = 6255
                self.literal()
                pass


            self.state = 6258
            self.match(Cobol85Parser.RPARENCHAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CicsDfhValueLiteralContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.CicsDfhValueLiteralContext, self).__init__(parent, invokingState)
            self.parser = parser

        def DFHVALUE(self):
            return self.getToken(Cobol85Parser.DFHVALUE, 0)

        def LPARENCHAR(self):
            return self.getToken(Cobol85Parser.LPARENCHAR, 0)

        def RPARENCHAR(self):
            return self.getToken(Cobol85Parser.RPARENCHAR, 0)

        def cobolWord(self):
            return self.getTypedRuleContext(Cobol85Parser.CobolWordContext,0)


        def literal(self):
            return self.getTypedRuleContext(Cobol85Parser.LiteralContext,0)


        def getRuleIndex(self):
            return Cobol85Parser.RULE_cicsDfhValueLiteral

        def enterRule(self, listener):
            if hasattr(listener, "enterCicsDfhValueLiteral"):
                listener.enterCicsDfhValueLiteral(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitCicsDfhValueLiteral"):
                listener.exitCicsDfhValueLiteral(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitCicsDfhValueLiteral"):
                return visitor.visitCicsDfhValueLiteral(self)
            else:
                return visitor.visitChildren(self)




    def cicsDfhValueLiteral(self):

        localctx = Cobol85Parser.CicsDfhValueLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1184, self.RULE_cicsDfhValueLiteral)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6260
            self.match(Cobol85Parser.DFHVALUE)
            self.state = 6261
            self.match(Cobol85Parser.LPARENCHAR)
            self.state = 6264
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,983,self._ctx)
            if la_ == 1:
                self.state = 6262
                self.cobolWord()
                pass

            elif la_ == 2:
                self.state = 6263
                self.literal()
                pass


            self.state = 6266
            self.match(Cobol85Parser.RPARENCHAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FigurativeConstantContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.FigurativeConstantContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ALL(self):
            return self.getToken(Cobol85Parser.ALL, 0)

        def literal(self):
            return self.getTypedRuleContext(Cobol85Parser.LiteralContext,0)


        def HIGH_VALUE(self):
            return self.getToken(Cobol85Parser.HIGH_VALUE, 0)

        def HIGH_VALUES(self):
            return self.getToken(Cobol85Parser.HIGH_VALUES, 0)

        def LOW_VALUE(self):
            return self.getToken(Cobol85Parser.LOW_VALUE, 0)

        def LOW_VALUES(self):
            return self.getToken(Cobol85Parser.LOW_VALUES, 0)

        def NULL(self):
            return self.getToken(Cobol85Parser.NULL, 0)

        def NULLS(self):
            return self.getToken(Cobol85Parser.NULLS, 0)

        def QUOTE(self):
            return self.getToken(Cobol85Parser.QUOTE, 0)

        def QUOTES(self):
            return self.getToken(Cobol85Parser.QUOTES, 0)

        def SPACE(self):
            return self.getToken(Cobol85Parser.SPACE, 0)

        def SPACES(self):
            return self.getToken(Cobol85Parser.SPACES, 0)

        def ZERO(self):
            return self.getToken(Cobol85Parser.ZERO, 0)

        def ZEROS(self):
            return self.getToken(Cobol85Parser.ZEROS, 0)

        def ZEROES(self):
            return self.getToken(Cobol85Parser.ZEROES, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_figurativeConstant

        def enterRule(self, listener):
            if hasattr(listener, "enterFigurativeConstant"):
                listener.enterFigurativeConstant(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitFigurativeConstant"):
                listener.exitFigurativeConstant(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitFigurativeConstant"):
                return visitor.visitFigurativeConstant(self)
            else:
                return visitor.visitChildren(self)




    def figurativeConstant(self):

        localctx = Cobol85Parser.FigurativeConstantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1186, self.RULE_figurativeConstant)
        try:
            self.state = 6283
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Cobol85Parser.ALL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 6268
                self.match(Cobol85Parser.ALL)
                self.state = 6269
                self.literal()
                pass
            elif token in [Cobol85Parser.HIGH_VALUE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 6270
                self.match(Cobol85Parser.HIGH_VALUE)
                pass
            elif token in [Cobol85Parser.HIGH_VALUES]:
                self.enterOuterAlt(localctx, 3)
                self.state = 6271
                self.match(Cobol85Parser.HIGH_VALUES)
                pass
            elif token in [Cobol85Parser.LOW_VALUE]:
                self.enterOuterAlt(localctx, 4)
                self.state = 6272
                self.match(Cobol85Parser.LOW_VALUE)
                pass
            elif token in [Cobol85Parser.LOW_VALUES]:
                self.enterOuterAlt(localctx, 5)
                self.state = 6273
                self.match(Cobol85Parser.LOW_VALUES)
                pass
            elif token in [Cobol85Parser.NULL]:
                self.enterOuterAlt(localctx, 6)
                self.state = 6274
                self.match(Cobol85Parser.NULL)
                pass
            elif token in [Cobol85Parser.NULLS]:
                self.enterOuterAlt(localctx, 7)
                self.state = 6275
                self.match(Cobol85Parser.NULLS)
                pass
            elif token in [Cobol85Parser.QUOTE]:
                self.enterOuterAlt(localctx, 8)
                self.state = 6276
                self.match(Cobol85Parser.QUOTE)
                pass
            elif token in [Cobol85Parser.QUOTES]:
                self.enterOuterAlt(localctx, 9)
                self.state = 6277
                self.match(Cobol85Parser.QUOTES)
                pass
            elif token in [Cobol85Parser.SPACE]:
                self.enterOuterAlt(localctx, 10)
                self.state = 6278
                self.match(Cobol85Parser.SPACE)
                pass
            elif token in [Cobol85Parser.SPACES]:
                self.enterOuterAlt(localctx, 11)
                self.state = 6279
                self.match(Cobol85Parser.SPACES)
                pass
            elif token in [Cobol85Parser.ZERO]:
                self.enterOuterAlt(localctx, 12)
                self.state = 6280
                self.match(Cobol85Parser.ZERO)
                pass
            elif token in [Cobol85Parser.ZEROS]:
                self.enterOuterAlt(localctx, 13)
                self.state = 6281
                self.match(Cobol85Parser.ZEROS)
                pass
            elif token in [Cobol85Parser.ZEROES]:
                self.enterOuterAlt(localctx, 14)
                self.state = 6282
                self.match(Cobol85Parser.ZEROES)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SpecialRegisterContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.SpecialRegisterContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ADDRESS(self):
            return self.getToken(Cobol85Parser.ADDRESS, 0)

        def OF(self):
            return self.getToken(Cobol85Parser.OF, 0)

        def identifier(self):
            return self.getTypedRuleContext(Cobol85Parser.IdentifierContext,0)


        def DATE(self):
            return self.getToken(Cobol85Parser.DATE, 0)

        def DAY(self):
            return self.getToken(Cobol85Parser.DAY, 0)

        def DAY_OF_WEEK(self):
            return self.getToken(Cobol85Parser.DAY_OF_WEEK, 0)

        def DEBUG_CONTENTS(self):
            return self.getToken(Cobol85Parser.DEBUG_CONTENTS, 0)

        def DEBUG_ITEM(self):
            return self.getToken(Cobol85Parser.DEBUG_ITEM, 0)

        def DEBUG_LINE(self):
            return self.getToken(Cobol85Parser.DEBUG_LINE, 0)

        def DEBUG_NAME(self):
            return self.getToken(Cobol85Parser.DEBUG_NAME, 0)

        def DEBUG_SUB_1(self):
            return self.getToken(Cobol85Parser.DEBUG_SUB_1, 0)

        def DEBUG_SUB_2(self):
            return self.getToken(Cobol85Parser.DEBUG_SUB_2, 0)

        def DEBUG_SUB_3(self):
            return self.getToken(Cobol85Parser.DEBUG_SUB_3, 0)

        def LENGTH(self):
            return self.getToken(Cobol85Parser.LENGTH, 0)

        def LINAGE_COUNTER(self):
            return self.getToken(Cobol85Parser.LINAGE_COUNTER, 0)

        def LINE_COUNTER(self):
            return self.getToken(Cobol85Parser.LINE_COUNTER, 0)

        def PAGE_COUNTER(self):
            return self.getToken(Cobol85Parser.PAGE_COUNTER, 0)

        def RETURN_CODE(self):
            return self.getToken(Cobol85Parser.RETURN_CODE, 0)

        def SHIFT_IN(self):
            return self.getToken(Cobol85Parser.SHIFT_IN, 0)

        def SHIFT_OUT(self):
            return self.getToken(Cobol85Parser.SHIFT_OUT, 0)

        def SORT_CONTROL(self):
            return self.getToken(Cobol85Parser.SORT_CONTROL, 0)

        def SORT_CORE_SIZE(self):
            return self.getToken(Cobol85Parser.SORT_CORE_SIZE, 0)

        def SORT_FILE_SIZE(self):
            return self.getToken(Cobol85Parser.SORT_FILE_SIZE, 0)

        def SORT_MESSAGE(self):
            return self.getToken(Cobol85Parser.SORT_MESSAGE, 0)

        def SORT_MODE_SIZE(self):
            return self.getToken(Cobol85Parser.SORT_MODE_SIZE, 0)

        def SORT_RETURN(self):
            return self.getToken(Cobol85Parser.SORT_RETURN, 0)

        def TALLY(self):
            return self.getToken(Cobol85Parser.TALLY, 0)

        def TIME(self):
            return self.getToken(Cobol85Parser.TIME, 0)

        def WHEN_COMPILED(self):
            return self.getToken(Cobol85Parser.WHEN_COMPILED, 0)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_specialRegister

        def enterRule(self, listener):
            if hasattr(listener, "enterSpecialRegister"):
                listener.enterSpecialRegister(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSpecialRegister"):
                listener.exitSpecialRegister(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitSpecialRegister"):
                return visitor.visitSpecialRegister(self)
            else:
                return visitor.visitChildren(self)




    def specialRegister(self):

        localctx = Cobol85Parser.SpecialRegisterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1188, self.RULE_specialRegister)
        self._la = 0 # Token type
        try:
            self.state = 6318
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [Cobol85Parser.ADDRESS]:
                self.enterOuterAlt(localctx, 1)
                self.state = 6285
                self.match(Cobol85Parser.ADDRESS)
                self.state = 6286
                self.match(Cobol85Parser.OF)
                self.state = 6287
                self.identifier()
                pass
            elif token in [Cobol85Parser.DATE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 6288
                self.match(Cobol85Parser.DATE)
                pass
            elif token in [Cobol85Parser.DAY]:
                self.enterOuterAlt(localctx, 3)
                self.state = 6289
                self.match(Cobol85Parser.DAY)
                pass
            elif token in [Cobol85Parser.DAY_OF_WEEK]:
                self.enterOuterAlt(localctx, 4)
                self.state = 6290
                self.match(Cobol85Parser.DAY_OF_WEEK)
                pass
            elif token in [Cobol85Parser.DEBUG_CONTENTS]:
                self.enterOuterAlt(localctx, 5)
                self.state = 6291
                self.match(Cobol85Parser.DEBUG_CONTENTS)
                pass
            elif token in [Cobol85Parser.DEBUG_ITEM]:
                self.enterOuterAlt(localctx, 6)
                self.state = 6292
                self.match(Cobol85Parser.DEBUG_ITEM)
                pass
            elif token in [Cobol85Parser.DEBUG_LINE]:
                self.enterOuterAlt(localctx, 7)
                self.state = 6293
                self.match(Cobol85Parser.DEBUG_LINE)
                pass
            elif token in [Cobol85Parser.DEBUG_NAME]:
                self.enterOuterAlt(localctx, 8)
                self.state = 6294
                self.match(Cobol85Parser.DEBUG_NAME)
                pass
            elif token in [Cobol85Parser.DEBUG_SUB_1]:
                self.enterOuterAlt(localctx, 9)
                self.state = 6295
                self.match(Cobol85Parser.DEBUG_SUB_1)
                pass
            elif token in [Cobol85Parser.DEBUG_SUB_2]:
                self.enterOuterAlt(localctx, 10)
                self.state = 6296
                self.match(Cobol85Parser.DEBUG_SUB_2)
                pass
            elif token in [Cobol85Parser.DEBUG_SUB_3]:
                self.enterOuterAlt(localctx, 11)
                self.state = 6297
                self.match(Cobol85Parser.DEBUG_SUB_3)
                pass
            elif token in [Cobol85Parser.LENGTH]:
                self.enterOuterAlt(localctx, 12)
                self.state = 6298
                self.match(Cobol85Parser.LENGTH)
                self.state = 6300
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==Cobol85Parser.OF:
                    self.state = 6299
                    self.match(Cobol85Parser.OF)


                self.state = 6302
                self.identifier()
                pass
            elif token in [Cobol85Parser.LINAGE_COUNTER]:
                self.enterOuterAlt(localctx, 13)
                self.state = 6303
                self.match(Cobol85Parser.LINAGE_COUNTER)
                pass
            elif token in [Cobol85Parser.LINE_COUNTER]:
                self.enterOuterAlt(localctx, 14)
                self.state = 6304
                self.match(Cobol85Parser.LINE_COUNTER)
                pass
            elif token in [Cobol85Parser.PAGE_COUNTER]:
                self.enterOuterAlt(localctx, 15)
                self.state = 6305
                self.match(Cobol85Parser.PAGE_COUNTER)
                pass
            elif token in [Cobol85Parser.RETURN_CODE]:
                self.enterOuterAlt(localctx, 16)
                self.state = 6306
                self.match(Cobol85Parser.RETURN_CODE)
                pass
            elif token in [Cobol85Parser.SHIFT_IN]:
                self.enterOuterAlt(localctx, 17)
                self.state = 6307
                self.match(Cobol85Parser.SHIFT_IN)
                pass
            elif token in [Cobol85Parser.SHIFT_OUT]:
                self.enterOuterAlt(localctx, 18)
                self.state = 6308
                self.match(Cobol85Parser.SHIFT_OUT)
                pass
            elif token in [Cobol85Parser.SORT_CONTROL]:
                self.enterOuterAlt(localctx, 19)
                self.state = 6309
                self.match(Cobol85Parser.SORT_CONTROL)
                pass
            elif token in [Cobol85Parser.SORT_CORE_SIZE]:
                self.enterOuterAlt(localctx, 20)
                self.state = 6310
                self.match(Cobol85Parser.SORT_CORE_SIZE)
                pass
            elif token in [Cobol85Parser.SORT_FILE_SIZE]:
                self.enterOuterAlt(localctx, 21)
                self.state = 6311
                self.match(Cobol85Parser.SORT_FILE_SIZE)
                pass
            elif token in [Cobol85Parser.SORT_MESSAGE]:
                self.enterOuterAlt(localctx, 22)
                self.state = 6312
                self.match(Cobol85Parser.SORT_MESSAGE)
                pass
            elif token in [Cobol85Parser.SORT_MODE_SIZE]:
                self.enterOuterAlt(localctx, 23)
                self.state = 6313
                self.match(Cobol85Parser.SORT_MODE_SIZE)
                pass
            elif token in [Cobol85Parser.SORT_RETURN]:
                self.enterOuterAlt(localctx, 24)
                self.state = 6314
                self.match(Cobol85Parser.SORT_RETURN)
                pass
            elif token in [Cobol85Parser.TALLY]:
                self.enterOuterAlt(localctx, 25)
                self.state = 6315
                self.match(Cobol85Parser.TALLY)
                pass
            elif token in [Cobol85Parser.TIME]:
                self.enterOuterAlt(localctx, 26)
                self.state = 6316
                self.match(Cobol85Parser.TIME)
                pass
            elif token in [Cobol85Parser.WHEN_COMPILED]:
                self.enterOuterAlt(localctx, 27)
                self.state = 6317
                self.match(Cobol85Parser.WHEN_COMPILED)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CommentEntryContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(Cobol85Parser.CommentEntryContext, self).__init__(parent, invokingState)
            self.parser = parser

        def COMMENTENTRYLINE(self, i=None):
            if i is None:
                return self.getTokens(Cobol85Parser.COMMENTENTRYLINE)
            else:
                return self.getToken(Cobol85Parser.COMMENTENTRYLINE, i)

        def getRuleIndex(self):
            return Cobol85Parser.RULE_commentEntry

        def enterRule(self, listener):
            if hasattr(listener, "enterCommentEntry"):
                listener.enterCommentEntry(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitCommentEntry"):
                listener.exitCommentEntry(self)

        def accept(self, visitor):
            if hasattr(visitor, "visitCommentEntry"):
                return visitor.visitCommentEntry(self)
            else:
                return visitor.visitChildren(self)




    def commentEntry(self):

        localctx = Cobol85Parser.CommentEntryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 1190, self.RULE_commentEntry)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6321 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 6320
                self.match(Cobol85Parser.COMMENTENTRYLINE)
                self.state = 6323 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==Cobol85Parser.COMMENTENTRYLINE):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx





